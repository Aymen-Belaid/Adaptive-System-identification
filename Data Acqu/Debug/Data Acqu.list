
Data Acqu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ba8  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000318  08009e78  08009e78  00019e78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a190  0800a190  0001a190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a198  0800a198  0001a198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a19c  0800a19c  0001a19c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000084  24000000  0800a1a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000003c4  24000088  0800a224  00020088  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  2400044c  0800a224  0002044c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001615e  00000000  00000000  000200b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000023e9  00000000  00000000  00036210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001050  00000000  00000000  00038600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000f88  00000000  00000000  00039650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00032fc7  00000000  00000000  0003a5d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000142d0  00000000  00000000  0006d59f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014d1dc  00000000  00000000  0008186f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001cea4b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005488  00000000  00000000  001cea9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000088 	.word	0x24000088
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08009e60 	.word	0x08009e60

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400008c 	.word	0x2400008c
 800030c:	08009e60 	.word	0x08009e60

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b974 	b.w	80006c0 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	4604      	mov	r4, r0
 80003f8:	468e      	mov	lr, r1
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d14d      	bne.n	800049a <__udivmoddi4+0xaa>
 80003fe:	428a      	cmp	r2, r1
 8000400:	4694      	mov	ip, r2
 8000402:	d969      	bls.n	80004d8 <__udivmoddi4+0xe8>
 8000404:	fab2 f282 	clz	r2, r2
 8000408:	b152      	cbz	r2, 8000420 <__udivmoddi4+0x30>
 800040a:	fa01 f302 	lsl.w	r3, r1, r2
 800040e:	f1c2 0120 	rsb	r1, r2, #32
 8000412:	fa20 f101 	lsr.w	r1, r0, r1
 8000416:	fa0c fc02 	lsl.w	ip, ip, r2
 800041a:	ea41 0e03 	orr.w	lr, r1, r3
 800041e:	4094      	lsls	r4, r2
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	0c21      	lsrs	r1, r4, #16
 8000426:	fbbe f6f8 	udiv	r6, lr, r8
 800042a:	fa1f f78c 	uxth.w	r7, ip
 800042e:	fb08 e316 	mls	r3, r8, r6, lr
 8000432:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000436:	fb06 f107 	mul.w	r1, r6, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x64>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f106 30ff 	add.w	r0, r6, #4294967295
 8000446:	f080 811f 	bcs.w	8000688 <__udivmoddi4+0x298>
 800044a:	4299      	cmp	r1, r3
 800044c:	f240 811c 	bls.w	8000688 <__udivmoddi4+0x298>
 8000450:	3e02      	subs	r6, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3310 	mls	r3, r8, r0, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb00 f707 	mul.w	r7, r0, r7
 8000468:	42a7      	cmp	r7, r4
 800046a:	d90a      	bls.n	8000482 <__udivmoddi4+0x92>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f100 33ff 	add.w	r3, r0, #4294967295
 8000474:	f080 810a 	bcs.w	800068c <__udivmoddi4+0x29c>
 8000478:	42a7      	cmp	r7, r4
 800047a:	f240 8107 	bls.w	800068c <__udivmoddi4+0x29c>
 800047e:	4464      	add	r4, ip
 8000480:	3802      	subs	r0, #2
 8000482:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000486:	1be4      	subs	r4, r4, r7
 8000488:	2600      	movs	r6, #0
 800048a:	b11d      	cbz	r5, 8000494 <__udivmoddi4+0xa4>
 800048c:	40d4      	lsrs	r4, r2
 800048e:	2300      	movs	r3, #0
 8000490:	e9c5 4300 	strd	r4, r3, [r5]
 8000494:	4631      	mov	r1, r6
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	428b      	cmp	r3, r1
 800049c:	d909      	bls.n	80004b2 <__udivmoddi4+0xc2>
 800049e:	2d00      	cmp	r5, #0
 80004a0:	f000 80ef 	beq.w	8000682 <__udivmoddi4+0x292>
 80004a4:	2600      	movs	r6, #0
 80004a6:	e9c5 0100 	strd	r0, r1, [r5]
 80004aa:	4630      	mov	r0, r6
 80004ac:	4631      	mov	r1, r6
 80004ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b2:	fab3 f683 	clz	r6, r3
 80004b6:	2e00      	cmp	r6, #0
 80004b8:	d14a      	bne.n	8000550 <__udivmoddi4+0x160>
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d302      	bcc.n	80004c4 <__udivmoddi4+0xd4>
 80004be:	4282      	cmp	r2, r0
 80004c0:	f200 80f9 	bhi.w	80006b6 <__udivmoddi4+0x2c6>
 80004c4:	1a84      	subs	r4, r0, r2
 80004c6:	eb61 0303 	sbc.w	r3, r1, r3
 80004ca:	2001      	movs	r0, #1
 80004cc:	469e      	mov	lr, r3
 80004ce:	2d00      	cmp	r5, #0
 80004d0:	d0e0      	beq.n	8000494 <__udivmoddi4+0xa4>
 80004d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004d6:	e7dd      	b.n	8000494 <__udivmoddi4+0xa4>
 80004d8:	b902      	cbnz	r2, 80004dc <__udivmoddi4+0xec>
 80004da:	deff      	udf	#255	; 0xff
 80004dc:	fab2 f282 	clz	r2, r2
 80004e0:	2a00      	cmp	r2, #0
 80004e2:	f040 8092 	bne.w	800060a <__udivmoddi4+0x21a>
 80004e6:	eba1 010c 	sub.w	r1, r1, ip
 80004ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ee:	fa1f fe8c 	uxth.w	lr, ip
 80004f2:	2601      	movs	r6, #1
 80004f4:	0c20      	lsrs	r0, r4, #16
 80004f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004fa:	fb07 1113 	mls	r1, r7, r3, r1
 80004fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000502:	fb0e f003 	mul.w	r0, lr, r3
 8000506:	4288      	cmp	r0, r1
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x12c>
 800050a:	eb1c 0101 	adds.w	r1, ip, r1
 800050e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000512:	d202      	bcs.n	800051a <__udivmoddi4+0x12a>
 8000514:	4288      	cmp	r0, r1
 8000516:	f200 80cb 	bhi.w	80006b0 <__udivmoddi4+0x2c0>
 800051a:	4643      	mov	r3, r8
 800051c:	1a09      	subs	r1, r1, r0
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb1 f0f7 	udiv	r0, r1, r7
 8000524:	fb07 1110 	mls	r1, r7, r0, r1
 8000528:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800052c:	fb0e fe00 	mul.w	lr, lr, r0
 8000530:	45a6      	cmp	lr, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x156>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f100 31ff 	add.w	r1, r0, #4294967295
 800053c:	d202      	bcs.n	8000544 <__udivmoddi4+0x154>
 800053e:	45a6      	cmp	lr, r4
 8000540:	f200 80bb 	bhi.w	80006ba <__udivmoddi4+0x2ca>
 8000544:	4608      	mov	r0, r1
 8000546:	eba4 040e 	sub.w	r4, r4, lr
 800054a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800054e:	e79c      	b.n	800048a <__udivmoddi4+0x9a>
 8000550:	f1c6 0720 	rsb	r7, r6, #32
 8000554:	40b3      	lsls	r3, r6
 8000556:	fa22 fc07 	lsr.w	ip, r2, r7
 800055a:	ea4c 0c03 	orr.w	ip, ip, r3
 800055e:	fa20 f407 	lsr.w	r4, r0, r7
 8000562:	fa01 f306 	lsl.w	r3, r1, r6
 8000566:	431c      	orrs	r4, r3
 8000568:	40f9      	lsrs	r1, r7
 800056a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800056e:	fa00 f306 	lsl.w	r3, r0, r6
 8000572:	fbb1 f8f9 	udiv	r8, r1, r9
 8000576:	0c20      	lsrs	r0, r4, #16
 8000578:	fa1f fe8c 	uxth.w	lr, ip
 800057c:	fb09 1118 	mls	r1, r9, r8, r1
 8000580:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000584:	fb08 f00e 	mul.w	r0, r8, lr
 8000588:	4288      	cmp	r0, r1
 800058a:	fa02 f206 	lsl.w	r2, r2, r6
 800058e:	d90b      	bls.n	80005a8 <__udivmoddi4+0x1b8>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f108 3aff 	add.w	sl, r8, #4294967295
 8000598:	f080 8088 	bcs.w	80006ac <__udivmoddi4+0x2bc>
 800059c:	4288      	cmp	r0, r1
 800059e:	f240 8085 	bls.w	80006ac <__udivmoddi4+0x2bc>
 80005a2:	f1a8 0802 	sub.w	r8, r8, #2
 80005a6:	4461      	add	r1, ip
 80005a8:	1a09      	subs	r1, r1, r0
 80005aa:	b2a4      	uxth	r4, r4
 80005ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80005b0:	fb09 1110 	mls	r1, r9, r0, r1
 80005b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80005b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80005bc:	458e      	cmp	lr, r1
 80005be:	d908      	bls.n	80005d2 <__udivmoddi4+0x1e2>
 80005c0:	eb1c 0101 	adds.w	r1, ip, r1
 80005c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80005c8:	d26c      	bcs.n	80006a4 <__udivmoddi4+0x2b4>
 80005ca:	458e      	cmp	lr, r1
 80005cc:	d96a      	bls.n	80006a4 <__udivmoddi4+0x2b4>
 80005ce:	3802      	subs	r0, #2
 80005d0:	4461      	add	r1, ip
 80005d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005d6:	fba0 9402 	umull	r9, r4, r0, r2
 80005da:	eba1 010e 	sub.w	r1, r1, lr
 80005de:	42a1      	cmp	r1, r4
 80005e0:	46c8      	mov	r8, r9
 80005e2:	46a6      	mov	lr, r4
 80005e4:	d356      	bcc.n	8000694 <__udivmoddi4+0x2a4>
 80005e6:	d053      	beq.n	8000690 <__udivmoddi4+0x2a0>
 80005e8:	b15d      	cbz	r5, 8000602 <__udivmoddi4+0x212>
 80005ea:	ebb3 0208 	subs.w	r2, r3, r8
 80005ee:	eb61 010e 	sbc.w	r1, r1, lr
 80005f2:	fa01 f707 	lsl.w	r7, r1, r7
 80005f6:	fa22 f306 	lsr.w	r3, r2, r6
 80005fa:	40f1      	lsrs	r1, r6
 80005fc:	431f      	orrs	r7, r3
 80005fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000602:	2600      	movs	r6, #0
 8000604:	4631      	mov	r1, r6
 8000606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	40d8      	lsrs	r0, r3
 8000610:	fa0c fc02 	lsl.w	ip, ip, r2
 8000614:	fa21 f303 	lsr.w	r3, r1, r3
 8000618:	4091      	lsls	r1, r2
 800061a:	4301      	orrs	r1, r0
 800061c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000620:	fa1f fe8c 	uxth.w	lr, ip
 8000624:	fbb3 f0f7 	udiv	r0, r3, r7
 8000628:	fb07 3610 	mls	r6, r7, r0, r3
 800062c:	0c0b      	lsrs	r3, r1, #16
 800062e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000632:	fb00 f60e 	mul.w	r6, r0, lr
 8000636:	429e      	cmp	r6, r3
 8000638:	fa04 f402 	lsl.w	r4, r4, r2
 800063c:	d908      	bls.n	8000650 <__udivmoddi4+0x260>
 800063e:	eb1c 0303 	adds.w	r3, ip, r3
 8000642:	f100 38ff 	add.w	r8, r0, #4294967295
 8000646:	d22f      	bcs.n	80006a8 <__udivmoddi4+0x2b8>
 8000648:	429e      	cmp	r6, r3
 800064a:	d92d      	bls.n	80006a8 <__udivmoddi4+0x2b8>
 800064c:	3802      	subs	r0, #2
 800064e:	4463      	add	r3, ip
 8000650:	1b9b      	subs	r3, r3, r6
 8000652:	b289      	uxth	r1, r1
 8000654:	fbb3 f6f7 	udiv	r6, r3, r7
 8000658:	fb07 3316 	mls	r3, r7, r6, r3
 800065c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000660:	fb06 f30e 	mul.w	r3, r6, lr
 8000664:	428b      	cmp	r3, r1
 8000666:	d908      	bls.n	800067a <__udivmoddi4+0x28a>
 8000668:	eb1c 0101 	adds.w	r1, ip, r1
 800066c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000670:	d216      	bcs.n	80006a0 <__udivmoddi4+0x2b0>
 8000672:	428b      	cmp	r3, r1
 8000674:	d914      	bls.n	80006a0 <__udivmoddi4+0x2b0>
 8000676:	3e02      	subs	r6, #2
 8000678:	4461      	add	r1, ip
 800067a:	1ac9      	subs	r1, r1, r3
 800067c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000680:	e738      	b.n	80004f4 <__udivmoddi4+0x104>
 8000682:	462e      	mov	r6, r5
 8000684:	4628      	mov	r0, r5
 8000686:	e705      	b.n	8000494 <__udivmoddi4+0xa4>
 8000688:	4606      	mov	r6, r0
 800068a:	e6e3      	b.n	8000454 <__udivmoddi4+0x64>
 800068c:	4618      	mov	r0, r3
 800068e:	e6f8      	b.n	8000482 <__udivmoddi4+0x92>
 8000690:	454b      	cmp	r3, r9
 8000692:	d2a9      	bcs.n	80005e8 <__udivmoddi4+0x1f8>
 8000694:	ebb9 0802 	subs.w	r8, r9, r2
 8000698:	eb64 0e0c 	sbc.w	lr, r4, ip
 800069c:	3801      	subs	r0, #1
 800069e:	e7a3      	b.n	80005e8 <__udivmoddi4+0x1f8>
 80006a0:	4646      	mov	r6, r8
 80006a2:	e7ea      	b.n	800067a <__udivmoddi4+0x28a>
 80006a4:	4620      	mov	r0, r4
 80006a6:	e794      	b.n	80005d2 <__udivmoddi4+0x1e2>
 80006a8:	4640      	mov	r0, r8
 80006aa:	e7d1      	b.n	8000650 <__udivmoddi4+0x260>
 80006ac:	46d0      	mov	r8, sl
 80006ae:	e77b      	b.n	80005a8 <__udivmoddi4+0x1b8>
 80006b0:	3b02      	subs	r3, #2
 80006b2:	4461      	add	r1, ip
 80006b4:	e732      	b.n	800051c <__udivmoddi4+0x12c>
 80006b6:	4630      	mov	r0, r6
 80006b8:	e709      	b.n	80004ce <__udivmoddi4+0xde>
 80006ba:	4464      	add	r4, ip
 80006bc:	3802      	subs	r0, #2
 80006be:	e742      	b.n	8000546 <__udivmoddi4+0x156>

080006c0 <__aeabi_idiv0>:
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop

080006c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	initialise_monitor_handles();
 80006c8:	f007 faf4 	bl	8007cb4 <initialise_monitor_handles>


		out_speed = (float*) malloc (1000*sizeof(float));
 80006cc:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80006d0:	f007 ffc0 	bl	8008654 <malloc>
 80006d4:	4603      	mov	r3, r0
 80006d6:	461a      	mov	r2, r3
 80006d8:	4b23      	ldr	r3, [pc, #140]	; (8000768 <main+0xa4>)
 80006da:	601a      	str	r2, [r3, #0]
		Input = (float*) malloc (1000*sizeof(float));
 80006dc:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80006e0:	f007 ffb8 	bl	8008654 <malloc>
 80006e4:	4603      	mov	r3, r0
 80006e6:	461a      	mov	r2, r3
 80006e8:	4b20      	ldr	r3, [pc, #128]	; (800076c <main+0xa8>)
 80006ea:	601a      	str	r2, [r3, #0]


		__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4, ccr_reg);
 80006ec:	4b20      	ldr	r3, [pc, #128]	; (8000770 <main+0xac>)
 80006ee:	681a      	ldr	r2, [r3, #0]
 80006f0:	4b20      	ldr	r3, [pc, #128]	; (8000774 <main+0xb0>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	641a      	str	r2, [r3, #64]	; 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f6:	f001 f9fd 	bl	8001af4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006fa:	f000 f847 	bl	800078c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006fe:	f000 fb8b 	bl	8000e18 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000702:	f000 fb35 	bl	8000d70 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000706:	f000 fb7f 	bl	8000e08 <MX_USB_OTG_HS_USB_Init>
  MX_TIM4_Init();
 800070a:	f000 f953 	bl	80009b4 <MX_TIM4_Init>
  MX_TIM3_Init();
 800070e:	f000 f8fb 	bl	8000908 <MX_TIM3_Init>
  MX_TIM8_Init();
 8000712:	f000 fa17 	bl	8000b44 <MX_TIM8_Init>
  MX_TIM2_Init();
 8000716:	f000 f8a9 	bl	800086c <MX_TIM2_Init>
  MX_TIM5_Init();
 800071a:	f000 f9c3 	bl	8000aa4 <MX_TIM5_Init>
  MX_TIM23_Init();
 800071e:	f000 fa89 	bl	8000c34 <MX_TIM23_Init>
  MX_TIM24_Init();
 8000722:	f000 fad7 	bl	8000cd4 <MX_TIM24_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_RESET);
 8000726:	2200      	movs	r2, #0
 8000728:	2101      	movs	r1, #1
 800072a:	4813      	ldr	r0, [pc, #76]	; (8000778 <main+0xb4>)
 800072c:	f001 fd2c 	bl	8002188 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_2,GPIO_PIN_SET);
 8000730:	2201      	movs	r2, #1
 8000732:	2104      	movs	r1, #4
 8000734:	4810      	ldr	r0, [pc, #64]	; (8000778 <main+0xb4>)
 8000736:	f001 fd27 	bl	8002188 <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_4);
 800073a:	210c      	movs	r1, #12
 800073c:	480d      	ldr	r0, [pc, #52]	; (8000774 <main+0xb0>)
 800073e:	f004 f931 	bl	80049a4 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 8000742:	213c      	movs	r1, #60	; 0x3c
 8000744:	480d      	ldr	r0, [pc, #52]	; (800077c <main+0xb8>)
 8000746:	f004 fc63 	bl	8005010 <HAL_TIM_Encoder_Start>
  HAL_TIM_IC_Start (&htim8,TIM_CHANNEL_3);
 800074a:	2108      	movs	r1, #8
 800074c:	480c      	ldr	r0, [pc, #48]	; (8000780 <main+0xbc>)
 800074e:	f004 faa7 	bl	8004ca0 <HAL_TIM_IC_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8000752:	480c      	ldr	r0, [pc, #48]	; (8000784 <main+0xc0>)
 8000754:	f004 f83e 	bl	80047d4 <HAL_TIM_Base_Start_IT>


  while (1)
  {

	 speed = speed_aq ();
 8000758:	f000 fd0a 	bl	8001170 <speed_aq>
 800075c:	eef0 7a40 	vmov.f32	s15, s0
 8000760:	4b09      	ldr	r3, [pc, #36]	; (8000788 <main+0xc4>)
 8000762:	edc3 7a00 	vstr	s15, [r3]
 8000766:	e7f7      	b.n	8000758 <main+0x94>
 8000768:	24000358 	.word	0x24000358
 800076c:	2400035c 	.word	0x2400035c
 8000770:	24000368 	.word	0x24000368
 8000774:	2400013c 	.word	0x2400013c
 8000778:	58020800 	.word	0x58020800
 800077c:	240000f0 	.word	0x240000f0
 8000780:	240001d4 	.word	0x240001d4
 8000784:	240000a4 	.word	0x240000a4
 8000788:	2400034c 	.word	0x2400034c

0800078c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b09c      	sub	sp, #112	; 0x70
 8000790:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000792:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000796:	224c      	movs	r2, #76	; 0x4c
 8000798:	2100      	movs	r1, #0
 800079a:	4618      	mov	r0, r3
 800079c:	f007 ff62 	bl	8008664 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a0:	1d3b      	adds	r3, r7, #4
 80007a2:	2220      	movs	r2, #32
 80007a4:	2100      	movs	r1, #0
 80007a6:	4618      	mov	r0, r3
 80007a8:	f007 ff5c 	bl	8008664 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80007ac:	2002      	movs	r0, #2
 80007ae:	f001 fd29 	bl	8002204 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80007b2:	2300      	movs	r3, #0
 80007b4:	603b      	str	r3, [r7, #0]
 80007b6:	4b2c      	ldr	r3, [pc, #176]	; (8000868 <SystemClock_Config+0xdc>)
 80007b8:	699b      	ldr	r3, [r3, #24]
 80007ba:	4a2b      	ldr	r2, [pc, #172]	; (8000868 <SystemClock_Config+0xdc>)
 80007bc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007c0:	6193      	str	r3, [r2, #24]
 80007c2:	4b29      	ldr	r3, [pc, #164]	; (8000868 <SystemClock_Config+0xdc>)
 80007c4:	699b      	ldr	r3, [r3, #24]
 80007c6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007ca:	603b      	str	r3, [r7, #0]
 80007cc:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007ce:	bf00      	nop
 80007d0:	4b25      	ldr	r3, [pc, #148]	; (8000868 <SystemClock_Config+0xdc>)
 80007d2:	699b      	ldr	r3, [r3, #24]
 80007d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007dc:	d1f8      	bne.n	80007d0 <SystemClock_Config+0x44>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80007de:	2321      	movs	r3, #33	; 0x21
 80007e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007e2:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80007e6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80007e8:	2301      	movs	r3, #1
 80007ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ec:	2302      	movs	r3, #2
 80007ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007f0:	2302      	movs	r3, #2
 80007f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007f4:	2304      	movs	r3, #4
 80007f6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 80007f8:	f240 1313 	movw	r3, #275	; 0x113
 80007fc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80007fe:	2301      	movs	r3, #1
 8000800:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000802:	2304      	movs	r3, #4
 8000804:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000806:	2302      	movs	r3, #2
 8000808:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 800080a:	2304      	movs	r3, #4
 800080c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800080e:	2300      	movs	r3, #0
 8000810:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000812:	2300      	movs	r3, #0
 8000814:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000816:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800081a:	4618      	mov	r0, r3
 800081c:	f001 fd2c 	bl	8002278 <HAL_RCC_OscConfig>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000826:	f000 fe5d 	bl	80014e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800082a:	233f      	movs	r3, #63	; 0x3f
 800082c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800082e:	2303      	movs	r3, #3
 8000830:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000832:	2300      	movs	r3, #0
 8000834:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000836:	2308      	movs	r3, #8
 8000838:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800083a:	2340      	movs	r3, #64	; 0x40
 800083c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800083e:	2340      	movs	r3, #64	; 0x40
 8000840:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000842:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000846:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000848:	2340      	movs	r3, #64	; 0x40
 800084a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800084c:	1d3b      	adds	r3, r7, #4
 800084e:	2103      	movs	r1, #3
 8000850:	4618      	mov	r0, r3
 8000852:	f002 f8bf 	bl	80029d4 <HAL_RCC_ClockConfig>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800085c:	f000 fe42 	bl	80014e4 <Error_Handler>
  }
}
 8000860:	bf00      	nop
 8000862:	3770      	adds	r7, #112	; 0x70
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	58024800 	.word	0x58024800

0800086c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b088      	sub	sp, #32
 8000870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000872:	f107 0310 	add.w	r3, r7, #16
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	605a      	str	r2, [r3, #4]
 800087c:	609a      	str	r2, [r3, #8]
 800087e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000880:	1d3b      	adds	r3, r7, #4
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	605a      	str	r2, [r3, #4]
 8000888:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800088a:	4b1e      	ldr	r3, [pc, #120]	; (8000904 <MX_TIM2_Init+0x98>)
 800088c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000890:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 999;
 8000892:	4b1c      	ldr	r3, [pc, #112]	; (8000904 <MX_TIM2_Init+0x98>)
 8000894:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000898:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800089a:	4b1a      	ldr	r3, [pc, #104]	; (8000904 <MX_TIM2_Init+0x98>)
 800089c:	2200      	movs	r2, #0
 800089e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2749;
 80008a0:	4b18      	ldr	r3, [pc, #96]	; (8000904 <MX_TIM2_Init+0x98>)
 80008a2:	f640 22bd 	movw	r2, #2749	; 0xabd
 80008a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008a8:	4b16      	ldr	r3, [pc, #88]	; (8000904 <MX_TIM2_Init+0x98>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ae:	4b15      	ldr	r3, [pc, #84]	; (8000904 <MX_TIM2_Init+0x98>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008b4:	4813      	ldr	r0, [pc, #76]	; (8000904 <MX_TIM2_Init+0x98>)
 80008b6:	f003 ff35 	bl	8004724 <HAL_TIM_Base_Init>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80008c0:	f000 fe10 	bl	80014e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008c8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008ca:	f107 0310 	add.w	r3, r7, #16
 80008ce:	4619      	mov	r1, r3
 80008d0:	480c      	ldr	r0, [pc, #48]	; (8000904 <MX_TIM2_Init+0x98>)
 80008d2:	f004 fefb 	bl	80056cc <HAL_TIM_ConfigClockSource>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80008dc:	f000 fe02 	bl	80014e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008e0:	2300      	movs	r3, #0
 80008e2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008e4:	2300      	movs	r3, #0
 80008e6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008e8:	1d3b      	adds	r3, r7, #4
 80008ea:	4619      	mov	r1, r3
 80008ec:	4805      	ldr	r0, [pc, #20]	; (8000904 <MX_TIM2_Init+0x98>)
 80008ee:	f005 fd83 	bl	80063f8 <HAL_TIMEx_MasterConfigSynchronization>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80008f8:	f000 fdf4 	bl	80014e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008fc:	bf00      	nop
 80008fe:	3720      	adds	r7, #32
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	240000a4 	.word	0x240000a4

08000908 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b08c      	sub	sp, #48	; 0x30
 800090c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800090e:	f107 030c 	add.w	r3, r7, #12
 8000912:	2224      	movs	r2, #36	; 0x24
 8000914:	2100      	movs	r1, #0
 8000916:	4618      	mov	r0, r3
 8000918:	f007 fea4 	bl	8008664 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800091c:	463b      	mov	r3, r7
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	605a      	str	r2, [r3, #4]
 8000924:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000926:	4b21      	ldr	r3, [pc, #132]	; (80009ac <MX_TIM3_Init+0xa4>)
 8000928:	4a21      	ldr	r2, [pc, #132]	; (80009b0 <MX_TIM3_Init+0xa8>)
 800092a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800092c:	4b1f      	ldr	r3, [pc, #124]	; (80009ac <MX_TIM3_Init+0xa4>)
 800092e:	2200      	movs	r2, #0
 8000930:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000932:	4b1e      	ldr	r3, [pc, #120]	; (80009ac <MX_TIM3_Init+0xa4>)
 8000934:	2200      	movs	r2, #0
 8000936:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65531;
 8000938:	4b1c      	ldr	r3, [pc, #112]	; (80009ac <MX_TIM3_Init+0xa4>)
 800093a:	f64f 72fb 	movw	r2, #65531	; 0xfffb
 800093e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000940:	4b1a      	ldr	r3, [pc, #104]	; (80009ac <MX_TIM3_Init+0xa4>)
 8000942:	2200      	movs	r2, #0
 8000944:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000946:	4b19      	ldr	r3, [pc, #100]	; (80009ac <MX_TIM3_Init+0xa4>)
 8000948:	2200      	movs	r2, #0
 800094a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800094c:	2303      	movs	r3, #3
 800094e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000950:	2300      	movs	r3, #0
 8000952:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000954:	2301      	movs	r3, #1
 8000956:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000958:	2300      	movs	r3, #0
 800095a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 800095c:	230a      	movs	r3, #10
 800095e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000960:	2300      	movs	r3, #0
 8000962:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000964:	2301      	movs	r3, #1
 8000966:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000968:	2300      	movs	r3, #0
 800096a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 800096c:	230a      	movs	r3, #10
 800096e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000970:	f107 030c 	add.w	r3, r7, #12
 8000974:	4619      	mov	r1, r3
 8000976:	480d      	ldr	r0, [pc, #52]	; (80009ac <MX_TIM3_Init+0xa4>)
 8000978:	f004 faa4 	bl	8004ec4 <HAL_TIM_Encoder_Init>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000982:	f000 fdaf 	bl	80014e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000986:	2300      	movs	r3, #0
 8000988:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800098a:	2300      	movs	r3, #0
 800098c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800098e:	463b      	mov	r3, r7
 8000990:	4619      	mov	r1, r3
 8000992:	4806      	ldr	r0, [pc, #24]	; (80009ac <MX_TIM3_Init+0xa4>)
 8000994:	f005 fd30 	bl	80063f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800099e:	f000 fda1 	bl	80014e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80009a2:	bf00      	nop
 80009a4:	3730      	adds	r7, #48	; 0x30
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	240000f0 	.word	0x240000f0
 80009b0:	40000400 	.word	0x40000400

080009b4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b08e      	sub	sp, #56	; 0x38
 80009b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	605a      	str	r2, [r3, #4]
 80009c4:	609a      	str	r2, [r3, #8]
 80009c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009c8:	f107 031c 	add.w	r3, r7, #28
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
 80009d0:	605a      	str	r2, [r3, #4]
 80009d2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009d4:	463b      	mov	r3, r7
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]
 80009da:	605a      	str	r2, [r3, #4]
 80009dc:	609a      	str	r2, [r3, #8]
 80009de:	60da      	str	r2, [r3, #12]
 80009e0:	611a      	str	r2, [r3, #16]
 80009e2:	615a      	str	r2, [r3, #20]
 80009e4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80009e6:	4b2d      	ldr	r3, [pc, #180]	; (8000a9c <MX_TIM4_Init+0xe8>)
 80009e8:	4a2d      	ldr	r2, [pc, #180]	; (8000aa0 <MX_TIM4_Init+0xec>)
 80009ea:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 99;
 80009ec:	4b2b      	ldr	r3, [pc, #172]	; (8000a9c <MX_TIM4_Init+0xe8>)
 80009ee:	2263      	movs	r2, #99	; 0x63
 80009f0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009f2:	4b2a      	ldr	r3, [pc, #168]	; (8000a9c <MX_TIM4_Init+0xe8>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 27499;
 80009f8:	4b28      	ldr	r3, [pc, #160]	; (8000a9c <MX_TIM4_Init+0xe8>)
 80009fa:	f646 326b 	movw	r2, #27499	; 0x6b6b
 80009fe:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a00:	4b26      	ldr	r3, [pc, #152]	; (8000a9c <MX_TIM4_Init+0xe8>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a06:	4b25      	ldr	r3, [pc, #148]	; (8000a9c <MX_TIM4_Init+0xe8>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000a0c:	4823      	ldr	r0, [pc, #140]	; (8000a9c <MX_TIM4_Init+0xe8>)
 8000a0e:	f003 fe89 	bl	8004724 <HAL_TIM_Base_Init>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000a18:	f000 fd64 	bl	80014e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a20:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000a22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a26:	4619      	mov	r1, r3
 8000a28:	481c      	ldr	r0, [pc, #112]	; (8000a9c <MX_TIM4_Init+0xe8>)
 8000a2a:	f004 fe4f 	bl	80056cc <HAL_TIM_ConfigClockSource>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000a34:	f000 fd56 	bl	80014e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000a38:	4818      	ldr	r0, [pc, #96]	; (8000a9c <MX_TIM4_Init+0xe8>)
 8000a3a:	f003 ff51 	bl	80048e0 <HAL_TIM_PWM_Init>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000a44:	f000 fd4e 	bl	80014e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a50:	f107 031c 	add.w	r3, r7, #28
 8000a54:	4619      	mov	r1, r3
 8000a56:	4811      	ldr	r0, [pc, #68]	; (8000a9c <MX_TIM4_Init+0xe8>)
 8000a58:	f005 fcce 	bl	80063f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000a62:	f000 fd3f 	bl	80014e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a66:	2360      	movs	r3, #96	; 0x60
 8000a68:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 4999;
 8000a6a:	f241 3387 	movw	r3, #4999	; 0x1387
 8000a6e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a70:	2300      	movs	r3, #0
 8000a72:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a74:	2300      	movs	r3, #0
 8000a76:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a78:	463b      	mov	r3, r7
 8000a7a:	220c      	movs	r2, #12
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4807      	ldr	r0, [pc, #28]	; (8000a9c <MX_TIM4_Init+0xe8>)
 8000a80:	f004 fd10 	bl	80054a4 <HAL_TIM_PWM_ConfigChannel>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8000a8a:	f000 fd2b 	bl	80014e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000a8e:	4803      	ldr	r0, [pc, #12]	; (8000a9c <MX_TIM4_Init+0xe8>)
 8000a90:	f000 fe66 	bl	8001760 <HAL_TIM_MspPostInit>

}
 8000a94:	bf00      	nop
 8000a96:	3738      	adds	r7, #56	; 0x38
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	2400013c 	.word	0x2400013c
 8000aa0:	40000800 	.word	0x40000800

08000aa4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b088      	sub	sp, #32
 8000aa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aaa:	f107 0310 	add.w	r3, r7, #16
 8000aae:	2200      	movs	r2, #0
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	605a      	str	r2, [r3, #4]
 8000ab4:	609a      	str	r2, [r3, #8]
 8000ab6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ab8:	1d3b      	adds	r3, r7, #4
 8000aba:	2200      	movs	r2, #0
 8000abc:	601a      	str	r2, [r3, #0]
 8000abe:	605a      	str	r2, [r3, #4]
 8000ac0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000ac2:	4b1d      	ldr	r3, [pc, #116]	; (8000b38 <MX_TIM5_Init+0x94>)
 8000ac4:	4a1d      	ldr	r2, [pc, #116]	; (8000b3c <MX_TIM5_Init+0x98>)
 8000ac6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 5499;
 8000ac8:	4b1b      	ldr	r3, [pc, #108]	; (8000b38 <MX_TIM5_Init+0x94>)
 8000aca:	f241 527b 	movw	r2, #5499	; 0x157b
 8000ace:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ad0:	4b19      	ldr	r3, [pc, #100]	; (8000b38 <MX_TIM5_Init+0x94>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 99999;
 8000ad6:	4b18      	ldr	r3, [pc, #96]	; (8000b38 <MX_TIM5_Init+0x94>)
 8000ad8:	4a19      	ldr	r2, [pc, #100]	; (8000b40 <MX_TIM5_Init+0x9c>)
 8000ada:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000adc:	4b16      	ldr	r3, [pc, #88]	; (8000b38 <MX_TIM5_Init+0x94>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ae2:	4b15      	ldr	r3, [pc, #84]	; (8000b38 <MX_TIM5_Init+0x94>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000ae8:	4813      	ldr	r0, [pc, #76]	; (8000b38 <MX_TIM5_Init+0x94>)
 8000aea:	f003 fe1b 	bl	8004724 <HAL_TIM_Base_Init>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000af4:	f000 fcf6 	bl	80014e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000af8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000afc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000afe:	f107 0310 	add.w	r3, r7, #16
 8000b02:	4619      	mov	r1, r3
 8000b04:	480c      	ldr	r0, [pc, #48]	; (8000b38 <MX_TIM5_Init+0x94>)
 8000b06:	f004 fde1 	bl	80056cc <HAL_TIM_ConfigClockSource>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000b10:	f000 fce8 	bl	80014e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b14:	2300      	movs	r3, #0
 8000b16:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000b1c:	1d3b      	adds	r3, r7, #4
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4805      	ldr	r0, [pc, #20]	; (8000b38 <MX_TIM5_Init+0x94>)
 8000b22:	f005 fc69 	bl	80063f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000b2c:	f000 fcda 	bl	80014e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000b30:	bf00      	nop
 8000b32:	3720      	adds	r7, #32
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	24000188 	.word	0x24000188
 8000b3c:	40000c00 	.word	0x40000c00
 8000b40:	0001869f 	.word	0x0001869f

08000b44 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b08c      	sub	sp, #48	; 0x30
 8000b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b4a:	f107 0320 	add.w	r3, r7, #32
 8000b4e:	2200      	movs	r2, #0
 8000b50:	601a      	str	r2, [r3, #0]
 8000b52:	605a      	str	r2, [r3, #4]
 8000b54:	609a      	str	r2, [r3, #8]
 8000b56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b58:	f107 0314 	add.w	r3, r7, #20
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000b64:	1d3b      	adds	r3, r7, #4
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
 8000b6a:	605a      	str	r2, [r3, #4]
 8000b6c:	609a      	str	r2, [r3, #8]
 8000b6e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000b70:	4b2e      	ldr	r3, [pc, #184]	; (8000c2c <MX_TIM8_Init+0xe8>)
 8000b72:	4a2f      	ldr	r2, [pc, #188]	; (8000c30 <MX_TIM8_Init+0xec>)
 8000b74:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 9999;
 8000b76:	4b2d      	ldr	r3, [pc, #180]	; (8000c2c <MX_TIM8_Init+0xe8>)
 8000b78:	f242 720f 	movw	r2, #9999	; 0x270f
 8000b7c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b7e:	4b2b      	ldr	r3, [pc, #172]	; (8000c2c <MX_TIM8_Init+0xe8>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000b84:	4b29      	ldr	r3, [pc, #164]	; (8000c2c <MX_TIM8_Init+0xe8>)
 8000b86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b8a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b8c:	4b27      	ldr	r3, [pc, #156]	; (8000c2c <MX_TIM8_Init+0xe8>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 10;
 8000b92:	4b26      	ldr	r3, [pc, #152]	; (8000c2c <MX_TIM8_Init+0xe8>)
 8000b94:	220a      	movs	r2, #10
 8000b96:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b98:	4b24      	ldr	r3, [pc, #144]	; (8000c2c <MX_TIM8_Init+0xe8>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000b9e:	4823      	ldr	r0, [pc, #140]	; (8000c2c <MX_TIM8_Init+0xe8>)
 8000ba0:	f003 fdc0 	bl	8004724 <HAL_TIM_Base_Init>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_TIM8_Init+0x6a>
  {
    Error_Handler();
 8000baa:	f000 fc9b 	bl	80014e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bb2:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000bb4:	f107 0320 	add.w	r3, r7, #32
 8000bb8:	4619      	mov	r1, r3
 8000bba:	481c      	ldr	r0, [pc, #112]	; (8000c2c <MX_TIM8_Init+0xe8>)
 8000bbc:	f004 fd86 	bl	80056cc <HAL_TIM_ConfigClockSource>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_TIM8_Init+0x86>
  {
    Error_Handler();
 8000bc6:	f000 fc8d 	bl	80014e4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 8000bca:	4818      	ldr	r0, [pc, #96]	; (8000c2c <MX_TIM8_Init+0xe8>)
 8000bcc:	f004 f806 	bl	8004bdc <HAL_TIM_IC_Init>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8000bd6:	f000 fc85 	bl	80014e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000bde:	2300      	movs	r3, #0
 8000be0:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000be2:	2300      	movs	r3, #0
 8000be4:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000be6:	f107 0314 	add.w	r3, r7, #20
 8000bea:	4619      	mov	r1, r3
 8000bec:	480f      	ldr	r0, [pc, #60]	; (8000c2c <MX_TIM8_Init+0xe8>)
 8000bee:	f005 fc03 	bl	80063f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_TIM8_Init+0xb8>
  {
    Error_Handler();
 8000bf8:	f000 fc74 	bl	80014e4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000c00:	2301      	movs	r3, #1
 8000c02:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000c04:	2300      	movs	r3, #0
 8000c06:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 10;
 8000c08:	230a      	movs	r3, #10
 8000c0a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000c0c:	1d3b      	adds	r3, r7, #4
 8000c0e:	2208      	movs	r2, #8
 8000c10:	4619      	mov	r1, r3
 8000c12:	4806      	ldr	r0, [pc, #24]	; (8000c2c <MX_TIM8_Init+0xe8>)
 8000c14:	f004 fba9 	bl	800536a <HAL_TIM_IC_ConfigChannel>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_TIM8_Init+0xde>
  {
    Error_Handler();
 8000c1e:	f000 fc61 	bl	80014e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000c22:	bf00      	nop
 8000c24:	3730      	adds	r7, #48	; 0x30
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	240001d4 	.word	0x240001d4
 8000c30:	40010400 	.word	0x40010400

08000c34 <MX_TIM23_Init>:
  * @brief TIM23 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM23_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b088      	sub	sp, #32
 8000c38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c3a:	f107 0310 	add.w	r3, r7, #16
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	605a      	str	r2, [r3, #4]
 8000c44:	609a      	str	r2, [r3, #8]
 8000c46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c48:	1d3b      	adds	r3, r7, #4
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]
 8000c50:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 8000c52:	4b1e      	ldr	r3, [pc, #120]	; (8000ccc <MX_TIM23_Init+0x98>)
 8000c54:	4a1e      	ldr	r2, [pc, #120]	; (8000cd0 <MX_TIM23_Init+0x9c>)
 8000c56:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 549;
 8000c58:	4b1c      	ldr	r3, [pc, #112]	; (8000ccc <MX_TIM23_Init+0x98>)
 8000c5a:	f240 2225 	movw	r2, #549	; 0x225
 8000c5e:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c60:	4b1a      	ldr	r3, [pc, #104]	; (8000ccc <MX_TIM23_Init+0x98>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 9999;
 8000c66:	4b19      	ldr	r3, [pc, #100]	; (8000ccc <MX_TIM23_Init+0x98>)
 8000c68:	f242 720f 	movw	r2, #9999	; 0x270f
 8000c6c:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c6e:	4b17      	ldr	r3, [pc, #92]	; (8000ccc <MX_TIM23_Init+0x98>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c74:	4b15      	ldr	r3, [pc, #84]	; (8000ccc <MX_TIM23_Init+0x98>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim23) != HAL_OK)
 8000c7a:	4814      	ldr	r0, [pc, #80]	; (8000ccc <MX_TIM23_Init+0x98>)
 8000c7c:	f003 fd52 	bl	8004724 <HAL_TIM_Base_Init>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_TIM23_Init+0x56>
  {
    Error_Handler();
 8000c86:	f000 fc2d 	bl	80014e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c8e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim23, &sClockSourceConfig) != HAL_OK)
 8000c90:	f107 0310 	add.w	r3, r7, #16
 8000c94:	4619      	mov	r1, r3
 8000c96:	480d      	ldr	r0, [pc, #52]	; (8000ccc <MX_TIM23_Init+0x98>)
 8000c98:	f004 fd18 	bl	80056cc <HAL_TIM_ConfigClockSource>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_TIM23_Init+0x72>
  {
    Error_Handler();
 8000ca2:	f000 fc1f 	bl	80014e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000caa:	2300      	movs	r3, #0
 8000cac:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 8000cae:	1d3b      	adds	r3, r7, #4
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4806      	ldr	r0, [pc, #24]	; (8000ccc <MX_TIM23_Init+0x98>)
 8000cb4:	f005 fba0 	bl	80063f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_TIM23_Init+0x8e>
  {
    Error_Handler();
 8000cbe:	f000 fc11 	bl	80014e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 8000cc2:	bf00      	nop
 8000cc4:	3720      	adds	r7, #32
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	24000220 	.word	0x24000220
 8000cd0:	4000e000 	.word	0x4000e000

08000cd4 <MX_TIM24_Init>:
  * @brief TIM24 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM24_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b088      	sub	sp, #32
 8000cd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM24_Init 0 */

  /* USER CODE END TIM24_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cda:	f107 0310 	add.w	r3, r7, #16
 8000cde:	2200      	movs	r2, #0
 8000ce0:	601a      	str	r2, [r3, #0]
 8000ce2:	605a      	str	r2, [r3, #4]
 8000ce4:	609a      	str	r2, [r3, #8]
 8000ce6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ce8:	1d3b      	adds	r3, r7, #4
 8000cea:	2200      	movs	r2, #0
 8000cec:	601a      	str	r2, [r3, #0]
 8000cee:	605a      	str	r2, [r3, #4]
 8000cf0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM24_Init 1 */

  /* USER CODE END TIM24_Init 1 */
  htim24.Instance = TIM24;
 8000cf2:	4b1d      	ldr	r3, [pc, #116]	; (8000d68 <MX_TIM24_Init+0x94>)
 8000cf4:	4a1d      	ldr	r2, [pc, #116]	; (8000d6c <MX_TIM24_Init+0x98>)
 8000cf6:	601a      	str	r2, [r3, #0]
  htim24.Init.Prescaler = 65530;
 8000cf8:	4b1b      	ldr	r3, [pc, #108]	; (8000d68 <MX_TIM24_Init+0x94>)
 8000cfa:	f64f 72fa 	movw	r2, #65530	; 0xfffa
 8000cfe:	605a      	str	r2, [r3, #4]
  htim24.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d00:	4b19      	ldr	r3, [pc, #100]	; (8000d68 <MX_TIM24_Init+0x94>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	609a      	str	r2, [r3, #8]
  htim24.Init.Period = 14;
 8000d06:	4b18      	ldr	r3, [pc, #96]	; (8000d68 <MX_TIM24_Init+0x94>)
 8000d08:	220e      	movs	r2, #14
 8000d0a:	60da      	str	r2, [r3, #12]
  htim24.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d0c:	4b16      	ldr	r3, [pc, #88]	; (8000d68 <MX_TIM24_Init+0x94>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	611a      	str	r2, [r3, #16]
  htim24.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d12:	4b15      	ldr	r3, [pc, #84]	; (8000d68 <MX_TIM24_Init+0x94>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim24) != HAL_OK)
 8000d18:	4813      	ldr	r0, [pc, #76]	; (8000d68 <MX_TIM24_Init+0x94>)
 8000d1a:	f003 fd03 	bl	8004724 <HAL_TIM_Base_Init>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <MX_TIM24_Init+0x54>
  {
    Error_Handler();
 8000d24:	f000 fbde 	bl	80014e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d2c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim24, &sClockSourceConfig) != HAL_OK)
 8000d2e:	f107 0310 	add.w	r3, r7, #16
 8000d32:	4619      	mov	r1, r3
 8000d34:	480c      	ldr	r0, [pc, #48]	; (8000d68 <MX_TIM24_Init+0x94>)
 8000d36:	f004 fcc9 	bl	80056cc <HAL_TIM_ConfigClockSource>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_TIM24_Init+0x70>
  {
    Error_Handler();
 8000d40:	f000 fbd0 	bl	80014e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d44:	2300      	movs	r3, #0
 8000d46:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim24, &sMasterConfig) != HAL_OK)
 8000d4c:	1d3b      	adds	r3, r7, #4
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4805      	ldr	r0, [pc, #20]	; (8000d68 <MX_TIM24_Init+0x94>)
 8000d52:	f005 fb51 	bl	80063f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_TIM24_Init+0x8c>
  {
    Error_Handler();
 8000d5c:	f000 fbc2 	bl	80014e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM24_Init 2 */

  /* USER CODE END TIM24_Init 2 */

}
 8000d60:	bf00      	nop
 8000d62:	3720      	adds	r7, #32
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	2400026c 	.word	0x2400026c
 8000d6c:	4000e400 	.word	0x4000e400

08000d70 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d74:	4b22      	ldr	r3, [pc, #136]	; (8000e00 <MX_USART3_UART_Init+0x90>)
 8000d76:	4a23      	ldr	r2, [pc, #140]	; (8000e04 <MX_USART3_UART_Init+0x94>)
 8000d78:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d7a:	4b21      	ldr	r3, [pc, #132]	; (8000e00 <MX_USART3_UART_Init+0x90>)
 8000d7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d80:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d82:	4b1f      	ldr	r3, [pc, #124]	; (8000e00 <MX_USART3_UART_Init+0x90>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d88:	4b1d      	ldr	r3, [pc, #116]	; (8000e00 <MX_USART3_UART_Init+0x90>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d8e:	4b1c      	ldr	r3, [pc, #112]	; (8000e00 <MX_USART3_UART_Init+0x90>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d94:	4b1a      	ldr	r3, [pc, #104]	; (8000e00 <MX_USART3_UART_Init+0x90>)
 8000d96:	220c      	movs	r2, #12
 8000d98:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d9a:	4b19      	ldr	r3, [pc, #100]	; (8000e00 <MX_USART3_UART_Init+0x90>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000da0:	4b17      	ldr	r3, [pc, #92]	; (8000e00 <MX_USART3_UART_Init+0x90>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000da6:	4b16      	ldr	r3, [pc, #88]	; (8000e00 <MX_USART3_UART_Init+0x90>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000dac:	4b14      	ldr	r3, [pc, #80]	; (8000e00 <MX_USART3_UART_Init+0x90>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000db2:	4b13      	ldr	r3, [pc, #76]	; (8000e00 <MX_USART3_UART_Init+0x90>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000db8:	4811      	ldr	r0, [pc, #68]	; (8000e00 <MX_USART3_UART_Init+0x90>)
 8000dba:	f005 fbd7 	bl	800656c <HAL_UART_Init>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000dc4:	f000 fb8e 	bl	80014e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dc8:	2100      	movs	r1, #0
 8000dca:	480d      	ldr	r0, [pc, #52]	; (8000e00 <MX_USART3_UART_Init+0x90>)
 8000dcc:	f006 fc78 	bl	80076c0 <HAL_UARTEx_SetTxFifoThreshold>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000dd6:	f000 fb85 	bl	80014e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dda:	2100      	movs	r1, #0
 8000ddc:	4808      	ldr	r0, [pc, #32]	; (8000e00 <MX_USART3_UART_Init+0x90>)
 8000dde:	f006 fcad 	bl	800773c <HAL_UARTEx_SetRxFifoThreshold>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000de8:	f000 fb7c 	bl	80014e4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000dec:	4804      	ldr	r0, [pc, #16]	; (8000e00 <MX_USART3_UART_Init+0x90>)
 8000dee:	f006 fc2e 	bl	800764e <HAL_UARTEx_DisableFifoMode>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000df8:	f000 fb74 	bl	80014e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000dfc:	bf00      	nop
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	240002b8 	.word	0x240002b8
 8000e04:	40004800 	.word	0x40004800

08000e08 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000e0c:	bf00      	nop
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
	...

08000e18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b08c      	sub	sp, #48	; 0x30
 8000e1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1e:	f107 031c 	add.w	r3, r7, #28
 8000e22:	2200      	movs	r2, #0
 8000e24:	601a      	str	r2, [r3, #0]
 8000e26:	605a      	str	r2, [r3, #4]
 8000e28:	609a      	str	r2, [r3, #8]
 8000e2a:	60da      	str	r2, [r3, #12]
 8000e2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e2e:	4ba8      	ldr	r3, [pc, #672]	; (80010d0 <MX_GPIO_Init+0x2b8>)
 8000e30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e34:	4aa6      	ldr	r2, [pc, #664]	; (80010d0 <MX_GPIO_Init+0x2b8>)
 8000e36:	f043 0304 	orr.w	r3, r3, #4
 8000e3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e3e:	4ba4      	ldr	r3, [pc, #656]	; (80010d0 <MX_GPIO_Init+0x2b8>)
 8000e40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e44:	f003 0304 	and.w	r3, r3, #4
 8000e48:	61bb      	str	r3, [r7, #24]
 8000e4a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e4c:	4ba0      	ldr	r3, [pc, #640]	; (80010d0 <MX_GPIO_Init+0x2b8>)
 8000e4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e52:	4a9f      	ldr	r2, [pc, #636]	; (80010d0 <MX_GPIO_Init+0x2b8>)
 8000e54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e5c:	4b9c      	ldr	r3, [pc, #624]	; (80010d0 <MX_GPIO_Init+0x2b8>)
 8000e5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e66:	617b      	str	r3, [r7, #20]
 8000e68:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6a:	4b99      	ldr	r3, [pc, #612]	; (80010d0 <MX_GPIO_Init+0x2b8>)
 8000e6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e70:	4a97      	ldr	r2, [pc, #604]	; (80010d0 <MX_GPIO_Init+0x2b8>)
 8000e72:	f043 0301 	orr.w	r3, r3, #1
 8000e76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e7a:	4b95      	ldr	r3, [pc, #596]	; (80010d0 <MX_GPIO_Init+0x2b8>)
 8000e7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e80:	f003 0301 	and.w	r3, r3, #1
 8000e84:	613b      	str	r3, [r7, #16]
 8000e86:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e88:	4b91      	ldr	r3, [pc, #580]	; (80010d0 <MX_GPIO_Init+0x2b8>)
 8000e8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e8e:	4a90      	ldr	r2, [pc, #576]	; (80010d0 <MX_GPIO_Init+0x2b8>)
 8000e90:	f043 0302 	orr.w	r3, r3, #2
 8000e94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e98:	4b8d      	ldr	r3, [pc, #564]	; (80010d0 <MX_GPIO_Init+0x2b8>)
 8000e9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e9e:	f003 0302 	and.w	r3, r3, #2
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ea6:	4b8a      	ldr	r3, [pc, #552]	; (80010d0 <MX_GPIO_Init+0x2b8>)
 8000ea8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eac:	4a88      	ldr	r2, [pc, #544]	; (80010d0 <MX_GPIO_Init+0x2b8>)
 8000eae:	f043 0308 	orr.w	r3, r3, #8
 8000eb2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eb6:	4b86      	ldr	r3, [pc, #536]	; (80010d0 <MX_GPIO_Init+0x2b8>)
 8000eb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ebc:	f003 0308 	and.w	r3, r3, #8
 8000ec0:	60bb      	str	r3, [r7, #8]
 8000ec2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ec4:	4b82      	ldr	r3, [pc, #520]	; (80010d0 <MX_GPIO_Init+0x2b8>)
 8000ec6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eca:	4a81      	ldr	r2, [pc, #516]	; (80010d0 <MX_GPIO_Init+0x2b8>)
 8000ecc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ed0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ed4:	4b7e      	ldr	r3, [pc, #504]	; (80010d0 <MX_GPIO_Init+0x2b8>)
 8000ed6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ede:	607b      	str	r3, [r7, #4]
 8000ee0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ee2:	4b7b      	ldr	r3, [pc, #492]	; (80010d0 <MX_GPIO_Init+0x2b8>)
 8000ee4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ee8:	4a79      	ldr	r2, [pc, #484]	; (80010d0 <MX_GPIO_Init+0x2b8>)
 8000eea:	f043 0310 	orr.w	r3, r3, #16
 8000eee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ef2:	4b77      	ldr	r3, [pc, #476]	; (80010d0 <MX_GPIO_Init+0x2b8>)
 8000ef4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ef8:	f003 0310 	and.w	r3, r3, #16
 8000efc:	603b      	str	r3, [r7, #0]
 8000efe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(C0_GPIO_Port, C0_Pin, GPIO_PIN_RESET);
 8000f00:	2200      	movs	r2, #0
 8000f02:	2101      	movs	r1, #1
 8000f04:	4873      	ldr	r0, [pc, #460]	; (80010d4 <MX_GPIO_Init+0x2bc>)
 8000f06:	f001 f93f 	bl	8002188 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(C2_GPIO_Port, C2_Pin, GPIO_PIN_SET);
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	2104      	movs	r1, #4
 8000f0e:	4871      	ldr	r0, [pc, #452]	; (80010d4 <MX_GPIO_Init+0x2bc>)
 8000f10:	f001 f93a 	bl	8002188 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000f14:	2200      	movs	r2, #0
 8000f16:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f1a:	486f      	ldr	r0, [pc, #444]	; (80010d8 <MX_GPIO_Init+0x2c0>)
 8000f1c:	f001 f934 	bl	8002188 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000f20:	2200      	movs	r2, #0
 8000f22:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f26:	486d      	ldr	r0, [pc, #436]	; (80010dc <MX_GPIO_Init+0x2c4>)
 8000f28:	f001 f92e 	bl	8002188 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	2102      	movs	r1, #2
 8000f30:	486b      	ldr	r0, [pc, #428]	; (80010e0 <MX_GPIO_Init+0x2c8>)
 8000f32:	f001 f929 	bl	8002188 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : C13_Pin */
  GPIO_InitStruct.Pin = C13_Pin;
 8000f36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f3c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(C13_GPIO_Port, &GPIO_InitStruct);
 8000f46:	f107 031c 	add.w	r3, r7, #28
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4861      	ldr	r0, [pc, #388]	; (80010d4 <MX_GPIO_Init+0x2bc>)
 8000f4e:	f000 ff73 	bl	8001e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : C0_Pin C2_Pin */
  GPIO_InitStruct.Pin = C0_Pin|C2_Pin;
 8000f52:	2305      	movs	r3, #5
 8000f54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f56:	2301      	movs	r3, #1
 8000f58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f62:	f107 031c 	add.w	r3, r7, #28
 8000f66:	4619      	mov	r1, r3
 8000f68:	485a      	ldr	r0, [pc, #360]	; (80010d4 <MX_GPIO_Init+0x2bc>)
 8000f6a:	f000 ff65 	bl	8001e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000f6e:	2332      	movs	r3, #50	; 0x32
 8000f70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f72:	2302      	movs	r3, #2
 8000f74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f76:	2300      	movs	r3, #0
 8000f78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f7e:	230b      	movs	r3, #11
 8000f80:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f82:	f107 031c 	add.w	r3, r7, #28
 8000f86:	4619      	mov	r1, r3
 8000f88:	4852      	ldr	r0, [pc, #328]	; (80010d4 <MX_GPIO_Init+0x2bc>)
 8000f8a:	f000 ff55 	bl	8001e38 <HAL_GPIO_Init>

  /*Configure GPIO pin : C3_Pin */
  GPIO_InitStruct.Pin = C3_Pin;
 8000f8e:	2308      	movs	r3, #8
 8000f90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f92:	2300      	movs	r3, #0
 8000f94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f96:	2300      	movs	r3, #0
 8000f98:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(C3_GPIO_Port, &GPIO_InitStruct);
 8000f9a:	f107 031c 	add.w	r3, r7, #28
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	484c      	ldr	r0, [pc, #304]	; (80010d4 <MX_GPIO_Init+0x2bc>)
 8000fa2:	f000 ff49 	bl	8001e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000fa6:	2384      	movs	r3, #132	; 0x84
 8000fa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000faa:	2302      	movs	r3, #2
 8000fac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fb6:	230b      	movs	r3, #11
 8000fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fba:	f107 031c 	add.w	r3, r7, #28
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4848      	ldr	r0, [pc, #288]	; (80010e4 <MX_GPIO_Init+0x2cc>)
 8000fc2:	f000 ff39 	bl	8001e38 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000fc6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fd8:	230b      	movs	r3, #11
 8000fda:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000fdc:	f107 031c 	add.w	r3, r7, #28
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	483d      	ldr	r0, [pc, #244]	; (80010d8 <MX_GPIO_Init+0x2c0>)
 8000fe4:	f000 ff28 	bl	8001e38 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000fe8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000fec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000ffa:	f107 031c 	add.w	r3, r7, #28
 8000ffe:	4619      	mov	r1, r3
 8001000:	4835      	ldr	r0, [pc, #212]	; (80010d8 <MX_GPIO_Init+0x2c0>)
 8001002:	f000 ff19 	bl	8001e38 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8001006:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800100a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800100c:	2301      	movs	r3, #1
 800100e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	2300      	movs	r3, #0
 8001012:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001014:	2300      	movs	r3, #0
 8001016:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001018:	f107 031c 	add.w	r3, r7, #28
 800101c:	4619      	mov	r1, r3
 800101e:	482f      	ldr	r0, [pc, #188]	; (80010dc <MX_GPIO_Init+0x2c4>)
 8001020:	f000 ff0a 	bl	8001e38 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8001024:	2380      	movs	r3, #128	; 0x80
 8001026:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001028:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800102c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001032:	f107 031c 	add.w	r3, r7, #28
 8001036:	4619      	mov	r1, r3
 8001038:	482b      	ldr	r0, [pc, #172]	; (80010e8 <MX_GPIO_Init+0x2d0>)
 800103a:	f000 fefd 	bl	8001e38 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 800103e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001042:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001044:	2300      	movs	r3, #0
 8001046:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800104c:	f107 031c 	add.w	r3, r7, #28
 8001050:	4619      	mov	r1, r3
 8001052:	4824      	ldr	r0, [pc, #144]	; (80010e4 <MX_GPIO_Init+0x2cc>)
 8001054:	f000 fef0 	bl	8001e38 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8001058:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800105c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105e:	2302      	movs	r3, #2
 8001060:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001066:	2300      	movs	r3, #0
 8001068:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800106a:	230a      	movs	r3, #10
 800106c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 800106e:	f107 031c 	add.w	r3, r7, #28
 8001072:	4619      	mov	r1, r3
 8001074:	481b      	ldr	r0, [pc, #108]	; (80010e4 <MX_GPIO_Init+0x2cc>)
 8001076:	f000 fedf 	bl	8001e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800107a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800107e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001080:	2302      	movs	r3, #2
 8001082:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001084:	2300      	movs	r3, #0
 8001086:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001088:	2300      	movs	r3, #0
 800108a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800108c:	230b      	movs	r3, #11
 800108e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001090:	f107 031c 	add.w	r3, r7, #28
 8001094:	4619      	mov	r1, r3
 8001096:	4814      	ldr	r0, [pc, #80]	; (80010e8 <MX_GPIO_Init+0x2d0>)
 8001098:	f000 fece 	bl	8001e38 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 800109c:	2302      	movs	r3, #2
 800109e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a0:	2301      	movs	r3, #1
 80010a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	2300      	movs	r3, #0
 80010a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a8:	2300      	movs	r3, #0
 80010aa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 80010ac:	f107 031c 	add.w	r3, r7, #28
 80010b0:	4619      	mov	r1, r3
 80010b2:	480b      	ldr	r0, [pc, #44]	; (80010e0 <MX_GPIO_Init+0x2c8>)
 80010b4:	f000 fec0 	bl	8001e38 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80010b8:	2200      	movs	r2, #0
 80010ba:	2100      	movs	r1, #0
 80010bc:	2028      	movs	r0, #40	; 0x28
 80010be:	f000 fe86 	bl	8001dce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010c2:	2028      	movs	r0, #40	; 0x28
 80010c4:	f000 fe9d 	bl	8001e02 <HAL_NVIC_EnableIRQ>

}
 80010c8:	bf00      	nop
 80010ca:	3730      	adds	r7, #48	; 0x30
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	58024400 	.word	0x58024400
 80010d4:	58020800 	.word	0x58020800
 80010d8:	58020400 	.word	0x58020400
 80010dc:	58020c00 	.word	0x58020c00
 80010e0:	58021000 	.word	0x58021000
 80010e4:	58020000 	.word	0x58020000
 80010e8:	58021800 	.word	0x58021800
 80010ec:	00000000 	.word	0x00000000

080010f0 <pulses>:
/* USER CODE BEGIN 4 */
int i = 0;
int old_pulse = 0 ;
int New_pulse = 0 ;
int pulses(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0

	if (New_pulse < old_pulse)
 80010f4:	4b1a      	ldr	r3, [pc, #104]	; (8001160 <pulses+0x70>)
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	4b1a      	ldr	r3, [pc, #104]	; (8001164 <pulses+0x74>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	da04      	bge.n	800110a <pulses+0x1a>
	{
		i++;
 8001100:	4b19      	ldr	r3, [pc, #100]	; (8001168 <pulses+0x78>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	3301      	adds	r3, #1
 8001106:	4a18      	ldr	r2, [pc, #96]	; (8001168 <pulses+0x78>)
 8001108:	6013      	str	r3, [r2, #0]
	}
	New_pulse = i*65532 + __HAL_TIM_GET_COUNTER(&htim3);
 800110a:	4b17      	ldr	r3, [pc, #92]	; (8001168 <pulses+0x78>)
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	4613      	mov	r3, r2
 8001110:	039b      	lsls	r3, r3, #14
 8001112:	1a9b      	subs	r3, r3, r2
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	461a      	mov	r2, r3
 8001118:	4b14      	ldr	r3, [pc, #80]	; (800116c <pulses+0x7c>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800111e:	4413      	add	r3, r2
 8001120:	461a      	mov	r2, r3
 8001122:	4b0f      	ldr	r3, [pc, #60]	; (8001160 <pulses+0x70>)
 8001124:	601a      	str	r2, [r3, #0]
	old_pulse = New_pulse;
 8001126:	4b0e      	ldr	r3, [pc, #56]	; (8001160 <pulses+0x70>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a0e      	ldr	r2, [pc, #56]	; (8001164 <pulses+0x74>)
 800112c:	6013      	str	r3, [r2, #0]
	return (((2*M_PI)/1120) * New_pulse);
 800112e:	4b0c      	ldr	r3, [pc, #48]	; (8001160 <pulses+0x70>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	ee07 3a90 	vmov	s15, r3
 8001136:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800113a:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8001158 <pulses+0x68>
 800113e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001142:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001146:	ee17 3a90 	vmov	r3, s15

}
 800114a:	4618      	mov	r0, r3
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	f3af 8000 	nop.w
 8001158:	62fc8100 	.word	0x62fc8100
 800115c:	3f76fa7f 	.word	0x3f76fa7f
 8001160:	24000384 	.word	0x24000384
 8001164:	24000380 	.word	0x24000380
 8001168:	2400037c 	.word	0x2400037c
 800116c:	240000f0 	.word	0x240000f0

08001170 <speed_aq>:
float speed_aq (void)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
	  while(! (__HAL_TIM_GET_FLAG(&htim8,TIM_FLAG_CC3))) {}
 8001176:	bf00      	nop
 8001178:	4b19      	ldr	r3, [pc, #100]	; (80011e0 <speed_aq+0x70>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	691b      	ldr	r3, [r3, #16]
 800117e:	f003 0308 	and.w	r3, r3, #8
 8001182:	2b08      	cmp	r3, #8
 8001184:	d1f8      	bne.n	8001178 <speed_aq+0x8>
	  CCR_new = __HAL_TIM_GET_COMPARE(&htim8,TIM_CHANNEL_3);
 8001186:	4b16      	ldr	r3, [pc, #88]	; (80011e0 <speed_aq+0x70>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800118c:	461a      	mov	r2, r3
 800118e:	4b15      	ldr	r3, [pc, #84]	; (80011e4 <speed_aq+0x74>)
 8001190:	601a      	str	r2, [r3, #0]
	  int diff = CCR_new - CCR_old;
 8001192:	4b14      	ldr	r3, [pc, #80]	; (80011e4 <speed_aq+0x74>)
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	4b14      	ldr	r3, [pc, #80]	; (80011e8 <speed_aq+0x78>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	1ad3      	subs	r3, r2, r3
 800119c:	607b      	str	r3, [r7, #4]
	  CCR_old = CCR_new;
 800119e:	4b11      	ldr	r3, [pc, #68]	; (80011e4 <speed_aq+0x74>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a11      	ldr	r2, [pc, #68]	; (80011e8 <speed_aq+0x78>)
 80011a4:	6013      	str	r3, [r2, #0]
	  speed = 154.2746392/ diff; // Rad/s
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	ee07 3a90 	vmov	s15, r3
 80011ac:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80011b0:	ed9f 5b09 	vldr	d5, [pc, #36]	; 80011d8 <speed_aq+0x68>
 80011b4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80011b8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80011bc:	4b0b      	ldr	r3, [pc, #44]	; (80011ec <speed_aq+0x7c>)
 80011be:	edc3 7a00 	vstr	s15, [r3]
		//143.320208327- PPR 1205.6
		// 127.0497029 - PPR 1360
		//154.2746392 - PPR 1120
	  return (speed);
 80011c2:	4b0a      	ldr	r3, [pc, #40]	; (80011ec <speed_aq+0x7c>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	ee07 3a90 	vmov	s15, r3
}
 80011ca:	eeb0 0a67 	vmov.f32	s0, s15
 80011ce:	370c      	adds	r7, #12
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	d825c663 	.word	0xd825c663
 80011dc:	406348c9 	.word	0x406348c9
 80011e0:	240001d4 	.word	0x240001d4
 80011e4:	24000378 	.word	0x24000378
 80011e8:	24000374 	.word	0x24000374
 80011ec:	2400034c 	.word	0x2400034c

080011f0 <Data_Aqc>:
void Data_Aqc (int in , int out_spd , int data_nmbr)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	60f8      	str	r0, [r7, #12]
 80011f8:	60b9      	str	r1, [r7, #8]
 80011fa:	607a      	str	r2, [r7, #4]
	if (data_nmbr < 1000)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001202:	da18      	bge.n	8001236 <Data_Aqc+0x46>
	{
		Input[data_nmbr] = in;
 8001204:	4b2d      	ldr	r3, [pc, #180]	; (80012bc <Data_Aqc+0xcc>)
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	4413      	add	r3, r2
 800120e:	68fa      	ldr	r2, [r7, #12]
 8001210:	ee07 2a90 	vmov	s15, r2
 8001214:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001218:	edc3 7a00 	vstr	s15, [r3]
		out_speed[data_nmbr] = out_spd;
 800121c:	4b28      	ldr	r3, [pc, #160]	; (80012c0 <Data_Aqc+0xd0>)
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	4413      	add	r3, r2
 8001226:	68ba      	ldr	r2, [r7, #8]
 8001228:	ee07 2a90 	vmov	s15, r2
 800122c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001230:	edc3 7a00 	vstr	s15, [r3]

	  }
	  fwrite ( out_speed , 1000*sizeof(float) , 1 , F_sp );
	  fclose (F_sp);
	}
}
 8001234:	e03d      	b.n	80012b2 <Data_Aqc+0xc2>
		F_in = fopen ( "C:\\Users\\aymen\\Desktop\\input.bin" , "wb" );
 8001236:	4923      	ldr	r1, [pc, #140]	; (80012c4 <Data_Aqc+0xd4>)
 8001238:	4823      	ldr	r0, [pc, #140]	; (80012c8 <Data_Aqc+0xd8>)
 800123a:	f007 f831 	bl	80082a0 <fopen>
 800123e:	4603      	mov	r3, r0
 8001240:	4a22      	ldr	r2, [pc, #136]	; (80012cc <Data_Aqc+0xdc>)
 8001242:	6013      	str	r3, [r2, #0]
	  if (F_in == NULL)
 8001244:	4b21      	ldr	r3, [pc, #132]	; (80012cc <Data_Aqc+0xdc>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d105      	bne.n	8001258 <Data_Aqc+0x68>
		printf("Non" );
 800124c:	4820      	ldr	r0, [pc, #128]	; (80012d0 <Data_Aqc+0xe0>)
 800124e:	f007 fb03 	bl	8008858 <iprintf>
		  exit(1);
 8001252:	2001      	movs	r0, #1
 8001254:	f006 fdb0 	bl	8007db8 <exit>
	  fwrite ( Input , 1000*sizeof(float) , 1 , F_in );
 8001258:	4b18      	ldr	r3, [pc, #96]	; (80012bc <Data_Aqc+0xcc>)
 800125a:	6818      	ldr	r0, [r3, #0]
 800125c:	4b1b      	ldr	r3, [pc, #108]	; (80012cc <Data_Aqc+0xdc>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2201      	movs	r2, #1
 8001262:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8001266:	f007 f959 	bl	800851c <fwrite>
	  fclose (F_in);
 800126a:	4b18      	ldr	r3, [pc, #96]	; (80012cc <Data_Aqc+0xdc>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4618      	mov	r0, r3
 8001270:	f006 fe22 	bl	8007eb8 <fclose>
	  F_sp = fopen ( "C:\\Users\\aymen\\Desktop\\speed.bin" , "wb" );
 8001274:	4913      	ldr	r1, [pc, #76]	; (80012c4 <Data_Aqc+0xd4>)
 8001276:	4817      	ldr	r0, [pc, #92]	; (80012d4 <Data_Aqc+0xe4>)
 8001278:	f007 f812 	bl	80082a0 <fopen>
 800127c:	4603      	mov	r3, r0
 800127e:	4a16      	ldr	r2, [pc, #88]	; (80012d8 <Data_Aqc+0xe8>)
 8001280:	6013      	str	r3, [r2, #0]
	  if (F_sp == NULL)
 8001282:	4b15      	ldr	r3, [pc, #84]	; (80012d8 <Data_Aqc+0xe8>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d105      	bne.n	8001296 <Data_Aqc+0xa6>
		printf("Non" );
 800128a:	4811      	ldr	r0, [pc, #68]	; (80012d0 <Data_Aqc+0xe0>)
 800128c:	f007 fae4 	bl	8008858 <iprintf>
		  exit(1);
 8001290:	2001      	movs	r0, #1
 8001292:	f006 fd91 	bl	8007db8 <exit>
	  fwrite ( out_speed , 1000*sizeof(float) , 1 , F_sp );
 8001296:	4b0a      	ldr	r3, [pc, #40]	; (80012c0 <Data_Aqc+0xd0>)
 8001298:	6818      	ldr	r0, [r3, #0]
 800129a:	4b0f      	ldr	r3, [pc, #60]	; (80012d8 <Data_Aqc+0xe8>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	2201      	movs	r2, #1
 80012a0:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 80012a4:	f007 f93a 	bl	800851c <fwrite>
	  fclose (F_sp);
 80012a8:	4b0b      	ldr	r3, [pc, #44]	; (80012d8 <Data_Aqc+0xe8>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4618      	mov	r0, r3
 80012ae:	f006 fe03 	bl	8007eb8 <fclose>
}
 80012b2:	bf00      	nop
 80012b4:	3710      	adds	r7, #16
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	2400035c 	.word	0x2400035c
 80012c0:	24000358 	.word	0x24000358
 80012c4:	08009e78 	.word	0x08009e78
 80012c8:	08009e7c 	.word	0x08009e7c
 80012cc:	24000370 	.word	0x24000370
 80012d0:	08009ea0 	.word	0x08009ea0
 80012d4:	08009ea4 	.word	0x08009ea4
 80012d8:	2400036c 	.word	0x2400036c
 80012dc:	00000000 	.word	0x00000000

080012e0 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	ed2d 8b02 	vpush	{d8}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]

	Pulses = pulses();
 80012ec:	f7ff ff00 	bl	80010f0 <pulses>
 80012f0:	4603      	mov	r3, r0
 80012f2:	4a73      	ldr	r2, [pc, #460]	; (80014c0 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80012f4:	6013      	str	r3, [r2, #0]

	DutyC =  (((2.2*sin(3.123*(double)(N/Fe)) + 2.3)/4.9) + ((1.7*sin(5.73*(double)(N/Fe)) + 1.8)/3.5) + ((1.4*sin(2.39*(double)(N/Fe)) + 1.4)/2.8))/3;
 80012f6:	4b73      	ldr	r3, [pc, #460]	; (80014c4 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80012f8:	edd3 6a00 	vldr	s13, [r3]
 80012fc:	4b72      	ldr	r3, [pc, #456]	; (80014c8 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80012fe:	ed93 7a00 	vldr	s14, [r3]
 8001302:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001306:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800130a:	ed9f 6b59 	vldr	d6, [pc, #356]	; 8001470 <HAL_TIM_PeriodElapsedCallback+0x190>
 800130e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001312:	eeb0 0b47 	vmov.f64	d0, d7
 8001316:	f007 ffab 	bl	8009270 <sin>
 800131a:	eeb0 7b40 	vmov.f64	d7, d0
 800131e:	ed9f 6b56 	vldr	d6, [pc, #344]	; 8001478 <HAL_TIM_PeriodElapsedCallback+0x198>
 8001322:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001326:	ed9f 6b56 	vldr	d6, [pc, #344]	; 8001480 <HAL_TIM_PeriodElapsedCallback+0x1a0>
 800132a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800132e:	ed9f 6b56 	vldr	d6, [pc, #344]	; 8001488 <HAL_TIM_PeriodElapsedCallback+0x1a8>
 8001332:	ee87 8b06 	vdiv.f64	d8, d7, d6
 8001336:	4b63      	ldr	r3, [pc, #396]	; (80014c4 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001338:	edd3 6a00 	vldr	s13, [r3]
 800133c:	4b62      	ldr	r3, [pc, #392]	; (80014c8 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 800133e:	ed93 7a00 	vldr	s14, [r3]
 8001342:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001346:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800134a:	ed9f 6b51 	vldr	d6, [pc, #324]	; 8001490 <HAL_TIM_PeriodElapsedCallback+0x1b0>
 800134e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001352:	eeb0 0b47 	vmov.f64	d0, d7
 8001356:	f007 ff8b 	bl	8009270 <sin>
 800135a:	eeb0 7b40 	vmov.f64	d7, d0
 800135e:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8001498 <HAL_TIM_PeriodElapsedCallback+0x1b8>
 8001362:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001366:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 80014a0 <HAL_TIM_PeriodElapsedCallback+0x1c0>
 800136a:	ee37 6b06 	vadd.f64	d6, d7, d6
 800136e:	eeb0 5b0c 	vmov.f64	d5, #12	; 0x40600000  3.5
 8001372:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001376:	ee38 8b07 	vadd.f64	d8, d8, d7
 800137a:	4b52      	ldr	r3, [pc, #328]	; (80014c4 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800137c:	edd3 6a00 	vldr	s13, [r3]
 8001380:	4b51      	ldr	r3, [pc, #324]	; (80014c8 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8001382:	ed93 7a00 	vldr	s14, [r3]
 8001386:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800138a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800138e:	ed9f 6b46 	vldr	d6, [pc, #280]	; 80014a8 <HAL_TIM_PeriodElapsedCallback+0x1c8>
 8001392:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001396:	eeb0 0b47 	vmov.f64	d0, d7
 800139a:	f007 ff69 	bl	8009270 <sin>
 800139e:	eeb0 7b40 	vmov.f64	d7, d0
 80013a2:	ed9f 6b43 	vldr	d6, [pc, #268]	; 80014b0 <HAL_TIM_PeriodElapsedCallback+0x1d0>
 80013a6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80013aa:	ed9f 6b41 	vldr	d6, [pc, #260]	; 80014b0 <HAL_TIM_PeriodElapsedCallback+0x1d0>
 80013ae:	ee37 6b06 	vadd.f64	d6, d7, d6
 80013b2:	ed9f 5b41 	vldr	d5, [pc, #260]	; 80014b8 <HAL_TIM_PeriodElapsedCallback+0x1d8>
 80013b6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80013ba:	ee38 6b07 	vadd.f64	d6, d8, d7
 80013be:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 80013c2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80013c6:	4b41      	ldr	r3, [pc, #260]	; (80014cc <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80013c8:	ed83 7b00 	vstr	d7, [r3]
	input_val =  DutyC * 12 ;
 80013cc:	4b3f      	ldr	r3, [pc, #252]	; (80014cc <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80013ce:	ed93 7b00 	vldr	d7, [r3]
 80013d2:	eeb2 6b08 	vmov.f64	d6, #40	; 0x41400000  12.0
 80013d6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80013da:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80013de:	4b3c      	ldr	r3, [pc, #240]	; (80014d0 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80013e0:	edc3 7a00 	vstr	s15, [r3]
	ccr_reg = (int) round ( DutyC * ARR ) ;
 80013e4:	4b3b      	ldr	r3, [pc, #236]	; (80014d4 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	ee07 3a90 	vmov	s15, r3
 80013ec:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80013f0:	4b36      	ldr	r3, [pc, #216]	; (80014cc <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80013f2:	ed93 7b00 	vldr	d7, [r3]
 80013f6:	ee26 7b07 	vmul.f64	d7, d6, d7
 80013fa:	eeb0 0b47 	vmov.f64	d0, d7
 80013fe:	f007 feef 	bl	80091e0 <round>
 8001402:	eeb0 7b40 	vmov.f64	d7, d0
 8001406:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800140a:	ee17 2a90 	vmov	r2, s15
 800140e:	4b32      	ldr	r3, [pc, #200]	; (80014d8 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001410:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4, ccr_reg);
 8001412:	4b31      	ldr	r3, [pc, #196]	; (80014d8 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	4b31      	ldr	r3, [pc, #196]	; (80014dc <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	641a      	str	r2, [r3, #64]	; 0x40
	N++;
 800141c:	4b29      	ldr	r3, [pc, #164]	; (80014c4 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800141e:	edd3 7a00 	vldr	s15, [r3]
 8001422:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001426:	ee77 7a87 	vadd.f32	s15, s15, s14
 800142a:	4b26      	ldr	r3, [pc, #152]	; (80014c4 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800142c:	edc3 7a00 	vstr	s15, [r3]
	Data_Aqc (input_val , speed , N);
 8001430:	4b27      	ldr	r3, [pc, #156]	; (80014d0 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8001432:	edd3 7a00 	vldr	s15, [r3]
 8001436:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800143a:	4b29      	ldr	r3, [pc, #164]	; (80014e0 <HAL_TIM_PeriodElapsedCallback+0x200>)
 800143c:	edd3 7a00 	vldr	s15, [r3]
 8001440:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8001444:	4b1f      	ldr	r3, [pc, #124]	; (80014c4 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001446:	edd3 7a00 	vldr	s15, [r3]
 800144a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800144e:	ee17 2a90 	vmov	r2, s15
 8001452:	ee16 1a90 	vmov	r1, s13
 8001456:	ee17 0a10 	vmov	r0, s14
 800145a:	f7ff fec9 	bl	80011f0 <Data_Aqc>



}
 800145e:	bf00      	nop
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	ecbd 8b02 	vpop	{d8}
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	f3af 8000 	nop.w
 8001470:	6c8b4396 	.word	0x6c8b4396
 8001474:	4008fbe7 	.word	0x4008fbe7
 8001478:	9999999a 	.word	0x9999999a
 800147c:	40019999 	.word	0x40019999
 8001480:	66666666 	.word	0x66666666
 8001484:	40026666 	.word	0x40026666
 8001488:	9999999a 	.word	0x9999999a
 800148c:	40139999 	.word	0x40139999
 8001490:	1eb851ec 	.word	0x1eb851ec
 8001494:	4016eb85 	.word	0x4016eb85
 8001498:	33333333 	.word	0x33333333
 800149c:	3ffb3333 	.word	0x3ffb3333
 80014a0:	cccccccd 	.word	0xcccccccd
 80014a4:	3ffccccc 	.word	0x3ffccccc
 80014a8:	51eb851f 	.word	0x51eb851f
 80014ac:	40031eb8 	.word	0x40031eb8
 80014b0:	66666666 	.word	0x66666666
 80014b4:	3ff66666 	.word	0x3ff66666
 80014b8:	66666666 	.word	0x66666666
 80014bc:	40066666 	.word	0x40066666
 80014c0:	24000348 	.word	0x24000348
 80014c4:	24000350 	.word	0x24000350
 80014c8:	24000000 	.word	0x24000000
 80014cc:	24000360 	.word	0x24000360
 80014d0:	24000354 	.word	0x24000354
 80014d4:	24000004 	.word	0x24000004
 80014d8:	24000368 	.word	0x24000368
 80014dc:	2400013c 	.word	0x2400013c
 80014e0:	2400034c 	.word	0x2400034c

080014e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014e8:	b672      	cpsid	i
}
 80014ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014ec:	e7fe      	b.n	80014ec <Error_Handler+0x8>
	...

080014f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014f6:	4b0a      	ldr	r3, [pc, #40]	; (8001520 <HAL_MspInit+0x30>)
 80014f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80014fc:	4a08      	ldr	r2, [pc, #32]	; (8001520 <HAL_MspInit+0x30>)
 80014fe:	f043 0302 	orr.w	r3, r3, #2
 8001502:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001506:	4b06      	ldr	r3, [pc, #24]	; (8001520 <HAL_MspInit+0x30>)
 8001508:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800150c:	f003 0302 	and.w	r3, r3, #2
 8001510:	607b      	str	r3, [r7, #4]
 8001512:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001514:	bf00      	nop
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr
 8001520:	58024400 	.word	0x58024400

08001524 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b08e      	sub	sp, #56	; 0x38
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800152c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	605a      	str	r2, [r3, #4]
 8001536:	609a      	str	r2, [r3, #8]
 8001538:	60da      	str	r2, [r3, #12]
 800153a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001544:	d117      	bne.n	8001576 <HAL_TIM_Base_MspInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001546:	4b5a      	ldr	r3, [pc, #360]	; (80016b0 <HAL_TIM_Base_MspInit+0x18c>)
 8001548:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800154c:	4a58      	ldr	r2, [pc, #352]	; (80016b0 <HAL_TIM_Base_MspInit+0x18c>)
 800154e:	f043 0301 	orr.w	r3, r3, #1
 8001552:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001556:	4b56      	ldr	r3, [pc, #344]	; (80016b0 <HAL_TIM_Base_MspInit+0x18c>)
 8001558:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800155c:	f003 0301 	and.w	r3, r3, #1
 8001560:	623b      	str	r3, [r7, #32]
 8001562:	6a3b      	ldr	r3, [r7, #32]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001564:	2200      	movs	r2, #0
 8001566:	2100      	movs	r1, #0
 8001568:	201c      	movs	r0, #28
 800156a:	f000 fc30 	bl	8001dce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800156e:	201c      	movs	r0, #28
 8001570:	f000 fc47 	bl	8001e02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM24_MspInit 1 */

  /* USER CODE END TIM24_MspInit 1 */
  }

}
 8001574:	e097      	b.n	80016a6 <HAL_TIM_Base_MspInit+0x182>
  else if(htim_base->Instance==TIM4)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a4e      	ldr	r2, [pc, #312]	; (80016b4 <HAL_TIM_Base_MspInit+0x190>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d10f      	bne.n	80015a0 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001580:	4b4b      	ldr	r3, [pc, #300]	; (80016b0 <HAL_TIM_Base_MspInit+0x18c>)
 8001582:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001586:	4a4a      	ldr	r2, [pc, #296]	; (80016b0 <HAL_TIM_Base_MspInit+0x18c>)
 8001588:	f043 0304 	orr.w	r3, r3, #4
 800158c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001590:	4b47      	ldr	r3, [pc, #284]	; (80016b0 <HAL_TIM_Base_MspInit+0x18c>)
 8001592:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001596:	f003 0304 	and.w	r3, r3, #4
 800159a:	61fb      	str	r3, [r7, #28]
 800159c:	69fb      	ldr	r3, [r7, #28]
}
 800159e:	e082      	b.n	80016a6 <HAL_TIM_Base_MspInit+0x182>
  else if(htim_base->Instance==TIM5)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a44      	ldr	r2, [pc, #272]	; (80016b8 <HAL_TIM_Base_MspInit+0x194>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d10f      	bne.n	80015ca <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80015aa:	4b41      	ldr	r3, [pc, #260]	; (80016b0 <HAL_TIM_Base_MspInit+0x18c>)
 80015ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015b0:	4a3f      	ldr	r2, [pc, #252]	; (80016b0 <HAL_TIM_Base_MspInit+0x18c>)
 80015b2:	f043 0308 	orr.w	r3, r3, #8
 80015b6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80015ba:	4b3d      	ldr	r3, [pc, #244]	; (80016b0 <HAL_TIM_Base_MspInit+0x18c>)
 80015bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015c0:	f003 0308 	and.w	r3, r3, #8
 80015c4:	61bb      	str	r3, [r7, #24]
 80015c6:	69bb      	ldr	r3, [r7, #24]
}
 80015c8:	e06d      	b.n	80016a6 <HAL_TIM_Base_MspInit+0x182>
  else if(htim_base->Instance==TIM8)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a3b      	ldr	r2, [pc, #236]	; (80016bc <HAL_TIM_Base_MspInit+0x198>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d12f      	bne.n	8001634 <HAL_TIM_Base_MspInit+0x110>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80015d4:	4b36      	ldr	r3, [pc, #216]	; (80016b0 <HAL_TIM_Base_MspInit+0x18c>)
 80015d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80015da:	4a35      	ldr	r2, [pc, #212]	; (80016b0 <HAL_TIM_Base_MspInit+0x18c>)
 80015dc:	f043 0302 	orr.w	r3, r3, #2
 80015e0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80015e4:	4b32      	ldr	r3, [pc, #200]	; (80016b0 <HAL_TIM_Base_MspInit+0x18c>)
 80015e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80015ea:	f003 0302 	and.w	r3, r3, #2
 80015ee:	617b      	str	r3, [r7, #20]
 80015f0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015f2:	4b2f      	ldr	r3, [pc, #188]	; (80016b0 <HAL_TIM_Base_MspInit+0x18c>)
 80015f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015f8:	4a2d      	ldr	r2, [pc, #180]	; (80016b0 <HAL_TIM_Base_MspInit+0x18c>)
 80015fa:	f043 0304 	orr.w	r3, r3, #4
 80015fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001602:	4b2b      	ldr	r3, [pc, #172]	; (80016b0 <HAL_TIM_Base_MspInit+0x18c>)
 8001604:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001608:	f003 0304 	and.w	r3, r3, #4
 800160c:	613b      	str	r3, [r7, #16]
 800160e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001610:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001614:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001616:	2302      	movs	r3, #2
 8001618:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161a:	2300      	movs	r3, #0
 800161c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161e:	2300      	movs	r3, #0
 8001620:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001622:	2303      	movs	r3, #3
 8001624:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001626:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800162a:	4619      	mov	r1, r3
 800162c:	4824      	ldr	r0, [pc, #144]	; (80016c0 <HAL_TIM_Base_MspInit+0x19c>)
 800162e:	f000 fc03 	bl	8001e38 <HAL_GPIO_Init>
}
 8001632:	e038      	b.n	80016a6 <HAL_TIM_Base_MspInit+0x182>
  else if(htim_base->Instance==TIM23)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a22      	ldr	r2, [pc, #136]	; (80016c4 <HAL_TIM_Base_MspInit+0x1a0>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d117      	bne.n	800166e <HAL_TIM_Base_MspInit+0x14a>
    __HAL_RCC_TIM23_CLK_ENABLE();
 800163e:	4b1c      	ldr	r3, [pc, #112]	; (80016b0 <HAL_TIM_Base_MspInit+0x18c>)
 8001640:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001644:	4a1a      	ldr	r2, [pc, #104]	; (80016b0 <HAL_TIM_Base_MspInit+0x18c>)
 8001646:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800164a:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800164e:	4b18      	ldr	r3, [pc, #96]	; (80016b0 <HAL_TIM_Base_MspInit+0x18c>)
 8001650:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001654:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001658:	60fb      	str	r3, [r7, #12]
 800165a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM23_IRQn, 0, 0);
 800165c:	2200      	movs	r2, #0
 800165e:	2100      	movs	r1, #0
 8001660:	20a1      	movs	r0, #161	; 0xa1
 8001662:	f000 fbb4 	bl	8001dce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM23_IRQn);
 8001666:	20a1      	movs	r0, #161	; 0xa1
 8001668:	f000 fbcb 	bl	8001e02 <HAL_NVIC_EnableIRQ>
}
 800166c:	e01b      	b.n	80016a6 <HAL_TIM_Base_MspInit+0x182>
  else if(htim_base->Instance==TIM24)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a15      	ldr	r2, [pc, #84]	; (80016c8 <HAL_TIM_Base_MspInit+0x1a4>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d116      	bne.n	80016a6 <HAL_TIM_Base_MspInit+0x182>
    __HAL_RCC_TIM24_CLK_ENABLE();
 8001678:	4b0d      	ldr	r3, [pc, #52]	; (80016b0 <HAL_TIM_Base_MspInit+0x18c>)
 800167a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800167e:	4a0c      	ldr	r2, [pc, #48]	; (80016b0 <HAL_TIM_Base_MspInit+0x18c>)
 8001680:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001684:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001688:	4b09      	ldr	r3, [pc, #36]	; (80016b0 <HAL_TIM_Base_MspInit+0x18c>)
 800168a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800168e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001692:	60bb      	str	r3, [r7, #8]
 8001694:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM24_IRQn, 0, 0);
 8001696:	2200      	movs	r2, #0
 8001698:	2100      	movs	r1, #0
 800169a:	20a2      	movs	r0, #162	; 0xa2
 800169c:	f000 fb97 	bl	8001dce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM24_IRQn);
 80016a0:	20a2      	movs	r0, #162	; 0xa2
 80016a2:	f000 fbae 	bl	8001e02 <HAL_NVIC_EnableIRQ>
}
 80016a6:	bf00      	nop
 80016a8:	3738      	adds	r7, #56	; 0x38
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	58024400 	.word	0x58024400
 80016b4:	40000800 	.word	0x40000800
 80016b8:	40000c00 	.word	0x40000c00
 80016bc:	40010400 	.word	0x40010400
 80016c0:	58020800 	.word	0x58020800
 80016c4:	4000e000 	.word	0x4000e000
 80016c8:	4000e400 	.word	0x4000e400

080016cc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b08a      	sub	sp, #40	; 0x28
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d4:	f107 0314 	add.w	r3, r7, #20
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	605a      	str	r2, [r3, #4]
 80016de:	609a      	str	r2, [r3, #8]
 80016e0:	60da      	str	r2, [r3, #12]
 80016e2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a1a      	ldr	r2, [pc, #104]	; (8001754 <HAL_TIM_Encoder_MspInit+0x88>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d12d      	bne.n	800174a <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016ee:	4b1a      	ldr	r3, [pc, #104]	; (8001758 <HAL_TIM_Encoder_MspInit+0x8c>)
 80016f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016f4:	4a18      	ldr	r2, [pc, #96]	; (8001758 <HAL_TIM_Encoder_MspInit+0x8c>)
 80016f6:	f043 0302 	orr.w	r3, r3, #2
 80016fa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80016fe:	4b16      	ldr	r3, [pc, #88]	; (8001758 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001700:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001704:	f003 0302 	and.w	r3, r3, #2
 8001708:	613b      	str	r3, [r7, #16]
 800170a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800170c:	4b12      	ldr	r3, [pc, #72]	; (8001758 <HAL_TIM_Encoder_MspInit+0x8c>)
 800170e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001712:	4a11      	ldr	r2, [pc, #68]	; (8001758 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001714:	f043 0302 	orr.w	r3, r3, #2
 8001718:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800171c:	4b0e      	ldr	r3, [pc, #56]	; (8001758 <HAL_TIM_Encoder_MspInit+0x8c>)
 800171e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4(NJTRST)     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800172a:	2330      	movs	r3, #48	; 0x30
 800172c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172e:	2302      	movs	r3, #2
 8001730:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001732:	2300      	movs	r3, #0
 8001734:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001736:	2300      	movs	r3, #0
 8001738:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800173a:	2302      	movs	r3, #2
 800173c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800173e:	f107 0314 	add.w	r3, r7, #20
 8001742:	4619      	mov	r1, r3
 8001744:	4805      	ldr	r0, [pc, #20]	; (800175c <HAL_TIM_Encoder_MspInit+0x90>)
 8001746:	f000 fb77 	bl	8001e38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800174a:	bf00      	nop
 800174c:	3728      	adds	r7, #40	; 0x28
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40000400 	.word	0x40000400
 8001758:	58024400 	.word	0x58024400
 800175c:	58020400 	.word	0x58020400

08001760 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b088      	sub	sp, #32
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001768:	f107 030c 	add.w	r3, r7, #12
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	609a      	str	r2, [r3, #8]
 8001774:	60da      	str	r2, [r3, #12]
 8001776:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a13      	ldr	r2, [pc, #76]	; (80017cc <HAL_TIM_MspPostInit+0x6c>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d11f      	bne.n	80017c2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001782:	4b13      	ldr	r3, [pc, #76]	; (80017d0 <HAL_TIM_MspPostInit+0x70>)
 8001784:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001788:	4a11      	ldr	r2, [pc, #68]	; (80017d0 <HAL_TIM_MspPostInit+0x70>)
 800178a:	f043 0308 	orr.w	r3, r3, #8
 800178e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001792:	4b0f      	ldr	r3, [pc, #60]	; (80017d0 <HAL_TIM_MspPostInit+0x70>)
 8001794:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001798:	f003 0308 	and.w	r3, r3, #8
 800179c:	60bb      	str	r3, [r7, #8]
 800179e:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80017a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80017a4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a6:	2302      	movs	r3, #2
 80017a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017aa:	2300      	movs	r3, #0
 80017ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ae:	2300      	movs	r3, #0
 80017b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80017b2:	2302      	movs	r3, #2
 80017b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017b6:	f107 030c 	add.w	r3, r7, #12
 80017ba:	4619      	mov	r1, r3
 80017bc:	4805      	ldr	r0, [pc, #20]	; (80017d4 <HAL_TIM_MspPostInit+0x74>)
 80017be:	f000 fb3b 	bl	8001e38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80017c2:	bf00      	nop
 80017c4:	3720      	adds	r7, #32
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	40000800 	.word	0x40000800
 80017d0:	58024400 	.word	0x58024400
 80017d4:	58020c00 	.word	0x58020c00

080017d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b0b6      	sub	sp, #216	; 0xd8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	605a      	str	r2, [r3, #4]
 80017ea:	609a      	str	r2, [r3, #8]
 80017ec:	60da      	str	r2, [r3, #12]
 80017ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017f0:	f107 0310 	add.w	r3, r7, #16
 80017f4:	22b4      	movs	r2, #180	; 0xb4
 80017f6:	2100      	movs	r1, #0
 80017f8:	4618      	mov	r0, r3
 80017fa:	f006 ff33 	bl	8008664 <memset>
  if(huart->Instance==USART3)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a25      	ldr	r2, [pc, #148]	; (8001898 <HAL_UART_MspInit+0xc0>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d142      	bne.n	800188e <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001808:	2302      	movs	r3, #2
 800180a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800180c:	2300      	movs	r3, #0
 800180e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001812:	f107 0310 	add.w	r3, r7, #16
 8001816:	4618      	mov	r0, r3
 8001818:	f001 fc68 	bl	80030ec <HAL_RCCEx_PeriphCLKConfig>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001822:	f7ff fe5f 	bl	80014e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001826:	4b1d      	ldr	r3, [pc, #116]	; (800189c <HAL_UART_MspInit+0xc4>)
 8001828:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800182c:	4a1b      	ldr	r2, [pc, #108]	; (800189c <HAL_UART_MspInit+0xc4>)
 800182e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001832:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001836:	4b19      	ldr	r3, [pc, #100]	; (800189c <HAL_UART_MspInit+0xc4>)
 8001838:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800183c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001840:	60fb      	str	r3, [r7, #12]
 8001842:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001844:	4b15      	ldr	r3, [pc, #84]	; (800189c <HAL_UART_MspInit+0xc4>)
 8001846:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800184a:	4a14      	ldr	r2, [pc, #80]	; (800189c <HAL_UART_MspInit+0xc4>)
 800184c:	f043 0308 	orr.w	r3, r3, #8
 8001850:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001854:	4b11      	ldr	r3, [pc, #68]	; (800189c <HAL_UART_MspInit+0xc4>)
 8001856:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800185a:	f003 0308 	and.w	r3, r3, #8
 800185e:	60bb      	str	r3, [r7, #8]
 8001860:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8001862:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001866:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186a:	2302      	movs	r3, #2
 800186c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001870:	2300      	movs	r3, #0
 8001872:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001876:	2300      	movs	r3, #0
 8001878:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800187c:	2307      	movs	r3, #7
 800187e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001882:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001886:	4619      	mov	r1, r3
 8001888:	4805      	ldr	r0, [pc, #20]	; (80018a0 <HAL_UART_MspInit+0xc8>)
 800188a:	f000 fad5 	bl	8001e38 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800188e:	bf00      	nop
 8001890:	37d8      	adds	r7, #216	; 0xd8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	40004800 	.word	0x40004800
 800189c:	58024400 	.word	0x58024400
 80018a0:	58020c00 	.word	0x58020c00

080018a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018a8:	e7fe      	b.n	80018a8 <NMI_Handler+0x4>

080018aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018aa:	b480      	push	{r7}
 80018ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ae:	e7fe      	b.n	80018ae <HardFault_Handler+0x4>

080018b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018b4:	e7fe      	b.n	80018b4 <MemManage_Handler+0x4>

080018b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018b6:	b480      	push	{r7}
 80018b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018ba:	e7fe      	b.n	80018ba <BusFault_Handler+0x4>

080018bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018c0:	e7fe      	b.n	80018c0 <UsageFault_Handler+0x4>

080018c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018c2:	b480      	push	{r7}
 80018c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018c6:	bf00      	nop
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018d4:	bf00      	nop
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr

080018de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018de:	b480      	push	{r7}
 80018e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018e2:	bf00      	nop
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018f0:	f000 f972 	bl	8001bd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018f4:	bf00      	nop
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80018fc:	4802      	ldr	r0, [pc, #8]	; (8001908 <TIM2_IRQHandler+0x10>)
 80018fe:	f003 fc15 	bl	800512c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001902:	bf00      	nop
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	240000a4 	.word	0x240000a4

0800190c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001910:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001914:	f000 fc51 	bl	80021ba <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001918:	bf00      	nop
 800191a:	bd80      	pop	{r7, pc}

0800191c <TIM23_IRQHandler>:

/**
  * @brief This function handles TIM23 global interrupt.
  */
void TIM23_IRQHandler(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM23_IRQn 0 */

  /* USER CODE END TIM23_IRQn 0 */
  HAL_TIM_IRQHandler(&htim23);
 8001920:	4802      	ldr	r0, [pc, #8]	; (800192c <TIM23_IRQHandler+0x10>)
 8001922:	f003 fc03 	bl	800512c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM23_IRQn 1 */

  /* USER CODE END TIM23_IRQn 1 */
}
 8001926:	bf00      	nop
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	24000220 	.word	0x24000220

08001930 <TIM24_IRQHandler>:

/**
  * @brief This function handles TIM24 global interrupt.
  */
void TIM24_IRQHandler(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM24_IRQn 0 */

  /* USER CODE END TIM24_IRQn 0 */
  HAL_TIM_IRQHandler(&htim24);
 8001934:	4802      	ldr	r0, [pc, #8]	; (8001940 <TIM24_IRQHandler+0x10>)
 8001936:	f003 fbf9 	bl	800512c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM24_IRQn 1 */

  /* USER CODE END TIM24_IRQn 1 */
}
 800193a:	bf00      	nop
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	2400026c 	.word	0x2400026c

08001944 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800194c:	4a14      	ldr	r2, [pc, #80]	; (80019a0 <_sbrk+0x5c>)
 800194e:	4b15      	ldr	r3, [pc, #84]	; (80019a4 <_sbrk+0x60>)
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001958:	4b13      	ldr	r3, [pc, #76]	; (80019a8 <_sbrk+0x64>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d102      	bne.n	8001966 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001960:	4b11      	ldr	r3, [pc, #68]	; (80019a8 <_sbrk+0x64>)
 8001962:	4a12      	ldr	r2, [pc, #72]	; (80019ac <_sbrk+0x68>)
 8001964:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001966:	4b10      	ldr	r3, [pc, #64]	; (80019a8 <_sbrk+0x64>)
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4413      	add	r3, r2
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	429a      	cmp	r2, r3
 8001972:	d207      	bcs.n	8001984 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001974:	f006 fa1a 	bl	8007dac <__errno>
 8001978:	4603      	mov	r3, r0
 800197a:	220c      	movs	r2, #12
 800197c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800197e:	f04f 33ff 	mov.w	r3, #4294967295
 8001982:	e009      	b.n	8001998 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001984:	4b08      	ldr	r3, [pc, #32]	; (80019a8 <_sbrk+0x64>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800198a:	4b07      	ldr	r3, [pc, #28]	; (80019a8 <_sbrk+0x64>)
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4413      	add	r3, r2
 8001992:	4a05      	ldr	r2, [pc, #20]	; (80019a8 <_sbrk+0x64>)
 8001994:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001996:	68fb      	ldr	r3, [r7, #12]
}
 8001998:	4618      	mov	r0, r3
 800199a:	3718      	adds	r7, #24
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	24050000 	.word	0x24050000
 80019a4:	00000400 	.word	0x00000400
 80019a8:	24000388 	.word	0x24000388
 80019ac:	24000450 	.word	0x24000450

080019b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80019b4:	4b32      	ldr	r3, [pc, #200]	; (8001a80 <SystemInit+0xd0>)
 80019b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019ba:	4a31      	ldr	r2, [pc, #196]	; (8001a80 <SystemInit+0xd0>)
 80019bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80019c4:	4b2f      	ldr	r3, [pc, #188]	; (8001a84 <SystemInit+0xd4>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 030f 	and.w	r3, r3, #15
 80019cc:	2b06      	cmp	r3, #6
 80019ce:	d807      	bhi.n	80019e0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80019d0:	4b2c      	ldr	r3, [pc, #176]	; (8001a84 <SystemInit+0xd4>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f023 030f 	bic.w	r3, r3, #15
 80019d8:	4a2a      	ldr	r2, [pc, #168]	; (8001a84 <SystemInit+0xd4>)
 80019da:	f043 0307 	orr.w	r3, r3, #7
 80019de:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80019e0:	4b29      	ldr	r3, [pc, #164]	; (8001a88 <SystemInit+0xd8>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a28      	ldr	r2, [pc, #160]	; (8001a88 <SystemInit+0xd8>)
 80019e6:	f043 0301 	orr.w	r3, r3, #1
 80019ea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80019ec:	4b26      	ldr	r3, [pc, #152]	; (8001a88 <SystemInit+0xd8>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80019f2:	4b25      	ldr	r3, [pc, #148]	; (8001a88 <SystemInit+0xd8>)
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	4924      	ldr	r1, [pc, #144]	; (8001a88 <SystemInit+0xd8>)
 80019f8:	4b24      	ldr	r3, [pc, #144]	; (8001a8c <SystemInit+0xdc>)
 80019fa:	4013      	ands	r3, r2
 80019fc:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80019fe:	4b21      	ldr	r3, [pc, #132]	; (8001a84 <SystemInit+0xd4>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0308 	and.w	r3, r3, #8
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d007      	beq.n	8001a1a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001a0a:	4b1e      	ldr	r3, [pc, #120]	; (8001a84 <SystemInit+0xd4>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f023 030f 	bic.w	r3, r3, #15
 8001a12:	4a1c      	ldr	r2, [pc, #112]	; (8001a84 <SystemInit+0xd4>)
 8001a14:	f043 0307 	orr.w	r3, r3, #7
 8001a18:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001a1a:	4b1b      	ldr	r3, [pc, #108]	; (8001a88 <SystemInit+0xd8>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001a20:	4b19      	ldr	r3, [pc, #100]	; (8001a88 <SystemInit+0xd8>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001a26:	4b18      	ldr	r3, [pc, #96]	; (8001a88 <SystemInit+0xd8>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001a2c:	4b16      	ldr	r3, [pc, #88]	; (8001a88 <SystemInit+0xd8>)
 8001a2e:	4a18      	ldr	r2, [pc, #96]	; (8001a90 <SystemInit+0xe0>)
 8001a30:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001a32:	4b15      	ldr	r3, [pc, #84]	; (8001a88 <SystemInit+0xd8>)
 8001a34:	4a17      	ldr	r2, [pc, #92]	; (8001a94 <SystemInit+0xe4>)
 8001a36:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001a38:	4b13      	ldr	r3, [pc, #76]	; (8001a88 <SystemInit+0xd8>)
 8001a3a:	4a17      	ldr	r2, [pc, #92]	; (8001a98 <SystemInit+0xe8>)
 8001a3c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001a3e:	4b12      	ldr	r3, [pc, #72]	; (8001a88 <SystemInit+0xd8>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001a44:	4b10      	ldr	r3, [pc, #64]	; (8001a88 <SystemInit+0xd8>)
 8001a46:	4a14      	ldr	r2, [pc, #80]	; (8001a98 <SystemInit+0xe8>)
 8001a48:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001a4a:	4b0f      	ldr	r3, [pc, #60]	; (8001a88 <SystemInit+0xd8>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001a50:	4b0d      	ldr	r3, [pc, #52]	; (8001a88 <SystemInit+0xd8>)
 8001a52:	4a11      	ldr	r2, [pc, #68]	; (8001a98 <SystemInit+0xe8>)
 8001a54:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001a56:	4b0c      	ldr	r3, [pc, #48]	; (8001a88 <SystemInit+0xd8>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001a5c:	4b0a      	ldr	r3, [pc, #40]	; (8001a88 <SystemInit+0xd8>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a09      	ldr	r2, [pc, #36]	; (8001a88 <SystemInit+0xd8>)
 8001a62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a66:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001a68:	4b07      	ldr	r3, [pc, #28]	; (8001a88 <SystemInit+0xd8>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001a6e:	4b0b      	ldr	r3, [pc, #44]	; (8001a9c <SystemInit+0xec>)
 8001a70:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001a74:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001a76:	bf00      	nop
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr
 8001a80:	e000ed00 	.word	0xe000ed00
 8001a84:	52002000 	.word	0x52002000
 8001a88:	58024400 	.word	0x58024400
 8001a8c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001a90:	02020200 	.word	0x02020200
 8001a94:	01ff0000 	.word	0x01ff0000
 8001a98:	01010280 	.word	0x01010280
 8001a9c:	52004000 	.word	0x52004000

08001aa0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001aa0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ad8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001aa4:	f7ff ff84 	bl	80019b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001aa8:	480c      	ldr	r0, [pc, #48]	; (8001adc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001aaa:	490d      	ldr	r1, [pc, #52]	; (8001ae0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001aac:	4a0d      	ldr	r2, [pc, #52]	; (8001ae4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001aae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ab0:	e002      	b.n	8001ab8 <LoopCopyDataInit>

08001ab2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ab2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ab4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ab6:	3304      	adds	r3, #4

08001ab8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ab8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001abc:	d3f9      	bcc.n	8001ab2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001abe:	4a0a      	ldr	r2, [pc, #40]	; (8001ae8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ac0:	4c0a      	ldr	r4, [pc, #40]	; (8001aec <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ac2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ac4:	e001      	b.n	8001aca <LoopFillZerobss>

08001ac6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ac6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ac8:	3204      	adds	r2, #4

08001aca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001acc:	d3fb      	bcc.n	8001ac6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ace:	f006 fd33 	bl	8008538 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ad2:	f7fe fdf7 	bl	80006c4 <main>
  bx  lr
 8001ad6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ad8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001adc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001ae0:	24000084 	.word	0x24000084
  ldr r2, =_sidata
 8001ae4:	0800a1a0 	.word	0x0800a1a0
  ldr r2, =_sbss
 8001ae8:	24000088 	.word	0x24000088
  ldr r4, =_ebss
 8001aec:	2400044c 	.word	0x2400044c

08001af0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001af0:	e7fe      	b.n	8001af0 <ADC3_IRQHandler>
	...

08001af4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001afa:	2003      	movs	r0, #3
 8001afc:	f000 f95c 	bl	8001db8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001b00:	f001 f91e 	bl	8002d40 <HAL_RCC_GetSysClockFreq>
 8001b04:	4602      	mov	r2, r0
 8001b06:	4b15      	ldr	r3, [pc, #84]	; (8001b5c <HAL_Init+0x68>)
 8001b08:	699b      	ldr	r3, [r3, #24]
 8001b0a:	0a1b      	lsrs	r3, r3, #8
 8001b0c:	f003 030f 	and.w	r3, r3, #15
 8001b10:	4913      	ldr	r1, [pc, #76]	; (8001b60 <HAL_Init+0x6c>)
 8001b12:	5ccb      	ldrb	r3, [r1, r3]
 8001b14:	f003 031f 	and.w	r3, r3, #31
 8001b18:	fa22 f303 	lsr.w	r3, r2, r3
 8001b1c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001b1e:	4b0f      	ldr	r3, [pc, #60]	; (8001b5c <HAL_Init+0x68>)
 8001b20:	699b      	ldr	r3, [r3, #24]
 8001b22:	f003 030f 	and.w	r3, r3, #15
 8001b26:	4a0e      	ldr	r2, [pc, #56]	; (8001b60 <HAL_Init+0x6c>)
 8001b28:	5cd3      	ldrb	r3, [r2, r3]
 8001b2a:	f003 031f 	and.w	r3, r3, #31
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	fa22 f303 	lsr.w	r3, r2, r3
 8001b34:	4a0b      	ldr	r2, [pc, #44]	; (8001b64 <HAL_Init+0x70>)
 8001b36:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001b38:	4a0b      	ldr	r2, [pc, #44]	; (8001b68 <HAL_Init+0x74>)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b3e:	2000      	movs	r0, #0
 8001b40:	f000 f814 	bl	8001b6c <HAL_InitTick>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e002      	b.n	8001b54 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001b4e:	f7ff fccf 	bl	80014f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b52:	2300      	movs	r3, #0
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3708      	adds	r7, #8
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	58024400 	.word	0x58024400
 8001b60:	08009ec8 	.word	0x08009ec8
 8001b64:	2400000c 	.word	0x2400000c
 8001b68:	24000008 	.word	0x24000008

08001b6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001b74:	4b15      	ldr	r3, [pc, #84]	; (8001bcc <HAL_InitTick+0x60>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d101      	bne.n	8001b80 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e021      	b.n	8001bc4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001b80:	4b13      	ldr	r3, [pc, #76]	; (8001bd0 <HAL_InitTick+0x64>)
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	4b11      	ldr	r3, [pc, #68]	; (8001bcc <HAL_InitTick+0x60>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	4619      	mov	r1, r3
 8001b8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b96:	4618      	mov	r0, r3
 8001b98:	f000 f941 	bl	8001e1e <HAL_SYSTICK_Config>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e00e      	b.n	8001bc4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2b0f      	cmp	r3, #15
 8001baa:	d80a      	bhi.n	8001bc2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bac:	2200      	movs	r2, #0
 8001bae:	6879      	ldr	r1, [r7, #4]
 8001bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8001bb4:	f000 f90b 	bl	8001dce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bb8:	4a06      	ldr	r2, [pc, #24]	; (8001bd4 <HAL_InitTick+0x68>)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	e000      	b.n	8001bc4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3708      	adds	r7, #8
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	24000014 	.word	0x24000014
 8001bd0:	24000008 	.word	0x24000008
 8001bd4:	24000010 	.word	0x24000010

08001bd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001bdc:	4b06      	ldr	r3, [pc, #24]	; (8001bf8 <HAL_IncTick+0x20>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	461a      	mov	r2, r3
 8001be2:	4b06      	ldr	r3, [pc, #24]	; (8001bfc <HAL_IncTick+0x24>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4413      	add	r3, r2
 8001be8:	4a04      	ldr	r2, [pc, #16]	; (8001bfc <HAL_IncTick+0x24>)
 8001bea:	6013      	str	r3, [r2, #0]
}
 8001bec:	bf00      	nop
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	24000014 	.word	0x24000014
 8001bfc:	2400038c 	.word	0x2400038c

08001c00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  return uwTick;
 8001c04:	4b03      	ldr	r3, [pc, #12]	; (8001c14 <HAL_GetTick+0x14>)
 8001c06:	681b      	ldr	r3, [r3, #0]
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	2400038c 	.word	0x2400038c

08001c18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b085      	sub	sp, #20
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f003 0307 	and.w	r3, r3, #7
 8001c26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c28:	4b0b      	ldr	r3, [pc, #44]	; (8001c58 <__NVIC_SetPriorityGrouping+0x40>)
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c2e:	68ba      	ldr	r2, [r7, #8]
 8001c30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c34:	4013      	ands	r3, r2
 8001c36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001c40:	4b06      	ldr	r3, [pc, #24]	; (8001c5c <__NVIC_SetPriorityGrouping+0x44>)
 8001c42:	4313      	orrs	r3, r2
 8001c44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c46:	4a04      	ldr	r2, [pc, #16]	; (8001c58 <__NVIC_SetPriorityGrouping+0x40>)
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	60d3      	str	r3, [r2, #12]
}
 8001c4c:	bf00      	nop
 8001c4e:	3714      	adds	r7, #20
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr
 8001c58:	e000ed00 	.word	0xe000ed00
 8001c5c:	05fa0000 	.word	0x05fa0000

08001c60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c64:	4b04      	ldr	r3, [pc, #16]	; (8001c78 <__NVIC_GetPriorityGrouping+0x18>)
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	0a1b      	lsrs	r3, r3, #8
 8001c6a:	f003 0307 	and.w	r3, r3, #7
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr
 8001c78:	e000ed00 	.word	0xe000ed00

08001c7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	4603      	mov	r3, r0
 8001c84:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001c86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	db0b      	blt.n	8001ca6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c8e:	88fb      	ldrh	r3, [r7, #6]
 8001c90:	f003 021f 	and.w	r2, r3, #31
 8001c94:	4907      	ldr	r1, [pc, #28]	; (8001cb4 <__NVIC_EnableIRQ+0x38>)
 8001c96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c9a:	095b      	lsrs	r3, r3, #5
 8001c9c:	2001      	movs	r0, #1
 8001c9e:	fa00 f202 	lsl.w	r2, r0, r2
 8001ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ca6:	bf00      	nop
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	e000e100 	.word	0xe000e100

08001cb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	6039      	str	r1, [r7, #0]
 8001cc2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001cc4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	db0a      	blt.n	8001ce2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	b2da      	uxtb	r2, r3
 8001cd0:	490c      	ldr	r1, [pc, #48]	; (8001d04 <__NVIC_SetPriority+0x4c>)
 8001cd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cd6:	0112      	lsls	r2, r2, #4
 8001cd8:	b2d2      	uxtb	r2, r2
 8001cda:	440b      	add	r3, r1
 8001cdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ce0:	e00a      	b.n	8001cf8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	b2da      	uxtb	r2, r3
 8001ce6:	4908      	ldr	r1, [pc, #32]	; (8001d08 <__NVIC_SetPriority+0x50>)
 8001ce8:	88fb      	ldrh	r3, [r7, #6]
 8001cea:	f003 030f 	and.w	r3, r3, #15
 8001cee:	3b04      	subs	r3, #4
 8001cf0:	0112      	lsls	r2, r2, #4
 8001cf2:	b2d2      	uxtb	r2, r2
 8001cf4:	440b      	add	r3, r1
 8001cf6:	761a      	strb	r2, [r3, #24]
}
 8001cf8:	bf00      	nop
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr
 8001d04:	e000e100 	.word	0xe000e100
 8001d08:	e000ed00 	.word	0xe000ed00

08001d0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b089      	sub	sp, #36	; 0x24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	60b9      	str	r1, [r7, #8]
 8001d16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f003 0307 	and.w	r3, r3, #7
 8001d1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	f1c3 0307 	rsb	r3, r3, #7
 8001d26:	2b04      	cmp	r3, #4
 8001d28:	bf28      	it	cs
 8001d2a:	2304      	movcs	r3, #4
 8001d2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	3304      	adds	r3, #4
 8001d32:	2b06      	cmp	r3, #6
 8001d34:	d902      	bls.n	8001d3c <NVIC_EncodePriority+0x30>
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	3b03      	subs	r3, #3
 8001d3a:	e000      	b.n	8001d3e <NVIC_EncodePriority+0x32>
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d40:	f04f 32ff 	mov.w	r2, #4294967295
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4a:	43da      	mvns	r2, r3
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	401a      	ands	r2, r3
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d54:	f04f 31ff 	mov.w	r1, #4294967295
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d5e:	43d9      	mvns	r1, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d64:	4313      	orrs	r3, r2
         );
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3724      	adds	r7, #36	; 0x24
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
	...

08001d74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d84:	d301      	bcc.n	8001d8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d86:	2301      	movs	r3, #1
 8001d88:	e00f      	b.n	8001daa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d8a:	4a0a      	ldr	r2, [pc, #40]	; (8001db4 <SysTick_Config+0x40>)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d92:	210f      	movs	r1, #15
 8001d94:	f04f 30ff 	mov.w	r0, #4294967295
 8001d98:	f7ff ff8e 	bl	8001cb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d9c:	4b05      	ldr	r3, [pc, #20]	; (8001db4 <SysTick_Config+0x40>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001da2:	4b04      	ldr	r3, [pc, #16]	; (8001db4 <SysTick_Config+0x40>)
 8001da4:	2207      	movs	r2, #7
 8001da6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	e000e010 	.word	0xe000e010

08001db8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f7ff ff29 	bl	8001c18 <__NVIC_SetPriorityGrouping>
}
 8001dc6:	bf00      	nop
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b086      	sub	sp, #24
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	60b9      	str	r1, [r7, #8]
 8001dd8:	607a      	str	r2, [r7, #4]
 8001dda:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ddc:	f7ff ff40 	bl	8001c60 <__NVIC_GetPriorityGrouping>
 8001de0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	68b9      	ldr	r1, [r7, #8]
 8001de6:	6978      	ldr	r0, [r7, #20]
 8001de8:	f7ff ff90 	bl	8001d0c <NVIC_EncodePriority>
 8001dec:	4602      	mov	r2, r0
 8001dee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001df2:	4611      	mov	r1, r2
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff ff5f 	bl	8001cb8 <__NVIC_SetPriority>
}
 8001dfa:	bf00      	nop
 8001dfc:	3718      	adds	r7, #24
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b082      	sub	sp, #8
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	4603      	mov	r3, r0
 8001e0a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7ff ff33 	bl	8001c7c <__NVIC_EnableIRQ>
}
 8001e16:	bf00      	nop
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b082      	sub	sp, #8
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f7ff ffa4 	bl	8001d74 <SysTick_Config>
 8001e2c:	4603      	mov	r3, r0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
	...

08001e38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b089      	sub	sp, #36	; 0x24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001e42:	2300      	movs	r3, #0
 8001e44:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001e46:	4b86      	ldr	r3, [pc, #536]	; (8002060 <HAL_GPIO_Init+0x228>)
 8001e48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001e4a:	e18c      	b.n	8002166 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	2101      	movs	r1, #1
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	fa01 f303 	lsl.w	r3, r1, r3
 8001e58:	4013      	ands	r3, r2
 8001e5a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	f000 817e 	beq.w	8002160 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f003 0303 	and.w	r3, r3, #3
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d005      	beq.n	8001e7c <HAL_GPIO_Init+0x44>
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f003 0303 	and.w	r3, r3, #3
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d130      	bne.n	8001ede <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	2203      	movs	r2, #3
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	69ba      	ldr	r2, [r7, #24]
 8001e90:	4013      	ands	r3, r2
 8001e92:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	68da      	ldr	r2, [r3, #12]
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eba:	43db      	mvns	r3, r3
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	091b      	lsrs	r3, r3, #4
 8001ec8:	f003 0201 	and.w	r2, r3, #1
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f003 0303 	and.w	r3, r3, #3
 8001ee6:	2b03      	cmp	r3, #3
 8001ee8:	d017      	beq.n	8001f1a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	005b      	lsls	r3, r3, #1
 8001ef4:	2203      	movs	r2, #3
 8001ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8001efa:	43db      	mvns	r3, r3
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	4013      	ands	r3, r2
 8001f00:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	689a      	ldr	r2, [r3, #8]
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	69ba      	ldr	r2, [r7, #24]
 8001f18:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f003 0303 	and.w	r3, r3, #3
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d123      	bne.n	8001f6e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	08da      	lsrs	r2, r3, #3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	3208      	adds	r2, #8
 8001f2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	f003 0307 	and.w	r3, r3, #7
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	220f      	movs	r2, #15
 8001f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f42:	43db      	mvns	r3, r3
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	4013      	ands	r3, r2
 8001f48:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	691a      	ldr	r2, [r3, #16]
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	f003 0307 	and.w	r3, r3, #7
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	08da      	lsrs	r2, r3, #3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	3208      	adds	r2, #8
 8001f68:	69b9      	ldr	r1, [r7, #24]
 8001f6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	2203      	movs	r2, #3
 8001f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7e:	43db      	mvns	r3, r3
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	4013      	ands	r3, r2
 8001f84:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f003 0203 	and.w	r2, r3, #3
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	fa02 f303 	lsl.w	r3, r2, r3
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	f000 80d8 	beq.w	8002160 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fb0:	4b2c      	ldr	r3, [pc, #176]	; (8002064 <HAL_GPIO_Init+0x22c>)
 8001fb2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001fb6:	4a2b      	ldr	r2, [pc, #172]	; (8002064 <HAL_GPIO_Init+0x22c>)
 8001fb8:	f043 0302 	orr.w	r3, r3, #2
 8001fbc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001fc0:	4b28      	ldr	r3, [pc, #160]	; (8002064 <HAL_GPIO_Init+0x22c>)
 8001fc2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	60fb      	str	r3, [r7, #12]
 8001fcc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fce:	4a26      	ldr	r2, [pc, #152]	; (8002068 <HAL_GPIO_Init+0x230>)
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	089b      	lsrs	r3, r3, #2
 8001fd4:	3302      	adds	r3, #2
 8001fd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	f003 0303 	and.w	r3, r3, #3
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	220f      	movs	r2, #15
 8001fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fea:	43db      	mvns	r3, r3
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	4013      	ands	r3, r2
 8001ff0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a1d      	ldr	r2, [pc, #116]	; (800206c <HAL_GPIO_Init+0x234>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d04a      	beq.n	8002090 <HAL_GPIO_Init+0x258>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a1c      	ldr	r2, [pc, #112]	; (8002070 <HAL_GPIO_Init+0x238>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d02b      	beq.n	800205a <HAL_GPIO_Init+0x222>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a1b      	ldr	r2, [pc, #108]	; (8002074 <HAL_GPIO_Init+0x23c>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d025      	beq.n	8002056 <HAL_GPIO_Init+0x21e>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a1a      	ldr	r2, [pc, #104]	; (8002078 <HAL_GPIO_Init+0x240>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d01f      	beq.n	8002052 <HAL_GPIO_Init+0x21a>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a19      	ldr	r2, [pc, #100]	; (800207c <HAL_GPIO_Init+0x244>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d019      	beq.n	800204e <HAL_GPIO_Init+0x216>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a18      	ldr	r2, [pc, #96]	; (8002080 <HAL_GPIO_Init+0x248>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d013      	beq.n	800204a <HAL_GPIO_Init+0x212>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a17      	ldr	r2, [pc, #92]	; (8002084 <HAL_GPIO_Init+0x24c>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d00d      	beq.n	8002046 <HAL_GPIO_Init+0x20e>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a16      	ldr	r2, [pc, #88]	; (8002088 <HAL_GPIO_Init+0x250>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d007      	beq.n	8002042 <HAL_GPIO_Init+0x20a>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a15      	ldr	r2, [pc, #84]	; (800208c <HAL_GPIO_Init+0x254>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d101      	bne.n	800203e <HAL_GPIO_Init+0x206>
 800203a:	2309      	movs	r3, #9
 800203c:	e029      	b.n	8002092 <HAL_GPIO_Init+0x25a>
 800203e:	230a      	movs	r3, #10
 8002040:	e027      	b.n	8002092 <HAL_GPIO_Init+0x25a>
 8002042:	2307      	movs	r3, #7
 8002044:	e025      	b.n	8002092 <HAL_GPIO_Init+0x25a>
 8002046:	2306      	movs	r3, #6
 8002048:	e023      	b.n	8002092 <HAL_GPIO_Init+0x25a>
 800204a:	2305      	movs	r3, #5
 800204c:	e021      	b.n	8002092 <HAL_GPIO_Init+0x25a>
 800204e:	2304      	movs	r3, #4
 8002050:	e01f      	b.n	8002092 <HAL_GPIO_Init+0x25a>
 8002052:	2303      	movs	r3, #3
 8002054:	e01d      	b.n	8002092 <HAL_GPIO_Init+0x25a>
 8002056:	2302      	movs	r3, #2
 8002058:	e01b      	b.n	8002092 <HAL_GPIO_Init+0x25a>
 800205a:	2301      	movs	r3, #1
 800205c:	e019      	b.n	8002092 <HAL_GPIO_Init+0x25a>
 800205e:	bf00      	nop
 8002060:	58000080 	.word	0x58000080
 8002064:	58024400 	.word	0x58024400
 8002068:	58000400 	.word	0x58000400
 800206c:	58020000 	.word	0x58020000
 8002070:	58020400 	.word	0x58020400
 8002074:	58020800 	.word	0x58020800
 8002078:	58020c00 	.word	0x58020c00
 800207c:	58021000 	.word	0x58021000
 8002080:	58021400 	.word	0x58021400
 8002084:	58021800 	.word	0x58021800
 8002088:	58021c00 	.word	0x58021c00
 800208c:	58022400 	.word	0x58022400
 8002090:	2300      	movs	r3, #0
 8002092:	69fa      	ldr	r2, [r7, #28]
 8002094:	f002 0203 	and.w	r2, r2, #3
 8002098:	0092      	lsls	r2, r2, #2
 800209a:	4093      	lsls	r3, r2
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	4313      	orrs	r3, r2
 80020a0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020a2:	4938      	ldr	r1, [pc, #224]	; (8002184 <HAL_GPIO_Init+0x34c>)
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	089b      	lsrs	r3, r3, #2
 80020a8:	3302      	adds	r3, #2
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	43db      	mvns	r3, r3
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	4013      	ands	r3, r2
 80020c0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d003      	beq.n	80020d6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80020ce:	69ba      	ldr	r2, [r7, #24]
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80020d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80020de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	43db      	mvns	r3, r3
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	4013      	ands	r3, r2
 80020ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d003      	beq.n	8002104 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	4313      	orrs	r3, r2
 8002102:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002104:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	43db      	mvns	r3, r3
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	4013      	ands	r3, r2
 800211a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d003      	beq.n	8002130 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	4313      	orrs	r3, r2
 800212e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	43db      	mvns	r3, r3
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	4013      	ands	r3, r2
 8002144:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d003      	beq.n	800215a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	4313      	orrs	r3, r2
 8002158:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	3301      	adds	r3, #1
 8002164:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	fa22 f303 	lsr.w	r3, r2, r3
 8002170:	2b00      	cmp	r3, #0
 8002172:	f47f ae6b 	bne.w	8001e4c <HAL_GPIO_Init+0x14>
  }
}
 8002176:	bf00      	nop
 8002178:	bf00      	nop
 800217a:	3724      	adds	r7, #36	; 0x24
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr
 8002184:	58000400 	.word	0x58000400

08002188 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	460b      	mov	r3, r1
 8002192:	807b      	strh	r3, [r7, #2]
 8002194:	4613      	mov	r3, r2
 8002196:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002198:	787b      	ldrb	r3, [r7, #1]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d003      	beq.n	80021a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800219e:	887a      	ldrh	r2, [r7, #2]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80021a4:	e003      	b.n	80021ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80021a6:	887b      	ldrh	r3, [r7, #2]
 80021a8:	041a      	lsls	r2, r3, #16
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	619a      	str	r2, [r3, #24]
}
 80021ae:	bf00      	nop
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr

080021ba <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b082      	sub	sp, #8
 80021be:	af00      	add	r7, sp, #0
 80021c0:	4603      	mov	r3, r0
 80021c2:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80021c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021c8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80021cc:	88fb      	ldrh	r3, [r7, #6]
 80021ce:	4013      	ands	r3, r2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d008      	beq.n	80021e6 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80021d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021d8:	88fb      	ldrh	r3, [r7, #6]
 80021da:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80021de:	88fb      	ldrh	r3, [r7, #6]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f000 f804 	bl	80021ee <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80021e6:	bf00      	nop
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}

080021ee <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80021ee:	b480      	push	{r7}
 80021f0:	b083      	sub	sp, #12
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	4603      	mov	r3, r0
 80021f6:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80021f8:	bf00      	nop
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800220c:	4b19      	ldr	r3, [pc, #100]	; (8002274 <HAL_PWREx_ConfigSupply+0x70>)
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	f003 0304 	and.w	r3, r3, #4
 8002214:	2b04      	cmp	r3, #4
 8002216:	d00a      	beq.n	800222e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002218:	4b16      	ldr	r3, [pc, #88]	; (8002274 <HAL_PWREx_ConfigSupply+0x70>)
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	f003 0307 	and.w	r3, r3, #7
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	429a      	cmp	r2, r3
 8002224:	d001      	beq.n	800222a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e01f      	b.n	800226a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800222a:	2300      	movs	r3, #0
 800222c:	e01d      	b.n	800226a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800222e:	4b11      	ldr	r3, [pc, #68]	; (8002274 <HAL_PWREx_ConfigSupply+0x70>)
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	f023 0207 	bic.w	r2, r3, #7
 8002236:	490f      	ldr	r1, [pc, #60]	; (8002274 <HAL_PWREx_ConfigSupply+0x70>)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4313      	orrs	r3, r2
 800223c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800223e:	f7ff fcdf 	bl	8001c00 <HAL_GetTick>
 8002242:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002244:	e009      	b.n	800225a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002246:	f7ff fcdb 	bl	8001c00 <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002254:	d901      	bls.n	800225a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e007      	b.n	800226a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800225a:	4b06      	ldr	r3, [pc, #24]	; (8002274 <HAL_PWREx_ConfigSupply+0x70>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002262:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002266:	d1ee      	bne.n	8002246 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3710      	adds	r7, #16
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	58024800 	.word	0x58024800

08002278 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b08c      	sub	sp, #48	; 0x30
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d101      	bne.n	800228a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e39d      	b.n	80029c6 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	2b00      	cmp	r3, #0
 8002294:	f000 8087 	beq.w	80023a6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002298:	4b88      	ldr	r3, [pc, #544]	; (80024bc <HAL_RCC_OscConfig+0x244>)
 800229a:	691b      	ldr	r3, [r3, #16]
 800229c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80022a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80022a2:	4b86      	ldr	r3, [pc, #536]	; (80024bc <HAL_RCC_OscConfig+0x244>)
 80022a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80022a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022aa:	2b10      	cmp	r3, #16
 80022ac:	d007      	beq.n	80022be <HAL_RCC_OscConfig+0x46>
 80022ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022b0:	2b18      	cmp	r3, #24
 80022b2:	d110      	bne.n	80022d6 <HAL_RCC_OscConfig+0x5e>
 80022b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022b6:	f003 0303 	and.w	r3, r3, #3
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d10b      	bne.n	80022d6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022be:	4b7f      	ldr	r3, [pc, #508]	; (80024bc <HAL_RCC_OscConfig+0x244>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d06c      	beq.n	80023a4 <HAL_RCC_OscConfig+0x12c>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d168      	bne.n	80023a4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e377      	b.n	80029c6 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022de:	d106      	bne.n	80022ee <HAL_RCC_OscConfig+0x76>
 80022e0:	4b76      	ldr	r3, [pc, #472]	; (80024bc <HAL_RCC_OscConfig+0x244>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a75      	ldr	r2, [pc, #468]	; (80024bc <HAL_RCC_OscConfig+0x244>)
 80022e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022ea:	6013      	str	r3, [r2, #0]
 80022ec:	e02e      	b.n	800234c <HAL_RCC_OscConfig+0xd4>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d10c      	bne.n	8002310 <HAL_RCC_OscConfig+0x98>
 80022f6:	4b71      	ldr	r3, [pc, #452]	; (80024bc <HAL_RCC_OscConfig+0x244>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a70      	ldr	r2, [pc, #448]	; (80024bc <HAL_RCC_OscConfig+0x244>)
 80022fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002300:	6013      	str	r3, [r2, #0]
 8002302:	4b6e      	ldr	r3, [pc, #440]	; (80024bc <HAL_RCC_OscConfig+0x244>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a6d      	ldr	r2, [pc, #436]	; (80024bc <HAL_RCC_OscConfig+0x244>)
 8002308:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800230c:	6013      	str	r3, [r2, #0]
 800230e:	e01d      	b.n	800234c <HAL_RCC_OscConfig+0xd4>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002318:	d10c      	bne.n	8002334 <HAL_RCC_OscConfig+0xbc>
 800231a:	4b68      	ldr	r3, [pc, #416]	; (80024bc <HAL_RCC_OscConfig+0x244>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a67      	ldr	r2, [pc, #412]	; (80024bc <HAL_RCC_OscConfig+0x244>)
 8002320:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002324:	6013      	str	r3, [r2, #0]
 8002326:	4b65      	ldr	r3, [pc, #404]	; (80024bc <HAL_RCC_OscConfig+0x244>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a64      	ldr	r2, [pc, #400]	; (80024bc <HAL_RCC_OscConfig+0x244>)
 800232c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002330:	6013      	str	r3, [r2, #0]
 8002332:	e00b      	b.n	800234c <HAL_RCC_OscConfig+0xd4>
 8002334:	4b61      	ldr	r3, [pc, #388]	; (80024bc <HAL_RCC_OscConfig+0x244>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a60      	ldr	r2, [pc, #384]	; (80024bc <HAL_RCC_OscConfig+0x244>)
 800233a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800233e:	6013      	str	r3, [r2, #0]
 8002340:	4b5e      	ldr	r3, [pc, #376]	; (80024bc <HAL_RCC_OscConfig+0x244>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a5d      	ldr	r2, [pc, #372]	; (80024bc <HAL_RCC_OscConfig+0x244>)
 8002346:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800234a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d013      	beq.n	800237c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002354:	f7ff fc54 	bl	8001c00 <HAL_GetTick>
 8002358:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800235a:	e008      	b.n	800236e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800235c:	f7ff fc50 	bl	8001c00 <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	2b64      	cmp	r3, #100	; 0x64
 8002368:	d901      	bls.n	800236e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e32b      	b.n	80029c6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800236e:	4b53      	ldr	r3, [pc, #332]	; (80024bc <HAL_RCC_OscConfig+0x244>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d0f0      	beq.n	800235c <HAL_RCC_OscConfig+0xe4>
 800237a:	e014      	b.n	80023a6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800237c:	f7ff fc40 	bl	8001c00 <HAL_GetTick>
 8002380:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002382:	e008      	b.n	8002396 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002384:	f7ff fc3c 	bl	8001c00 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b64      	cmp	r3, #100	; 0x64
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e317      	b.n	80029c6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002396:	4b49      	ldr	r3, [pc, #292]	; (80024bc <HAL_RCC_OscConfig+0x244>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d1f0      	bne.n	8002384 <HAL_RCC_OscConfig+0x10c>
 80023a2:	e000      	b.n	80023a6 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	f000 808c 	beq.w	80024cc <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023b4:	4b41      	ldr	r3, [pc, #260]	; (80024bc <HAL_RCC_OscConfig+0x244>)
 80023b6:	691b      	ldr	r3, [r3, #16]
 80023b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80023bc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80023be:	4b3f      	ldr	r3, [pc, #252]	; (80024bc <HAL_RCC_OscConfig+0x244>)
 80023c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80023c4:	6a3b      	ldr	r3, [r7, #32]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d007      	beq.n	80023da <HAL_RCC_OscConfig+0x162>
 80023ca:	6a3b      	ldr	r3, [r7, #32]
 80023cc:	2b18      	cmp	r3, #24
 80023ce:	d137      	bne.n	8002440 <HAL_RCC_OscConfig+0x1c8>
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	f003 0303 	and.w	r3, r3, #3
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d132      	bne.n	8002440 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023da:	4b38      	ldr	r3, [pc, #224]	; (80024bc <HAL_RCC_OscConfig+0x244>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0304 	and.w	r3, r3, #4
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d005      	beq.n	80023f2 <HAL_RCC_OscConfig+0x17a>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d101      	bne.n	80023f2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e2e9      	b.n	80029c6 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80023f2:	4b32      	ldr	r3, [pc, #200]	; (80024bc <HAL_RCC_OscConfig+0x244>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f023 0219 	bic.w	r2, r3, #25
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	492f      	ldr	r1, [pc, #188]	; (80024bc <HAL_RCC_OscConfig+0x244>)
 8002400:	4313      	orrs	r3, r2
 8002402:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002404:	f7ff fbfc 	bl	8001c00 <HAL_GetTick>
 8002408:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800240a:	e008      	b.n	800241e <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800240c:	f7ff fbf8 	bl	8001c00 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b02      	cmp	r3, #2
 8002418:	d901      	bls.n	800241e <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e2d3      	b.n	80029c6 <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800241e:	4b27      	ldr	r3, [pc, #156]	; (80024bc <HAL_RCC_OscConfig+0x244>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0304 	and.w	r3, r3, #4
 8002426:	2b00      	cmp	r3, #0
 8002428:	d0f0      	beq.n	800240c <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800242a:	4b24      	ldr	r3, [pc, #144]	; (80024bc <HAL_RCC_OscConfig+0x244>)
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	691b      	ldr	r3, [r3, #16]
 8002436:	061b      	lsls	r3, r3, #24
 8002438:	4920      	ldr	r1, [pc, #128]	; (80024bc <HAL_RCC_OscConfig+0x244>)
 800243a:	4313      	orrs	r3, r2
 800243c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800243e:	e045      	b.n	80024cc <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d026      	beq.n	8002496 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002448:	4b1c      	ldr	r3, [pc, #112]	; (80024bc <HAL_RCC_OscConfig+0x244>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f023 0219 	bic.w	r2, r3, #25
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	4919      	ldr	r1, [pc, #100]	; (80024bc <HAL_RCC_OscConfig+0x244>)
 8002456:	4313      	orrs	r3, r2
 8002458:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800245a:	f7ff fbd1 	bl	8001c00 <HAL_GetTick>
 800245e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002460:	e008      	b.n	8002474 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002462:	f7ff fbcd 	bl	8001c00 <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	2b02      	cmp	r3, #2
 800246e:	d901      	bls.n	8002474 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002470:	2303      	movs	r3, #3
 8002472:	e2a8      	b.n	80029c6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002474:	4b11      	ldr	r3, [pc, #68]	; (80024bc <HAL_RCC_OscConfig+0x244>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0304 	and.w	r3, r3, #4
 800247c:	2b00      	cmp	r3, #0
 800247e:	d0f0      	beq.n	8002462 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002480:	4b0e      	ldr	r3, [pc, #56]	; (80024bc <HAL_RCC_OscConfig+0x244>)
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	691b      	ldr	r3, [r3, #16]
 800248c:	061b      	lsls	r3, r3, #24
 800248e:	490b      	ldr	r1, [pc, #44]	; (80024bc <HAL_RCC_OscConfig+0x244>)
 8002490:	4313      	orrs	r3, r2
 8002492:	604b      	str	r3, [r1, #4]
 8002494:	e01a      	b.n	80024cc <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002496:	4b09      	ldr	r3, [pc, #36]	; (80024bc <HAL_RCC_OscConfig+0x244>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a08      	ldr	r2, [pc, #32]	; (80024bc <HAL_RCC_OscConfig+0x244>)
 800249c:	f023 0301 	bic.w	r3, r3, #1
 80024a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a2:	f7ff fbad 	bl	8001c00 <HAL_GetTick>
 80024a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80024a8:	e00a      	b.n	80024c0 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024aa:	f7ff fba9 	bl	8001c00 <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d903      	bls.n	80024c0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e284      	b.n	80029c6 <HAL_RCC_OscConfig+0x74e>
 80024bc:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80024c0:	4b96      	ldr	r3, [pc, #600]	; (800271c <HAL_RCC_OscConfig+0x4a4>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0304 	and.w	r3, r3, #4
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d1ee      	bne.n	80024aa <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0310 	and.w	r3, r3, #16
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d06a      	beq.n	80025ae <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024d8:	4b90      	ldr	r3, [pc, #576]	; (800271c <HAL_RCC_OscConfig+0x4a4>)
 80024da:	691b      	ldr	r3, [r3, #16]
 80024dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80024e0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80024e2:	4b8e      	ldr	r3, [pc, #568]	; (800271c <HAL_RCC_OscConfig+0x4a4>)
 80024e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e6:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	2b08      	cmp	r3, #8
 80024ec:	d007      	beq.n	80024fe <HAL_RCC_OscConfig+0x286>
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	2b18      	cmp	r3, #24
 80024f2:	d11b      	bne.n	800252c <HAL_RCC_OscConfig+0x2b4>
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	f003 0303 	and.w	r3, r3, #3
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d116      	bne.n	800252c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80024fe:	4b87      	ldr	r3, [pc, #540]	; (800271c <HAL_RCC_OscConfig+0x4a4>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002506:	2b00      	cmp	r3, #0
 8002508:	d005      	beq.n	8002516 <HAL_RCC_OscConfig+0x29e>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	69db      	ldr	r3, [r3, #28]
 800250e:	2b80      	cmp	r3, #128	; 0x80
 8002510:	d001      	beq.n	8002516 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e257      	b.n	80029c6 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002516:	4b81      	ldr	r3, [pc, #516]	; (800271c <HAL_RCC_OscConfig+0x4a4>)
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a1b      	ldr	r3, [r3, #32]
 8002522:	061b      	lsls	r3, r3, #24
 8002524:	497d      	ldr	r1, [pc, #500]	; (800271c <HAL_RCC_OscConfig+0x4a4>)
 8002526:	4313      	orrs	r3, r2
 8002528:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800252a:	e040      	b.n	80025ae <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	69db      	ldr	r3, [r3, #28]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d023      	beq.n	800257c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002534:	4b79      	ldr	r3, [pc, #484]	; (800271c <HAL_RCC_OscConfig+0x4a4>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a78      	ldr	r2, [pc, #480]	; (800271c <HAL_RCC_OscConfig+0x4a4>)
 800253a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800253e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002540:	f7ff fb5e 	bl	8001c00 <HAL_GetTick>
 8002544:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002546:	e008      	b.n	800255a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002548:	f7ff fb5a 	bl	8001c00 <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	2b02      	cmp	r3, #2
 8002554:	d901      	bls.n	800255a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e235      	b.n	80029c6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800255a:	4b70      	ldr	r3, [pc, #448]	; (800271c <HAL_RCC_OscConfig+0x4a4>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002562:	2b00      	cmp	r3, #0
 8002564:	d0f0      	beq.n	8002548 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002566:	4b6d      	ldr	r3, [pc, #436]	; (800271c <HAL_RCC_OscConfig+0x4a4>)
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a1b      	ldr	r3, [r3, #32]
 8002572:	061b      	lsls	r3, r3, #24
 8002574:	4969      	ldr	r1, [pc, #420]	; (800271c <HAL_RCC_OscConfig+0x4a4>)
 8002576:	4313      	orrs	r3, r2
 8002578:	60cb      	str	r3, [r1, #12]
 800257a:	e018      	b.n	80025ae <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800257c:	4b67      	ldr	r3, [pc, #412]	; (800271c <HAL_RCC_OscConfig+0x4a4>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a66      	ldr	r2, [pc, #408]	; (800271c <HAL_RCC_OscConfig+0x4a4>)
 8002582:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002586:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002588:	f7ff fb3a 	bl	8001c00 <HAL_GetTick>
 800258c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800258e:	e008      	b.n	80025a2 <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002590:	f7ff fb36 	bl	8001c00 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b02      	cmp	r3, #2
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e211      	b.n	80029c6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80025a2:	4b5e      	ldr	r3, [pc, #376]	; (800271c <HAL_RCC_OscConfig+0x4a4>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d1f0      	bne.n	8002590 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0308 	and.w	r3, r3, #8
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d036      	beq.n	8002628 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	695b      	ldr	r3, [r3, #20]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d019      	beq.n	80025f6 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025c2:	4b56      	ldr	r3, [pc, #344]	; (800271c <HAL_RCC_OscConfig+0x4a4>)
 80025c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025c6:	4a55      	ldr	r2, [pc, #340]	; (800271c <HAL_RCC_OscConfig+0x4a4>)
 80025c8:	f043 0301 	orr.w	r3, r3, #1
 80025cc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ce:	f7ff fb17 	bl	8001c00 <HAL_GetTick>
 80025d2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80025d4:	e008      	b.n	80025e8 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025d6:	f7ff fb13 	bl	8001c00 <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d901      	bls.n	80025e8 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80025e4:	2303      	movs	r3, #3
 80025e6:	e1ee      	b.n	80029c6 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80025e8:	4b4c      	ldr	r3, [pc, #304]	; (800271c <HAL_RCC_OscConfig+0x4a4>)
 80025ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025ec:	f003 0302 	and.w	r3, r3, #2
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d0f0      	beq.n	80025d6 <HAL_RCC_OscConfig+0x35e>
 80025f4:	e018      	b.n	8002628 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025f6:	4b49      	ldr	r3, [pc, #292]	; (800271c <HAL_RCC_OscConfig+0x4a4>)
 80025f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025fa:	4a48      	ldr	r2, [pc, #288]	; (800271c <HAL_RCC_OscConfig+0x4a4>)
 80025fc:	f023 0301 	bic.w	r3, r3, #1
 8002600:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002602:	f7ff fafd 	bl	8001c00 <HAL_GetTick>
 8002606:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002608:	e008      	b.n	800261c <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800260a:	f7ff faf9 	bl	8001c00 <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	2b02      	cmp	r3, #2
 8002616:	d901      	bls.n	800261c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e1d4      	b.n	80029c6 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800261c:	4b3f      	ldr	r3, [pc, #252]	; (800271c <HAL_RCC_OscConfig+0x4a4>)
 800261e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002620:	f003 0302 	and.w	r3, r3, #2
 8002624:	2b00      	cmp	r3, #0
 8002626:	d1f0      	bne.n	800260a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0320 	and.w	r3, r3, #32
 8002630:	2b00      	cmp	r3, #0
 8002632:	d036      	beq.n	80026a2 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	699b      	ldr	r3, [r3, #24]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d019      	beq.n	8002670 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800263c:	4b37      	ldr	r3, [pc, #220]	; (800271c <HAL_RCC_OscConfig+0x4a4>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a36      	ldr	r2, [pc, #216]	; (800271c <HAL_RCC_OscConfig+0x4a4>)
 8002642:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002646:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002648:	f7ff fada 	bl	8001c00 <HAL_GetTick>
 800264c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800264e:	e008      	b.n	8002662 <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002650:	f7ff fad6 	bl	8001c00 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b02      	cmp	r3, #2
 800265c:	d901      	bls.n	8002662 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e1b1      	b.n	80029c6 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002662:	4b2e      	ldr	r3, [pc, #184]	; (800271c <HAL_RCC_OscConfig+0x4a4>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d0f0      	beq.n	8002650 <HAL_RCC_OscConfig+0x3d8>
 800266e:	e018      	b.n	80026a2 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002670:	4b2a      	ldr	r3, [pc, #168]	; (800271c <HAL_RCC_OscConfig+0x4a4>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a29      	ldr	r2, [pc, #164]	; (800271c <HAL_RCC_OscConfig+0x4a4>)
 8002676:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800267a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800267c:	f7ff fac0 	bl	8001c00 <HAL_GetTick>
 8002680:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002682:	e008      	b.n	8002696 <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002684:	f7ff fabc 	bl	8001c00 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b02      	cmp	r3, #2
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e197      	b.n	80029c6 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002696:	4b21      	ldr	r3, [pc, #132]	; (800271c <HAL_RCC_OscConfig+0x4a4>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d1f0      	bne.n	8002684 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0304 	and.w	r3, r3, #4
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	f000 8086 	beq.w	80027bc <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80026b0:	4b1b      	ldr	r3, [pc, #108]	; (8002720 <HAL_RCC_OscConfig+0x4a8>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a1a      	ldr	r2, [pc, #104]	; (8002720 <HAL_RCC_OscConfig+0x4a8>)
 80026b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026ba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80026bc:	f7ff faa0 	bl	8001c00 <HAL_GetTick>
 80026c0:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80026c2:	e008      	b.n	80026d6 <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80026c4:	f7ff fa9c 	bl	8001c00 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	2b64      	cmp	r3, #100	; 0x64
 80026d0:	d901      	bls.n	80026d6 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e177      	b.n	80029c6 <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80026d6:	4b12      	ldr	r3, [pc, #72]	; (8002720 <HAL_RCC_OscConfig+0x4a8>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d0f0      	beq.n	80026c4 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d106      	bne.n	80026f8 <HAL_RCC_OscConfig+0x480>
 80026ea:	4b0c      	ldr	r3, [pc, #48]	; (800271c <HAL_RCC_OscConfig+0x4a4>)
 80026ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ee:	4a0b      	ldr	r2, [pc, #44]	; (800271c <HAL_RCC_OscConfig+0x4a4>)
 80026f0:	f043 0301 	orr.w	r3, r3, #1
 80026f4:	6713      	str	r3, [r2, #112]	; 0x70
 80026f6:	e032      	b.n	800275e <HAL_RCC_OscConfig+0x4e6>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d111      	bne.n	8002724 <HAL_RCC_OscConfig+0x4ac>
 8002700:	4b06      	ldr	r3, [pc, #24]	; (800271c <HAL_RCC_OscConfig+0x4a4>)
 8002702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002704:	4a05      	ldr	r2, [pc, #20]	; (800271c <HAL_RCC_OscConfig+0x4a4>)
 8002706:	f023 0301 	bic.w	r3, r3, #1
 800270a:	6713      	str	r3, [r2, #112]	; 0x70
 800270c:	4b03      	ldr	r3, [pc, #12]	; (800271c <HAL_RCC_OscConfig+0x4a4>)
 800270e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002710:	4a02      	ldr	r2, [pc, #8]	; (800271c <HAL_RCC_OscConfig+0x4a4>)
 8002712:	f023 0304 	bic.w	r3, r3, #4
 8002716:	6713      	str	r3, [r2, #112]	; 0x70
 8002718:	e021      	b.n	800275e <HAL_RCC_OscConfig+0x4e6>
 800271a:	bf00      	nop
 800271c:	58024400 	.word	0x58024400
 8002720:	58024800 	.word	0x58024800
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	2b05      	cmp	r3, #5
 800272a:	d10c      	bne.n	8002746 <HAL_RCC_OscConfig+0x4ce>
 800272c:	4b83      	ldr	r3, [pc, #524]	; (800293c <HAL_RCC_OscConfig+0x6c4>)
 800272e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002730:	4a82      	ldr	r2, [pc, #520]	; (800293c <HAL_RCC_OscConfig+0x6c4>)
 8002732:	f043 0304 	orr.w	r3, r3, #4
 8002736:	6713      	str	r3, [r2, #112]	; 0x70
 8002738:	4b80      	ldr	r3, [pc, #512]	; (800293c <HAL_RCC_OscConfig+0x6c4>)
 800273a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800273c:	4a7f      	ldr	r2, [pc, #508]	; (800293c <HAL_RCC_OscConfig+0x6c4>)
 800273e:	f043 0301 	orr.w	r3, r3, #1
 8002742:	6713      	str	r3, [r2, #112]	; 0x70
 8002744:	e00b      	b.n	800275e <HAL_RCC_OscConfig+0x4e6>
 8002746:	4b7d      	ldr	r3, [pc, #500]	; (800293c <HAL_RCC_OscConfig+0x6c4>)
 8002748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800274a:	4a7c      	ldr	r2, [pc, #496]	; (800293c <HAL_RCC_OscConfig+0x6c4>)
 800274c:	f023 0301 	bic.w	r3, r3, #1
 8002750:	6713      	str	r3, [r2, #112]	; 0x70
 8002752:	4b7a      	ldr	r3, [pc, #488]	; (800293c <HAL_RCC_OscConfig+0x6c4>)
 8002754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002756:	4a79      	ldr	r2, [pc, #484]	; (800293c <HAL_RCC_OscConfig+0x6c4>)
 8002758:	f023 0304 	bic.w	r3, r3, #4
 800275c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d015      	beq.n	8002792 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002766:	f7ff fa4b 	bl	8001c00 <HAL_GetTick>
 800276a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800276c:	e00a      	b.n	8002784 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800276e:	f7ff fa47 	bl	8001c00 <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	f241 3288 	movw	r2, #5000	; 0x1388
 800277c:	4293      	cmp	r3, r2
 800277e:	d901      	bls.n	8002784 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e120      	b.n	80029c6 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002784:	4b6d      	ldr	r3, [pc, #436]	; (800293c <HAL_RCC_OscConfig+0x6c4>)
 8002786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002788:	f003 0302 	and.w	r3, r3, #2
 800278c:	2b00      	cmp	r3, #0
 800278e:	d0ee      	beq.n	800276e <HAL_RCC_OscConfig+0x4f6>
 8002790:	e014      	b.n	80027bc <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002792:	f7ff fa35 	bl	8001c00 <HAL_GetTick>
 8002796:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002798:	e00a      	b.n	80027b0 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800279a:	f7ff fa31 	bl	8001c00 <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d901      	bls.n	80027b0 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e10a      	b.n	80029c6 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80027b0:	4b62      	ldr	r3, [pc, #392]	; (800293c <HAL_RCC_OscConfig+0x6c4>)
 80027b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b4:	f003 0302 	and.w	r3, r3, #2
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d1ee      	bne.n	800279a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	f000 80ff 	beq.w	80029c4 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80027c6:	4b5d      	ldr	r3, [pc, #372]	; (800293c <HAL_RCC_OscConfig+0x6c4>)
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027ce:	2b18      	cmp	r3, #24
 80027d0:	f000 80ba 	beq.w	8002948 <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d8:	2b02      	cmp	r3, #2
 80027da:	f040 8095 	bne.w	8002908 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027de:	4b57      	ldr	r3, [pc, #348]	; (800293c <HAL_RCC_OscConfig+0x6c4>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a56      	ldr	r2, [pc, #344]	; (800293c <HAL_RCC_OscConfig+0x6c4>)
 80027e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ea:	f7ff fa09 	bl	8001c00 <HAL_GetTick>
 80027ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80027f0:	e008      	b.n	8002804 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027f2:	f7ff fa05 	bl	8001c00 <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d901      	bls.n	8002804 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	e0e0      	b.n	80029c6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002804:	4b4d      	ldr	r3, [pc, #308]	; (800293c <HAL_RCC_OscConfig+0x6c4>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d1f0      	bne.n	80027f2 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002810:	4b4a      	ldr	r3, [pc, #296]	; (800293c <HAL_RCC_OscConfig+0x6c4>)
 8002812:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002814:	4b4a      	ldr	r3, [pc, #296]	; (8002940 <HAL_RCC_OscConfig+0x6c8>)
 8002816:	4013      	ands	r3, r2
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002820:	0112      	lsls	r2, r2, #4
 8002822:	430a      	orrs	r2, r1
 8002824:	4945      	ldr	r1, [pc, #276]	; (800293c <HAL_RCC_OscConfig+0x6c4>)
 8002826:	4313      	orrs	r3, r2
 8002828:	628b      	str	r3, [r1, #40]	; 0x28
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282e:	3b01      	subs	r3, #1
 8002830:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002838:	3b01      	subs	r3, #1
 800283a:	025b      	lsls	r3, r3, #9
 800283c:	b29b      	uxth	r3, r3
 800283e:	431a      	orrs	r2, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002844:	3b01      	subs	r3, #1
 8002846:	041b      	lsls	r3, r3, #16
 8002848:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800284c:	431a      	orrs	r2, r3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002852:	3b01      	subs	r3, #1
 8002854:	061b      	lsls	r3, r3, #24
 8002856:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800285a:	4938      	ldr	r1, [pc, #224]	; (800293c <HAL_RCC_OscConfig+0x6c4>)
 800285c:	4313      	orrs	r3, r2
 800285e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002860:	4b36      	ldr	r3, [pc, #216]	; (800293c <HAL_RCC_OscConfig+0x6c4>)
 8002862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002864:	4a35      	ldr	r2, [pc, #212]	; (800293c <HAL_RCC_OscConfig+0x6c4>)
 8002866:	f023 0301 	bic.w	r3, r3, #1
 800286a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800286c:	4b33      	ldr	r3, [pc, #204]	; (800293c <HAL_RCC_OscConfig+0x6c4>)
 800286e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002870:	4b34      	ldr	r3, [pc, #208]	; (8002944 <HAL_RCC_OscConfig+0x6cc>)
 8002872:	4013      	ands	r3, r2
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002878:	00d2      	lsls	r2, r2, #3
 800287a:	4930      	ldr	r1, [pc, #192]	; (800293c <HAL_RCC_OscConfig+0x6c4>)
 800287c:	4313      	orrs	r3, r2
 800287e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002880:	4b2e      	ldr	r3, [pc, #184]	; (800293c <HAL_RCC_OscConfig+0x6c4>)
 8002882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002884:	f023 020c 	bic.w	r2, r3, #12
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288c:	492b      	ldr	r1, [pc, #172]	; (800293c <HAL_RCC_OscConfig+0x6c4>)
 800288e:	4313      	orrs	r3, r2
 8002890:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002892:	4b2a      	ldr	r3, [pc, #168]	; (800293c <HAL_RCC_OscConfig+0x6c4>)
 8002894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002896:	f023 0202 	bic.w	r2, r3, #2
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800289e:	4927      	ldr	r1, [pc, #156]	; (800293c <HAL_RCC_OscConfig+0x6c4>)
 80028a0:	4313      	orrs	r3, r2
 80028a2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80028a4:	4b25      	ldr	r3, [pc, #148]	; (800293c <HAL_RCC_OscConfig+0x6c4>)
 80028a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a8:	4a24      	ldr	r2, [pc, #144]	; (800293c <HAL_RCC_OscConfig+0x6c4>)
 80028aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028b0:	4b22      	ldr	r3, [pc, #136]	; (800293c <HAL_RCC_OscConfig+0x6c4>)
 80028b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b4:	4a21      	ldr	r2, [pc, #132]	; (800293c <HAL_RCC_OscConfig+0x6c4>)
 80028b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80028bc:	4b1f      	ldr	r3, [pc, #124]	; (800293c <HAL_RCC_OscConfig+0x6c4>)
 80028be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c0:	4a1e      	ldr	r2, [pc, #120]	; (800293c <HAL_RCC_OscConfig+0x6c4>)
 80028c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80028c8:	4b1c      	ldr	r3, [pc, #112]	; (800293c <HAL_RCC_OscConfig+0x6c4>)
 80028ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028cc:	4a1b      	ldr	r2, [pc, #108]	; (800293c <HAL_RCC_OscConfig+0x6c4>)
 80028ce:	f043 0301 	orr.w	r3, r3, #1
 80028d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028d4:	4b19      	ldr	r3, [pc, #100]	; (800293c <HAL_RCC_OscConfig+0x6c4>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a18      	ldr	r2, [pc, #96]	; (800293c <HAL_RCC_OscConfig+0x6c4>)
 80028da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e0:	f7ff f98e 	bl	8001c00 <HAL_GetTick>
 80028e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80028e6:	e008      	b.n	80028fa <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028e8:	f7ff f98a 	bl	8001c00 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e065      	b.n	80029c6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80028fa:	4b10      	ldr	r3, [pc, #64]	; (800293c <HAL_RCC_OscConfig+0x6c4>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d0f0      	beq.n	80028e8 <HAL_RCC_OscConfig+0x670>
 8002906:	e05d      	b.n	80029c4 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002908:	4b0c      	ldr	r3, [pc, #48]	; (800293c <HAL_RCC_OscConfig+0x6c4>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a0b      	ldr	r2, [pc, #44]	; (800293c <HAL_RCC_OscConfig+0x6c4>)
 800290e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002912:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002914:	f7ff f974 	bl	8001c00 <HAL_GetTick>
 8002918:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800291a:	e008      	b.n	800292e <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800291c:	f7ff f970 	bl	8001c00 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b02      	cmp	r3, #2
 8002928:	d901      	bls.n	800292e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e04b      	b.n	80029c6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800292e:	4b03      	ldr	r3, [pc, #12]	; (800293c <HAL_RCC_OscConfig+0x6c4>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d1f0      	bne.n	800291c <HAL_RCC_OscConfig+0x6a4>
 800293a:	e043      	b.n	80029c4 <HAL_RCC_OscConfig+0x74c>
 800293c:	58024400 	.word	0x58024400
 8002940:	fffffc0c 	.word	0xfffffc0c
 8002944:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002948:	4b21      	ldr	r3, [pc, #132]	; (80029d0 <HAL_RCC_OscConfig+0x758>)
 800294a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800294c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800294e:	4b20      	ldr	r3, [pc, #128]	; (80029d0 <HAL_RCC_OscConfig+0x758>)
 8002950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002952:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002958:	2b01      	cmp	r3, #1
 800295a:	d031      	beq.n	80029c0 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	f003 0203 	and.w	r2, r3, #3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002966:	429a      	cmp	r2, r3
 8002968:	d12a      	bne.n	80029c0 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	091b      	lsrs	r3, r3, #4
 800296e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002976:	429a      	cmp	r2, r3
 8002978:	d122      	bne.n	80029c0 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002984:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002986:	429a      	cmp	r2, r3
 8002988:	d11a      	bne.n	80029c0 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	0a5b      	lsrs	r3, r3, #9
 800298e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002996:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002998:	429a      	cmp	r2, r3
 800299a:	d111      	bne.n	80029c0 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	0c1b      	lsrs	r3, r3, #16
 80029a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d108      	bne.n	80029c0 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	0e1b      	lsrs	r3, r3, #24
 80029b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ba:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80029bc:	429a      	cmp	r2, r3
 80029be:	d001      	beq.n	80029c4 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e000      	b.n	80029c6 <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3730      	adds	r7, #48	; 0x30
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	58024400 	.word	0x58024400

080029d4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b086      	sub	sp, #24
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d101      	bne.n	80029e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e19c      	b.n	8002d22 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029e8:	4b8a      	ldr	r3, [pc, #552]	; (8002c14 <HAL_RCC_ClockConfig+0x240>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 030f 	and.w	r3, r3, #15
 80029f0:	683a      	ldr	r2, [r7, #0]
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d910      	bls.n	8002a18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029f6:	4b87      	ldr	r3, [pc, #540]	; (8002c14 <HAL_RCC_ClockConfig+0x240>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f023 020f 	bic.w	r2, r3, #15
 80029fe:	4985      	ldr	r1, [pc, #532]	; (8002c14 <HAL_RCC_ClockConfig+0x240>)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a06:	4b83      	ldr	r3, [pc, #524]	; (8002c14 <HAL_RCC_ClockConfig+0x240>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 030f 	and.w	r3, r3, #15
 8002a0e:	683a      	ldr	r2, [r7, #0]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d001      	beq.n	8002a18 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e184      	b.n	8002d22 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0304 	and.w	r3, r3, #4
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d010      	beq.n	8002a46 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	691a      	ldr	r2, [r3, #16]
 8002a28:	4b7b      	ldr	r3, [pc, #492]	; (8002c18 <HAL_RCC_ClockConfig+0x244>)
 8002a2a:	699b      	ldr	r3, [r3, #24]
 8002a2c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d908      	bls.n	8002a46 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002a34:	4b78      	ldr	r3, [pc, #480]	; (8002c18 <HAL_RCC_ClockConfig+0x244>)
 8002a36:	699b      	ldr	r3, [r3, #24]
 8002a38:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	691b      	ldr	r3, [r3, #16]
 8002a40:	4975      	ldr	r1, [pc, #468]	; (8002c18 <HAL_RCC_ClockConfig+0x244>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0308 	and.w	r3, r3, #8
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d010      	beq.n	8002a74 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	695a      	ldr	r2, [r3, #20]
 8002a56:	4b70      	ldr	r3, [pc, #448]	; (8002c18 <HAL_RCC_ClockConfig+0x244>)
 8002a58:	69db      	ldr	r3, [r3, #28]
 8002a5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d908      	bls.n	8002a74 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002a62:	4b6d      	ldr	r3, [pc, #436]	; (8002c18 <HAL_RCC_ClockConfig+0x244>)
 8002a64:	69db      	ldr	r3, [r3, #28]
 8002a66:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	695b      	ldr	r3, [r3, #20]
 8002a6e:	496a      	ldr	r1, [pc, #424]	; (8002c18 <HAL_RCC_ClockConfig+0x244>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0310 	and.w	r3, r3, #16
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d010      	beq.n	8002aa2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	699a      	ldr	r2, [r3, #24]
 8002a84:	4b64      	ldr	r3, [pc, #400]	; (8002c18 <HAL_RCC_ClockConfig+0x244>)
 8002a86:	69db      	ldr	r3, [r3, #28]
 8002a88:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d908      	bls.n	8002aa2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002a90:	4b61      	ldr	r3, [pc, #388]	; (8002c18 <HAL_RCC_ClockConfig+0x244>)
 8002a92:	69db      	ldr	r3, [r3, #28]
 8002a94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	699b      	ldr	r3, [r3, #24]
 8002a9c:	495e      	ldr	r1, [pc, #376]	; (8002c18 <HAL_RCC_ClockConfig+0x244>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0320 	and.w	r3, r3, #32
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d010      	beq.n	8002ad0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	69da      	ldr	r2, [r3, #28]
 8002ab2:	4b59      	ldr	r3, [pc, #356]	; (8002c18 <HAL_RCC_ClockConfig+0x244>)
 8002ab4:	6a1b      	ldr	r3, [r3, #32]
 8002ab6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d908      	bls.n	8002ad0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002abe:	4b56      	ldr	r3, [pc, #344]	; (8002c18 <HAL_RCC_ClockConfig+0x244>)
 8002ac0:	6a1b      	ldr	r3, [r3, #32]
 8002ac2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	69db      	ldr	r3, [r3, #28]
 8002aca:	4953      	ldr	r1, [pc, #332]	; (8002c18 <HAL_RCC_ClockConfig+0x244>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0302 	and.w	r3, r3, #2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d010      	beq.n	8002afe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	68da      	ldr	r2, [r3, #12]
 8002ae0:	4b4d      	ldr	r3, [pc, #308]	; (8002c18 <HAL_RCC_ClockConfig+0x244>)
 8002ae2:	699b      	ldr	r3, [r3, #24]
 8002ae4:	f003 030f 	and.w	r3, r3, #15
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d908      	bls.n	8002afe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002aec:	4b4a      	ldr	r3, [pc, #296]	; (8002c18 <HAL_RCC_ClockConfig+0x244>)
 8002aee:	699b      	ldr	r3, [r3, #24]
 8002af0:	f023 020f 	bic.w	r2, r3, #15
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	4947      	ldr	r1, [pc, #284]	; (8002c18 <HAL_RCC_ClockConfig+0x244>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0301 	and.w	r3, r3, #1
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d055      	beq.n	8002bb6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002b0a:	4b43      	ldr	r3, [pc, #268]	; (8002c18 <HAL_RCC_ClockConfig+0x244>)
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	4940      	ldr	r1, [pc, #256]	; (8002c18 <HAL_RCC_ClockConfig+0x244>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d107      	bne.n	8002b34 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b24:	4b3c      	ldr	r3, [pc, #240]	; (8002c18 <HAL_RCC_ClockConfig+0x244>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d121      	bne.n	8002b74 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e0f6      	b.n	8002d22 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	2b03      	cmp	r3, #3
 8002b3a:	d107      	bne.n	8002b4c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b3c:	4b36      	ldr	r3, [pc, #216]	; (8002c18 <HAL_RCC_ClockConfig+0x244>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d115      	bne.n	8002b74 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e0ea      	b.n	8002d22 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d107      	bne.n	8002b64 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002b54:	4b30      	ldr	r3, [pc, #192]	; (8002c18 <HAL_RCC_ClockConfig+0x244>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d109      	bne.n	8002b74 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e0de      	b.n	8002d22 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b64:	4b2c      	ldr	r3, [pc, #176]	; (8002c18 <HAL_RCC_ClockConfig+0x244>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0304 	and.w	r3, r3, #4
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d101      	bne.n	8002b74 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e0d6      	b.n	8002d22 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b74:	4b28      	ldr	r3, [pc, #160]	; (8002c18 <HAL_RCC_ClockConfig+0x244>)
 8002b76:	691b      	ldr	r3, [r3, #16]
 8002b78:	f023 0207 	bic.w	r2, r3, #7
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	4925      	ldr	r1, [pc, #148]	; (8002c18 <HAL_RCC_ClockConfig+0x244>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b86:	f7ff f83b 	bl	8001c00 <HAL_GetTick>
 8002b8a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b8c:	e00a      	b.n	8002ba4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b8e:	f7ff f837 	bl	8001c00 <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d901      	bls.n	8002ba4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e0be      	b.n	8002d22 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ba4:	4b1c      	ldr	r3, [pc, #112]	; (8002c18 <HAL_RCC_ClockConfig+0x244>)
 8002ba6:	691b      	ldr	r3, [r3, #16]
 8002ba8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	00db      	lsls	r3, r3, #3
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d1eb      	bne.n	8002b8e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d010      	beq.n	8002be4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	68da      	ldr	r2, [r3, #12]
 8002bc6:	4b14      	ldr	r3, [pc, #80]	; (8002c18 <HAL_RCC_ClockConfig+0x244>)
 8002bc8:	699b      	ldr	r3, [r3, #24]
 8002bca:	f003 030f 	and.w	r3, r3, #15
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d208      	bcs.n	8002be4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bd2:	4b11      	ldr	r3, [pc, #68]	; (8002c18 <HAL_RCC_ClockConfig+0x244>)
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	f023 020f 	bic.w	r2, r3, #15
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	490e      	ldr	r1, [pc, #56]	; (8002c18 <HAL_RCC_ClockConfig+0x244>)
 8002be0:	4313      	orrs	r3, r2
 8002be2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002be4:	4b0b      	ldr	r3, [pc, #44]	; (8002c14 <HAL_RCC_ClockConfig+0x240>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 030f 	and.w	r3, r3, #15
 8002bec:	683a      	ldr	r2, [r7, #0]
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d214      	bcs.n	8002c1c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bf2:	4b08      	ldr	r3, [pc, #32]	; (8002c14 <HAL_RCC_ClockConfig+0x240>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f023 020f 	bic.w	r2, r3, #15
 8002bfa:	4906      	ldr	r1, [pc, #24]	; (8002c14 <HAL_RCC_ClockConfig+0x240>)
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c02:	4b04      	ldr	r3, [pc, #16]	; (8002c14 <HAL_RCC_ClockConfig+0x240>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 030f 	and.w	r3, r3, #15
 8002c0a:	683a      	ldr	r2, [r7, #0]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d005      	beq.n	8002c1c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e086      	b.n	8002d22 <HAL_RCC_ClockConfig+0x34e>
 8002c14:	52002000 	.word	0x52002000
 8002c18:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0304 	and.w	r3, r3, #4
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d010      	beq.n	8002c4a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	691a      	ldr	r2, [r3, #16]
 8002c2c:	4b3f      	ldr	r3, [pc, #252]	; (8002d2c <HAL_RCC_ClockConfig+0x358>)
 8002c2e:	699b      	ldr	r3, [r3, #24]
 8002c30:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d208      	bcs.n	8002c4a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002c38:	4b3c      	ldr	r3, [pc, #240]	; (8002d2c <HAL_RCC_ClockConfig+0x358>)
 8002c3a:	699b      	ldr	r3, [r3, #24]
 8002c3c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	691b      	ldr	r3, [r3, #16]
 8002c44:	4939      	ldr	r1, [pc, #228]	; (8002d2c <HAL_RCC_ClockConfig+0x358>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0308 	and.w	r3, r3, #8
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d010      	beq.n	8002c78 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	695a      	ldr	r2, [r3, #20]
 8002c5a:	4b34      	ldr	r3, [pc, #208]	; (8002d2c <HAL_RCC_ClockConfig+0x358>)
 8002c5c:	69db      	ldr	r3, [r3, #28]
 8002c5e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d208      	bcs.n	8002c78 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002c66:	4b31      	ldr	r3, [pc, #196]	; (8002d2c <HAL_RCC_ClockConfig+0x358>)
 8002c68:	69db      	ldr	r3, [r3, #28]
 8002c6a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	695b      	ldr	r3, [r3, #20]
 8002c72:	492e      	ldr	r1, [pc, #184]	; (8002d2c <HAL_RCC_ClockConfig+0x358>)
 8002c74:	4313      	orrs	r3, r2
 8002c76:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0310 	and.w	r3, r3, #16
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d010      	beq.n	8002ca6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	699a      	ldr	r2, [r3, #24]
 8002c88:	4b28      	ldr	r3, [pc, #160]	; (8002d2c <HAL_RCC_ClockConfig+0x358>)
 8002c8a:	69db      	ldr	r3, [r3, #28]
 8002c8c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d208      	bcs.n	8002ca6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002c94:	4b25      	ldr	r3, [pc, #148]	; (8002d2c <HAL_RCC_ClockConfig+0x358>)
 8002c96:	69db      	ldr	r3, [r3, #28]
 8002c98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	699b      	ldr	r3, [r3, #24]
 8002ca0:	4922      	ldr	r1, [pc, #136]	; (8002d2c <HAL_RCC_ClockConfig+0x358>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0320 	and.w	r3, r3, #32
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d010      	beq.n	8002cd4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	69da      	ldr	r2, [r3, #28]
 8002cb6:	4b1d      	ldr	r3, [pc, #116]	; (8002d2c <HAL_RCC_ClockConfig+0x358>)
 8002cb8:	6a1b      	ldr	r3, [r3, #32]
 8002cba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d208      	bcs.n	8002cd4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002cc2:	4b1a      	ldr	r3, [pc, #104]	; (8002d2c <HAL_RCC_ClockConfig+0x358>)
 8002cc4:	6a1b      	ldr	r3, [r3, #32]
 8002cc6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	69db      	ldr	r3, [r3, #28]
 8002cce:	4917      	ldr	r1, [pc, #92]	; (8002d2c <HAL_RCC_ClockConfig+0x358>)
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002cd4:	f000 f834 	bl	8002d40 <HAL_RCC_GetSysClockFreq>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	4b14      	ldr	r3, [pc, #80]	; (8002d2c <HAL_RCC_ClockConfig+0x358>)
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	0a1b      	lsrs	r3, r3, #8
 8002ce0:	f003 030f 	and.w	r3, r3, #15
 8002ce4:	4912      	ldr	r1, [pc, #72]	; (8002d30 <HAL_RCC_ClockConfig+0x35c>)
 8002ce6:	5ccb      	ldrb	r3, [r1, r3]
 8002ce8:	f003 031f 	and.w	r3, r3, #31
 8002cec:	fa22 f303 	lsr.w	r3, r2, r3
 8002cf0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002cf2:	4b0e      	ldr	r3, [pc, #56]	; (8002d2c <HAL_RCC_ClockConfig+0x358>)
 8002cf4:	699b      	ldr	r3, [r3, #24]
 8002cf6:	f003 030f 	and.w	r3, r3, #15
 8002cfa:	4a0d      	ldr	r2, [pc, #52]	; (8002d30 <HAL_RCC_ClockConfig+0x35c>)
 8002cfc:	5cd3      	ldrb	r3, [r2, r3]
 8002cfe:	f003 031f 	and.w	r3, r3, #31
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	fa22 f303 	lsr.w	r3, r2, r3
 8002d08:	4a0a      	ldr	r2, [pc, #40]	; (8002d34 <HAL_RCC_ClockConfig+0x360>)
 8002d0a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002d0c:	4a0a      	ldr	r2, [pc, #40]	; (8002d38 <HAL_RCC_ClockConfig+0x364>)
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002d12:	4b0a      	ldr	r3, [pc, #40]	; (8002d3c <HAL_RCC_ClockConfig+0x368>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7fe ff28 	bl	8001b6c <HAL_InitTick>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3718      	adds	r7, #24
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	58024400 	.word	0x58024400
 8002d30:	08009ec8 	.word	0x08009ec8
 8002d34:	2400000c 	.word	0x2400000c
 8002d38:	24000008 	.word	0x24000008
 8002d3c:	24000010 	.word	0x24000010

08002d40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b089      	sub	sp, #36	; 0x24
 8002d44:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d46:	4bb3      	ldr	r3, [pc, #716]	; (8003014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d4e:	2b18      	cmp	r3, #24
 8002d50:	f200 8155 	bhi.w	8002ffe <HAL_RCC_GetSysClockFreq+0x2be>
 8002d54:	a201      	add	r2, pc, #4	; (adr r2, 8002d5c <HAL_RCC_GetSysClockFreq+0x1c>)
 8002d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d5a:	bf00      	nop
 8002d5c:	08002dc1 	.word	0x08002dc1
 8002d60:	08002fff 	.word	0x08002fff
 8002d64:	08002fff 	.word	0x08002fff
 8002d68:	08002fff 	.word	0x08002fff
 8002d6c:	08002fff 	.word	0x08002fff
 8002d70:	08002fff 	.word	0x08002fff
 8002d74:	08002fff 	.word	0x08002fff
 8002d78:	08002fff 	.word	0x08002fff
 8002d7c:	08002de7 	.word	0x08002de7
 8002d80:	08002fff 	.word	0x08002fff
 8002d84:	08002fff 	.word	0x08002fff
 8002d88:	08002fff 	.word	0x08002fff
 8002d8c:	08002fff 	.word	0x08002fff
 8002d90:	08002fff 	.word	0x08002fff
 8002d94:	08002fff 	.word	0x08002fff
 8002d98:	08002fff 	.word	0x08002fff
 8002d9c:	08002ded 	.word	0x08002ded
 8002da0:	08002fff 	.word	0x08002fff
 8002da4:	08002fff 	.word	0x08002fff
 8002da8:	08002fff 	.word	0x08002fff
 8002dac:	08002fff 	.word	0x08002fff
 8002db0:	08002fff 	.word	0x08002fff
 8002db4:	08002fff 	.word	0x08002fff
 8002db8:	08002fff 	.word	0x08002fff
 8002dbc:	08002df3 	.word	0x08002df3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002dc0:	4b94      	ldr	r3, [pc, #592]	; (8003014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0320 	and.w	r3, r3, #32
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d009      	beq.n	8002de0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002dcc:	4b91      	ldr	r3, [pc, #580]	; (8003014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	08db      	lsrs	r3, r3, #3
 8002dd2:	f003 0303 	and.w	r3, r3, #3
 8002dd6:	4a90      	ldr	r2, [pc, #576]	; (8003018 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002dd8:	fa22 f303 	lsr.w	r3, r2, r3
 8002ddc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002dde:	e111      	b.n	8003004 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002de0:	4b8d      	ldr	r3, [pc, #564]	; (8003018 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002de2:	61bb      	str	r3, [r7, #24]
    break;
 8002de4:	e10e      	b.n	8003004 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002de6:	4b8d      	ldr	r3, [pc, #564]	; (800301c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002de8:	61bb      	str	r3, [r7, #24]
    break;
 8002dea:	e10b      	b.n	8003004 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002dec:	4b8c      	ldr	r3, [pc, #560]	; (8003020 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002dee:	61bb      	str	r3, [r7, #24]
    break;
 8002df0:	e108      	b.n	8003004 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002df2:	4b88      	ldr	r3, [pc, #544]	; (8003014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df6:	f003 0303 	and.w	r3, r3, #3
 8002dfa:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002dfc:	4b85      	ldr	r3, [pc, #532]	; (8003014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e00:	091b      	lsrs	r3, r3, #4
 8002e02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e06:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002e08:	4b82      	ldr	r3, [pc, #520]	; (8003014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e0c:	f003 0301 	and.w	r3, r3, #1
 8002e10:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002e12:	4b80      	ldr	r3, [pc, #512]	; (8003014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e16:	08db      	lsrs	r3, r3, #3
 8002e18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002e1c:	68fa      	ldr	r2, [r7, #12]
 8002e1e:	fb02 f303 	mul.w	r3, r2, r3
 8002e22:	ee07 3a90 	vmov	s15, r3
 8002e26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e2a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	f000 80e1 	beq.w	8002ff8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	f000 8083 	beq.w	8002f44 <HAL_RCC_GetSysClockFreq+0x204>
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	f200 80a1 	bhi.w	8002f88 <HAL_RCC_GetSysClockFreq+0x248>
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d003      	beq.n	8002e54 <HAL_RCC_GetSysClockFreq+0x114>
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d056      	beq.n	8002f00 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002e52:	e099      	b.n	8002f88 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e54:	4b6f      	ldr	r3, [pc, #444]	; (8003014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0320 	and.w	r3, r3, #32
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d02d      	beq.n	8002ebc <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002e60:	4b6c      	ldr	r3, [pc, #432]	; (8003014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	08db      	lsrs	r3, r3, #3
 8002e66:	f003 0303 	and.w	r3, r3, #3
 8002e6a:	4a6b      	ldr	r2, [pc, #428]	; (8003018 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002e6c:	fa22 f303 	lsr.w	r3, r2, r3
 8002e70:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	ee07 3a90 	vmov	s15, r3
 8002e78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	ee07 3a90 	vmov	s15, r3
 8002e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e8a:	4b62      	ldr	r3, [pc, #392]	; (8003014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e92:	ee07 3a90 	vmov	s15, r3
 8002e96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e9e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003024 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ea2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ea6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002eaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002eae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002eb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eb6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002eba:	e087      	b.n	8002fcc <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	ee07 3a90 	vmov	s15, r3
 8002ec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ec6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003028 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002eca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ece:	4b51      	ldr	r3, [pc, #324]	; (8003014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ed6:	ee07 3a90 	vmov	s15, r3
 8002eda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ede:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ee2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003024 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ee6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002eea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002eee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002ef2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ef6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002efa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002efe:	e065      	b.n	8002fcc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	ee07 3a90 	vmov	s15, r3
 8002f06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f0a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800302c <HAL_RCC_GetSysClockFreq+0x2ec>
 8002f0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f12:	4b40      	ldr	r3, [pc, #256]	; (8003014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f1a:	ee07 3a90 	vmov	s15, r3
 8002f1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f22:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f26:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003024 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002f42:	e043      	b.n	8002fcc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	ee07 3a90 	vmov	s15, r3
 8002f4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f4e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003030 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002f52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f56:	4b2f      	ldr	r3, [pc, #188]	; (8003014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f5e:	ee07 3a90 	vmov	s15, r3
 8002f62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f66:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f6a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003024 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002f86:	e021      	b.n	8002fcc <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	ee07 3a90 	vmov	s15, r3
 8002f8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f92:	eddf 6a26 	vldr	s13, [pc, #152]	; 800302c <HAL_RCC_GetSysClockFreq+0x2ec>
 8002f96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f9a:	4b1e      	ldr	r3, [pc, #120]	; (8003014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fa2:	ee07 3a90 	vmov	s15, r3
 8002fa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002faa:	ed97 6a02 	vldr	s12, [r7, #8]
 8002fae:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003024 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002fb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002fb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002fba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002fbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002fc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002fca:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002fcc:	4b11      	ldr	r3, [pc, #68]	; (8003014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd0:	0a5b      	lsrs	r3, r3, #9
 8002fd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	ee07 3a90 	vmov	s15, r3
 8002fe0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002fe4:	edd7 6a07 	vldr	s13, [r7, #28]
 8002fe8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ff0:	ee17 3a90 	vmov	r3, s15
 8002ff4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002ff6:	e005      	b.n	8003004 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	61bb      	str	r3, [r7, #24]
    break;
 8002ffc:	e002      	b.n	8003004 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8002ffe:	4b07      	ldr	r3, [pc, #28]	; (800301c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003000:	61bb      	str	r3, [r7, #24]
    break;
 8003002:	bf00      	nop
  }

  return sysclockfreq;
 8003004:	69bb      	ldr	r3, [r7, #24]
}
 8003006:	4618      	mov	r0, r3
 8003008:	3724      	adds	r7, #36	; 0x24
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	58024400 	.word	0x58024400
 8003018:	03d09000 	.word	0x03d09000
 800301c:	003d0900 	.word	0x003d0900
 8003020:	007a1200 	.word	0x007a1200
 8003024:	46000000 	.word	0x46000000
 8003028:	4c742400 	.word	0x4c742400
 800302c:	4a742400 	.word	0x4a742400
 8003030:	4af42400 	.word	0x4af42400

08003034 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800303a:	f7ff fe81 	bl	8002d40 <HAL_RCC_GetSysClockFreq>
 800303e:	4602      	mov	r2, r0
 8003040:	4b10      	ldr	r3, [pc, #64]	; (8003084 <HAL_RCC_GetHCLKFreq+0x50>)
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	0a1b      	lsrs	r3, r3, #8
 8003046:	f003 030f 	and.w	r3, r3, #15
 800304a:	490f      	ldr	r1, [pc, #60]	; (8003088 <HAL_RCC_GetHCLKFreq+0x54>)
 800304c:	5ccb      	ldrb	r3, [r1, r3]
 800304e:	f003 031f 	and.w	r3, r3, #31
 8003052:	fa22 f303 	lsr.w	r3, r2, r3
 8003056:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003058:	4b0a      	ldr	r3, [pc, #40]	; (8003084 <HAL_RCC_GetHCLKFreq+0x50>)
 800305a:	699b      	ldr	r3, [r3, #24]
 800305c:	f003 030f 	and.w	r3, r3, #15
 8003060:	4a09      	ldr	r2, [pc, #36]	; (8003088 <HAL_RCC_GetHCLKFreq+0x54>)
 8003062:	5cd3      	ldrb	r3, [r2, r3]
 8003064:	f003 031f 	and.w	r3, r3, #31
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	fa22 f303 	lsr.w	r3, r2, r3
 800306e:	4a07      	ldr	r2, [pc, #28]	; (800308c <HAL_RCC_GetHCLKFreq+0x58>)
 8003070:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003072:	4a07      	ldr	r2, [pc, #28]	; (8003090 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003078:	4b04      	ldr	r3, [pc, #16]	; (800308c <HAL_RCC_GetHCLKFreq+0x58>)
 800307a:	681b      	ldr	r3, [r3, #0]
}
 800307c:	4618      	mov	r0, r3
 800307e:	3708      	adds	r7, #8
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}
 8003084:	58024400 	.word	0x58024400
 8003088:	08009ec8 	.word	0x08009ec8
 800308c:	2400000c 	.word	0x2400000c
 8003090:	24000008 	.word	0x24000008

08003094 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003098:	f7ff ffcc 	bl	8003034 <HAL_RCC_GetHCLKFreq>
 800309c:	4602      	mov	r2, r0
 800309e:	4b06      	ldr	r3, [pc, #24]	; (80030b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030a0:	69db      	ldr	r3, [r3, #28]
 80030a2:	091b      	lsrs	r3, r3, #4
 80030a4:	f003 0307 	and.w	r3, r3, #7
 80030a8:	4904      	ldr	r1, [pc, #16]	; (80030bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80030aa:	5ccb      	ldrb	r3, [r1, r3]
 80030ac:	f003 031f 	and.w	r3, r3, #31
 80030b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	58024400 	.word	0x58024400
 80030bc:	08009ec8 	.word	0x08009ec8

080030c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80030c4:	f7ff ffb6 	bl	8003034 <HAL_RCC_GetHCLKFreq>
 80030c8:	4602      	mov	r2, r0
 80030ca:	4b06      	ldr	r3, [pc, #24]	; (80030e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030cc:	69db      	ldr	r3, [r3, #28]
 80030ce:	0a1b      	lsrs	r3, r3, #8
 80030d0:	f003 0307 	and.w	r3, r3, #7
 80030d4:	4904      	ldr	r1, [pc, #16]	; (80030e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80030d6:	5ccb      	ldrb	r3, [r1, r3]
 80030d8:	f003 031f 	and.w	r3, r3, #31
 80030dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	58024400 	.word	0x58024400
 80030e8:	08009ec8 	.word	0x08009ec8

080030ec <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b086      	sub	sp, #24
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80030f4:	2300      	movs	r3, #0
 80030f6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80030f8:	2300      	movs	r3, #0
 80030fa:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003104:	2b00      	cmp	r3, #0
 8003106:	d03f      	beq.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800310c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003110:	d02a      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003112:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003116:	d824      	bhi.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003118:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800311c:	d018      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800311e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003122:	d81e      	bhi.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003124:	2b00      	cmp	r3, #0
 8003126:	d003      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003128:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800312c:	d007      	beq.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800312e:	e018      	b.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003130:	4ba4      	ldr	r3, [pc, #656]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8003132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003134:	4aa3      	ldr	r2, [pc, #652]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8003136:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800313a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800313c:	e015      	b.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	3304      	adds	r3, #4
 8003142:	2102      	movs	r1, #2
 8003144:	4618      	mov	r0, r3
 8003146:	f001 f989 	bl	800445c <RCCEx_PLL2_Config>
 800314a:	4603      	mov	r3, r0
 800314c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800314e:	e00c      	b.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	3324      	adds	r3, #36	; 0x24
 8003154:	2102      	movs	r1, #2
 8003156:	4618      	mov	r0, r3
 8003158:	f001 fa32 	bl	80045c0 <RCCEx_PLL3_Config>
 800315c:	4603      	mov	r3, r0
 800315e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003160:	e003      	b.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	75fb      	strb	r3, [r7, #23]
      break;
 8003166:	e000      	b.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003168:	bf00      	nop
    }

    if(ret == HAL_OK)
 800316a:	7dfb      	ldrb	r3, [r7, #23]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d109      	bne.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003170:	4b94      	ldr	r3, [pc, #592]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8003172:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003174:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800317c:	4991      	ldr	r1, [pc, #580]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800317e:	4313      	orrs	r3, r2
 8003180:	650b      	str	r3, [r1, #80]	; 0x50
 8003182:	e001      	b.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003184:	7dfb      	ldrb	r3, [r7, #23]
 8003186:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003190:	2b00      	cmp	r3, #0
 8003192:	d03d      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003198:	2b04      	cmp	r3, #4
 800319a:	d826      	bhi.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800319c:	a201      	add	r2, pc, #4	; (adr r2, 80031a4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800319e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031a2:	bf00      	nop
 80031a4:	080031b9 	.word	0x080031b9
 80031a8:	080031c7 	.word	0x080031c7
 80031ac:	080031d9 	.word	0x080031d9
 80031b0:	080031f1 	.word	0x080031f1
 80031b4:	080031f1 	.word	0x080031f1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031b8:	4b82      	ldr	r3, [pc, #520]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80031ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031bc:	4a81      	ldr	r2, [pc, #516]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80031be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80031c4:	e015      	b.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	3304      	adds	r3, #4
 80031ca:	2100      	movs	r1, #0
 80031cc:	4618      	mov	r0, r3
 80031ce:	f001 f945 	bl	800445c <RCCEx_PLL2_Config>
 80031d2:	4603      	mov	r3, r0
 80031d4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80031d6:	e00c      	b.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	3324      	adds	r3, #36	; 0x24
 80031dc:	2100      	movs	r1, #0
 80031de:	4618      	mov	r0, r3
 80031e0:	f001 f9ee 	bl	80045c0 <RCCEx_PLL3_Config>
 80031e4:	4603      	mov	r3, r0
 80031e6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80031e8:	e003      	b.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	75fb      	strb	r3, [r7, #23]
      break;
 80031ee:	e000      	b.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80031f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031f2:	7dfb      	ldrb	r3, [r7, #23]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d109      	bne.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80031f8:	4b72      	ldr	r3, [pc, #456]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80031fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031fc:	f023 0207 	bic.w	r2, r3, #7
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003204:	496f      	ldr	r1, [pc, #444]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8003206:	4313      	orrs	r3, r2
 8003208:	650b      	str	r3, [r1, #80]	; 0x50
 800320a:	e001      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800320c:	7dfb      	ldrb	r3, [r7, #23]
 800320e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003218:	2b00      	cmp	r3, #0
 800321a:	d051      	beq.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003222:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8003226:	d036      	beq.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003228:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800322c:	d830      	bhi.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800322e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003232:	d032      	beq.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8003234:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003238:	d82a      	bhi.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800323a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800323e:	d02e      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8003240:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003244:	d824      	bhi.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8003246:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800324a:	d018      	beq.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x192>
 800324c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003250:	d81e      	bhi.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8003252:	2b00      	cmp	r3, #0
 8003254:	d003      	beq.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x172>
 8003256:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800325a:	d007      	beq.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x180>
 800325c:	e018      	b.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800325e:	4b59      	ldr	r3, [pc, #356]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8003260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003262:	4a58      	ldr	r2, [pc, #352]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8003264:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003268:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800326a:	e019      	b.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	3304      	adds	r3, #4
 8003270:	2100      	movs	r1, #0
 8003272:	4618      	mov	r0, r3
 8003274:	f001 f8f2 	bl	800445c <RCCEx_PLL2_Config>
 8003278:	4603      	mov	r3, r0
 800327a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800327c:	e010      	b.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	3324      	adds	r3, #36	; 0x24
 8003282:	2100      	movs	r1, #0
 8003284:	4618      	mov	r0, r3
 8003286:	f001 f99b 	bl	80045c0 <RCCEx_PLL3_Config>
 800328a:	4603      	mov	r3, r0
 800328c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800328e:	e007      	b.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	75fb      	strb	r3, [r7, #23]
      break;
 8003294:	e004      	b.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8003296:	bf00      	nop
 8003298:	e002      	b.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800329a:	bf00      	nop
 800329c:	e000      	b.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800329e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032a0:	7dfb      	ldrb	r3, [r7, #23]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d10a      	bne.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80032a6:	4b47      	ldr	r3, [pc, #284]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80032a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032aa:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80032b4:	4943      	ldr	r1, [pc, #268]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	658b      	str	r3, [r1, #88]	; 0x58
 80032ba:	e001      	b.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032bc:	7dfb      	ldrb	r3, [r7, #23]
 80032be:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d051      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80032d2:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80032d6:	d036      	beq.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 80032d8:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80032dc:	d830      	bhi.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80032de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032e2:	d032      	beq.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x25e>
 80032e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032e8:	d82a      	bhi.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80032ea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80032ee:	d02e      	beq.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x262>
 80032f0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80032f4:	d824      	bhi.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80032f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80032fa:	d018      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x242>
 80032fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003300:	d81e      	bhi.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8003302:	2b00      	cmp	r3, #0
 8003304:	d003      	beq.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x222>
 8003306:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800330a:	d007      	beq.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x230>
 800330c:	e018      	b.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800330e:	4b2d      	ldr	r3, [pc, #180]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8003310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003312:	4a2c      	ldr	r2, [pc, #176]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8003314:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003318:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800331a:	e019      	b.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	3304      	adds	r3, #4
 8003320:	2100      	movs	r1, #0
 8003322:	4618      	mov	r0, r3
 8003324:	f001 f89a 	bl	800445c <RCCEx_PLL2_Config>
 8003328:	4603      	mov	r3, r0
 800332a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800332c:	e010      	b.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	3324      	adds	r3, #36	; 0x24
 8003332:	2100      	movs	r1, #0
 8003334:	4618      	mov	r0, r3
 8003336:	f001 f943 	bl	80045c0 <RCCEx_PLL3_Config>
 800333a:	4603      	mov	r3, r0
 800333c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800333e:	e007      	b.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	75fb      	strb	r3, [r7, #23]
      break;
 8003344:	e004      	b.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8003346:	bf00      	nop
 8003348:	e002      	b.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800334a:	bf00      	nop
 800334c:	e000      	b.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800334e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003350:	7dfb      	ldrb	r3, [r7, #23]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d10a      	bne.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003356:	4b1b      	ldr	r3, [pc, #108]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8003358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800335a:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003364:	4917      	ldr	r1, [pc, #92]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8003366:	4313      	orrs	r3, r2
 8003368:	658b      	str	r3, [r1, #88]	; 0x58
 800336a:	e001      	b.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800336c:	7dfb      	ldrb	r3, [r7, #23]
 800336e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003378:	2b00      	cmp	r3, #0
 800337a:	d035      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003380:	2b30      	cmp	r3, #48	; 0x30
 8003382:	d01c      	beq.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003384:	2b30      	cmp	r3, #48	; 0x30
 8003386:	d817      	bhi.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8003388:	2b20      	cmp	r3, #32
 800338a:	d00c      	beq.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800338c:	2b20      	cmp	r3, #32
 800338e:	d813      	bhi.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8003390:	2b00      	cmp	r3, #0
 8003392:	d019      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8003394:	2b10      	cmp	r3, #16
 8003396:	d10f      	bne.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003398:	4b0a      	ldr	r3, [pc, #40]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800339a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800339c:	4a09      	ldr	r2, [pc, #36]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800339e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80033a4:	e011      	b.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	3304      	adds	r3, #4
 80033aa:	2102      	movs	r1, #2
 80033ac:	4618      	mov	r0, r3
 80033ae:	f001 f855 	bl	800445c <RCCEx_PLL2_Config>
 80033b2:	4603      	mov	r3, r0
 80033b4:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80033b6:	e008      	b.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	75fb      	strb	r3, [r7, #23]
      break;
 80033bc:	e005      	b.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 80033be:	bf00      	nop
 80033c0:	e003      	b.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80033c2:	bf00      	nop
 80033c4:	58024400 	.word	0x58024400
      break;
 80033c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033ca:	7dfb      	ldrb	r3, [r7, #23]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d109      	bne.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80033d0:	4ba3      	ldr	r3, [pc, #652]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80033d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033d4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033dc:	49a0      	ldr	r1, [pc, #640]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80033de:	4313      	orrs	r3, r2
 80033e0:	64cb      	str	r3, [r1, #76]	; 0x4c
 80033e2:	e001      	b.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033e4:	7dfb      	ldrb	r3, [r7, #23]
 80033e6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d047      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033fc:	d030      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x374>
 80033fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003402:	d82a      	bhi.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003404:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003408:	d02c      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x378>
 800340a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800340e:	d824      	bhi.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003410:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003414:	d018      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003416:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800341a:	d81e      	bhi.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800341c:	2b00      	cmp	r3, #0
 800341e:	d003      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003420:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003424:	d007      	beq.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003426:	e018      	b.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003428:	4b8d      	ldr	r3, [pc, #564]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800342a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800342c:	4a8c      	ldr	r2, [pc, #560]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800342e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003432:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003434:	e017      	b.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	3304      	adds	r3, #4
 800343a:	2100      	movs	r1, #0
 800343c:	4618      	mov	r0, r3
 800343e:	f001 f80d 	bl	800445c <RCCEx_PLL2_Config>
 8003442:	4603      	mov	r3, r0
 8003444:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003446:	e00e      	b.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	3324      	adds	r3, #36	; 0x24
 800344c:	2100      	movs	r1, #0
 800344e:	4618      	mov	r0, r3
 8003450:	f001 f8b6 	bl	80045c0 <RCCEx_PLL3_Config>
 8003454:	4603      	mov	r3, r0
 8003456:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003458:	e005      	b.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	75fb      	strb	r3, [r7, #23]
      break;
 800345e:	e002      	b.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8003460:	bf00      	nop
 8003462:	e000      	b.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8003464:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003466:	7dfb      	ldrb	r3, [r7, #23]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d109      	bne.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800346c:	4b7c      	ldr	r3, [pc, #496]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800346e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003470:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003478:	4979      	ldr	r1, [pc, #484]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800347a:	4313      	orrs	r3, r2
 800347c:	650b      	str	r3, [r1, #80]	; 0x50
 800347e:	e001      	b.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003480:	7dfb      	ldrb	r3, [r7, #23]
 8003482:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d049      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003494:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003498:	d02e      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800349a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800349e:	d828      	bhi.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x406>
 80034a0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80034a4:	d02a      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x410>
 80034a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80034aa:	d822      	bhi.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x406>
 80034ac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80034b0:	d026      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x414>
 80034b2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80034b6:	d81c      	bhi.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x406>
 80034b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80034bc:	d010      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 80034be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80034c2:	d816      	bhi.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x406>
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d01d      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x418>
 80034c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034cc:	d111      	bne.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	3304      	adds	r3, #4
 80034d2:	2101      	movs	r1, #1
 80034d4:	4618      	mov	r0, r3
 80034d6:	f000 ffc1 	bl	800445c <RCCEx_PLL2_Config>
 80034da:	4603      	mov	r3, r0
 80034dc:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80034de:	e012      	b.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	3324      	adds	r3, #36	; 0x24
 80034e4:	2101      	movs	r1, #1
 80034e6:	4618      	mov	r0, r3
 80034e8:	f001 f86a 	bl	80045c0 <RCCEx_PLL3_Config>
 80034ec:	4603      	mov	r3, r0
 80034ee:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80034f0:	e009      	b.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	75fb      	strb	r3, [r7, #23]
      break;
 80034f6:	e006      	b.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80034f8:	bf00      	nop
 80034fa:	e004      	b.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80034fc:	bf00      	nop
 80034fe:	e002      	b.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003500:	bf00      	nop
 8003502:	e000      	b.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003504:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003506:	7dfb      	ldrb	r3, [r7, #23]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d109      	bne.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800350c:	4b54      	ldr	r3, [pc, #336]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800350e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003510:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003518:	4951      	ldr	r1, [pc, #324]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800351a:	4313      	orrs	r3, r2
 800351c:	650b      	str	r3, [r1, #80]	; 0x50
 800351e:	e001      	b.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003520:	7dfb      	ldrb	r3, [r7, #23]
 8003522:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d04b      	beq.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003536:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800353a:	d02e      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800353c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003540:	d828      	bhi.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003542:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003546:	d02a      	beq.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8003548:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800354c:	d822      	bhi.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800354e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003552:	d026      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8003554:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003558:	d81c      	bhi.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800355a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800355e:	d010      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x496>
 8003560:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003564:	d816      	bhi.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003566:	2b00      	cmp	r3, #0
 8003568:	d01d      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 800356a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800356e:	d111      	bne.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	3304      	adds	r3, #4
 8003574:	2101      	movs	r1, #1
 8003576:	4618      	mov	r0, r3
 8003578:	f000 ff70 	bl	800445c <RCCEx_PLL2_Config>
 800357c:	4603      	mov	r3, r0
 800357e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003580:	e012      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	3324      	adds	r3, #36	; 0x24
 8003586:	2101      	movs	r1, #1
 8003588:	4618      	mov	r0, r3
 800358a:	f001 f819 	bl	80045c0 <RCCEx_PLL3_Config>
 800358e:	4603      	mov	r3, r0
 8003590:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003592:	e009      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	75fb      	strb	r3, [r7, #23]
      break;
 8003598:	e006      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800359a:	bf00      	nop
 800359c:	e004      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800359e:	bf00      	nop
 80035a0:	e002      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80035a2:	bf00      	nop
 80035a4:	e000      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80035a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035a8:	7dfb      	ldrb	r3, [r7, #23]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d10a      	bne.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80035ae:	4b2c      	ldr	r3, [pc, #176]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80035b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035b2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80035bc:	4928      	ldr	r1, [pc, #160]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	658b      	str	r3, [r1, #88]	; 0x58
 80035c2:	e001      	b.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035c4:	7dfb      	ldrb	r3, [r7, #23]
 80035c6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d02f      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035dc:	d00e      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x510>
 80035de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035e2:	d814      	bhi.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x522>
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d015      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80035e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035ec:	d10f      	bne.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035ee:	4b1c      	ldr	r3, [pc, #112]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80035f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f2:	4a1b      	ldr	r2, [pc, #108]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80035f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035f8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80035fa:	e00c      	b.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	3304      	adds	r3, #4
 8003600:	2101      	movs	r1, #1
 8003602:	4618      	mov	r0, r3
 8003604:	f000 ff2a 	bl	800445c <RCCEx_PLL2_Config>
 8003608:	4603      	mov	r3, r0
 800360a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800360c:	e003      	b.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	75fb      	strb	r3, [r7, #23]
      break;
 8003612:	e000      	b.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8003614:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003616:	7dfb      	ldrb	r3, [r7, #23]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d109      	bne.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800361c:	4b10      	ldr	r3, [pc, #64]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800361e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003620:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003628:	490d      	ldr	r1, [pc, #52]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800362a:	4313      	orrs	r3, r2
 800362c:	650b      	str	r3, [r1, #80]	; 0x50
 800362e:	e001      	b.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003630:	7dfb      	ldrb	r3, [r7, #23]
 8003632:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800363c:	2b00      	cmp	r3, #0
 800363e:	d034      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003644:	2b03      	cmp	r3, #3
 8003646:	d81d      	bhi.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8003648:	a201      	add	r2, pc, #4	; (adr r2, 8003650 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800364a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800364e:	bf00      	nop
 8003650:	0800368b 	.word	0x0800368b
 8003654:	08003665 	.word	0x08003665
 8003658:	08003673 	.word	0x08003673
 800365c:	0800368b 	.word	0x0800368b
 8003660:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003664:	4bb1      	ldr	r3, [pc, #708]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003668:	4ab0      	ldr	r2, [pc, #704]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800366a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800366e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003670:	e00c      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	3304      	adds	r3, #4
 8003676:	2102      	movs	r1, #2
 8003678:	4618      	mov	r0, r3
 800367a:	f000 feef 	bl	800445c <RCCEx_PLL2_Config>
 800367e:	4603      	mov	r3, r0
 8003680:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003682:	e003      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	75fb      	strb	r3, [r7, #23]
      break;
 8003688:	e000      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 800368a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800368c:	7dfb      	ldrb	r3, [r7, #23]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d109      	bne.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003692:	4ba6      	ldr	r3, [pc, #664]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003696:	f023 0203 	bic.w	r2, r3, #3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800369e:	49a3      	ldr	r1, [pc, #652]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80036a0:	4313      	orrs	r3, r2
 80036a2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80036a4:	e001      	b.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036a6:	7dfb      	ldrb	r3, [r7, #23]
 80036a8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	f000 8086 	beq.w	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036b8:	4b9d      	ldr	r3, [pc, #628]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a9c      	ldr	r2, [pc, #624]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80036be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036c2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80036c4:	f7fe fa9c 	bl	8001c00 <HAL_GetTick>
 80036c8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80036ca:	e009      	b.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036cc:	f7fe fa98 	bl	8001c00 <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	2b64      	cmp	r3, #100	; 0x64
 80036d8:	d902      	bls.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	75fb      	strb	r3, [r7, #23]
        break;
 80036de:	e005      	b.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80036e0:	4b93      	ldr	r3, [pc, #588]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d0ef      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 80036ec:	7dfb      	ldrb	r3, [r7, #23]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d166      	bne.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80036f2:	4b8e      	ldr	r3, [pc, #568]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80036f4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80036fc:	4053      	eors	r3, r2
 80036fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003702:	2b00      	cmp	r3, #0
 8003704:	d013      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003706:	4b89      	ldr	r3, [pc, #548]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800370a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800370e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003710:	4b86      	ldr	r3, [pc, #536]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003714:	4a85      	ldr	r2, [pc, #532]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003716:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800371a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800371c:	4b83      	ldr	r3, [pc, #524]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800371e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003720:	4a82      	ldr	r2, [pc, #520]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003722:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003726:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003728:	4a80      	ldr	r2, [pc, #512]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003734:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003738:	d115      	bne.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800373a:	f7fe fa61 	bl	8001c00 <HAL_GetTick>
 800373e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003740:	e00b      	b.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003742:	f7fe fa5d 	bl	8001c00 <HAL_GetTick>
 8003746:	4602      	mov	r2, r0
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003750:	4293      	cmp	r3, r2
 8003752:	d902      	bls.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8003754:	2303      	movs	r3, #3
 8003756:	75fb      	strb	r3, [r7, #23]
            break;
 8003758:	e005      	b.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800375a:	4b74      	ldr	r3, [pc, #464]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800375c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800375e:	f003 0302 	and.w	r3, r3, #2
 8003762:	2b00      	cmp	r3, #0
 8003764:	d0ed      	beq.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 8003766:	7dfb      	ldrb	r3, [r7, #23]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d126      	bne.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003772:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003776:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800377a:	d10d      	bne.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 800377c:	4b6b      	ldr	r3, [pc, #428]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800377e:	691b      	ldr	r3, [r3, #16]
 8003780:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800378a:	0919      	lsrs	r1, r3, #4
 800378c:	4b69      	ldr	r3, [pc, #420]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800378e:	400b      	ands	r3, r1
 8003790:	4966      	ldr	r1, [pc, #408]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003792:	4313      	orrs	r3, r2
 8003794:	610b      	str	r3, [r1, #16]
 8003796:	e005      	b.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8003798:	4b64      	ldr	r3, [pc, #400]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800379a:	691b      	ldr	r3, [r3, #16]
 800379c:	4a63      	ldr	r2, [pc, #396]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800379e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80037a2:	6113      	str	r3, [r2, #16]
 80037a4:	4b61      	ldr	r3, [pc, #388]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80037a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80037ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037b2:	495e      	ldr	r1, [pc, #376]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80037b4:	4313      	orrs	r3, r2
 80037b6:	670b      	str	r3, [r1, #112]	; 0x70
 80037b8:	e004      	b.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80037ba:	7dfb      	ldrb	r3, [r7, #23]
 80037bc:	75bb      	strb	r3, [r7, #22]
 80037be:	e001      	b.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037c0:	7dfb      	ldrb	r3, [r7, #23]
 80037c2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0301 	and.w	r3, r3, #1
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d07e      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037d4:	2b28      	cmp	r3, #40	; 0x28
 80037d6:	d867      	bhi.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 80037d8:	a201      	add	r2, pc, #4	; (adr r2, 80037e0 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 80037da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037de:	bf00      	nop
 80037e0:	080038af 	.word	0x080038af
 80037e4:	080038a9 	.word	0x080038a9
 80037e8:	080038a9 	.word	0x080038a9
 80037ec:	080038a9 	.word	0x080038a9
 80037f0:	080038a9 	.word	0x080038a9
 80037f4:	080038a9 	.word	0x080038a9
 80037f8:	080038a9 	.word	0x080038a9
 80037fc:	080038a9 	.word	0x080038a9
 8003800:	08003885 	.word	0x08003885
 8003804:	080038a9 	.word	0x080038a9
 8003808:	080038a9 	.word	0x080038a9
 800380c:	080038a9 	.word	0x080038a9
 8003810:	080038a9 	.word	0x080038a9
 8003814:	080038a9 	.word	0x080038a9
 8003818:	080038a9 	.word	0x080038a9
 800381c:	080038a9 	.word	0x080038a9
 8003820:	08003897 	.word	0x08003897
 8003824:	080038a9 	.word	0x080038a9
 8003828:	080038a9 	.word	0x080038a9
 800382c:	080038a9 	.word	0x080038a9
 8003830:	080038a9 	.word	0x080038a9
 8003834:	080038a9 	.word	0x080038a9
 8003838:	080038a9 	.word	0x080038a9
 800383c:	080038a9 	.word	0x080038a9
 8003840:	080038af 	.word	0x080038af
 8003844:	080038a9 	.word	0x080038a9
 8003848:	080038a9 	.word	0x080038a9
 800384c:	080038a9 	.word	0x080038a9
 8003850:	080038a9 	.word	0x080038a9
 8003854:	080038a9 	.word	0x080038a9
 8003858:	080038a9 	.word	0x080038a9
 800385c:	080038a9 	.word	0x080038a9
 8003860:	080038af 	.word	0x080038af
 8003864:	080038a9 	.word	0x080038a9
 8003868:	080038a9 	.word	0x080038a9
 800386c:	080038a9 	.word	0x080038a9
 8003870:	080038a9 	.word	0x080038a9
 8003874:	080038a9 	.word	0x080038a9
 8003878:	080038a9 	.word	0x080038a9
 800387c:	080038a9 	.word	0x080038a9
 8003880:	080038af 	.word	0x080038af
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	3304      	adds	r3, #4
 8003888:	2101      	movs	r1, #1
 800388a:	4618      	mov	r0, r3
 800388c:	f000 fde6 	bl	800445c <RCCEx_PLL2_Config>
 8003890:	4603      	mov	r3, r0
 8003892:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003894:	e00c      	b.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	3324      	adds	r3, #36	; 0x24
 800389a:	2101      	movs	r1, #1
 800389c:	4618      	mov	r0, r3
 800389e:	f000 fe8f 	bl	80045c0 <RCCEx_PLL3_Config>
 80038a2:	4603      	mov	r3, r0
 80038a4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80038a6:	e003      	b.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	75fb      	strb	r3, [r7, #23]
      break;
 80038ac:	e000      	b.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 80038ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038b0:	7dfb      	ldrb	r3, [r7, #23]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d109      	bne.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80038b6:	4b1d      	ldr	r3, [pc, #116]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80038b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ba:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038c2:	491a      	ldr	r1, [pc, #104]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80038c4:	4313      	orrs	r3, r2
 80038c6:	654b      	str	r3, [r1, #84]	; 0x54
 80038c8:	e001      	b.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038ca:	7dfb      	ldrb	r3, [r7, #23]
 80038cc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0302 	and.w	r3, r3, #2
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d03e      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038de:	2b05      	cmp	r3, #5
 80038e0:	d820      	bhi.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x838>
 80038e2:	a201      	add	r2, pc, #4	; (adr r2, 80038e8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 80038e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038e8:	08003939 	.word	0x08003939
 80038ec:	08003901 	.word	0x08003901
 80038f0:	08003913 	.word	0x08003913
 80038f4:	08003939 	.word	0x08003939
 80038f8:	08003939 	.word	0x08003939
 80038fc:	08003939 	.word	0x08003939
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	3304      	adds	r3, #4
 8003904:	2101      	movs	r1, #1
 8003906:	4618      	mov	r0, r3
 8003908:	f000 fda8 	bl	800445c <RCCEx_PLL2_Config>
 800390c:	4603      	mov	r3, r0
 800390e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003910:	e013      	b.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	3324      	adds	r3, #36	; 0x24
 8003916:	2101      	movs	r1, #1
 8003918:	4618      	mov	r0, r3
 800391a:	f000 fe51 	bl	80045c0 <RCCEx_PLL3_Config>
 800391e:	4603      	mov	r3, r0
 8003920:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003922:	e00a      	b.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	75fb      	strb	r3, [r7, #23]
      break;
 8003928:	e007      	b.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x84e>
 800392a:	bf00      	nop
 800392c:	58024400 	.word	0x58024400
 8003930:	58024800 	.word	0x58024800
 8003934:	00ffffcf 	.word	0x00ffffcf
      break;
 8003938:	bf00      	nop
    }

    if(ret == HAL_OK)
 800393a:	7dfb      	ldrb	r3, [r7, #23]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d109      	bne.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003940:	4b9f      	ldr	r3, [pc, #636]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003942:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003944:	f023 0207 	bic.w	r2, r3, #7
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800394c:	499c      	ldr	r1, [pc, #624]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800394e:	4313      	orrs	r3, r2
 8003950:	654b      	str	r3, [r1, #84]	; 0x54
 8003952:	e001      	b.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003954:	7dfb      	ldrb	r3, [r7, #23]
 8003956:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0304 	and.w	r3, r3, #4
 8003960:	2b00      	cmp	r3, #0
 8003962:	d039      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800396a:	2b05      	cmp	r3, #5
 800396c:	d820      	bhi.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 800396e:	a201      	add	r2, pc, #4	; (adr r2, 8003974 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8003970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003974:	080039b7 	.word	0x080039b7
 8003978:	0800398d 	.word	0x0800398d
 800397c:	0800399f 	.word	0x0800399f
 8003980:	080039b7 	.word	0x080039b7
 8003984:	080039b7 	.word	0x080039b7
 8003988:	080039b7 	.word	0x080039b7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	3304      	adds	r3, #4
 8003990:	2101      	movs	r1, #1
 8003992:	4618      	mov	r0, r3
 8003994:	f000 fd62 	bl	800445c <RCCEx_PLL2_Config>
 8003998:	4603      	mov	r3, r0
 800399a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800399c:	e00c      	b.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	3324      	adds	r3, #36	; 0x24
 80039a2:	2101      	movs	r1, #1
 80039a4:	4618      	mov	r0, r3
 80039a6:	f000 fe0b 	bl	80045c0 <RCCEx_PLL3_Config>
 80039aa:	4603      	mov	r3, r0
 80039ac:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80039ae:	e003      	b.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	75fb      	strb	r3, [r7, #23]
      break;
 80039b4:	e000      	b.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 80039b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039b8:	7dfb      	ldrb	r3, [r7, #23]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d10a      	bne.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80039be:	4b80      	ldr	r3, [pc, #512]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80039c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039c2:	f023 0207 	bic.w	r2, r3, #7
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039cc:	497c      	ldr	r1, [pc, #496]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80039ce:	4313      	orrs	r3, r2
 80039d0:	658b      	str	r3, [r1, #88]	; 0x58
 80039d2:	e001      	b.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039d4:	7dfb      	ldrb	r3, [r7, #23]
 80039d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0320 	and.w	r3, r3, #32
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d04b      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039ee:	d02e      	beq.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x962>
 80039f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039f4:	d828      	bhi.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80039f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039fa:	d02a      	beq.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x966>
 80039fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a00:	d822      	bhi.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8003a02:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003a06:	d026      	beq.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8003a08:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003a0c:	d81c      	bhi.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8003a0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a12:	d010      	beq.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8003a14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a18:	d816      	bhi.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d01d      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003a1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a22:	d111      	bne.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	3304      	adds	r3, #4
 8003a28:	2100      	movs	r1, #0
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f000 fd16 	bl	800445c <RCCEx_PLL2_Config>
 8003a30:	4603      	mov	r3, r0
 8003a32:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003a34:	e012      	b.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	3324      	adds	r3, #36	; 0x24
 8003a3a:	2102      	movs	r1, #2
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f000 fdbf 	bl	80045c0 <RCCEx_PLL3_Config>
 8003a42:	4603      	mov	r3, r0
 8003a44:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003a46:	e009      	b.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	75fb      	strb	r3, [r7, #23]
      break;
 8003a4c:	e006      	b.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8003a4e:	bf00      	nop
 8003a50:	e004      	b.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8003a52:	bf00      	nop
 8003a54:	e002      	b.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8003a56:	bf00      	nop
 8003a58:	e000      	b.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8003a5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a5c:	7dfb      	ldrb	r3, [r7, #23]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d10a      	bne.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a62:	4b57      	ldr	r3, [pc, #348]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a66:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a70:	4953      	ldr	r1, [pc, #332]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	654b      	str	r3, [r1, #84]	; 0x54
 8003a76:	e001      	b.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a78:	7dfb      	ldrb	r3, [r7, #23]
 8003a7a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d04b      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a8e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003a92:	d02e      	beq.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8003a94:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003a98:	d828      	bhi.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8003a9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a9e:	d02a      	beq.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8003aa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aa4:	d822      	bhi.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8003aa6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003aaa:	d026      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8003aac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ab0:	d81c      	bhi.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8003ab2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ab6:	d010      	beq.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8003ab8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003abc:	d816      	bhi.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d01d      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8003ac2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ac6:	d111      	bne.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	3304      	adds	r3, #4
 8003acc:	2100      	movs	r1, #0
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f000 fcc4 	bl	800445c <RCCEx_PLL2_Config>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003ad8:	e012      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	3324      	adds	r3, #36	; 0x24
 8003ade:	2102      	movs	r1, #2
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f000 fd6d 	bl	80045c0 <RCCEx_PLL3_Config>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003aea:	e009      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	75fb      	strb	r3, [r7, #23]
      break;
 8003af0:	e006      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8003af2:	bf00      	nop
 8003af4:	e004      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8003af6:	bf00      	nop
 8003af8:	e002      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8003afa:	bf00      	nop
 8003afc:	e000      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8003afe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b00:	7dfb      	ldrb	r3, [r7, #23]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d10a      	bne.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003b06:	4b2e      	ldr	r3, [pc, #184]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b0a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b14:	492a      	ldr	r1, [pc, #168]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	658b      	str	r3, [r1, #88]	; 0x58
 8003b1a:	e001      	b.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b1c:	7dfb      	ldrb	r3, [r7, #23]
 8003b1e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d04d      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b32:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003b36:	d02e      	beq.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8003b38:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003b3c:	d828      	bhi.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8003b3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b42:	d02a      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8003b44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b48:	d822      	bhi.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8003b4a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003b4e:	d026      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8003b50:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003b54:	d81c      	bhi.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8003b56:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b5a:	d010      	beq.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8003b5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b60:	d816      	bhi.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d01d      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8003b66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b6a:	d111      	bne.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	3304      	adds	r3, #4
 8003b70:	2100      	movs	r1, #0
 8003b72:	4618      	mov	r0, r3
 8003b74:	f000 fc72 	bl	800445c <RCCEx_PLL2_Config>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003b7c:	e012      	b.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	3324      	adds	r3, #36	; 0x24
 8003b82:	2102      	movs	r1, #2
 8003b84:	4618      	mov	r0, r3
 8003b86:	f000 fd1b 	bl	80045c0 <RCCEx_PLL3_Config>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003b8e:	e009      	b.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	75fb      	strb	r3, [r7, #23]
      break;
 8003b94:	e006      	b.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8003b96:	bf00      	nop
 8003b98:	e004      	b.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8003b9a:	bf00      	nop
 8003b9c:	e002      	b.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8003b9e:	bf00      	nop
 8003ba0:	e000      	b.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8003ba2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ba4:	7dfb      	ldrb	r3, [r7, #23]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d10c      	bne.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003baa:	4b05      	ldr	r3, [pc, #20]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003bb8:	4901      	ldr	r1, [pc, #4]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	658b      	str	r3, [r1, #88]	; 0x58
 8003bbe:	e003      	b.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8003bc0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bc4:	7dfb      	ldrb	r3, [r7, #23]
 8003bc6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0308 	and.w	r3, r3, #8
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d018      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bdc:	d10a      	bne.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	3324      	adds	r3, #36	; 0x24
 8003be2:	2102      	movs	r1, #2
 8003be4:	4618      	mov	r0, r3
 8003be6:	f000 fceb 	bl	80045c0 <RCCEx_PLL3_Config>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d001      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8003bf4:	4b8a      	ldr	r3, [pc, #552]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8003bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bf8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c00:	4987      	ldr	r1, [pc, #540]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8003c02:	4313      	orrs	r3, r2
 8003c04:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0310 	and.w	r3, r3, #16
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d01a      	beq.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c1c:	d10a      	bne.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	3324      	adds	r3, #36	; 0x24
 8003c22:	2102      	movs	r1, #2
 8003c24:	4618      	mov	r0, r3
 8003c26:	f000 fccb 	bl	80045c0 <RCCEx_PLL3_Config>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d001      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003c34:	4b7a      	ldr	r3, [pc, #488]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8003c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c42:	4977      	ldr	r1, [pc, #476]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8003c44:	4313      	orrs	r3, r2
 8003c46:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d034      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c5a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c5e:	d01d      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8003c60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c64:	d817      	bhi.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d003      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8003c6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c6e:	d009      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003c70:	e011      	b.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	3304      	adds	r3, #4
 8003c76:	2100      	movs	r1, #0
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f000 fbef 	bl	800445c <RCCEx_PLL2_Config>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003c82:	e00c      	b.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	3324      	adds	r3, #36	; 0x24
 8003c88:	2102      	movs	r1, #2
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f000 fc98 	bl	80045c0 <RCCEx_PLL3_Config>
 8003c90:	4603      	mov	r3, r0
 8003c92:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003c94:	e003      	b.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	75fb      	strb	r3, [r7, #23]
      break;
 8003c9a:	e000      	b.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8003c9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c9e:	7dfb      	ldrb	r3, [r7, #23]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d10a      	bne.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ca4:	4b5e      	ldr	r3, [pc, #376]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8003ca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ca8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003cb2:	495b      	ldr	r1, [pc, #364]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	658b      	str	r3, [r1, #88]	; 0x58
 8003cb8:	e001      	b.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cba:	7dfb      	ldrb	r3, [r7, #23]
 8003cbc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d033      	beq.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cd0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003cd4:	d01c      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8003cd6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003cda:	d816      	bhi.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003cdc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ce0:	d003      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8003ce2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ce6:	d007      	beq.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8003ce8:	e00f      	b.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cea:	4b4d      	ldr	r3, [pc, #308]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8003cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cee:	4a4c      	ldr	r2, [pc, #304]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8003cf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cf4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003cf6:	e00c      	b.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	3324      	adds	r3, #36	; 0x24
 8003cfc:	2101      	movs	r1, #1
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f000 fc5e 	bl	80045c0 <RCCEx_PLL3_Config>
 8003d04:	4603      	mov	r3, r0
 8003d06:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003d08:	e003      	b.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	75fb      	strb	r3, [r7, #23]
      break;
 8003d0e:	e000      	b.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8003d10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d12:	7dfb      	ldrb	r3, [r7, #23]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d10a      	bne.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d18:	4b41      	ldr	r3, [pc, #260]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8003d1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d1c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d26:	493e      	ldr	r1, [pc, #248]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	654b      	str	r3, [r1, #84]	; 0x54
 8003d2c:	e001      	b.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d2e:	7dfb      	ldrb	r3, [r7, #23]
 8003d30:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d029      	beq.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d003      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8003d46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d4a:	d007      	beq.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003d4c:	e00f      	b.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d4e:	4b34      	ldr	r3, [pc, #208]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8003d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d52:	4a33      	ldr	r2, [pc, #204]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8003d54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d58:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003d5a:	e00b      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	3304      	adds	r3, #4
 8003d60:	2102      	movs	r1, #2
 8003d62:	4618      	mov	r0, r3
 8003d64:	f000 fb7a 	bl	800445c <RCCEx_PLL2_Config>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003d6c:	e002      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	75fb      	strb	r3, [r7, #23]
      break;
 8003d72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d74:	7dfb      	ldrb	r3, [r7, #23]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d109      	bne.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003d7a:	4b29      	ldr	r3, [pc, #164]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8003d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d7e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d86:	4926      	ldr	r1, [pc, #152]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003d8c:	e001      	b.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d8e:	7dfb      	ldrb	r3, [r7, #23]
 8003d90:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d00a      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	3324      	adds	r3, #36	; 0x24
 8003da2:	2102      	movs	r1, #2
 8003da4:	4618      	mov	r0, r3
 8003da6:	f000 fc0b 	bl	80045c0 <RCCEx_PLL3_Config>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d001      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d033      	beq.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dc4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003dc8:	d017      	beq.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8003dca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003dce:	d811      	bhi.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003dd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dd4:	d013      	beq.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0xd12>
 8003dd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dda:	d80b      	bhi.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d010      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0xd16>
 8003de0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003de4:	d106      	bne.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003de6:	4b0e      	ldr	r3, [pc, #56]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8003de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dea:	4a0d      	ldr	r2, [pc, #52]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8003dec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003df0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003df2:	e007      	b.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	75fb      	strb	r3, [r7, #23]
      break;
 8003df8:	e004      	b.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8003dfa:	bf00      	nop
 8003dfc:	e002      	b.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8003dfe:	bf00      	nop
 8003e00:	e000      	b.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8003e02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e04:	7dfb      	ldrb	r3, [r7, #23]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d10c      	bne.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e0a:	4b05      	ldr	r3, [pc, #20]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8003e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e0e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e16:	4902      	ldr	r1, [pc, #8]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	654b      	str	r3, [r1, #84]	; 0x54
 8003e1c:	e004      	b.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 8003e1e:	bf00      	nop
 8003e20:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e24:	7dfb      	ldrb	r3, [r7, #23]
 8003e26:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d008      	beq.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003e34:	4b29      	ldr	r3, [pc, #164]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003e36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e38:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e40:	4926      	ldr	r1, [pc, #152]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d008      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003e52:	4b22      	ldr	r3, [pc, #136]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003e54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e56:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e5e:	491f      	ldr	r1, [pc, #124]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003e60:	4313      	orrs	r3, r2
 8003e62:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d00d      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003e70:	4b1a      	ldr	r3, [pc, #104]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003e72:	691b      	ldr	r3, [r3, #16]
 8003e74:	4a19      	ldr	r2, [pc, #100]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003e76:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003e7a:	6113      	str	r3, [r2, #16]
 8003e7c:	4b17      	ldr	r3, [pc, #92]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003e7e:	691a      	ldr	r2, [r3, #16]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e86:	4915      	ldr	r1, [pc, #84]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	da08      	bge.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003e94:	4b11      	ldr	r3, [pc, #68]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003e96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e98:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ea0:	490e      	ldr	r1, [pc, #56]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d009      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003eb2:	4b0a      	ldr	r3, [pc, #40]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eb6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ec0:	4906      	ldr	r1, [pc, #24]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8003ec6:	7dbb      	ldrb	r3, [r7, #22]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d101      	bne.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	e000      	b.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3718      	adds	r7, #24
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop
 8003edc:	58024400 	.word	0x58024400

08003ee0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003ee4:	f7ff f8a6 	bl	8003034 <HAL_RCC_GetHCLKFreq>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	4b06      	ldr	r3, [pc, #24]	; (8003f04 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003eec:	6a1b      	ldr	r3, [r3, #32]
 8003eee:	091b      	lsrs	r3, r3, #4
 8003ef0:	f003 0307 	and.w	r3, r3, #7
 8003ef4:	4904      	ldr	r1, [pc, #16]	; (8003f08 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003ef6:	5ccb      	ldrb	r3, [r1, r3]
 8003ef8:	f003 031f 	and.w	r3, r3, #31
 8003efc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	58024400 	.word	0x58024400
 8003f08:	08009ec8 	.word	0x08009ec8

08003f0c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b089      	sub	sp, #36	; 0x24
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003f14:	4ba1      	ldr	r3, [pc, #644]	; (800419c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f18:	f003 0303 	and.w	r3, r3, #3
 8003f1c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8003f1e:	4b9f      	ldr	r3, [pc, #636]	; (800419c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f22:	0b1b      	lsrs	r3, r3, #12
 8003f24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f28:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003f2a:	4b9c      	ldr	r3, [pc, #624]	; (800419c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f2e:	091b      	lsrs	r3, r3, #4
 8003f30:	f003 0301 	and.w	r3, r3, #1
 8003f34:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003f36:	4b99      	ldr	r3, [pc, #612]	; (800419c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f3a:	08db      	lsrs	r3, r3, #3
 8003f3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003f40:	693a      	ldr	r2, [r7, #16]
 8003f42:	fb02 f303 	mul.w	r3, r2, r3
 8003f46:	ee07 3a90 	vmov	s15, r3
 8003f4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f4e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	f000 8111 	beq.w	800417c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	f000 8083 	beq.w	8004068 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003f62:	69bb      	ldr	r3, [r7, #24]
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	f200 80a1 	bhi.w	80040ac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003f6a:	69bb      	ldr	r3, [r7, #24]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d003      	beq.n	8003f78 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d056      	beq.n	8004024 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003f76:	e099      	b.n	80040ac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f78:	4b88      	ldr	r3, [pc, #544]	; (800419c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0320 	and.w	r3, r3, #32
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d02d      	beq.n	8003fe0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003f84:	4b85      	ldr	r3, [pc, #532]	; (800419c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	08db      	lsrs	r3, r3, #3
 8003f8a:	f003 0303 	and.w	r3, r3, #3
 8003f8e:	4a84      	ldr	r2, [pc, #528]	; (80041a0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003f90:	fa22 f303 	lsr.w	r3, r2, r3
 8003f94:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	ee07 3a90 	vmov	s15, r3
 8003f9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	ee07 3a90 	vmov	s15, r3
 8003fa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003faa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fae:	4b7b      	ldr	r3, [pc, #492]	; (800419c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fb6:	ee07 3a90 	vmov	s15, r3
 8003fba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8003fc2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80041a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003fc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003fd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fda:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003fde:	e087      	b.n	80040f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	ee07 3a90 	vmov	s15, r3
 8003fe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fea:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80041a8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003fee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ff2:	4b6a      	ldr	r3, [pc, #424]	; (800419c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ffa:	ee07 3a90 	vmov	s15, r3
 8003ffe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004002:	ed97 6a03 	vldr	s12, [r7, #12]
 8004006:	eddf 5a67 	vldr	s11, [pc, #412]	; 80041a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800400a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800400e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004012:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004016:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800401a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800401e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004022:	e065      	b.n	80040f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	ee07 3a90 	vmov	s15, r3
 800402a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800402e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80041ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004032:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004036:	4b59      	ldr	r3, [pc, #356]	; (800419c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800403a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800403e:	ee07 3a90 	vmov	s15, r3
 8004042:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004046:	ed97 6a03 	vldr	s12, [r7, #12]
 800404a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80041a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800404e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004052:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004056:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800405a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800405e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004062:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004066:	e043      	b.n	80040f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	ee07 3a90 	vmov	s15, r3
 800406e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004072:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80041b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004076:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800407a:	4b48      	ldr	r3, [pc, #288]	; (800419c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800407c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800407e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004082:	ee07 3a90 	vmov	s15, r3
 8004086:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800408a:	ed97 6a03 	vldr	s12, [r7, #12]
 800408e:	eddf 5a45 	vldr	s11, [pc, #276]	; 80041a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004092:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004096:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800409a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800409e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80040aa:	e021      	b.n	80040f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	ee07 3a90 	vmov	s15, r3
 80040b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040b6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80041ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80040ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040be:	4b37      	ldr	r3, [pc, #220]	; (800419c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040c6:	ee07 3a90 	vmov	s15, r3
 80040ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80040d2:	eddf 5a34 	vldr	s11, [pc, #208]	; 80041a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80040d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80040ee:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80040f0:	4b2a      	ldr	r3, [pc, #168]	; (800419c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f4:	0a5b      	lsrs	r3, r3, #9
 80040f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040fa:	ee07 3a90 	vmov	s15, r3
 80040fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004102:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004106:	ee37 7a87 	vadd.f32	s14, s15, s14
 800410a:	edd7 6a07 	vldr	s13, [r7, #28]
 800410e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004112:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004116:	ee17 2a90 	vmov	r2, s15
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800411e:	4b1f      	ldr	r3, [pc, #124]	; (800419c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004122:	0c1b      	lsrs	r3, r3, #16
 8004124:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004128:	ee07 3a90 	vmov	s15, r3
 800412c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004130:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004134:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004138:	edd7 6a07 	vldr	s13, [r7, #28]
 800413c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004140:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004144:	ee17 2a90 	vmov	r2, s15
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800414c:	4b13      	ldr	r3, [pc, #76]	; (800419c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800414e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004150:	0e1b      	lsrs	r3, r3, #24
 8004152:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004156:	ee07 3a90 	vmov	s15, r3
 800415a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800415e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004162:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004166:	edd7 6a07 	vldr	s13, [r7, #28]
 800416a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800416e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004172:	ee17 2a90 	vmov	r2, s15
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800417a:	e008      	b.n	800418e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	609a      	str	r2, [r3, #8]
}
 800418e:	bf00      	nop
 8004190:	3724      	adds	r7, #36	; 0x24
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr
 800419a:	bf00      	nop
 800419c:	58024400 	.word	0x58024400
 80041a0:	03d09000 	.word	0x03d09000
 80041a4:	46000000 	.word	0x46000000
 80041a8:	4c742400 	.word	0x4c742400
 80041ac:	4a742400 	.word	0x4a742400
 80041b0:	4af42400 	.word	0x4af42400

080041b4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b089      	sub	sp, #36	; 0x24
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80041bc:	4ba1      	ldr	r3, [pc, #644]	; (8004444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c0:	f003 0303 	and.w	r3, r3, #3
 80041c4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80041c6:	4b9f      	ldr	r3, [pc, #636]	; (8004444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ca:	0d1b      	lsrs	r3, r3, #20
 80041cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041d0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80041d2:	4b9c      	ldr	r3, [pc, #624]	; (8004444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d6:	0a1b      	lsrs	r3, r3, #8
 80041d8:	f003 0301 	and.w	r3, r3, #1
 80041dc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80041de:	4b99      	ldr	r3, [pc, #612]	; (8004444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041e2:	08db      	lsrs	r3, r3, #3
 80041e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80041e8:	693a      	ldr	r2, [r7, #16]
 80041ea:	fb02 f303 	mul.w	r3, r2, r3
 80041ee:	ee07 3a90 	vmov	s15, r3
 80041f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041f6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	f000 8111 	beq.w	8004424 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	2b02      	cmp	r3, #2
 8004206:	f000 8083 	beq.w	8004310 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	2b02      	cmp	r3, #2
 800420e:	f200 80a1 	bhi.w	8004354 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004212:	69bb      	ldr	r3, [r7, #24]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d003      	beq.n	8004220 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	2b01      	cmp	r3, #1
 800421c:	d056      	beq.n	80042cc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800421e:	e099      	b.n	8004354 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004220:	4b88      	ldr	r3, [pc, #544]	; (8004444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0320 	and.w	r3, r3, #32
 8004228:	2b00      	cmp	r3, #0
 800422a:	d02d      	beq.n	8004288 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800422c:	4b85      	ldr	r3, [pc, #532]	; (8004444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	08db      	lsrs	r3, r3, #3
 8004232:	f003 0303 	and.w	r3, r3, #3
 8004236:	4a84      	ldr	r2, [pc, #528]	; (8004448 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004238:	fa22 f303 	lsr.w	r3, r2, r3
 800423c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	ee07 3a90 	vmov	s15, r3
 8004244:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	ee07 3a90 	vmov	s15, r3
 800424e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004252:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004256:	4b7b      	ldr	r3, [pc, #492]	; (8004444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800425e:	ee07 3a90 	vmov	s15, r3
 8004262:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004266:	ed97 6a03 	vldr	s12, [r7, #12]
 800426a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800444c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800426e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004272:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004276:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800427a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800427e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004282:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004286:	e087      	b.n	8004398 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	ee07 3a90 	vmov	s15, r3
 800428e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004292:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004450 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004296:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800429a:	4b6a      	ldr	r3, [pc, #424]	; (8004444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800429c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042a2:	ee07 3a90 	vmov	s15, r3
 80042a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80042ae:	eddf 5a67 	vldr	s11, [pc, #412]	; 800444c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80042b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80042ca:	e065      	b.n	8004398 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	ee07 3a90 	vmov	s15, r3
 80042d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042d6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004454 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80042da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042de:	4b59      	ldr	r3, [pc, #356]	; (8004444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042e6:	ee07 3a90 	vmov	s15, r3
 80042ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80042f2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800444c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80042f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004302:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004306:	ee67 7a27 	vmul.f32	s15, s14, s15
 800430a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800430e:	e043      	b.n	8004398 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	ee07 3a90 	vmov	s15, r3
 8004316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800431a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004458 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800431e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004322:	4b48      	ldr	r3, [pc, #288]	; (8004444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004326:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800432a:	ee07 3a90 	vmov	s15, r3
 800432e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004332:	ed97 6a03 	vldr	s12, [r7, #12]
 8004336:	eddf 5a45 	vldr	s11, [pc, #276]	; 800444c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800433a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800433e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004342:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004346:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800434a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800434e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004352:	e021      	b.n	8004398 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	ee07 3a90 	vmov	s15, r3
 800435a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800435e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004454 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004362:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004366:	4b37      	ldr	r3, [pc, #220]	; (8004444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800436e:	ee07 3a90 	vmov	s15, r3
 8004372:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004376:	ed97 6a03 	vldr	s12, [r7, #12]
 800437a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800444c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800437e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004382:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004386:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800438a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800438e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004392:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004396:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004398:	4b2a      	ldr	r3, [pc, #168]	; (8004444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800439a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439c:	0a5b      	lsrs	r3, r3, #9
 800439e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043a2:	ee07 3a90 	vmov	s15, r3
 80043a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80043ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80043b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80043b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043be:	ee17 2a90 	vmov	r2, s15
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80043c6:	4b1f      	ldr	r3, [pc, #124]	; (8004444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ca:	0c1b      	lsrs	r3, r3, #16
 80043cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043d0:	ee07 3a90 	vmov	s15, r3
 80043d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80043dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80043e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80043e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043ec:	ee17 2a90 	vmov	r2, s15
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80043f4:	4b13      	ldr	r3, [pc, #76]	; (8004444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f8:	0e1b      	lsrs	r3, r3, #24
 80043fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043fe:	ee07 3a90 	vmov	s15, r3
 8004402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004406:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800440a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800440e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004412:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004416:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800441a:	ee17 2a90 	vmov	r2, s15
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004422:	e008      	b.n	8004436 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	609a      	str	r2, [r3, #8]
}
 8004436:	bf00      	nop
 8004438:	3724      	adds	r7, #36	; 0x24
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr
 8004442:	bf00      	nop
 8004444:	58024400 	.word	0x58024400
 8004448:	03d09000 	.word	0x03d09000
 800444c:	46000000 	.word	0x46000000
 8004450:	4c742400 	.word	0x4c742400
 8004454:	4a742400 	.word	0x4a742400
 8004458:	4af42400 	.word	0x4af42400

0800445c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004466:	2300      	movs	r3, #0
 8004468:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800446a:	4b53      	ldr	r3, [pc, #332]	; (80045b8 <RCCEx_PLL2_Config+0x15c>)
 800446c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800446e:	f003 0303 	and.w	r3, r3, #3
 8004472:	2b03      	cmp	r3, #3
 8004474:	d101      	bne.n	800447a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e099      	b.n	80045ae <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800447a:	4b4f      	ldr	r3, [pc, #316]	; (80045b8 <RCCEx_PLL2_Config+0x15c>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a4e      	ldr	r2, [pc, #312]	; (80045b8 <RCCEx_PLL2_Config+0x15c>)
 8004480:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004484:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004486:	f7fd fbbb 	bl	8001c00 <HAL_GetTick>
 800448a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800448c:	e008      	b.n	80044a0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800448e:	f7fd fbb7 	bl	8001c00 <HAL_GetTick>
 8004492:	4602      	mov	r2, r0
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	2b02      	cmp	r3, #2
 800449a:	d901      	bls.n	80044a0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800449c:	2303      	movs	r3, #3
 800449e:	e086      	b.n	80045ae <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80044a0:	4b45      	ldr	r3, [pc, #276]	; (80045b8 <RCCEx_PLL2_Config+0x15c>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d1f0      	bne.n	800448e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80044ac:	4b42      	ldr	r3, [pc, #264]	; (80045b8 <RCCEx_PLL2_Config+0x15c>)
 80044ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	031b      	lsls	r3, r3, #12
 80044ba:	493f      	ldr	r1, [pc, #252]	; (80045b8 <RCCEx_PLL2_Config+0x15c>)
 80044bc:	4313      	orrs	r3, r2
 80044be:	628b      	str	r3, [r1, #40]	; 0x28
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	3b01      	subs	r3, #1
 80044c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	3b01      	subs	r3, #1
 80044d0:	025b      	lsls	r3, r3, #9
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	431a      	orrs	r2, r3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	3b01      	subs	r3, #1
 80044dc:	041b      	lsls	r3, r3, #16
 80044de:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80044e2:	431a      	orrs	r2, r3
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	691b      	ldr	r3, [r3, #16]
 80044e8:	3b01      	subs	r3, #1
 80044ea:	061b      	lsls	r3, r3, #24
 80044ec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80044f0:	4931      	ldr	r1, [pc, #196]	; (80045b8 <RCCEx_PLL2_Config+0x15c>)
 80044f2:	4313      	orrs	r3, r2
 80044f4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80044f6:	4b30      	ldr	r3, [pc, #192]	; (80045b8 <RCCEx_PLL2_Config+0x15c>)
 80044f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044fa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	695b      	ldr	r3, [r3, #20]
 8004502:	492d      	ldr	r1, [pc, #180]	; (80045b8 <RCCEx_PLL2_Config+0x15c>)
 8004504:	4313      	orrs	r3, r2
 8004506:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004508:	4b2b      	ldr	r3, [pc, #172]	; (80045b8 <RCCEx_PLL2_Config+0x15c>)
 800450a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800450c:	f023 0220 	bic.w	r2, r3, #32
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	699b      	ldr	r3, [r3, #24]
 8004514:	4928      	ldr	r1, [pc, #160]	; (80045b8 <RCCEx_PLL2_Config+0x15c>)
 8004516:	4313      	orrs	r3, r2
 8004518:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800451a:	4b27      	ldr	r3, [pc, #156]	; (80045b8 <RCCEx_PLL2_Config+0x15c>)
 800451c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800451e:	4a26      	ldr	r2, [pc, #152]	; (80045b8 <RCCEx_PLL2_Config+0x15c>)
 8004520:	f023 0310 	bic.w	r3, r3, #16
 8004524:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004526:	4b24      	ldr	r3, [pc, #144]	; (80045b8 <RCCEx_PLL2_Config+0x15c>)
 8004528:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800452a:	4b24      	ldr	r3, [pc, #144]	; (80045bc <RCCEx_PLL2_Config+0x160>)
 800452c:	4013      	ands	r3, r2
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	69d2      	ldr	r2, [r2, #28]
 8004532:	00d2      	lsls	r2, r2, #3
 8004534:	4920      	ldr	r1, [pc, #128]	; (80045b8 <RCCEx_PLL2_Config+0x15c>)
 8004536:	4313      	orrs	r3, r2
 8004538:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800453a:	4b1f      	ldr	r3, [pc, #124]	; (80045b8 <RCCEx_PLL2_Config+0x15c>)
 800453c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800453e:	4a1e      	ldr	r2, [pc, #120]	; (80045b8 <RCCEx_PLL2_Config+0x15c>)
 8004540:	f043 0310 	orr.w	r3, r3, #16
 8004544:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d106      	bne.n	800455a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800454c:	4b1a      	ldr	r3, [pc, #104]	; (80045b8 <RCCEx_PLL2_Config+0x15c>)
 800454e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004550:	4a19      	ldr	r2, [pc, #100]	; (80045b8 <RCCEx_PLL2_Config+0x15c>)
 8004552:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004556:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004558:	e00f      	b.n	800457a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	2b01      	cmp	r3, #1
 800455e:	d106      	bne.n	800456e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004560:	4b15      	ldr	r3, [pc, #84]	; (80045b8 <RCCEx_PLL2_Config+0x15c>)
 8004562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004564:	4a14      	ldr	r2, [pc, #80]	; (80045b8 <RCCEx_PLL2_Config+0x15c>)
 8004566:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800456a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800456c:	e005      	b.n	800457a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800456e:	4b12      	ldr	r3, [pc, #72]	; (80045b8 <RCCEx_PLL2_Config+0x15c>)
 8004570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004572:	4a11      	ldr	r2, [pc, #68]	; (80045b8 <RCCEx_PLL2_Config+0x15c>)
 8004574:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004578:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800457a:	4b0f      	ldr	r3, [pc, #60]	; (80045b8 <RCCEx_PLL2_Config+0x15c>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a0e      	ldr	r2, [pc, #56]	; (80045b8 <RCCEx_PLL2_Config+0x15c>)
 8004580:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004584:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004586:	f7fd fb3b 	bl	8001c00 <HAL_GetTick>
 800458a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800458c:	e008      	b.n	80045a0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800458e:	f7fd fb37 	bl	8001c00 <HAL_GetTick>
 8004592:	4602      	mov	r2, r0
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	1ad3      	subs	r3, r2, r3
 8004598:	2b02      	cmp	r3, #2
 800459a:	d901      	bls.n	80045a0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800459c:	2303      	movs	r3, #3
 800459e:	e006      	b.n	80045ae <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80045a0:	4b05      	ldr	r3, [pc, #20]	; (80045b8 <RCCEx_PLL2_Config+0x15c>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d0f0      	beq.n	800458e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80045ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3710      	adds	r7, #16
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	bf00      	nop
 80045b8:	58024400 	.word	0x58024400
 80045bc:	ffff0007 	.word	0xffff0007

080045c0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80045ca:	2300      	movs	r3, #0
 80045cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80045ce:	4b53      	ldr	r3, [pc, #332]	; (800471c <RCCEx_PLL3_Config+0x15c>)
 80045d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d2:	f003 0303 	and.w	r3, r3, #3
 80045d6:	2b03      	cmp	r3, #3
 80045d8:	d101      	bne.n	80045de <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e099      	b.n	8004712 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80045de:	4b4f      	ldr	r3, [pc, #316]	; (800471c <RCCEx_PLL3_Config+0x15c>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a4e      	ldr	r2, [pc, #312]	; (800471c <RCCEx_PLL3_Config+0x15c>)
 80045e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045ea:	f7fd fb09 	bl	8001c00 <HAL_GetTick>
 80045ee:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80045f0:	e008      	b.n	8004604 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80045f2:	f7fd fb05 	bl	8001c00 <HAL_GetTick>
 80045f6:	4602      	mov	r2, r0
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	d901      	bls.n	8004604 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e086      	b.n	8004712 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004604:	4b45      	ldr	r3, [pc, #276]	; (800471c <RCCEx_PLL3_Config+0x15c>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800460c:	2b00      	cmp	r3, #0
 800460e:	d1f0      	bne.n	80045f2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004610:	4b42      	ldr	r3, [pc, #264]	; (800471c <RCCEx_PLL3_Config+0x15c>)
 8004612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004614:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	051b      	lsls	r3, r3, #20
 800461e:	493f      	ldr	r1, [pc, #252]	; (800471c <RCCEx_PLL3_Config+0x15c>)
 8004620:	4313      	orrs	r3, r2
 8004622:	628b      	str	r3, [r1, #40]	; 0x28
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	3b01      	subs	r3, #1
 800462a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	3b01      	subs	r3, #1
 8004634:	025b      	lsls	r3, r3, #9
 8004636:	b29b      	uxth	r3, r3
 8004638:	431a      	orrs	r2, r3
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	3b01      	subs	r3, #1
 8004640:	041b      	lsls	r3, r3, #16
 8004642:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004646:	431a      	orrs	r2, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	691b      	ldr	r3, [r3, #16]
 800464c:	3b01      	subs	r3, #1
 800464e:	061b      	lsls	r3, r3, #24
 8004650:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004654:	4931      	ldr	r1, [pc, #196]	; (800471c <RCCEx_PLL3_Config+0x15c>)
 8004656:	4313      	orrs	r3, r2
 8004658:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800465a:	4b30      	ldr	r3, [pc, #192]	; (800471c <RCCEx_PLL3_Config+0x15c>)
 800465c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800465e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	695b      	ldr	r3, [r3, #20]
 8004666:	492d      	ldr	r1, [pc, #180]	; (800471c <RCCEx_PLL3_Config+0x15c>)
 8004668:	4313      	orrs	r3, r2
 800466a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800466c:	4b2b      	ldr	r3, [pc, #172]	; (800471c <RCCEx_PLL3_Config+0x15c>)
 800466e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004670:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	699b      	ldr	r3, [r3, #24]
 8004678:	4928      	ldr	r1, [pc, #160]	; (800471c <RCCEx_PLL3_Config+0x15c>)
 800467a:	4313      	orrs	r3, r2
 800467c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800467e:	4b27      	ldr	r3, [pc, #156]	; (800471c <RCCEx_PLL3_Config+0x15c>)
 8004680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004682:	4a26      	ldr	r2, [pc, #152]	; (800471c <RCCEx_PLL3_Config+0x15c>)
 8004684:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004688:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800468a:	4b24      	ldr	r3, [pc, #144]	; (800471c <RCCEx_PLL3_Config+0x15c>)
 800468c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800468e:	4b24      	ldr	r3, [pc, #144]	; (8004720 <RCCEx_PLL3_Config+0x160>)
 8004690:	4013      	ands	r3, r2
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	69d2      	ldr	r2, [r2, #28]
 8004696:	00d2      	lsls	r2, r2, #3
 8004698:	4920      	ldr	r1, [pc, #128]	; (800471c <RCCEx_PLL3_Config+0x15c>)
 800469a:	4313      	orrs	r3, r2
 800469c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800469e:	4b1f      	ldr	r3, [pc, #124]	; (800471c <RCCEx_PLL3_Config+0x15c>)
 80046a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a2:	4a1e      	ldr	r2, [pc, #120]	; (800471c <RCCEx_PLL3_Config+0x15c>)
 80046a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d106      	bne.n	80046be <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80046b0:	4b1a      	ldr	r3, [pc, #104]	; (800471c <RCCEx_PLL3_Config+0x15c>)
 80046b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b4:	4a19      	ldr	r2, [pc, #100]	; (800471c <RCCEx_PLL3_Config+0x15c>)
 80046b6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80046ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 80046bc:	e00f      	b.n	80046de <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d106      	bne.n	80046d2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80046c4:	4b15      	ldr	r3, [pc, #84]	; (800471c <RCCEx_PLL3_Config+0x15c>)
 80046c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c8:	4a14      	ldr	r2, [pc, #80]	; (800471c <RCCEx_PLL3_Config+0x15c>)
 80046ca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80046ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 80046d0:	e005      	b.n	80046de <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80046d2:	4b12      	ldr	r3, [pc, #72]	; (800471c <RCCEx_PLL3_Config+0x15c>)
 80046d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d6:	4a11      	ldr	r2, [pc, #68]	; (800471c <RCCEx_PLL3_Config+0x15c>)
 80046d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046dc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80046de:	4b0f      	ldr	r3, [pc, #60]	; (800471c <RCCEx_PLL3_Config+0x15c>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a0e      	ldr	r2, [pc, #56]	; (800471c <RCCEx_PLL3_Config+0x15c>)
 80046e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046ea:	f7fd fa89 	bl	8001c00 <HAL_GetTick>
 80046ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80046f0:	e008      	b.n	8004704 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80046f2:	f7fd fa85 	bl	8001c00 <HAL_GetTick>
 80046f6:	4602      	mov	r2, r0
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d901      	bls.n	8004704 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	e006      	b.n	8004712 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004704:	4b05      	ldr	r3, [pc, #20]	; (800471c <RCCEx_PLL3_Config+0x15c>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800470c:	2b00      	cmp	r3, #0
 800470e:	d0f0      	beq.n	80046f2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004710:	7bfb      	ldrb	r3, [r7, #15]
}
 8004712:	4618      	mov	r0, r3
 8004714:	3710      	adds	r7, #16
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	58024400 	.word	0x58024400
 8004720:	ffff0007 	.word	0xffff0007

08004724 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b082      	sub	sp, #8
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d101      	bne.n	8004736 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e049      	b.n	80047ca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800473c:	b2db      	uxtb	r3, r3
 800473e:	2b00      	cmp	r3, #0
 8004740:	d106      	bne.n	8004750 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f7fc feea 	bl	8001524 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2202      	movs	r2, #2
 8004754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	3304      	adds	r3, #4
 8004760:	4619      	mov	r1, r3
 8004762:	4610      	mov	r0, r2
 8004764:	f001 f8d2 	bl	800590c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047c8:	2300      	movs	r3, #0
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3708      	adds	r7, #8
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
	...

080047d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b085      	sub	sp, #20
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d001      	beq.n	80047ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	e05e      	b.n	80048aa <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2202      	movs	r2, #2
 80047f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	68da      	ldr	r2, [r3, #12]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f042 0201 	orr.w	r2, r2, #1
 8004802:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a2b      	ldr	r2, [pc, #172]	; (80048b8 <HAL_TIM_Base_Start_IT+0xe4>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d02c      	beq.n	8004868 <HAL_TIM_Base_Start_IT+0x94>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004816:	d027      	beq.n	8004868 <HAL_TIM_Base_Start_IT+0x94>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a27      	ldr	r2, [pc, #156]	; (80048bc <HAL_TIM_Base_Start_IT+0xe8>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d022      	beq.n	8004868 <HAL_TIM_Base_Start_IT+0x94>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a26      	ldr	r2, [pc, #152]	; (80048c0 <HAL_TIM_Base_Start_IT+0xec>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d01d      	beq.n	8004868 <HAL_TIM_Base_Start_IT+0x94>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a24      	ldr	r2, [pc, #144]	; (80048c4 <HAL_TIM_Base_Start_IT+0xf0>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d018      	beq.n	8004868 <HAL_TIM_Base_Start_IT+0x94>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a23      	ldr	r2, [pc, #140]	; (80048c8 <HAL_TIM_Base_Start_IT+0xf4>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d013      	beq.n	8004868 <HAL_TIM_Base_Start_IT+0x94>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a21      	ldr	r2, [pc, #132]	; (80048cc <HAL_TIM_Base_Start_IT+0xf8>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d00e      	beq.n	8004868 <HAL_TIM_Base_Start_IT+0x94>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a20      	ldr	r2, [pc, #128]	; (80048d0 <HAL_TIM_Base_Start_IT+0xfc>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d009      	beq.n	8004868 <HAL_TIM_Base_Start_IT+0x94>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a1e      	ldr	r2, [pc, #120]	; (80048d4 <HAL_TIM_Base_Start_IT+0x100>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d004      	beq.n	8004868 <HAL_TIM_Base_Start_IT+0x94>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a1d      	ldr	r2, [pc, #116]	; (80048d8 <HAL_TIM_Base_Start_IT+0x104>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d115      	bne.n	8004894 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	689a      	ldr	r2, [r3, #8]
 800486e:	4b1b      	ldr	r3, [pc, #108]	; (80048dc <HAL_TIM_Base_Start_IT+0x108>)
 8004870:	4013      	ands	r3, r2
 8004872:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2b06      	cmp	r3, #6
 8004878:	d015      	beq.n	80048a6 <HAL_TIM_Base_Start_IT+0xd2>
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004880:	d011      	beq.n	80048a6 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f042 0201 	orr.w	r2, r2, #1
 8004890:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004892:	e008      	b.n	80048a6 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f042 0201 	orr.w	r2, r2, #1
 80048a2:	601a      	str	r2, [r3, #0]
 80048a4:	e000      	b.n	80048a8 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80048a8:	2300      	movs	r3, #0
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3714      	adds	r7, #20
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr
 80048b6:	bf00      	nop
 80048b8:	40010000 	.word	0x40010000
 80048bc:	40000400 	.word	0x40000400
 80048c0:	40000800 	.word	0x40000800
 80048c4:	40000c00 	.word	0x40000c00
 80048c8:	40010400 	.word	0x40010400
 80048cc:	40001800 	.word	0x40001800
 80048d0:	40014000 	.word	0x40014000
 80048d4:	4000e000 	.word	0x4000e000
 80048d8:	4000e400 	.word	0x4000e400
 80048dc:	00010007 	.word	0x00010007

080048e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b082      	sub	sp, #8
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d101      	bne.n	80048f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e049      	b.n	8004986 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d106      	bne.n	800490c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f000 f841 	bl	800498e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2202      	movs	r2, #2
 8004910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	3304      	adds	r3, #4
 800491c:	4619      	mov	r1, r3
 800491e:	4610      	mov	r0, r2
 8004920:	f000 fff4 	bl	800590c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004984:	2300      	movs	r3, #0
}
 8004986:	4618      	mov	r0, r3
 8004988:	3708      	adds	r7, #8
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}

0800498e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800498e:	b480      	push	{r7}
 8004990:	b083      	sub	sp, #12
 8004992:	af00      	add	r7, sp, #0
 8004994:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004996:	bf00      	nop
 8004998:	370c      	adds	r7, #12
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr
	...

080049a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d109      	bne.n	80049c8 <HAL_TIM_PWM_Start+0x24>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	2b01      	cmp	r3, #1
 80049be:	bf14      	ite	ne
 80049c0:	2301      	movne	r3, #1
 80049c2:	2300      	moveq	r3, #0
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	e03c      	b.n	8004a42 <HAL_TIM_PWM_Start+0x9e>
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	2b04      	cmp	r3, #4
 80049cc:	d109      	bne.n	80049e2 <HAL_TIM_PWM_Start+0x3e>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	bf14      	ite	ne
 80049da:	2301      	movne	r3, #1
 80049dc:	2300      	moveq	r3, #0
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	e02f      	b.n	8004a42 <HAL_TIM_PWM_Start+0x9e>
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	2b08      	cmp	r3, #8
 80049e6:	d109      	bne.n	80049fc <HAL_TIM_PWM_Start+0x58>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	bf14      	ite	ne
 80049f4:	2301      	movne	r3, #1
 80049f6:	2300      	moveq	r3, #0
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	e022      	b.n	8004a42 <HAL_TIM_PWM_Start+0x9e>
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	2b0c      	cmp	r3, #12
 8004a00:	d109      	bne.n	8004a16 <HAL_TIM_PWM_Start+0x72>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	bf14      	ite	ne
 8004a0e:	2301      	movne	r3, #1
 8004a10:	2300      	moveq	r3, #0
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	e015      	b.n	8004a42 <HAL_TIM_PWM_Start+0x9e>
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	2b10      	cmp	r3, #16
 8004a1a:	d109      	bne.n	8004a30 <HAL_TIM_PWM_Start+0x8c>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	bf14      	ite	ne
 8004a28:	2301      	movne	r3, #1
 8004a2a:	2300      	moveq	r3, #0
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	e008      	b.n	8004a42 <HAL_TIM_PWM_Start+0x9e>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	bf14      	ite	ne
 8004a3c:	2301      	movne	r3, #1
 8004a3e:	2300      	moveq	r3, #0
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d001      	beq.n	8004a4a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e0ab      	b.n	8004ba2 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d104      	bne.n	8004a5a <HAL_TIM_PWM_Start+0xb6>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2202      	movs	r2, #2
 8004a54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a58:	e023      	b.n	8004aa2 <HAL_TIM_PWM_Start+0xfe>
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	2b04      	cmp	r3, #4
 8004a5e:	d104      	bne.n	8004a6a <HAL_TIM_PWM_Start+0xc6>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2202      	movs	r2, #2
 8004a64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a68:	e01b      	b.n	8004aa2 <HAL_TIM_PWM_Start+0xfe>
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	2b08      	cmp	r3, #8
 8004a6e:	d104      	bne.n	8004a7a <HAL_TIM_PWM_Start+0xd6>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2202      	movs	r2, #2
 8004a74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a78:	e013      	b.n	8004aa2 <HAL_TIM_PWM_Start+0xfe>
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	2b0c      	cmp	r3, #12
 8004a7e:	d104      	bne.n	8004a8a <HAL_TIM_PWM_Start+0xe6>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2202      	movs	r2, #2
 8004a84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a88:	e00b      	b.n	8004aa2 <HAL_TIM_PWM_Start+0xfe>
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	2b10      	cmp	r3, #16
 8004a8e:	d104      	bne.n	8004a9a <HAL_TIM_PWM_Start+0xf6>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2202      	movs	r2, #2
 8004a94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a98:	e003      	b.n	8004aa2 <HAL_TIM_PWM_Start+0xfe>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2202      	movs	r2, #2
 8004a9e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	6839      	ldr	r1, [r7, #0]
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f001 fc7e 	bl	80063ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a3d      	ldr	r2, [pc, #244]	; (8004bac <HAL_TIM_PWM_Start+0x208>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d013      	beq.n	8004ae2 <HAL_TIM_PWM_Start+0x13e>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a3c      	ldr	r2, [pc, #240]	; (8004bb0 <HAL_TIM_PWM_Start+0x20c>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d00e      	beq.n	8004ae2 <HAL_TIM_PWM_Start+0x13e>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a3a      	ldr	r2, [pc, #232]	; (8004bb4 <HAL_TIM_PWM_Start+0x210>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d009      	beq.n	8004ae2 <HAL_TIM_PWM_Start+0x13e>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a39      	ldr	r2, [pc, #228]	; (8004bb8 <HAL_TIM_PWM_Start+0x214>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d004      	beq.n	8004ae2 <HAL_TIM_PWM_Start+0x13e>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a37      	ldr	r2, [pc, #220]	; (8004bbc <HAL_TIM_PWM_Start+0x218>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d101      	bne.n	8004ae6 <HAL_TIM_PWM_Start+0x142>
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e000      	b.n	8004ae8 <HAL_TIM_PWM_Start+0x144>
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d007      	beq.n	8004afc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004afa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a2a      	ldr	r2, [pc, #168]	; (8004bac <HAL_TIM_PWM_Start+0x208>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d02c      	beq.n	8004b60 <HAL_TIM_PWM_Start+0x1bc>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b0e:	d027      	beq.n	8004b60 <HAL_TIM_PWM_Start+0x1bc>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a2a      	ldr	r2, [pc, #168]	; (8004bc0 <HAL_TIM_PWM_Start+0x21c>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d022      	beq.n	8004b60 <HAL_TIM_PWM_Start+0x1bc>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a29      	ldr	r2, [pc, #164]	; (8004bc4 <HAL_TIM_PWM_Start+0x220>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d01d      	beq.n	8004b60 <HAL_TIM_PWM_Start+0x1bc>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a27      	ldr	r2, [pc, #156]	; (8004bc8 <HAL_TIM_PWM_Start+0x224>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d018      	beq.n	8004b60 <HAL_TIM_PWM_Start+0x1bc>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a1f      	ldr	r2, [pc, #124]	; (8004bb0 <HAL_TIM_PWM_Start+0x20c>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d013      	beq.n	8004b60 <HAL_TIM_PWM_Start+0x1bc>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a23      	ldr	r2, [pc, #140]	; (8004bcc <HAL_TIM_PWM_Start+0x228>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d00e      	beq.n	8004b60 <HAL_TIM_PWM_Start+0x1bc>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a1b      	ldr	r2, [pc, #108]	; (8004bb4 <HAL_TIM_PWM_Start+0x210>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d009      	beq.n	8004b60 <HAL_TIM_PWM_Start+0x1bc>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a1f      	ldr	r2, [pc, #124]	; (8004bd0 <HAL_TIM_PWM_Start+0x22c>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d004      	beq.n	8004b60 <HAL_TIM_PWM_Start+0x1bc>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a1e      	ldr	r2, [pc, #120]	; (8004bd4 <HAL_TIM_PWM_Start+0x230>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d115      	bne.n	8004b8c <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	689a      	ldr	r2, [r3, #8]
 8004b66:	4b1c      	ldr	r3, [pc, #112]	; (8004bd8 <HAL_TIM_PWM_Start+0x234>)
 8004b68:	4013      	ands	r3, r2
 8004b6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2b06      	cmp	r3, #6
 8004b70:	d015      	beq.n	8004b9e <HAL_TIM_PWM_Start+0x1fa>
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b78:	d011      	beq.n	8004b9e <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f042 0201 	orr.w	r2, r2, #1
 8004b88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b8a:	e008      	b.n	8004b9e <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f042 0201 	orr.w	r2, r2, #1
 8004b9a:	601a      	str	r2, [r3, #0]
 8004b9c:	e000      	b.n	8004ba0 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b9e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ba0:	2300      	movs	r3, #0
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3710      	adds	r7, #16
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	40010000 	.word	0x40010000
 8004bb0:	40010400 	.word	0x40010400
 8004bb4:	40014000 	.word	0x40014000
 8004bb8:	40014400 	.word	0x40014400
 8004bbc:	40014800 	.word	0x40014800
 8004bc0:	40000400 	.word	0x40000400
 8004bc4:	40000800 	.word	0x40000800
 8004bc8:	40000c00 	.word	0x40000c00
 8004bcc:	40001800 	.word	0x40001800
 8004bd0:	4000e000 	.word	0x4000e000
 8004bd4:	4000e400 	.word	0x4000e400
 8004bd8:	00010007 	.word	0x00010007

08004bdc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b082      	sub	sp, #8
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d101      	bne.n	8004bee <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e049      	b.n	8004c82 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d106      	bne.n	8004c08 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f000 f841 	bl	8004c8a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2202      	movs	r2, #2
 8004c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	3304      	adds	r3, #4
 8004c18:	4619      	mov	r1, r3
 8004c1a:	4610      	mov	r0, r2
 8004c1c:	f000 fe76 	bl	800590c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c80:	2300      	movs	r3, #0
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3708      	adds	r7, #8
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}

08004c8a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004c8a:	b480      	push	{r7}
 8004c8c:	b083      	sub	sp, #12
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004c92:	bf00      	nop
 8004c94:	370c      	adds	r7, #12
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr
	...

08004ca0 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d104      	bne.n	8004cba <HAL_TIM_IC_Start+0x1a>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	e023      	b.n	8004d02 <HAL_TIM_IC_Start+0x62>
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	2b04      	cmp	r3, #4
 8004cbe:	d104      	bne.n	8004cca <HAL_TIM_IC_Start+0x2a>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	e01b      	b.n	8004d02 <HAL_TIM_IC_Start+0x62>
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	2b08      	cmp	r3, #8
 8004cce:	d104      	bne.n	8004cda <HAL_TIM_IC_Start+0x3a>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	e013      	b.n	8004d02 <HAL_TIM_IC_Start+0x62>
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	2b0c      	cmp	r3, #12
 8004cde:	d104      	bne.n	8004cea <HAL_TIM_IC_Start+0x4a>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	e00b      	b.n	8004d02 <HAL_TIM_IC_Start+0x62>
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	2b10      	cmp	r3, #16
 8004cee:	d104      	bne.n	8004cfa <HAL_TIM_IC_Start+0x5a>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	e003      	b.n	8004d02 <HAL_TIM_IC_Start+0x62>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d104      	bne.n	8004d14 <HAL_TIM_IC_Start+0x74>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	e013      	b.n	8004d3c <HAL_TIM_IC_Start+0x9c>
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	2b04      	cmp	r3, #4
 8004d18:	d104      	bne.n	8004d24 <HAL_TIM_IC_Start+0x84>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	e00b      	b.n	8004d3c <HAL_TIM_IC_Start+0x9c>
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	2b08      	cmp	r3, #8
 8004d28:	d104      	bne.n	8004d34 <HAL_TIM_IC_Start+0x94>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	e003      	b.n	8004d3c <HAL_TIM_IC_Start+0x9c>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d3e:	7bfb      	ldrb	r3, [r7, #15]
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d102      	bne.n	8004d4a <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004d44:	7bbb      	ldrb	r3, [r7, #14]
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d001      	beq.n	8004d4e <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e0a1      	b.n	8004e92 <HAL_TIM_IC_Start+0x1f2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d104      	bne.n	8004d5e <HAL_TIM_IC_Start+0xbe>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2202      	movs	r2, #2
 8004d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d5c:	e023      	b.n	8004da6 <HAL_TIM_IC_Start+0x106>
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	2b04      	cmp	r3, #4
 8004d62:	d104      	bne.n	8004d6e <HAL_TIM_IC_Start+0xce>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2202      	movs	r2, #2
 8004d68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d6c:	e01b      	b.n	8004da6 <HAL_TIM_IC_Start+0x106>
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	2b08      	cmp	r3, #8
 8004d72:	d104      	bne.n	8004d7e <HAL_TIM_IC_Start+0xde>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2202      	movs	r2, #2
 8004d78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d7c:	e013      	b.n	8004da6 <HAL_TIM_IC_Start+0x106>
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	2b0c      	cmp	r3, #12
 8004d82:	d104      	bne.n	8004d8e <HAL_TIM_IC_Start+0xee>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2202      	movs	r2, #2
 8004d88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d8c:	e00b      	b.n	8004da6 <HAL_TIM_IC_Start+0x106>
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	2b10      	cmp	r3, #16
 8004d92:	d104      	bne.n	8004d9e <HAL_TIM_IC_Start+0xfe>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2202      	movs	r2, #2
 8004d98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d9c:	e003      	b.n	8004da6 <HAL_TIM_IC_Start+0x106>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2202      	movs	r2, #2
 8004da2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d104      	bne.n	8004db6 <HAL_TIM_IC_Start+0x116>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2202      	movs	r2, #2
 8004db0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004db4:	e013      	b.n	8004dde <HAL_TIM_IC_Start+0x13e>
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	2b04      	cmp	r3, #4
 8004dba:	d104      	bne.n	8004dc6 <HAL_TIM_IC_Start+0x126>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2202      	movs	r2, #2
 8004dc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004dc4:	e00b      	b.n	8004dde <HAL_TIM_IC_Start+0x13e>
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	2b08      	cmp	r3, #8
 8004dca:	d104      	bne.n	8004dd6 <HAL_TIM_IC_Start+0x136>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2202      	movs	r2, #2
 8004dd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004dd4:	e003      	b.n	8004dde <HAL_TIM_IC_Start+0x13e>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2202      	movs	r2, #2
 8004dda:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	2201      	movs	r2, #1
 8004de4:	6839      	ldr	r1, [r7, #0]
 8004de6:	4618      	mov	r0, r3
 8004de8:	f001 fae0 	bl	80063ac <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a2a      	ldr	r2, [pc, #168]	; (8004e9c <HAL_TIM_IC_Start+0x1fc>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d02c      	beq.n	8004e50 <HAL_TIM_IC_Start+0x1b0>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dfe:	d027      	beq.n	8004e50 <HAL_TIM_IC_Start+0x1b0>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a26      	ldr	r2, [pc, #152]	; (8004ea0 <HAL_TIM_IC_Start+0x200>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d022      	beq.n	8004e50 <HAL_TIM_IC_Start+0x1b0>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a25      	ldr	r2, [pc, #148]	; (8004ea4 <HAL_TIM_IC_Start+0x204>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d01d      	beq.n	8004e50 <HAL_TIM_IC_Start+0x1b0>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a23      	ldr	r2, [pc, #140]	; (8004ea8 <HAL_TIM_IC_Start+0x208>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d018      	beq.n	8004e50 <HAL_TIM_IC_Start+0x1b0>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a22      	ldr	r2, [pc, #136]	; (8004eac <HAL_TIM_IC_Start+0x20c>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d013      	beq.n	8004e50 <HAL_TIM_IC_Start+0x1b0>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a20      	ldr	r2, [pc, #128]	; (8004eb0 <HAL_TIM_IC_Start+0x210>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d00e      	beq.n	8004e50 <HAL_TIM_IC_Start+0x1b0>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a1f      	ldr	r2, [pc, #124]	; (8004eb4 <HAL_TIM_IC_Start+0x214>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d009      	beq.n	8004e50 <HAL_TIM_IC_Start+0x1b0>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a1d      	ldr	r2, [pc, #116]	; (8004eb8 <HAL_TIM_IC_Start+0x218>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d004      	beq.n	8004e50 <HAL_TIM_IC_Start+0x1b0>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a1c      	ldr	r2, [pc, #112]	; (8004ebc <HAL_TIM_IC_Start+0x21c>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d115      	bne.n	8004e7c <HAL_TIM_IC_Start+0x1dc>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	689a      	ldr	r2, [r3, #8]
 8004e56:	4b1a      	ldr	r3, [pc, #104]	; (8004ec0 <HAL_TIM_IC_Start+0x220>)
 8004e58:	4013      	ands	r3, r2
 8004e5a:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	2b06      	cmp	r3, #6
 8004e60:	d015      	beq.n	8004e8e <HAL_TIM_IC_Start+0x1ee>
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e68:	d011      	beq.n	8004e8e <HAL_TIM_IC_Start+0x1ee>
    {
      __HAL_TIM_ENABLE(htim);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f042 0201 	orr.w	r2, r2, #1
 8004e78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e7a:	e008      	b.n	8004e8e <HAL_TIM_IC_Start+0x1ee>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f042 0201 	orr.w	r2, r2, #1
 8004e8a:	601a      	str	r2, [r3, #0]
 8004e8c:	e000      	b.n	8004e90 <HAL_TIM_IC_Start+0x1f0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e8e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004e90:	2300      	movs	r3, #0
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3710      	adds	r7, #16
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	bf00      	nop
 8004e9c:	40010000 	.word	0x40010000
 8004ea0:	40000400 	.word	0x40000400
 8004ea4:	40000800 	.word	0x40000800
 8004ea8:	40000c00 	.word	0x40000c00
 8004eac:	40010400 	.word	0x40010400
 8004eb0:	40001800 	.word	0x40001800
 8004eb4:	40014000 	.word	0x40014000
 8004eb8:	4000e000 	.word	0x4000e000
 8004ebc:	4000e400 	.word	0x4000e400
 8004ec0:	00010007 	.word	0x00010007

08004ec4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b086      	sub	sp, #24
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d101      	bne.n	8004ed8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e08f      	b.n	8004ff8 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ede:	b2db      	uxtb	r3, r3
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d106      	bne.n	8004ef2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f7fc fbed 	bl	80016cc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2202      	movs	r2, #2
 8004ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	6899      	ldr	r1, [r3, #8]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	4b3e      	ldr	r3, [pc, #248]	; (8005000 <HAL_TIM_Encoder_Init+0x13c>)
 8004f06:	400b      	ands	r3, r1
 8004f08:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	3304      	adds	r3, #4
 8004f12:	4619      	mov	r1, r3
 8004f14:	4610      	mov	r0, r2
 8004f16:	f000 fcf9 	bl	800590c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	699b      	ldr	r3, [r3, #24]
 8004f28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	6a1b      	ldr	r3, [r3, #32]
 8004f30:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	697a      	ldr	r2, [r7, #20]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004f3c:	693a      	ldr	r2, [r7, #16]
 8004f3e:	4b31      	ldr	r3, [pc, #196]	; (8005004 <HAL_TIM_Encoder_Init+0x140>)
 8004f40:	4013      	ands	r3, r2
 8004f42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	689a      	ldr	r2, [r3, #8]
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	699b      	ldr	r3, [r3, #24]
 8004f4c:	021b      	lsls	r3, r3, #8
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	693a      	ldr	r2, [r7, #16]
 8004f52:	4313      	orrs	r3, r2
 8004f54:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004f56:	693a      	ldr	r2, [r7, #16]
 8004f58:	4b2b      	ldr	r3, [pc, #172]	; (8005008 <HAL_TIM_Encoder_Init+0x144>)
 8004f5a:	4013      	ands	r3, r2
 8004f5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004f5e:	693a      	ldr	r2, [r7, #16]
 8004f60:	4b2a      	ldr	r3, [pc, #168]	; (800500c <HAL_TIM_Encoder_Init+0x148>)
 8004f62:	4013      	ands	r3, r2
 8004f64:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	68da      	ldr	r2, [r3, #12]
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	69db      	ldr	r3, [r3, #28]
 8004f6e:	021b      	lsls	r3, r3, #8
 8004f70:	4313      	orrs	r3, r2
 8004f72:	693a      	ldr	r2, [r7, #16]
 8004f74:	4313      	orrs	r3, r2
 8004f76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	691b      	ldr	r3, [r3, #16]
 8004f7c:	011a      	lsls	r2, r3, #4
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	6a1b      	ldr	r3, [r3, #32]
 8004f82:	031b      	lsls	r3, r3, #12
 8004f84:	4313      	orrs	r3, r2
 8004f86:	693a      	ldr	r2, [r7, #16]
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004f92:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004f9a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	685a      	ldr	r2, [r3, #4]
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	695b      	ldr	r3, [r3, #20]
 8004fa4:	011b      	lsls	r3, r3, #4
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	68fa      	ldr	r2, [r7, #12]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	697a      	ldr	r2, [r7, #20]
 8004fb4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	693a      	ldr	r2, [r7, #16]
 8004fbc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	68fa      	ldr	r2, [r7, #12]
 8004fc4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2201      	movs	r2, #1
 8004fca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2201      	movs	r2, #1
 8004fda:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2201      	movs	r2, #1
 8004fea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ff6:	2300      	movs	r3, #0
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3718      	adds	r7, #24
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}
 8005000:	fffebff8 	.word	0xfffebff8
 8005004:	fffffcfc 	.word	0xfffffcfc
 8005008:	fffff3f3 	.word	0xfffff3f3
 800500c:	ffff0f0f 	.word	0xffff0f0f

08005010 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b084      	sub	sp, #16
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005020:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005028:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005030:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005038:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d110      	bne.n	8005062 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005040:	7bfb      	ldrb	r3, [r7, #15]
 8005042:	2b01      	cmp	r3, #1
 8005044:	d102      	bne.n	800504c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005046:	7b7b      	ldrb	r3, [r7, #13]
 8005048:	2b01      	cmp	r3, #1
 800504a:	d001      	beq.n	8005050 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	e069      	b.n	8005124 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2202      	movs	r2, #2
 8005054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2202      	movs	r2, #2
 800505c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005060:	e031      	b.n	80050c6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	2b04      	cmp	r3, #4
 8005066:	d110      	bne.n	800508a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005068:	7bbb      	ldrb	r3, [r7, #14]
 800506a:	2b01      	cmp	r3, #1
 800506c:	d102      	bne.n	8005074 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800506e:	7b3b      	ldrb	r3, [r7, #12]
 8005070:	2b01      	cmp	r3, #1
 8005072:	d001      	beq.n	8005078 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	e055      	b.n	8005124 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2202      	movs	r2, #2
 800507c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2202      	movs	r2, #2
 8005084:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005088:	e01d      	b.n	80050c6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800508a:	7bfb      	ldrb	r3, [r7, #15]
 800508c:	2b01      	cmp	r3, #1
 800508e:	d108      	bne.n	80050a2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005090:	7bbb      	ldrb	r3, [r7, #14]
 8005092:	2b01      	cmp	r3, #1
 8005094:	d105      	bne.n	80050a2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005096:	7b7b      	ldrb	r3, [r7, #13]
 8005098:	2b01      	cmp	r3, #1
 800509a:	d102      	bne.n	80050a2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800509c:	7b3b      	ldrb	r3, [r7, #12]
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d001      	beq.n	80050a6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	e03e      	b.n	8005124 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2202      	movs	r2, #2
 80050aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2202      	movs	r2, #2
 80050b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2202      	movs	r2, #2
 80050ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2202      	movs	r2, #2
 80050c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d003      	beq.n	80050d4 <HAL_TIM_Encoder_Start+0xc4>
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	2b04      	cmp	r3, #4
 80050d0:	d008      	beq.n	80050e4 <HAL_TIM_Encoder_Start+0xd4>
 80050d2:	e00f      	b.n	80050f4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	2201      	movs	r2, #1
 80050da:	2100      	movs	r1, #0
 80050dc:	4618      	mov	r0, r3
 80050de:	f001 f965 	bl	80063ac <TIM_CCxChannelCmd>
      break;
 80050e2:	e016      	b.n	8005112 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	2201      	movs	r2, #1
 80050ea:	2104      	movs	r1, #4
 80050ec:	4618      	mov	r0, r3
 80050ee:	f001 f95d 	bl	80063ac <TIM_CCxChannelCmd>
      break;
 80050f2:	e00e      	b.n	8005112 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	2201      	movs	r2, #1
 80050fa:	2100      	movs	r1, #0
 80050fc:	4618      	mov	r0, r3
 80050fe:	f001 f955 	bl	80063ac <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	2201      	movs	r2, #1
 8005108:	2104      	movs	r1, #4
 800510a:	4618      	mov	r0, r3
 800510c:	f001 f94e 	bl	80063ac <TIM_CCxChannelCmd>
      break;
 8005110:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f042 0201 	orr.w	r2, r2, #1
 8005120:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005122:	2300      	movs	r3, #0
}
 8005124:	4618      	mov	r0, r3
 8005126:	3710      	adds	r7, #16
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}

0800512c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b082      	sub	sp, #8
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	691b      	ldr	r3, [r3, #16]
 800513a:	f003 0302 	and.w	r3, r3, #2
 800513e:	2b02      	cmp	r3, #2
 8005140:	d122      	bne.n	8005188 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	f003 0302 	and.w	r3, r3, #2
 800514c:	2b02      	cmp	r3, #2
 800514e:	d11b      	bne.n	8005188 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f06f 0202 	mvn.w	r2, #2
 8005158:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2201      	movs	r2, #1
 800515e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	699b      	ldr	r3, [r3, #24]
 8005166:	f003 0303 	and.w	r3, r3, #3
 800516a:	2b00      	cmp	r3, #0
 800516c:	d003      	beq.n	8005176 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f000 fbae 	bl	80058d0 <HAL_TIM_IC_CaptureCallback>
 8005174:	e005      	b.n	8005182 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f000 fba0 	bl	80058bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f000 fbb1 	bl	80058e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	691b      	ldr	r3, [r3, #16]
 800518e:	f003 0304 	and.w	r3, r3, #4
 8005192:	2b04      	cmp	r3, #4
 8005194:	d122      	bne.n	80051dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	f003 0304 	and.w	r3, r3, #4
 80051a0:	2b04      	cmp	r3, #4
 80051a2:	d11b      	bne.n	80051dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f06f 0204 	mvn.w	r2, #4
 80051ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2202      	movs	r2, #2
 80051b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	699b      	ldr	r3, [r3, #24]
 80051ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d003      	beq.n	80051ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f000 fb84 	bl	80058d0 <HAL_TIM_IC_CaptureCallback>
 80051c8:	e005      	b.n	80051d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f000 fb76 	bl	80058bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f000 fb87 	bl	80058e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	691b      	ldr	r3, [r3, #16]
 80051e2:	f003 0308 	and.w	r3, r3, #8
 80051e6:	2b08      	cmp	r3, #8
 80051e8:	d122      	bne.n	8005230 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	f003 0308 	and.w	r3, r3, #8
 80051f4:	2b08      	cmp	r3, #8
 80051f6:	d11b      	bne.n	8005230 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f06f 0208 	mvn.w	r2, #8
 8005200:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2204      	movs	r2, #4
 8005206:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	69db      	ldr	r3, [r3, #28]
 800520e:	f003 0303 	and.w	r3, r3, #3
 8005212:	2b00      	cmp	r3, #0
 8005214:	d003      	beq.n	800521e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 fb5a 	bl	80058d0 <HAL_TIM_IC_CaptureCallback>
 800521c:	e005      	b.n	800522a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f000 fb4c 	bl	80058bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f000 fb5d 	bl	80058e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	691b      	ldr	r3, [r3, #16]
 8005236:	f003 0310 	and.w	r3, r3, #16
 800523a:	2b10      	cmp	r3, #16
 800523c:	d122      	bne.n	8005284 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	f003 0310 	and.w	r3, r3, #16
 8005248:	2b10      	cmp	r3, #16
 800524a:	d11b      	bne.n	8005284 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f06f 0210 	mvn.w	r2, #16
 8005254:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2208      	movs	r2, #8
 800525a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	69db      	ldr	r3, [r3, #28]
 8005262:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005266:	2b00      	cmp	r3, #0
 8005268:	d003      	beq.n	8005272 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f000 fb30 	bl	80058d0 <HAL_TIM_IC_CaptureCallback>
 8005270:	e005      	b.n	800527e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f000 fb22 	bl	80058bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f000 fb33 	bl	80058e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2200      	movs	r2, #0
 8005282:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	691b      	ldr	r3, [r3, #16]
 800528a:	f003 0301 	and.w	r3, r3, #1
 800528e:	2b01      	cmp	r3, #1
 8005290:	d10e      	bne.n	80052b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	f003 0301 	and.w	r3, r3, #1
 800529c:	2b01      	cmp	r3, #1
 800529e:	d107      	bne.n	80052b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f06f 0201 	mvn.w	r2, #1
 80052a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f7fc f818 	bl	80012e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	691b      	ldr	r3, [r3, #16]
 80052b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052ba:	2b80      	cmp	r3, #128	; 0x80
 80052bc:	d10e      	bne.n	80052dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052c8:	2b80      	cmp	r3, #128	; 0x80
 80052ca:	d107      	bne.n	80052dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80052d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f001 f934 	bl	8006544 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052ea:	d10e      	bne.n	800530a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052f6:	2b80      	cmp	r3, #128	; 0x80
 80052f8:	d107      	bne.n	800530a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005302:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f001 f927 	bl	8006558 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	691b      	ldr	r3, [r3, #16]
 8005310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005314:	2b40      	cmp	r3, #64	; 0x40
 8005316:	d10e      	bne.n	8005336 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	68db      	ldr	r3, [r3, #12]
 800531e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005322:	2b40      	cmp	r3, #64	; 0x40
 8005324:	d107      	bne.n	8005336 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800532e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f000 fae1 	bl	80058f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	691b      	ldr	r3, [r3, #16]
 800533c:	f003 0320 	and.w	r3, r3, #32
 8005340:	2b20      	cmp	r3, #32
 8005342:	d10e      	bne.n	8005362 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	f003 0320 	and.w	r3, r3, #32
 800534e:	2b20      	cmp	r3, #32
 8005350:	d107      	bne.n	8005362 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f06f 0220 	mvn.w	r2, #32
 800535a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f001 f8e7 	bl	8006530 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005362:	bf00      	nop
 8005364:	3708      	adds	r7, #8
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}

0800536a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800536a:	b580      	push	{r7, lr}
 800536c:	b086      	sub	sp, #24
 800536e:	af00      	add	r7, sp, #0
 8005370:	60f8      	str	r0, [r7, #12]
 8005372:	60b9      	str	r1, [r7, #8]
 8005374:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005376:	2300      	movs	r3, #0
 8005378:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005380:	2b01      	cmp	r3, #1
 8005382:	d101      	bne.n	8005388 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005384:	2302      	movs	r3, #2
 8005386:	e088      	b.n	800549a <HAL_TIM_IC_ConfigChannel+0x130>
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d11b      	bne.n	80053ce <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	6818      	ldr	r0, [r3, #0]
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	6819      	ldr	r1, [r3, #0]
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	685a      	ldr	r2, [r3, #4]
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	68db      	ldr	r3, [r3, #12]
 80053a6:	f000 fe2d 	bl	8006004 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	699a      	ldr	r2, [r3, #24]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f022 020c 	bic.w	r2, r2, #12
 80053b8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	6999      	ldr	r1, [r3, #24]
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	689a      	ldr	r2, [r3, #8]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	430a      	orrs	r2, r1
 80053ca:	619a      	str	r2, [r3, #24]
 80053cc:	e060      	b.n	8005490 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2b04      	cmp	r3, #4
 80053d2:	d11c      	bne.n	800540e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	6818      	ldr	r0, [r3, #0]
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	6819      	ldr	r1, [r3, #0]
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	685a      	ldr	r2, [r3, #4]
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	f000 febd 	bl	8006162 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	699a      	ldr	r2, [r3, #24]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80053f6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	6999      	ldr	r1, [r3, #24]
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	021a      	lsls	r2, r3, #8
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	430a      	orrs	r2, r1
 800540a:	619a      	str	r2, [r3, #24]
 800540c:	e040      	b.n	8005490 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2b08      	cmp	r3, #8
 8005412:	d11b      	bne.n	800544c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	6818      	ldr	r0, [r3, #0]
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	6819      	ldr	r1, [r3, #0]
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	685a      	ldr	r2, [r3, #4]
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	68db      	ldr	r3, [r3, #12]
 8005424:	f000 ff0a 	bl	800623c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	69da      	ldr	r2, [r3, #28]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f022 020c 	bic.w	r2, r2, #12
 8005436:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	69d9      	ldr	r1, [r3, #28]
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	689a      	ldr	r2, [r3, #8]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	430a      	orrs	r2, r1
 8005448:	61da      	str	r2, [r3, #28]
 800544a:	e021      	b.n	8005490 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2b0c      	cmp	r3, #12
 8005450:	d11c      	bne.n	800548c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	6818      	ldr	r0, [r3, #0]
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	6819      	ldr	r1, [r3, #0]
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	685a      	ldr	r2, [r3, #4]
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	f000 ff27 	bl	80062b4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	69da      	ldr	r2, [r3, #28]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005474:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	69d9      	ldr	r1, [r3, #28]
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	021a      	lsls	r2, r3, #8
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	430a      	orrs	r2, r1
 8005488:	61da      	str	r2, [r3, #28]
 800548a:	e001      	b.n	8005490 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2200      	movs	r2, #0
 8005494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005498:	7dfb      	ldrb	r3, [r7, #23]
}
 800549a:	4618      	mov	r0, r3
 800549c:	3718      	adds	r7, #24
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}
	...

080054a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b086      	sub	sp, #24
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	60f8      	str	r0, [r7, #12]
 80054ac:	60b9      	str	r1, [r7, #8]
 80054ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054b0:	2300      	movs	r3, #0
 80054b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d101      	bne.n	80054c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80054be:	2302      	movs	r3, #2
 80054c0:	e0ff      	b.n	80056c2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2201      	movs	r2, #1
 80054c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2b14      	cmp	r3, #20
 80054ce:	f200 80f0 	bhi.w	80056b2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80054d2:	a201      	add	r2, pc, #4	; (adr r2, 80054d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80054d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054d8:	0800552d 	.word	0x0800552d
 80054dc:	080056b3 	.word	0x080056b3
 80054e0:	080056b3 	.word	0x080056b3
 80054e4:	080056b3 	.word	0x080056b3
 80054e8:	0800556d 	.word	0x0800556d
 80054ec:	080056b3 	.word	0x080056b3
 80054f0:	080056b3 	.word	0x080056b3
 80054f4:	080056b3 	.word	0x080056b3
 80054f8:	080055af 	.word	0x080055af
 80054fc:	080056b3 	.word	0x080056b3
 8005500:	080056b3 	.word	0x080056b3
 8005504:	080056b3 	.word	0x080056b3
 8005508:	080055ef 	.word	0x080055ef
 800550c:	080056b3 	.word	0x080056b3
 8005510:	080056b3 	.word	0x080056b3
 8005514:	080056b3 	.word	0x080056b3
 8005518:	08005631 	.word	0x08005631
 800551c:	080056b3 	.word	0x080056b3
 8005520:	080056b3 	.word	0x080056b3
 8005524:	080056b3 	.word	0x080056b3
 8005528:	08005671 	.word	0x08005671
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	68b9      	ldr	r1, [r7, #8]
 8005532:	4618      	mov	r0, r3
 8005534:	f000 fa90 	bl	8005a58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	699a      	ldr	r2, [r3, #24]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f042 0208 	orr.w	r2, r2, #8
 8005546:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	699a      	ldr	r2, [r3, #24]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f022 0204 	bic.w	r2, r2, #4
 8005556:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	6999      	ldr	r1, [r3, #24]
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	691a      	ldr	r2, [r3, #16]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	430a      	orrs	r2, r1
 8005568:	619a      	str	r2, [r3, #24]
      break;
 800556a:	e0a5      	b.n	80056b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	68b9      	ldr	r1, [r7, #8]
 8005572:	4618      	mov	r0, r3
 8005574:	f000 fb00 	bl	8005b78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	699a      	ldr	r2, [r3, #24]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005586:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	699a      	ldr	r2, [r3, #24]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005596:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	6999      	ldr	r1, [r3, #24]
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	691b      	ldr	r3, [r3, #16]
 80055a2:	021a      	lsls	r2, r3, #8
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	430a      	orrs	r2, r1
 80055aa:	619a      	str	r2, [r3, #24]
      break;
 80055ac:	e084      	b.n	80056b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	68b9      	ldr	r1, [r7, #8]
 80055b4:	4618      	mov	r0, r3
 80055b6:	f000 fb69 	bl	8005c8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	69da      	ldr	r2, [r3, #28]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f042 0208 	orr.w	r2, r2, #8
 80055c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	69da      	ldr	r2, [r3, #28]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f022 0204 	bic.w	r2, r2, #4
 80055d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	69d9      	ldr	r1, [r3, #28]
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	691a      	ldr	r2, [r3, #16]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	430a      	orrs	r2, r1
 80055ea:	61da      	str	r2, [r3, #28]
      break;
 80055ec:	e064      	b.n	80056b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	68b9      	ldr	r1, [r7, #8]
 80055f4:	4618      	mov	r0, r3
 80055f6:	f000 fbd1 	bl	8005d9c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	69da      	ldr	r2, [r3, #28]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005608:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	69da      	ldr	r2, [r3, #28]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005618:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	69d9      	ldr	r1, [r3, #28]
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	691b      	ldr	r3, [r3, #16]
 8005624:	021a      	lsls	r2, r3, #8
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	430a      	orrs	r2, r1
 800562c:	61da      	str	r2, [r3, #28]
      break;
 800562e:	e043      	b.n	80056b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	68b9      	ldr	r1, [r7, #8]
 8005636:	4618      	mov	r0, r3
 8005638:	f000 fc1a 	bl	8005e70 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f042 0208 	orr.w	r2, r2, #8
 800564a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f022 0204 	bic.w	r2, r2, #4
 800565a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	691a      	ldr	r2, [r3, #16]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	430a      	orrs	r2, r1
 800566c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800566e:	e023      	b.n	80056b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	68b9      	ldr	r1, [r7, #8]
 8005676:	4618      	mov	r0, r3
 8005678:	f000 fc5e 	bl	8005f38 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800568a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800569a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	691b      	ldr	r3, [r3, #16]
 80056a6:	021a      	lsls	r2, r3, #8
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	430a      	orrs	r2, r1
 80056ae:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80056b0:	e002      	b.n	80056b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	75fb      	strb	r3, [r7, #23]
      break;
 80056b6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2200      	movs	r2, #0
 80056bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80056c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3718      	adds	r7, #24
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
 80056ca:	bf00      	nop

080056cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b084      	sub	sp, #16
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056d6:	2300      	movs	r3, #0
 80056d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d101      	bne.n	80056e8 <HAL_TIM_ConfigClockSource+0x1c>
 80056e4:	2302      	movs	r3, #2
 80056e6:	e0dc      	b.n	80058a2 <HAL_TIM_ConfigClockSource+0x1d6>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2202      	movs	r2, #2
 80056f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005700:	68ba      	ldr	r2, [r7, #8]
 8005702:	4b6a      	ldr	r3, [pc, #424]	; (80058ac <HAL_TIM_ConfigClockSource+0x1e0>)
 8005704:	4013      	ands	r3, r2
 8005706:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800570e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	68ba      	ldr	r2, [r7, #8]
 8005716:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a64      	ldr	r2, [pc, #400]	; (80058b0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800571e:	4293      	cmp	r3, r2
 8005720:	f000 80a9 	beq.w	8005876 <HAL_TIM_ConfigClockSource+0x1aa>
 8005724:	4a62      	ldr	r2, [pc, #392]	; (80058b0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005726:	4293      	cmp	r3, r2
 8005728:	f200 80ae 	bhi.w	8005888 <HAL_TIM_ConfigClockSource+0x1bc>
 800572c:	4a61      	ldr	r2, [pc, #388]	; (80058b4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800572e:	4293      	cmp	r3, r2
 8005730:	f000 80a1 	beq.w	8005876 <HAL_TIM_ConfigClockSource+0x1aa>
 8005734:	4a5f      	ldr	r2, [pc, #380]	; (80058b4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005736:	4293      	cmp	r3, r2
 8005738:	f200 80a6 	bhi.w	8005888 <HAL_TIM_ConfigClockSource+0x1bc>
 800573c:	4a5e      	ldr	r2, [pc, #376]	; (80058b8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800573e:	4293      	cmp	r3, r2
 8005740:	f000 8099 	beq.w	8005876 <HAL_TIM_ConfigClockSource+0x1aa>
 8005744:	4a5c      	ldr	r2, [pc, #368]	; (80058b8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005746:	4293      	cmp	r3, r2
 8005748:	f200 809e 	bhi.w	8005888 <HAL_TIM_ConfigClockSource+0x1bc>
 800574c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005750:	f000 8091 	beq.w	8005876 <HAL_TIM_ConfigClockSource+0x1aa>
 8005754:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005758:	f200 8096 	bhi.w	8005888 <HAL_TIM_ConfigClockSource+0x1bc>
 800575c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005760:	f000 8089 	beq.w	8005876 <HAL_TIM_ConfigClockSource+0x1aa>
 8005764:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005768:	f200 808e 	bhi.w	8005888 <HAL_TIM_ConfigClockSource+0x1bc>
 800576c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005770:	d03e      	beq.n	80057f0 <HAL_TIM_ConfigClockSource+0x124>
 8005772:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005776:	f200 8087 	bhi.w	8005888 <HAL_TIM_ConfigClockSource+0x1bc>
 800577a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800577e:	f000 8086 	beq.w	800588e <HAL_TIM_ConfigClockSource+0x1c2>
 8005782:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005786:	d87f      	bhi.n	8005888 <HAL_TIM_ConfigClockSource+0x1bc>
 8005788:	2b70      	cmp	r3, #112	; 0x70
 800578a:	d01a      	beq.n	80057c2 <HAL_TIM_ConfigClockSource+0xf6>
 800578c:	2b70      	cmp	r3, #112	; 0x70
 800578e:	d87b      	bhi.n	8005888 <HAL_TIM_ConfigClockSource+0x1bc>
 8005790:	2b60      	cmp	r3, #96	; 0x60
 8005792:	d050      	beq.n	8005836 <HAL_TIM_ConfigClockSource+0x16a>
 8005794:	2b60      	cmp	r3, #96	; 0x60
 8005796:	d877      	bhi.n	8005888 <HAL_TIM_ConfigClockSource+0x1bc>
 8005798:	2b50      	cmp	r3, #80	; 0x50
 800579a:	d03c      	beq.n	8005816 <HAL_TIM_ConfigClockSource+0x14a>
 800579c:	2b50      	cmp	r3, #80	; 0x50
 800579e:	d873      	bhi.n	8005888 <HAL_TIM_ConfigClockSource+0x1bc>
 80057a0:	2b40      	cmp	r3, #64	; 0x40
 80057a2:	d058      	beq.n	8005856 <HAL_TIM_ConfigClockSource+0x18a>
 80057a4:	2b40      	cmp	r3, #64	; 0x40
 80057a6:	d86f      	bhi.n	8005888 <HAL_TIM_ConfigClockSource+0x1bc>
 80057a8:	2b30      	cmp	r3, #48	; 0x30
 80057aa:	d064      	beq.n	8005876 <HAL_TIM_ConfigClockSource+0x1aa>
 80057ac:	2b30      	cmp	r3, #48	; 0x30
 80057ae:	d86b      	bhi.n	8005888 <HAL_TIM_ConfigClockSource+0x1bc>
 80057b0:	2b20      	cmp	r3, #32
 80057b2:	d060      	beq.n	8005876 <HAL_TIM_ConfigClockSource+0x1aa>
 80057b4:	2b20      	cmp	r3, #32
 80057b6:	d867      	bhi.n	8005888 <HAL_TIM_ConfigClockSource+0x1bc>
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d05c      	beq.n	8005876 <HAL_TIM_ConfigClockSource+0x1aa>
 80057bc:	2b10      	cmp	r3, #16
 80057be:	d05a      	beq.n	8005876 <HAL_TIM_ConfigClockSource+0x1aa>
 80057c0:	e062      	b.n	8005888 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6818      	ldr	r0, [r3, #0]
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	6899      	ldr	r1, [r3, #8]
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	685a      	ldr	r2, [r3, #4]
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	f000 fdcb 	bl	800636c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80057e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	68ba      	ldr	r2, [r7, #8]
 80057ec:	609a      	str	r2, [r3, #8]
      break;
 80057ee:	e04f      	b.n	8005890 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6818      	ldr	r0, [r3, #0]
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	6899      	ldr	r1, [r3, #8]
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	685a      	ldr	r2, [r3, #4]
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	68db      	ldr	r3, [r3, #12]
 8005800:	f000 fdb4 	bl	800636c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	689a      	ldr	r2, [r3, #8]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005812:	609a      	str	r2, [r3, #8]
      break;
 8005814:	e03c      	b.n	8005890 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6818      	ldr	r0, [r3, #0]
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	6859      	ldr	r1, [r3, #4]
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	68db      	ldr	r3, [r3, #12]
 8005822:	461a      	mov	r2, r3
 8005824:	f000 fc6e 	bl	8006104 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	2150      	movs	r1, #80	; 0x50
 800582e:	4618      	mov	r0, r3
 8005830:	f000 fd7e 	bl	8006330 <TIM_ITRx_SetConfig>
      break;
 8005834:	e02c      	b.n	8005890 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6818      	ldr	r0, [r3, #0]
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	6859      	ldr	r1, [r3, #4]
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	461a      	mov	r2, r3
 8005844:	f000 fcca 	bl	80061dc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	2160      	movs	r1, #96	; 0x60
 800584e:	4618      	mov	r0, r3
 8005850:	f000 fd6e 	bl	8006330 <TIM_ITRx_SetConfig>
      break;
 8005854:	e01c      	b.n	8005890 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6818      	ldr	r0, [r3, #0]
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	6859      	ldr	r1, [r3, #4]
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	68db      	ldr	r3, [r3, #12]
 8005862:	461a      	mov	r2, r3
 8005864:	f000 fc4e 	bl	8006104 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	2140      	movs	r1, #64	; 0x40
 800586e:	4618      	mov	r0, r3
 8005870:	f000 fd5e 	bl	8006330 <TIM_ITRx_SetConfig>
      break;
 8005874:	e00c      	b.n	8005890 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4619      	mov	r1, r3
 8005880:	4610      	mov	r0, r2
 8005882:	f000 fd55 	bl	8006330 <TIM_ITRx_SetConfig>
      break;
 8005886:	e003      	b.n	8005890 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	73fb      	strb	r3, [r7, #15]
      break;
 800588c:	e000      	b.n	8005890 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800588e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2201      	movs	r2, #1
 8005894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2200      	movs	r2, #0
 800589c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80058a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3710      	adds	r7, #16
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}
 80058aa:	bf00      	nop
 80058ac:	ffceff88 	.word	0xffceff88
 80058b0:	00100040 	.word	0x00100040
 80058b4:	00100030 	.word	0x00100030
 80058b8:	00100020 	.word	0x00100020

080058bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058bc:	b480      	push	{r7}
 80058be:	b083      	sub	sp, #12
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80058c4:	bf00      	nop
 80058c6:	370c      	adds	r7, #12
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr

080058d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b083      	sub	sp, #12
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80058d8:	bf00      	nop
 80058da:	370c      	adds	r7, #12
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b083      	sub	sp, #12
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80058ec:	bf00      	nop
 80058ee:	370c      	adds	r7, #12
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr

080058f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b083      	sub	sp, #12
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005900:	bf00      	nop
 8005902:	370c      	adds	r7, #12
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr

0800590c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800590c:	b480      	push	{r7}
 800590e:	b085      	sub	sp, #20
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	4a44      	ldr	r2, [pc, #272]	; (8005a30 <TIM_Base_SetConfig+0x124>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d013      	beq.n	800594c <TIM_Base_SetConfig+0x40>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800592a:	d00f      	beq.n	800594c <TIM_Base_SetConfig+0x40>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	4a41      	ldr	r2, [pc, #260]	; (8005a34 <TIM_Base_SetConfig+0x128>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d00b      	beq.n	800594c <TIM_Base_SetConfig+0x40>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	4a40      	ldr	r2, [pc, #256]	; (8005a38 <TIM_Base_SetConfig+0x12c>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d007      	beq.n	800594c <TIM_Base_SetConfig+0x40>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	4a3f      	ldr	r2, [pc, #252]	; (8005a3c <TIM_Base_SetConfig+0x130>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d003      	beq.n	800594c <TIM_Base_SetConfig+0x40>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	4a3e      	ldr	r2, [pc, #248]	; (8005a40 <TIM_Base_SetConfig+0x134>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d108      	bne.n	800595e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005952:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	68fa      	ldr	r2, [r7, #12]
 800595a:	4313      	orrs	r3, r2
 800595c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	4a33      	ldr	r2, [pc, #204]	; (8005a30 <TIM_Base_SetConfig+0x124>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d027      	beq.n	80059b6 <TIM_Base_SetConfig+0xaa>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800596c:	d023      	beq.n	80059b6 <TIM_Base_SetConfig+0xaa>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	4a30      	ldr	r2, [pc, #192]	; (8005a34 <TIM_Base_SetConfig+0x128>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d01f      	beq.n	80059b6 <TIM_Base_SetConfig+0xaa>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4a2f      	ldr	r2, [pc, #188]	; (8005a38 <TIM_Base_SetConfig+0x12c>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d01b      	beq.n	80059b6 <TIM_Base_SetConfig+0xaa>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	4a2e      	ldr	r2, [pc, #184]	; (8005a3c <TIM_Base_SetConfig+0x130>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d017      	beq.n	80059b6 <TIM_Base_SetConfig+0xaa>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	4a2d      	ldr	r2, [pc, #180]	; (8005a40 <TIM_Base_SetConfig+0x134>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d013      	beq.n	80059b6 <TIM_Base_SetConfig+0xaa>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	4a2c      	ldr	r2, [pc, #176]	; (8005a44 <TIM_Base_SetConfig+0x138>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d00f      	beq.n	80059b6 <TIM_Base_SetConfig+0xaa>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4a2b      	ldr	r2, [pc, #172]	; (8005a48 <TIM_Base_SetConfig+0x13c>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d00b      	beq.n	80059b6 <TIM_Base_SetConfig+0xaa>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	4a2a      	ldr	r2, [pc, #168]	; (8005a4c <TIM_Base_SetConfig+0x140>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d007      	beq.n	80059b6 <TIM_Base_SetConfig+0xaa>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4a29      	ldr	r2, [pc, #164]	; (8005a50 <TIM_Base_SetConfig+0x144>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d003      	beq.n	80059b6 <TIM_Base_SetConfig+0xaa>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4a28      	ldr	r2, [pc, #160]	; (8005a54 <TIM_Base_SetConfig+0x148>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d108      	bne.n	80059c8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	68db      	ldr	r3, [r3, #12]
 80059c2:	68fa      	ldr	r2, [r7, #12]
 80059c4:	4313      	orrs	r3, r2
 80059c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	695b      	ldr	r3, [r3, #20]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	68fa      	ldr	r2, [r7, #12]
 80059da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	689a      	ldr	r2, [r3, #8]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	4a10      	ldr	r2, [pc, #64]	; (8005a30 <TIM_Base_SetConfig+0x124>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d00f      	beq.n	8005a14 <TIM_Base_SetConfig+0x108>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	4a12      	ldr	r2, [pc, #72]	; (8005a40 <TIM_Base_SetConfig+0x134>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d00b      	beq.n	8005a14 <TIM_Base_SetConfig+0x108>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	4a11      	ldr	r2, [pc, #68]	; (8005a44 <TIM_Base_SetConfig+0x138>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d007      	beq.n	8005a14 <TIM_Base_SetConfig+0x108>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	4a10      	ldr	r2, [pc, #64]	; (8005a48 <TIM_Base_SetConfig+0x13c>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d003      	beq.n	8005a14 <TIM_Base_SetConfig+0x108>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	4a0f      	ldr	r2, [pc, #60]	; (8005a4c <TIM_Base_SetConfig+0x140>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d103      	bne.n	8005a1c <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	691a      	ldr	r2, [r3, #16]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	615a      	str	r2, [r3, #20]
}
 8005a22:	bf00      	nop
 8005a24:	3714      	adds	r7, #20
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr
 8005a2e:	bf00      	nop
 8005a30:	40010000 	.word	0x40010000
 8005a34:	40000400 	.word	0x40000400
 8005a38:	40000800 	.word	0x40000800
 8005a3c:	40000c00 	.word	0x40000c00
 8005a40:	40010400 	.word	0x40010400
 8005a44:	40014000 	.word	0x40014000
 8005a48:	40014400 	.word	0x40014400
 8005a4c:	40014800 	.word	0x40014800
 8005a50:	4000e000 	.word	0x4000e000
 8005a54:	4000e400 	.word	0x4000e400

08005a58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b087      	sub	sp, #28
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6a1b      	ldr	r3, [r3, #32]
 8005a66:	f023 0201 	bic.w	r2, r3, #1
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6a1b      	ldr	r3, [r3, #32]
 8005a72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	699b      	ldr	r3, [r3, #24]
 8005a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a80:	68fa      	ldr	r2, [r7, #12]
 8005a82:	4b37      	ldr	r3, [pc, #220]	; (8005b60 <TIM_OC1_SetConfig+0x108>)
 8005a84:	4013      	ands	r3, r2
 8005a86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f023 0303 	bic.w	r3, r3, #3
 8005a8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	68fa      	ldr	r2, [r7, #12]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	f023 0302 	bic.w	r3, r3, #2
 8005aa0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	697a      	ldr	r2, [r7, #20]
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	4a2d      	ldr	r2, [pc, #180]	; (8005b64 <TIM_OC1_SetConfig+0x10c>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d00f      	beq.n	8005ad4 <TIM_OC1_SetConfig+0x7c>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	4a2c      	ldr	r2, [pc, #176]	; (8005b68 <TIM_OC1_SetConfig+0x110>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d00b      	beq.n	8005ad4 <TIM_OC1_SetConfig+0x7c>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	4a2b      	ldr	r2, [pc, #172]	; (8005b6c <TIM_OC1_SetConfig+0x114>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d007      	beq.n	8005ad4 <TIM_OC1_SetConfig+0x7c>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	4a2a      	ldr	r2, [pc, #168]	; (8005b70 <TIM_OC1_SetConfig+0x118>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d003      	beq.n	8005ad4 <TIM_OC1_SetConfig+0x7c>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	4a29      	ldr	r2, [pc, #164]	; (8005b74 <TIM_OC1_SetConfig+0x11c>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d10c      	bne.n	8005aee <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	f023 0308 	bic.w	r3, r3, #8
 8005ada:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	697a      	ldr	r2, [r7, #20]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	f023 0304 	bic.w	r3, r3, #4
 8005aec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	4a1c      	ldr	r2, [pc, #112]	; (8005b64 <TIM_OC1_SetConfig+0x10c>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d00f      	beq.n	8005b16 <TIM_OC1_SetConfig+0xbe>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	4a1b      	ldr	r2, [pc, #108]	; (8005b68 <TIM_OC1_SetConfig+0x110>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d00b      	beq.n	8005b16 <TIM_OC1_SetConfig+0xbe>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	4a1a      	ldr	r2, [pc, #104]	; (8005b6c <TIM_OC1_SetConfig+0x114>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d007      	beq.n	8005b16 <TIM_OC1_SetConfig+0xbe>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	4a19      	ldr	r2, [pc, #100]	; (8005b70 <TIM_OC1_SetConfig+0x118>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d003      	beq.n	8005b16 <TIM_OC1_SetConfig+0xbe>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	4a18      	ldr	r2, [pc, #96]	; (8005b74 <TIM_OC1_SetConfig+0x11c>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d111      	bne.n	8005b3a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	695b      	ldr	r3, [r3, #20]
 8005b2a:	693a      	ldr	r2, [r7, #16]
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	699b      	ldr	r3, [r3, #24]
 8005b34:	693a      	ldr	r2, [r7, #16]
 8005b36:	4313      	orrs	r3, r2
 8005b38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	693a      	ldr	r2, [r7, #16]
 8005b3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	68fa      	ldr	r2, [r7, #12]
 8005b44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	685a      	ldr	r2, [r3, #4]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	697a      	ldr	r2, [r7, #20]
 8005b52:	621a      	str	r2, [r3, #32]
}
 8005b54:	bf00      	nop
 8005b56:	371c      	adds	r7, #28
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr
 8005b60:	fffeff8f 	.word	0xfffeff8f
 8005b64:	40010000 	.word	0x40010000
 8005b68:	40010400 	.word	0x40010400
 8005b6c:	40014000 	.word	0x40014000
 8005b70:	40014400 	.word	0x40014400
 8005b74:	40014800 	.word	0x40014800

08005b78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b087      	sub	sp, #28
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6a1b      	ldr	r3, [r3, #32]
 8005b86:	f023 0210 	bic.w	r2, r3, #16
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6a1b      	ldr	r3, [r3, #32]
 8005b92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	699b      	ldr	r3, [r3, #24]
 8005b9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ba0:	68fa      	ldr	r2, [r7, #12]
 8005ba2:	4b34      	ldr	r3, [pc, #208]	; (8005c74 <TIM_OC2_SetConfig+0xfc>)
 8005ba4:	4013      	ands	r3, r2
 8005ba6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	021b      	lsls	r3, r3, #8
 8005bb6:	68fa      	ldr	r2, [r7, #12]
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	f023 0320 	bic.w	r3, r3, #32
 8005bc2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	011b      	lsls	r3, r3, #4
 8005bca:	697a      	ldr	r2, [r7, #20]
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	4a29      	ldr	r2, [pc, #164]	; (8005c78 <TIM_OC2_SetConfig+0x100>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d003      	beq.n	8005be0 <TIM_OC2_SetConfig+0x68>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	4a28      	ldr	r2, [pc, #160]	; (8005c7c <TIM_OC2_SetConfig+0x104>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d10d      	bne.n	8005bfc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005be6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	68db      	ldr	r3, [r3, #12]
 8005bec:	011b      	lsls	r3, r3, #4
 8005bee:	697a      	ldr	r2, [r7, #20]
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bfa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	4a1e      	ldr	r2, [pc, #120]	; (8005c78 <TIM_OC2_SetConfig+0x100>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d00f      	beq.n	8005c24 <TIM_OC2_SetConfig+0xac>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	4a1d      	ldr	r2, [pc, #116]	; (8005c7c <TIM_OC2_SetConfig+0x104>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d00b      	beq.n	8005c24 <TIM_OC2_SetConfig+0xac>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	4a1c      	ldr	r2, [pc, #112]	; (8005c80 <TIM_OC2_SetConfig+0x108>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d007      	beq.n	8005c24 <TIM_OC2_SetConfig+0xac>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	4a1b      	ldr	r2, [pc, #108]	; (8005c84 <TIM_OC2_SetConfig+0x10c>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d003      	beq.n	8005c24 <TIM_OC2_SetConfig+0xac>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	4a1a      	ldr	r2, [pc, #104]	; (8005c88 <TIM_OC2_SetConfig+0x110>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d113      	bne.n	8005c4c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	695b      	ldr	r3, [r3, #20]
 8005c38:	009b      	lsls	r3, r3, #2
 8005c3a:	693a      	ldr	r2, [r7, #16]
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	699b      	ldr	r3, [r3, #24]
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	693a      	ldr	r2, [r7, #16]
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	693a      	ldr	r2, [r7, #16]
 8005c50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	68fa      	ldr	r2, [r7, #12]
 8005c56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	685a      	ldr	r2, [r3, #4]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	697a      	ldr	r2, [r7, #20]
 8005c64:	621a      	str	r2, [r3, #32]
}
 8005c66:	bf00      	nop
 8005c68:	371c      	adds	r7, #28
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr
 8005c72:	bf00      	nop
 8005c74:	feff8fff 	.word	0xfeff8fff
 8005c78:	40010000 	.word	0x40010000
 8005c7c:	40010400 	.word	0x40010400
 8005c80:	40014000 	.word	0x40014000
 8005c84:	40014400 	.word	0x40014400
 8005c88:	40014800 	.word	0x40014800

08005c8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b087      	sub	sp, #28
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6a1b      	ldr	r3, [r3, #32]
 8005c9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6a1b      	ldr	r3, [r3, #32]
 8005ca6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	69db      	ldr	r3, [r3, #28]
 8005cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005cb4:	68fa      	ldr	r2, [r7, #12]
 8005cb6:	4b33      	ldr	r3, [pc, #204]	; (8005d84 <TIM_OC3_SetConfig+0xf8>)
 8005cb8:	4013      	ands	r3, r2
 8005cba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f023 0303 	bic.w	r3, r3, #3
 8005cc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	68fa      	ldr	r2, [r7, #12]
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005cd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	021b      	lsls	r3, r3, #8
 8005cdc:	697a      	ldr	r2, [r7, #20]
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	4a28      	ldr	r2, [pc, #160]	; (8005d88 <TIM_OC3_SetConfig+0xfc>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d003      	beq.n	8005cf2 <TIM_OC3_SetConfig+0x66>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4a27      	ldr	r2, [pc, #156]	; (8005d8c <TIM_OC3_SetConfig+0x100>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d10d      	bne.n	8005d0e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005cf8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	68db      	ldr	r3, [r3, #12]
 8005cfe:	021b      	lsls	r3, r3, #8
 8005d00:	697a      	ldr	r2, [r7, #20]
 8005d02:	4313      	orrs	r3, r2
 8005d04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	4a1d      	ldr	r2, [pc, #116]	; (8005d88 <TIM_OC3_SetConfig+0xfc>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d00f      	beq.n	8005d36 <TIM_OC3_SetConfig+0xaa>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	4a1c      	ldr	r2, [pc, #112]	; (8005d8c <TIM_OC3_SetConfig+0x100>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d00b      	beq.n	8005d36 <TIM_OC3_SetConfig+0xaa>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	4a1b      	ldr	r2, [pc, #108]	; (8005d90 <TIM_OC3_SetConfig+0x104>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d007      	beq.n	8005d36 <TIM_OC3_SetConfig+0xaa>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	4a1a      	ldr	r2, [pc, #104]	; (8005d94 <TIM_OC3_SetConfig+0x108>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d003      	beq.n	8005d36 <TIM_OC3_SetConfig+0xaa>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4a19      	ldr	r2, [pc, #100]	; (8005d98 <TIM_OC3_SetConfig+0x10c>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d113      	bne.n	8005d5e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	695b      	ldr	r3, [r3, #20]
 8005d4a:	011b      	lsls	r3, r3, #4
 8005d4c:	693a      	ldr	r2, [r7, #16]
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	699b      	ldr	r3, [r3, #24]
 8005d56:	011b      	lsls	r3, r3, #4
 8005d58:	693a      	ldr	r2, [r7, #16]
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	693a      	ldr	r2, [r7, #16]
 8005d62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	68fa      	ldr	r2, [r7, #12]
 8005d68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	685a      	ldr	r2, [r3, #4]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	697a      	ldr	r2, [r7, #20]
 8005d76:	621a      	str	r2, [r3, #32]
}
 8005d78:	bf00      	nop
 8005d7a:	371c      	adds	r7, #28
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr
 8005d84:	fffeff8f 	.word	0xfffeff8f
 8005d88:	40010000 	.word	0x40010000
 8005d8c:	40010400 	.word	0x40010400
 8005d90:	40014000 	.word	0x40014000
 8005d94:	40014400 	.word	0x40014400
 8005d98:	40014800 	.word	0x40014800

08005d9c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b087      	sub	sp, #28
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6a1b      	ldr	r3, [r3, #32]
 8005daa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6a1b      	ldr	r3, [r3, #32]
 8005db6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	69db      	ldr	r3, [r3, #28]
 8005dc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005dc4:	68fa      	ldr	r2, [r7, #12]
 8005dc6:	4b24      	ldr	r3, [pc, #144]	; (8005e58 <TIM_OC4_SetConfig+0xbc>)
 8005dc8:	4013      	ands	r3, r2
 8005dca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	021b      	lsls	r3, r3, #8
 8005dda:	68fa      	ldr	r2, [r7, #12]
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005de6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	689b      	ldr	r3, [r3, #8]
 8005dec:	031b      	lsls	r3, r3, #12
 8005dee:	693a      	ldr	r2, [r7, #16]
 8005df0:	4313      	orrs	r3, r2
 8005df2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	4a19      	ldr	r2, [pc, #100]	; (8005e5c <TIM_OC4_SetConfig+0xc0>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d00f      	beq.n	8005e1c <TIM_OC4_SetConfig+0x80>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	4a18      	ldr	r2, [pc, #96]	; (8005e60 <TIM_OC4_SetConfig+0xc4>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d00b      	beq.n	8005e1c <TIM_OC4_SetConfig+0x80>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	4a17      	ldr	r2, [pc, #92]	; (8005e64 <TIM_OC4_SetConfig+0xc8>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d007      	beq.n	8005e1c <TIM_OC4_SetConfig+0x80>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	4a16      	ldr	r2, [pc, #88]	; (8005e68 <TIM_OC4_SetConfig+0xcc>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d003      	beq.n	8005e1c <TIM_OC4_SetConfig+0x80>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	4a15      	ldr	r2, [pc, #84]	; (8005e6c <TIM_OC4_SetConfig+0xd0>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d109      	bne.n	8005e30 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e22:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	695b      	ldr	r3, [r3, #20]
 8005e28:	019b      	lsls	r3, r3, #6
 8005e2a:	697a      	ldr	r2, [r7, #20]
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	697a      	ldr	r2, [r7, #20]
 8005e34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	68fa      	ldr	r2, [r7, #12]
 8005e3a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	685a      	ldr	r2, [r3, #4]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	693a      	ldr	r2, [r7, #16]
 8005e48:	621a      	str	r2, [r3, #32]
}
 8005e4a:	bf00      	nop
 8005e4c:	371c      	adds	r7, #28
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr
 8005e56:	bf00      	nop
 8005e58:	feff8fff 	.word	0xfeff8fff
 8005e5c:	40010000 	.word	0x40010000
 8005e60:	40010400 	.word	0x40010400
 8005e64:	40014000 	.word	0x40014000
 8005e68:	40014400 	.word	0x40014400
 8005e6c:	40014800 	.word	0x40014800

08005e70 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b087      	sub	sp, #28
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6a1b      	ldr	r3, [r3, #32]
 8005e7e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6a1b      	ldr	r3, [r3, #32]
 8005e8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005e98:	68fa      	ldr	r2, [r7, #12]
 8005e9a:	4b21      	ldr	r3, [pc, #132]	; (8005f20 <TIM_OC5_SetConfig+0xb0>)
 8005e9c:	4013      	ands	r3, r2
 8005e9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	68fa      	ldr	r2, [r7, #12]
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005eb0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	041b      	lsls	r3, r3, #16
 8005eb8:	693a      	ldr	r2, [r7, #16]
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	4a18      	ldr	r2, [pc, #96]	; (8005f24 <TIM_OC5_SetConfig+0xb4>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d00f      	beq.n	8005ee6 <TIM_OC5_SetConfig+0x76>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4a17      	ldr	r2, [pc, #92]	; (8005f28 <TIM_OC5_SetConfig+0xb8>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d00b      	beq.n	8005ee6 <TIM_OC5_SetConfig+0x76>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	4a16      	ldr	r2, [pc, #88]	; (8005f2c <TIM_OC5_SetConfig+0xbc>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d007      	beq.n	8005ee6 <TIM_OC5_SetConfig+0x76>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	4a15      	ldr	r2, [pc, #84]	; (8005f30 <TIM_OC5_SetConfig+0xc0>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d003      	beq.n	8005ee6 <TIM_OC5_SetConfig+0x76>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	4a14      	ldr	r2, [pc, #80]	; (8005f34 <TIM_OC5_SetConfig+0xc4>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d109      	bne.n	8005efa <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005eec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	695b      	ldr	r3, [r3, #20]
 8005ef2:	021b      	lsls	r3, r3, #8
 8005ef4:	697a      	ldr	r2, [r7, #20]
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	697a      	ldr	r2, [r7, #20]
 8005efe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	68fa      	ldr	r2, [r7, #12]
 8005f04:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	685a      	ldr	r2, [r3, #4]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	693a      	ldr	r2, [r7, #16]
 8005f12:	621a      	str	r2, [r3, #32]
}
 8005f14:	bf00      	nop
 8005f16:	371c      	adds	r7, #28
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr
 8005f20:	fffeff8f 	.word	0xfffeff8f
 8005f24:	40010000 	.word	0x40010000
 8005f28:	40010400 	.word	0x40010400
 8005f2c:	40014000 	.word	0x40014000
 8005f30:	40014400 	.word	0x40014400
 8005f34:	40014800 	.word	0x40014800

08005f38 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b087      	sub	sp, #28
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6a1b      	ldr	r3, [r3, #32]
 8005f46:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6a1b      	ldr	r3, [r3, #32]
 8005f52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005f60:	68fa      	ldr	r2, [r7, #12]
 8005f62:	4b22      	ldr	r3, [pc, #136]	; (8005fec <TIM_OC6_SetConfig+0xb4>)
 8005f64:	4013      	ands	r3, r2
 8005f66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	021b      	lsls	r3, r3, #8
 8005f6e:	68fa      	ldr	r2, [r7, #12]
 8005f70:	4313      	orrs	r3, r2
 8005f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005f7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	051b      	lsls	r3, r3, #20
 8005f82:	693a      	ldr	r2, [r7, #16]
 8005f84:	4313      	orrs	r3, r2
 8005f86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	4a19      	ldr	r2, [pc, #100]	; (8005ff0 <TIM_OC6_SetConfig+0xb8>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d00f      	beq.n	8005fb0 <TIM_OC6_SetConfig+0x78>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	4a18      	ldr	r2, [pc, #96]	; (8005ff4 <TIM_OC6_SetConfig+0xbc>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d00b      	beq.n	8005fb0 <TIM_OC6_SetConfig+0x78>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	4a17      	ldr	r2, [pc, #92]	; (8005ff8 <TIM_OC6_SetConfig+0xc0>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d007      	beq.n	8005fb0 <TIM_OC6_SetConfig+0x78>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	4a16      	ldr	r2, [pc, #88]	; (8005ffc <TIM_OC6_SetConfig+0xc4>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d003      	beq.n	8005fb0 <TIM_OC6_SetConfig+0x78>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	4a15      	ldr	r2, [pc, #84]	; (8006000 <TIM_OC6_SetConfig+0xc8>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d109      	bne.n	8005fc4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005fb6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	695b      	ldr	r3, [r3, #20]
 8005fbc:	029b      	lsls	r3, r3, #10
 8005fbe:	697a      	ldr	r2, [r7, #20]
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	697a      	ldr	r2, [r7, #20]
 8005fc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	68fa      	ldr	r2, [r7, #12]
 8005fce:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	685a      	ldr	r2, [r3, #4]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	693a      	ldr	r2, [r7, #16]
 8005fdc:	621a      	str	r2, [r3, #32]
}
 8005fde:	bf00      	nop
 8005fe0:	371c      	adds	r7, #28
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr
 8005fea:	bf00      	nop
 8005fec:	feff8fff 	.word	0xfeff8fff
 8005ff0:	40010000 	.word	0x40010000
 8005ff4:	40010400 	.word	0x40010400
 8005ff8:	40014000 	.word	0x40014000
 8005ffc:	40014400 	.word	0x40014400
 8006000:	40014800 	.word	0x40014800

08006004 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006004:	b480      	push	{r7}
 8006006:	b087      	sub	sp, #28
 8006008:	af00      	add	r7, sp, #0
 800600a:	60f8      	str	r0, [r7, #12]
 800600c:	60b9      	str	r1, [r7, #8]
 800600e:	607a      	str	r2, [r7, #4]
 8006010:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	6a1b      	ldr	r3, [r3, #32]
 8006016:	f023 0201 	bic.w	r2, r3, #1
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	699b      	ldr	r3, [r3, #24]
 8006022:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	6a1b      	ldr	r3, [r3, #32]
 8006028:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	4a2c      	ldr	r2, [pc, #176]	; (80060e0 <TIM_TI1_SetConfig+0xdc>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d023      	beq.n	800607a <TIM_TI1_SetConfig+0x76>
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006038:	d01f      	beq.n	800607a <TIM_TI1_SetConfig+0x76>
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	4a29      	ldr	r2, [pc, #164]	; (80060e4 <TIM_TI1_SetConfig+0xe0>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d01b      	beq.n	800607a <TIM_TI1_SetConfig+0x76>
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	4a28      	ldr	r2, [pc, #160]	; (80060e8 <TIM_TI1_SetConfig+0xe4>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d017      	beq.n	800607a <TIM_TI1_SetConfig+0x76>
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	4a27      	ldr	r2, [pc, #156]	; (80060ec <TIM_TI1_SetConfig+0xe8>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d013      	beq.n	800607a <TIM_TI1_SetConfig+0x76>
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	4a26      	ldr	r2, [pc, #152]	; (80060f0 <TIM_TI1_SetConfig+0xec>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d00f      	beq.n	800607a <TIM_TI1_SetConfig+0x76>
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	4a25      	ldr	r2, [pc, #148]	; (80060f4 <TIM_TI1_SetConfig+0xf0>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d00b      	beq.n	800607a <TIM_TI1_SetConfig+0x76>
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	4a24      	ldr	r2, [pc, #144]	; (80060f8 <TIM_TI1_SetConfig+0xf4>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d007      	beq.n	800607a <TIM_TI1_SetConfig+0x76>
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	4a23      	ldr	r2, [pc, #140]	; (80060fc <TIM_TI1_SetConfig+0xf8>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d003      	beq.n	800607a <TIM_TI1_SetConfig+0x76>
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	4a22      	ldr	r2, [pc, #136]	; (8006100 <TIM_TI1_SetConfig+0xfc>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d101      	bne.n	800607e <TIM_TI1_SetConfig+0x7a>
 800607a:	2301      	movs	r3, #1
 800607c:	e000      	b.n	8006080 <TIM_TI1_SetConfig+0x7c>
 800607e:	2300      	movs	r3, #0
 8006080:	2b00      	cmp	r3, #0
 8006082:	d008      	beq.n	8006096 <TIM_TI1_SetConfig+0x92>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	f023 0303 	bic.w	r3, r3, #3
 800608a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800608c:	697a      	ldr	r2, [r7, #20]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	4313      	orrs	r3, r2
 8006092:	617b      	str	r3, [r7, #20]
 8006094:	e003      	b.n	800609e <TIM_TI1_SetConfig+0x9a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	f043 0301 	orr.w	r3, r3, #1
 800609c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	011b      	lsls	r3, r3, #4
 80060aa:	b2db      	uxtb	r3, r3
 80060ac:	697a      	ldr	r2, [r7, #20]
 80060ae:	4313      	orrs	r3, r2
 80060b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	f023 030a 	bic.w	r3, r3, #10
 80060b8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	f003 030a 	and.w	r3, r3, #10
 80060c0:	693a      	ldr	r2, [r7, #16]
 80060c2:	4313      	orrs	r3, r2
 80060c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	697a      	ldr	r2, [r7, #20]
 80060ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	693a      	ldr	r2, [r7, #16]
 80060d0:	621a      	str	r2, [r3, #32]
}
 80060d2:	bf00      	nop
 80060d4:	371c      	adds	r7, #28
 80060d6:	46bd      	mov	sp, r7
 80060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060dc:	4770      	bx	lr
 80060de:	bf00      	nop
 80060e0:	40010000 	.word	0x40010000
 80060e4:	40000400 	.word	0x40000400
 80060e8:	40000800 	.word	0x40000800
 80060ec:	40000c00 	.word	0x40000c00
 80060f0:	40010400 	.word	0x40010400
 80060f4:	40001800 	.word	0x40001800
 80060f8:	40014000 	.word	0x40014000
 80060fc:	4000e000 	.word	0x4000e000
 8006100:	4000e400 	.word	0x4000e400

08006104 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006104:	b480      	push	{r7}
 8006106:	b087      	sub	sp, #28
 8006108:	af00      	add	r7, sp, #0
 800610a:	60f8      	str	r0, [r7, #12]
 800610c:	60b9      	str	r1, [r7, #8]
 800610e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	6a1b      	ldr	r3, [r3, #32]
 8006114:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	6a1b      	ldr	r3, [r3, #32]
 800611a:	f023 0201 	bic.w	r2, r3, #1
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	699b      	ldr	r3, [r3, #24]
 8006126:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800612e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	011b      	lsls	r3, r3, #4
 8006134:	693a      	ldr	r2, [r7, #16]
 8006136:	4313      	orrs	r3, r2
 8006138:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	f023 030a 	bic.w	r3, r3, #10
 8006140:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006142:	697a      	ldr	r2, [r7, #20]
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	4313      	orrs	r3, r2
 8006148:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	693a      	ldr	r2, [r7, #16]
 800614e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	697a      	ldr	r2, [r7, #20]
 8006154:	621a      	str	r2, [r3, #32]
}
 8006156:	bf00      	nop
 8006158:	371c      	adds	r7, #28
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr

08006162 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006162:	b480      	push	{r7}
 8006164:	b087      	sub	sp, #28
 8006166:	af00      	add	r7, sp, #0
 8006168:	60f8      	str	r0, [r7, #12]
 800616a:	60b9      	str	r1, [r7, #8]
 800616c:	607a      	str	r2, [r7, #4]
 800616e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	6a1b      	ldr	r3, [r3, #32]
 8006174:	f023 0210 	bic.w	r2, r3, #16
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	699b      	ldr	r3, [r3, #24]
 8006180:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	6a1b      	ldr	r3, [r3, #32]
 8006186:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800618e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	021b      	lsls	r3, r3, #8
 8006194:	697a      	ldr	r2, [r7, #20]
 8006196:	4313      	orrs	r3, r2
 8006198:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80061a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	031b      	lsls	r3, r3, #12
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	697a      	ldr	r2, [r7, #20]
 80061aa:	4313      	orrs	r3, r2
 80061ac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80061b4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	011b      	lsls	r3, r3, #4
 80061ba:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80061be:	693a      	ldr	r2, [r7, #16]
 80061c0:	4313      	orrs	r3, r2
 80061c2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	697a      	ldr	r2, [r7, #20]
 80061c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	693a      	ldr	r2, [r7, #16]
 80061ce:	621a      	str	r2, [r3, #32]
}
 80061d0:	bf00      	nop
 80061d2:	371c      	adds	r7, #28
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr

080061dc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061dc:	b480      	push	{r7}
 80061de:	b087      	sub	sp, #28
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	60f8      	str	r0, [r7, #12]
 80061e4:	60b9      	str	r1, [r7, #8]
 80061e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	6a1b      	ldr	r3, [r3, #32]
 80061ec:	f023 0210 	bic.w	r2, r3, #16
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	699b      	ldr	r3, [r3, #24]
 80061f8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	6a1b      	ldr	r3, [r3, #32]
 80061fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006206:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	031b      	lsls	r3, r3, #12
 800620c:	697a      	ldr	r2, [r7, #20]
 800620e:	4313      	orrs	r3, r2
 8006210:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006218:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	011b      	lsls	r3, r3, #4
 800621e:	693a      	ldr	r2, [r7, #16]
 8006220:	4313      	orrs	r3, r2
 8006222:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	697a      	ldr	r2, [r7, #20]
 8006228:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	693a      	ldr	r2, [r7, #16]
 800622e:	621a      	str	r2, [r3, #32]
}
 8006230:	bf00      	nop
 8006232:	371c      	adds	r7, #28
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr

0800623c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800623c:	b480      	push	{r7}
 800623e:	b087      	sub	sp, #28
 8006240:	af00      	add	r7, sp, #0
 8006242:	60f8      	str	r0, [r7, #12]
 8006244:	60b9      	str	r1, [r7, #8]
 8006246:	607a      	str	r2, [r7, #4]
 8006248:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	6a1b      	ldr	r3, [r3, #32]
 800624e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	69db      	ldr	r3, [r3, #28]
 800625a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	6a1b      	ldr	r3, [r3, #32]
 8006260:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	f023 0303 	bic.w	r3, r3, #3
 8006268:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800626a:	697a      	ldr	r2, [r7, #20]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	4313      	orrs	r3, r2
 8006270:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006278:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	011b      	lsls	r3, r3, #4
 800627e:	b2db      	uxtb	r3, r3
 8006280:	697a      	ldr	r2, [r7, #20]
 8006282:	4313      	orrs	r3, r2
 8006284:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800628c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	021b      	lsls	r3, r3, #8
 8006292:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006296:	693a      	ldr	r2, [r7, #16]
 8006298:	4313      	orrs	r3, r2
 800629a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	697a      	ldr	r2, [r7, #20]
 80062a0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	693a      	ldr	r2, [r7, #16]
 80062a6:	621a      	str	r2, [r3, #32]
}
 80062a8:	bf00      	nop
 80062aa:	371c      	adds	r7, #28
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr

080062b4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b087      	sub	sp, #28
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	60f8      	str	r0, [r7, #12]
 80062bc:	60b9      	str	r1, [r7, #8]
 80062be:	607a      	str	r2, [r7, #4]
 80062c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	6a1b      	ldr	r3, [r3, #32]
 80062c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	69db      	ldr	r3, [r3, #28]
 80062d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	6a1b      	ldr	r3, [r3, #32]
 80062d8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062e0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	021b      	lsls	r3, r3, #8
 80062e6:	697a      	ldr	r2, [r7, #20]
 80062e8:	4313      	orrs	r3, r2
 80062ea:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80062f2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	031b      	lsls	r3, r3, #12
 80062f8:	b29b      	uxth	r3, r3
 80062fa:	697a      	ldr	r2, [r7, #20]
 80062fc:	4313      	orrs	r3, r2
 80062fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006306:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	031b      	lsls	r3, r3, #12
 800630c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006310:	693a      	ldr	r2, [r7, #16]
 8006312:	4313      	orrs	r3, r2
 8006314:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	697a      	ldr	r2, [r7, #20]
 800631a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	693a      	ldr	r2, [r7, #16]
 8006320:	621a      	str	r2, [r3, #32]
}
 8006322:	bf00      	nop
 8006324:	371c      	adds	r7, #28
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr
	...

08006330 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006330:	b480      	push	{r7}
 8006332:	b085      	sub	sp, #20
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006340:	68fa      	ldr	r2, [r7, #12]
 8006342:	4b09      	ldr	r3, [pc, #36]	; (8006368 <TIM_ITRx_SetConfig+0x38>)
 8006344:	4013      	ands	r3, r2
 8006346:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006348:	683a      	ldr	r2, [r7, #0]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	4313      	orrs	r3, r2
 800634e:	f043 0307 	orr.w	r3, r3, #7
 8006352:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	68fa      	ldr	r2, [r7, #12]
 8006358:	609a      	str	r2, [r3, #8]
}
 800635a:	bf00      	nop
 800635c:	3714      	adds	r7, #20
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr
 8006366:	bf00      	nop
 8006368:	ffcfff8f 	.word	0xffcfff8f

0800636c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800636c:	b480      	push	{r7}
 800636e:	b087      	sub	sp, #28
 8006370:	af00      	add	r7, sp, #0
 8006372:	60f8      	str	r0, [r7, #12]
 8006374:	60b9      	str	r1, [r7, #8]
 8006376:	607a      	str	r2, [r7, #4]
 8006378:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	689b      	ldr	r3, [r3, #8]
 800637e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006386:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	021a      	lsls	r2, r3, #8
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	431a      	orrs	r2, r3
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	4313      	orrs	r3, r2
 8006394:	697a      	ldr	r2, [r7, #20]
 8006396:	4313      	orrs	r3, r2
 8006398:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	697a      	ldr	r2, [r7, #20]
 800639e:	609a      	str	r2, [r3, #8]
}
 80063a0:	bf00      	nop
 80063a2:	371c      	adds	r7, #28
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr

080063ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b087      	sub	sp, #28
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	60b9      	str	r1, [r7, #8]
 80063b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	f003 031f 	and.w	r3, r3, #31
 80063be:	2201      	movs	r2, #1
 80063c0:	fa02 f303 	lsl.w	r3, r2, r3
 80063c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	6a1a      	ldr	r2, [r3, #32]
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	43db      	mvns	r3, r3
 80063ce:	401a      	ands	r2, r3
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	6a1a      	ldr	r2, [r3, #32]
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	f003 031f 	and.w	r3, r3, #31
 80063de:	6879      	ldr	r1, [r7, #4]
 80063e0:	fa01 f303 	lsl.w	r3, r1, r3
 80063e4:	431a      	orrs	r2, r3
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	621a      	str	r2, [r3, #32]
}
 80063ea:	bf00      	nop
 80063ec:	371c      	adds	r7, #28
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr
	...

080063f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b085      	sub	sp, #20
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
 8006400:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006408:	2b01      	cmp	r3, #1
 800640a:	d101      	bne.n	8006410 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800640c:	2302      	movs	r3, #2
 800640e:	e077      	b.n	8006500 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2201      	movs	r2, #1
 8006414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2202      	movs	r2, #2
 800641c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a35      	ldr	r2, [pc, #212]	; (800650c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d004      	beq.n	8006444 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a34      	ldr	r2, [pc, #208]	; (8006510 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d108      	bne.n	8006456 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800644a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	68fa      	ldr	r2, [r7, #12]
 8006452:	4313      	orrs	r3, r2
 8006454:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800645c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	68fa      	ldr	r2, [r7, #12]
 8006464:	4313      	orrs	r3, r2
 8006466:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	68fa      	ldr	r2, [r7, #12]
 800646e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a25      	ldr	r2, [pc, #148]	; (800650c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d02c      	beq.n	80064d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006482:	d027      	beq.n	80064d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a22      	ldr	r2, [pc, #136]	; (8006514 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d022      	beq.n	80064d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a21      	ldr	r2, [pc, #132]	; (8006518 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d01d      	beq.n	80064d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a1f      	ldr	r2, [pc, #124]	; (800651c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d018      	beq.n	80064d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a1a      	ldr	r2, [pc, #104]	; (8006510 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d013      	beq.n	80064d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a1b      	ldr	r2, [pc, #108]	; (8006520 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d00e      	beq.n	80064d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a1a      	ldr	r2, [pc, #104]	; (8006524 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d009      	beq.n	80064d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a18      	ldr	r2, [pc, #96]	; (8006528 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d004      	beq.n	80064d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a17      	ldr	r2, [pc, #92]	; (800652c <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d10c      	bne.n	80064ee <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064da:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	68ba      	ldr	r2, [r7, #8]
 80064e2:	4313      	orrs	r3, r2
 80064e4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	68ba      	ldr	r2, [r7, #8]
 80064ec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2201      	movs	r2, #1
 80064f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2200      	movs	r2, #0
 80064fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064fe:	2300      	movs	r3, #0
}
 8006500:	4618      	mov	r0, r3
 8006502:	3714      	adds	r7, #20
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr
 800650c:	40010000 	.word	0x40010000
 8006510:	40010400 	.word	0x40010400
 8006514:	40000400 	.word	0x40000400
 8006518:	40000800 	.word	0x40000800
 800651c:	40000c00 	.word	0x40000c00
 8006520:	40001800 	.word	0x40001800
 8006524:	40014000 	.word	0x40014000
 8006528:	4000e000 	.word	0x4000e000
 800652c:	4000e400 	.word	0x4000e400

08006530 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006530:	b480      	push	{r7}
 8006532:	b083      	sub	sp, #12
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006538:	bf00      	nop
 800653a:	370c      	adds	r7, #12
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr

08006544 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006544:	b480      	push	{r7}
 8006546:	b083      	sub	sp, #12
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800654c:	bf00      	nop
 800654e:	370c      	adds	r7, #12
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr

08006558 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006558:	b480      	push	{r7}
 800655a:	b083      	sub	sp, #12
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006560:	bf00      	nop
 8006562:	370c      	adds	r7, #12
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr

0800656c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b082      	sub	sp, #8
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d101      	bne.n	800657e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800657a:	2301      	movs	r3, #1
 800657c:	e042      	b.n	8006604 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006584:	2b00      	cmp	r3, #0
 8006586:	d106      	bne.n	8006596 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2200      	movs	r2, #0
 800658c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f7fb f921 	bl	80017d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2224      	movs	r2, #36	; 0x24
 800659a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	681a      	ldr	r2, [r3, #0]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f022 0201 	bic.w	r2, r2, #1
 80065ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f000 f82c 	bl	800660c <UART_SetConfig>
 80065b4:	4603      	mov	r3, r0
 80065b6:	2b01      	cmp	r3, #1
 80065b8:	d101      	bne.n	80065be <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	e022      	b.n	8006604 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d002      	beq.n	80065cc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f000 fe8c 	bl	80072e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	685a      	ldr	r2, [r3, #4]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80065da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	689a      	ldr	r2, [r3, #8]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80065ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f042 0201 	orr.w	r2, r2, #1
 80065fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f000 ff13 	bl	8007428 <UART_CheckIdleState>
 8006602:	4603      	mov	r3, r0
}
 8006604:	4618      	mov	r0, r3
 8006606:	3708      	adds	r7, #8
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}

0800660c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800660c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006610:	b092      	sub	sp, #72	; 0x48
 8006612:	af00      	add	r7, sp, #0
 8006614:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006616:	2300      	movs	r3, #0
 8006618:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	689a      	ldr	r2, [r3, #8]
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	691b      	ldr	r3, [r3, #16]
 8006624:	431a      	orrs	r2, r3
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	695b      	ldr	r3, [r3, #20]
 800662a:	431a      	orrs	r2, r3
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	69db      	ldr	r3, [r3, #28]
 8006630:	4313      	orrs	r3, r2
 8006632:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	681a      	ldr	r2, [r3, #0]
 800663a:	4bbe      	ldr	r3, [pc, #760]	; (8006934 <UART_SetConfig+0x328>)
 800663c:	4013      	ands	r3, r2
 800663e:	697a      	ldr	r2, [r7, #20]
 8006640:	6812      	ldr	r2, [r2, #0]
 8006642:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006644:	430b      	orrs	r3, r1
 8006646:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	68da      	ldr	r2, [r3, #12]
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	430a      	orrs	r2, r1
 800665c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	699b      	ldr	r3, [r3, #24]
 8006662:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4ab3      	ldr	r2, [pc, #716]	; (8006938 <UART_SetConfig+0x32c>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d004      	beq.n	8006678 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	6a1b      	ldr	r3, [r3, #32]
 8006672:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006674:	4313      	orrs	r3, r2
 8006676:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	689a      	ldr	r2, [r3, #8]
 800667e:	4baf      	ldr	r3, [pc, #700]	; (800693c <UART_SetConfig+0x330>)
 8006680:	4013      	ands	r3, r2
 8006682:	697a      	ldr	r2, [r7, #20]
 8006684:	6812      	ldr	r2, [r2, #0]
 8006686:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006688:	430b      	orrs	r3, r1
 800668a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006692:	f023 010f 	bic.w	r1, r3, #15
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	430a      	orrs	r2, r1
 80066a0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4aa6      	ldr	r2, [pc, #664]	; (8006940 <UART_SetConfig+0x334>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d177      	bne.n	800679c <UART_SetConfig+0x190>
 80066ac:	4ba5      	ldr	r3, [pc, #660]	; (8006944 <UART_SetConfig+0x338>)
 80066ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80066b4:	2b28      	cmp	r3, #40	; 0x28
 80066b6:	d86d      	bhi.n	8006794 <UART_SetConfig+0x188>
 80066b8:	a201      	add	r2, pc, #4	; (adr r2, 80066c0 <UART_SetConfig+0xb4>)
 80066ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066be:	bf00      	nop
 80066c0:	08006765 	.word	0x08006765
 80066c4:	08006795 	.word	0x08006795
 80066c8:	08006795 	.word	0x08006795
 80066cc:	08006795 	.word	0x08006795
 80066d0:	08006795 	.word	0x08006795
 80066d4:	08006795 	.word	0x08006795
 80066d8:	08006795 	.word	0x08006795
 80066dc:	08006795 	.word	0x08006795
 80066e0:	0800676d 	.word	0x0800676d
 80066e4:	08006795 	.word	0x08006795
 80066e8:	08006795 	.word	0x08006795
 80066ec:	08006795 	.word	0x08006795
 80066f0:	08006795 	.word	0x08006795
 80066f4:	08006795 	.word	0x08006795
 80066f8:	08006795 	.word	0x08006795
 80066fc:	08006795 	.word	0x08006795
 8006700:	08006775 	.word	0x08006775
 8006704:	08006795 	.word	0x08006795
 8006708:	08006795 	.word	0x08006795
 800670c:	08006795 	.word	0x08006795
 8006710:	08006795 	.word	0x08006795
 8006714:	08006795 	.word	0x08006795
 8006718:	08006795 	.word	0x08006795
 800671c:	08006795 	.word	0x08006795
 8006720:	0800677d 	.word	0x0800677d
 8006724:	08006795 	.word	0x08006795
 8006728:	08006795 	.word	0x08006795
 800672c:	08006795 	.word	0x08006795
 8006730:	08006795 	.word	0x08006795
 8006734:	08006795 	.word	0x08006795
 8006738:	08006795 	.word	0x08006795
 800673c:	08006795 	.word	0x08006795
 8006740:	08006785 	.word	0x08006785
 8006744:	08006795 	.word	0x08006795
 8006748:	08006795 	.word	0x08006795
 800674c:	08006795 	.word	0x08006795
 8006750:	08006795 	.word	0x08006795
 8006754:	08006795 	.word	0x08006795
 8006758:	08006795 	.word	0x08006795
 800675c:	08006795 	.word	0x08006795
 8006760:	0800678d 	.word	0x0800678d
 8006764:	2301      	movs	r3, #1
 8006766:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800676a:	e326      	b.n	8006dba <UART_SetConfig+0x7ae>
 800676c:	2304      	movs	r3, #4
 800676e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006772:	e322      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006774:	2308      	movs	r3, #8
 8006776:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800677a:	e31e      	b.n	8006dba <UART_SetConfig+0x7ae>
 800677c:	2310      	movs	r3, #16
 800677e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006782:	e31a      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006784:	2320      	movs	r3, #32
 8006786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800678a:	e316      	b.n	8006dba <UART_SetConfig+0x7ae>
 800678c:	2340      	movs	r3, #64	; 0x40
 800678e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006792:	e312      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006794:	2380      	movs	r3, #128	; 0x80
 8006796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800679a:	e30e      	b.n	8006dba <UART_SetConfig+0x7ae>
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a69      	ldr	r2, [pc, #420]	; (8006948 <UART_SetConfig+0x33c>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d130      	bne.n	8006808 <UART_SetConfig+0x1fc>
 80067a6:	4b67      	ldr	r3, [pc, #412]	; (8006944 <UART_SetConfig+0x338>)
 80067a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067aa:	f003 0307 	and.w	r3, r3, #7
 80067ae:	2b05      	cmp	r3, #5
 80067b0:	d826      	bhi.n	8006800 <UART_SetConfig+0x1f4>
 80067b2:	a201      	add	r2, pc, #4	; (adr r2, 80067b8 <UART_SetConfig+0x1ac>)
 80067b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067b8:	080067d1 	.word	0x080067d1
 80067bc:	080067d9 	.word	0x080067d9
 80067c0:	080067e1 	.word	0x080067e1
 80067c4:	080067e9 	.word	0x080067e9
 80067c8:	080067f1 	.word	0x080067f1
 80067cc:	080067f9 	.word	0x080067f9
 80067d0:	2300      	movs	r3, #0
 80067d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067d6:	e2f0      	b.n	8006dba <UART_SetConfig+0x7ae>
 80067d8:	2304      	movs	r3, #4
 80067da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067de:	e2ec      	b.n	8006dba <UART_SetConfig+0x7ae>
 80067e0:	2308      	movs	r3, #8
 80067e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067e6:	e2e8      	b.n	8006dba <UART_SetConfig+0x7ae>
 80067e8:	2310      	movs	r3, #16
 80067ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067ee:	e2e4      	b.n	8006dba <UART_SetConfig+0x7ae>
 80067f0:	2320      	movs	r3, #32
 80067f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067f6:	e2e0      	b.n	8006dba <UART_SetConfig+0x7ae>
 80067f8:	2340      	movs	r3, #64	; 0x40
 80067fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067fe:	e2dc      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006800:	2380      	movs	r3, #128	; 0x80
 8006802:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006806:	e2d8      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a4f      	ldr	r2, [pc, #316]	; (800694c <UART_SetConfig+0x340>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d130      	bne.n	8006874 <UART_SetConfig+0x268>
 8006812:	4b4c      	ldr	r3, [pc, #304]	; (8006944 <UART_SetConfig+0x338>)
 8006814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006816:	f003 0307 	and.w	r3, r3, #7
 800681a:	2b05      	cmp	r3, #5
 800681c:	d826      	bhi.n	800686c <UART_SetConfig+0x260>
 800681e:	a201      	add	r2, pc, #4	; (adr r2, 8006824 <UART_SetConfig+0x218>)
 8006820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006824:	0800683d 	.word	0x0800683d
 8006828:	08006845 	.word	0x08006845
 800682c:	0800684d 	.word	0x0800684d
 8006830:	08006855 	.word	0x08006855
 8006834:	0800685d 	.word	0x0800685d
 8006838:	08006865 	.word	0x08006865
 800683c:	2300      	movs	r3, #0
 800683e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006842:	e2ba      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006844:	2304      	movs	r3, #4
 8006846:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800684a:	e2b6      	b.n	8006dba <UART_SetConfig+0x7ae>
 800684c:	2308      	movs	r3, #8
 800684e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006852:	e2b2      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006854:	2310      	movs	r3, #16
 8006856:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800685a:	e2ae      	b.n	8006dba <UART_SetConfig+0x7ae>
 800685c:	2320      	movs	r3, #32
 800685e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006862:	e2aa      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006864:	2340      	movs	r3, #64	; 0x40
 8006866:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800686a:	e2a6      	b.n	8006dba <UART_SetConfig+0x7ae>
 800686c:	2380      	movs	r3, #128	; 0x80
 800686e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006872:	e2a2      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a35      	ldr	r2, [pc, #212]	; (8006950 <UART_SetConfig+0x344>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d130      	bne.n	80068e0 <UART_SetConfig+0x2d4>
 800687e:	4b31      	ldr	r3, [pc, #196]	; (8006944 <UART_SetConfig+0x338>)
 8006880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006882:	f003 0307 	and.w	r3, r3, #7
 8006886:	2b05      	cmp	r3, #5
 8006888:	d826      	bhi.n	80068d8 <UART_SetConfig+0x2cc>
 800688a:	a201      	add	r2, pc, #4	; (adr r2, 8006890 <UART_SetConfig+0x284>)
 800688c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006890:	080068a9 	.word	0x080068a9
 8006894:	080068b1 	.word	0x080068b1
 8006898:	080068b9 	.word	0x080068b9
 800689c:	080068c1 	.word	0x080068c1
 80068a0:	080068c9 	.word	0x080068c9
 80068a4:	080068d1 	.word	0x080068d1
 80068a8:	2300      	movs	r3, #0
 80068aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068ae:	e284      	b.n	8006dba <UART_SetConfig+0x7ae>
 80068b0:	2304      	movs	r3, #4
 80068b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068b6:	e280      	b.n	8006dba <UART_SetConfig+0x7ae>
 80068b8:	2308      	movs	r3, #8
 80068ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068be:	e27c      	b.n	8006dba <UART_SetConfig+0x7ae>
 80068c0:	2310      	movs	r3, #16
 80068c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068c6:	e278      	b.n	8006dba <UART_SetConfig+0x7ae>
 80068c8:	2320      	movs	r3, #32
 80068ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068ce:	e274      	b.n	8006dba <UART_SetConfig+0x7ae>
 80068d0:	2340      	movs	r3, #64	; 0x40
 80068d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068d6:	e270      	b.n	8006dba <UART_SetConfig+0x7ae>
 80068d8:	2380      	movs	r3, #128	; 0x80
 80068da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068de:	e26c      	b.n	8006dba <UART_SetConfig+0x7ae>
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a1b      	ldr	r2, [pc, #108]	; (8006954 <UART_SetConfig+0x348>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d142      	bne.n	8006970 <UART_SetConfig+0x364>
 80068ea:	4b16      	ldr	r3, [pc, #88]	; (8006944 <UART_SetConfig+0x338>)
 80068ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068ee:	f003 0307 	and.w	r3, r3, #7
 80068f2:	2b05      	cmp	r3, #5
 80068f4:	d838      	bhi.n	8006968 <UART_SetConfig+0x35c>
 80068f6:	a201      	add	r2, pc, #4	; (adr r2, 80068fc <UART_SetConfig+0x2f0>)
 80068f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068fc:	08006915 	.word	0x08006915
 8006900:	0800691d 	.word	0x0800691d
 8006904:	08006925 	.word	0x08006925
 8006908:	0800692d 	.word	0x0800692d
 800690c:	08006959 	.word	0x08006959
 8006910:	08006961 	.word	0x08006961
 8006914:	2300      	movs	r3, #0
 8006916:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800691a:	e24e      	b.n	8006dba <UART_SetConfig+0x7ae>
 800691c:	2304      	movs	r3, #4
 800691e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006922:	e24a      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006924:	2308      	movs	r3, #8
 8006926:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800692a:	e246      	b.n	8006dba <UART_SetConfig+0x7ae>
 800692c:	2310      	movs	r3, #16
 800692e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006932:	e242      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006934:	cfff69f3 	.word	0xcfff69f3
 8006938:	58000c00 	.word	0x58000c00
 800693c:	11fff4ff 	.word	0x11fff4ff
 8006940:	40011000 	.word	0x40011000
 8006944:	58024400 	.word	0x58024400
 8006948:	40004400 	.word	0x40004400
 800694c:	40004800 	.word	0x40004800
 8006950:	40004c00 	.word	0x40004c00
 8006954:	40005000 	.word	0x40005000
 8006958:	2320      	movs	r3, #32
 800695a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800695e:	e22c      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006960:	2340      	movs	r3, #64	; 0x40
 8006962:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006966:	e228      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006968:	2380      	movs	r3, #128	; 0x80
 800696a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800696e:	e224      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4ab1      	ldr	r2, [pc, #708]	; (8006c3c <UART_SetConfig+0x630>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d176      	bne.n	8006a68 <UART_SetConfig+0x45c>
 800697a:	4bb1      	ldr	r3, [pc, #708]	; (8006c40 <UART_SetConfig+0x634>)
 800697c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800697e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006982:	2b28      	cmp	r3, #40	; 0x28
 8006984:	d86c      	bhi.n	8006a60 <UART_SetConfig+0x454>
 8006986:	a201      	add	r2, pc, #4	; (adr r2, 800698c <UART_SetConfig+0x380>)
 8006988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800698c:	08006a31 	.word	0x08006a31
 8006990:	08006a61 	.word	0x08006a61
 8006994:	08006a61 	.word	0x08006a61
 8006998:	08006a61 	.word	0x08006a61
 800699c:	08006a61 	.word	0x08006a61
 80069a0:	08006a61 	.word	0x08006a61
 80069a4:	08006a61 	.word	0x08006a61
 80069a8:	08006a61 	.word	0x08006a61
 80069ac:	08006a39 	.word	0x08006a39
 80069b0:	08006a61 	.word	0x08006a61
 80069b4:	08006a61 	.word	0x08006a61
 80069b8:	08006a61 	.word	0x08006a61
 80069bc:	08006a61 	.word	0x08006a61
 80069c0:	08006a61 	.word	0x08006a61
 80069c4:	08006a61 	.word	0x08006a61
 80069c8:	08006a61 	.word	0x08006a61
 80069cc:	08006a41 	.word	0x08006a41
 80069d0:	08006a61 	.word	0x08006a61
 80069d4:	08006a61 	.word	0x08006a61
 80069d8:	08006a61 	.word	0x08006a61
 80069dc:	08006a61 	.word	0x08006a61
 80069e0:	08006a61 	.word	0x08006a61
 80069e4:	08006a61 	.word	0x08006a61
 80069e8:	08006a61 	.word	0x08006a61
 80069ec:	08006a49 	.word	0x08006a49
 80069f0:	08006a61 	.word	0x08006a61
 80069f4:	08006a61 	.word	0x08006a61
 80069f8:	08006a61 	.word	0x08006a61
 80069fc:	08006a61 	.word	0x08006a61
 8006a00:	08006a61 	.word	0x08006a61
 8006a04:	08006a61 	.word	0x08006a61
 8006a08:	08006a61 	.word	0x08006a61
 8006a0c:	08006a51 	.word	0x08006a51
 8006a10:	08006a61 	.word	0x08006a61
 8006a14:	08006a61 	.word	0x08006a61
 8006a18:	08006a61 	.word	0x08006a61
 8006a1c:	08006a61 	.word	0x08006a61
 8006a20:	08006a61 	.word	0x08006a61
 8006a24:	08006a61 	.word	0x08006a61
 8006a28:	08006a61 	.word	0x08006a61
 8006a2c:	08006a59 	.word	0x08006a59
 8006a30:	2301      	movs	r3, #1
 8006a32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a36:	e1c0      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006a38:	2304      	movs	r3, #4
 8006a3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a3e:	e1bc      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006a40:	2308      	movs	r3, #8
 8006a42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a46:	e1b8      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006a48:	2310      	movs	r3, #16
 8006a4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a4e:	e1b4      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006a50:	2320      	movs	r3, #32
 8006a52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a56:	e1b0      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006a58:	2340      	movs	r3, #64	; 0x40
 8006a5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a5e:	e1ac      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006a60:	2380      	movs	r3, #128	; 0x80
 8006a62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a66:	e1a8      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a75      	ldr	r2, [pc, #468]	; (8006c44 <UART_SetConfig+0x638>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d130      	bne.n	8006ad4 <UART_SetConfig+0x4c8>
 8006a72:	4b73      	ldr	r3, [pc, #460]	; (8006c40 <UART_SetConfig+0x634>)
 8006a74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a76:	f003 0307 	and.w	r3, r3, #7
 8006a7a:	2b05      	cmp	r3, #5
 8006a7c:	d826      	bhi.n	8006acc <UART_SetConfig+0x4c0>
 8006a7e:	a201      	add	r2, pc, #4	; (adr r2, 8006a84 <UART_SetConfig+0x478>)
 8006a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a84:	08006a9d 	.word	0x08006a9d
 8006a88:	08006aa5 	.word	0x08006aa5
 8006a8c:	08006aad 	.word	0x08006aad
 8006a90:	08006ab5 	.word	0x08006ab5
 8006a94:	08006abd 	.word	0x08006abd
 8006a98:	08006ac5 	.word	0x08006ac5
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006aa2:	e18a      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006aa4:	2304      	movs	r3, #4
 8006aa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006aaa:	e186      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006aac:	2308      	movs	r3, #8
 8006aae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ab2:	e182      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006ab4:	2310      	movs	r3, #16
 8006ab6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006aba:	e17e      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006abc:	2320      	movs	r3, #32
 8006abe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ac2:	e17a      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006ac4:	2340      	movs	r3, #64	; 0x40
 8006ac6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006aca:	e176      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006acc:	2380      	movs	r3, #128	; 0x80
 8006ace:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ad2:	e172      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a5b      	ldr	r2, [pc, #364]	; (8006c48 <UART_SetConfig+0x63c>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d130      	bne.n	8006b40 <UART_SetConfig+0x534>
 8006ade:	4b58      	ldr	r3, [pc, #352]	; (8006c40 <UART_SetConfig+0x634>)
 8006ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ae2:	f003 0307 	and.w	r3, r3, #7
 8006ae6:	2b05      	cmp	r3, #5
 8006ae8:	d826      	bhi.n	8006b38 <UART_SetConfig+0x52c>
 8006aea:	a201      	add	r2, pc, #4	; (adr r2, 8006af0 <UART_SetConfig+0x4e4>)
 8006aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006af0:	08006b09 	.word	0x08006b09
 8006af4:	08006b11 	.word	0x08006b11
 8006af8:	08006b19 	.word	0x08006b19
 8006afc:	08006b21 	.word	0x08006b21
 8006b00:	08006b29 	.word	0x08006b29
 8006b04:	08006b31 	.word	0x08006b31
 8006b08:	2300      	movs	r3, #0
 8006b0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b0e:	e154      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006b10:	2304      	movs	r3, #4
 8006b12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b16:	e150      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006b18:	2308      	movs	r3, #8
 8006b1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b1e:	e14c      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006b20:	2310      	movs	r3, #16
 8006b22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b26:	e148      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006b28:	2320      	movs	r3, #32
 8006b2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b2e:	e144      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006b30:	2340      	movs	r3, #64	; 0x40
 8006b32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b36:	e140      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006b38:	2380      	movs	r3, #128	; 0x80
 8006b3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b3e:	e13c      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a41      	ldr	r2, [pc, #260]	; (8006c4c <UART_SetConfig+0x640>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	f040 8082 	bne.w	8006c50 <UART_SetConfig+0x644>
 8006b4c:	4b3c      	ldr	r3, [pc, #240]	; (8006c40 <UART_SetConfig+0x634>)
 8006b4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b50:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006b54:	2b28      	cmp	r3, #40	; 0x28
 8006b56:	d86d      	bhi.n	8006c34 <UART_SetConfig+0x628>
 8006b58:	a201      	add	r2, pc, #4	; (adr r2, 8006b60 <UART_SetConfig+0x554>)
 8006b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b5e:	bf00      	nop
 8006b60:	08006c05 	.word	0x08006c05
 8006b64:	08006c35 	.word	0x08006c35
 8006b68:	08006c35 	.word	0x08006c35
 8006b6c:	08006c35 	.word	0x08006c35
 8006b70:	08006c35 	.word	0x08006c35
 8006b74:	08006c35 	.word	0x08006c35
 8006b78:	08006c35 	.word	0x08006c35
 8006b7c:	08006c35 	.word	0x08006c35
 8006b80:	08006c0d 	.word	0x08006c0d
 8006b84:	08006c35 	.word	0x08006c35
 8006b88:	08006c35 	.word	0x08006c35
 8006b8c:	08006c35 	.word	0x08006c35
 8006b90:	08006c35 	.word	0x08006c35
 8006b94:	08006c35 	.word	0x08006c35
 8006b98:	08006c35 	.word	0x08006c35
 8006b9c:	08006c35 	.word	0x08006c35
 8006ba0:	08006c15 	.word	0x08006c15
 8006ba4:	08006c35 	.word	0x08006c35
 8006ba8:	08006c35 	.word	0x08006c35
 8006bac:	08006c35 	.word	0x08006c35
 8006bb0:	08006c35 	.word	0x08006c35
 8006bb4:	08006c35 	.word	0x08006c35
 8006bb8:	08006c35 	.word	0x08006c35
 8006bbc:	08006c35 	.word	0x08006c35
 8006bc0:	08006c1d 	.word	0x08006c1d
 8006bc4:	08006c35 	.word	0x08006c35
 8006bc8:	08006c35 	.word	0x08006c35
 8006bcc:	08006c35 	.word	0x08006c35
 8006bd0:	08006c35 	.word	0x08006c35
 8006bd4:	08006c35 	.word	0x08006c35
 8006bd8:	08006c35 	.word	0x08006c35
 8006bdc:	08006c35 	.word	0x08006c35
 8006be0:	08006c25 	.word	0x08006c25
 8006be4:	08006c35 	.word	0x08006c35
 8006be8:	08006c35 	.word	0x08006c35
 8006bec:	08006c35 	.word	0x08006c35
 8006bf0:	08006c35 	.word	0x08006c35
 8006bf4:	08006c35 	.word	0x08006c35
 8006bf8:	08006c35 	.word	0x08006c35
 8006bfc:	08006c35 	.word	0x08006c35
 8006c00:	08006c2d 	.word	0x08006c2d
 8006c04:	2301      	movs	r3, #1
 8006c06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c0a:	e0d6      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006c0c:	2304      	movs	r3, #4
 8006c0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c12:	e0d2      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006c14:	2308      	movs	r3, #8
 8006c16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c1a:	e0ce      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006c1c:	2310      	movs	r3, #16
 8006c1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c22:	e0ca      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006c24:	2320      	movs	r3, #32
 8006c26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c2a:	e0c6      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006c2c:	2340      	movs	r3, #64	; 0x40
 8006c2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c32:	e0c2      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006c34:	2380      	movs	r3, #128	; 0x80
 8006c36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c3a:	e0be      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006c3c:	40011400 	.word	0x40011400
 8006c40:	58024400 	.word	0x58024400
 8006c44:	40007800 	.word	0x40007800
 8006c48:	40007c00 	.word	0x40007c00
 8006c4c:	40011800 	.word	0x40011800
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4aad      	ldr	r2, [pc, #692]	; (8006f0c <UART_SetConfig+0x900>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d176      	bne.n	8006d48 <UART_SetConfig+0x73c>
 8006c5a:	4bad      	ldr	r3, [pc, #692]	; (8006f10 <UART_SetConfig+0x904>)
 8006c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006c62:	2b28      	cmp	r3, #40	; 0x28
 8006c64:	d86c      	bhi.n	8006d40 <UART_SetConfig+0x734>
 8006c66:	a201      	add	r2, pc, #4	; (adr r2, 8006c6c <UART_SetConfig+0x660>)
 8006c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c6c:	08006d11 	.word	0x08006d11
 8006c70:	08006d41 	.word	0x08006d41
 8006c74:	08006d41 	.word	0x08006d41
 8006c78:	08006d41 	.word	0x08006d41
 8006c7c:	08006d41 	.word	0x08006d41
 8006c80:	08006d41 	.word	0x08006d41
 8006c84:	08006d41 	.word	0x08006d41
 8006c88:	08006d41 	.word	0x08006d41
 8006c8c:	08006d19 	.word	0x08006d19
 8006c90:	08006d41 	.word	0x08006d41
 8006c94:	08006d41 	.word	0x08006d41
 8006c98:	08006d41 	.word	0x08006d41
 8006c9c:	08006d41 	.word	0x08006d41
 8006ca0:	08006d41 	.word	0x08006d41
 8006ca4:	08006d41 	.word	0x08006d41
 8006ca8:	08006d41 	.word	0x08006d41
 8006cac:	08006d21 	.word	0x08006d21
 8006cb0:	08006d41 	.word	0x08006d41
 8006cb4:	08006d41 	.word	0x08006d41
 8006cb8:	08006d41 	.word	0x08006d41
 8006cbc:	08006d41 	.word	0x08006d41
 8006cc0:	08006d41 	.word	0x08006d41
 8006cc4:	08006d41 	.word	0x08006d41
 8006cc8:	08006d41 	.word	0x08006d41
 8006ccc:	08006d29 	.word	0x08006d29
 8006cd0:	08006d41 	.word	0x08006d41
 8006cd4:	08006d41 	.word	0x08006d41
 8006cd8:	08006d41 	.word	0x08006d41
 8006cdc:	08006d41 	.word	0x08006d41
 8006ce0:	08006d41 	.word	0x08006d41
 8006ce4:	08006d41 	.word	0x08006d41
 8006ce8:	08006d41 	.word	0x08006d41
 8006cec:	08006d31 	.word	0x08006d31
 8006cf0:	08006d41 	.word	0x08006d41
 8006cf4:	08006d41 	.word	0x08006d41
 8006cf8:	08006d41 	.word	0x08006d41
 8006cfc:	08006d41 	.word	0x08006d41
 8006d00:	08006d41 	.word	0x08006d41
 8006d04:	08006d41 	.word	0x08006d41
 8006d08:	08006d41 	.word	0x08006d41
 8006d0c:	08006d39 	.word	0x08006d39
 8006d10:	2301      	movs	r3, #1
 8006d12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d16:	e050      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006d18:	2304      	movs	r3, #4
 8006d1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d1e:	e04c      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006d20:	2308      	movs	r3, #8
 8006d22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d26:	e048      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006d28:	2310      	movs	r3, #16
 8006d2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d2e:	e044      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006d30:	2320      	movs	r3, #32
 8006d32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d36:	e040      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006d38:	2340      	movs	r3, #64	; 0x40
 8006d3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d3e:	e03c      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006d40:	2380      	movs	r3, #128	; 0x80
 8006d42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d46:	e038      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a71      	ldr	r2, [pc, #452]	; (8006f14 <UART_SetConfig+0x908>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d130      	bne.n	8006db4 <UART_SetConfig+0x7a8>
 8006d52:	4b6f      	ldr	r3, [pc, #444]	; (8006f10 <UART_SetConfig+0x904>)
 8006d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d56:	f003 0307 	and.w	r3, r3, #7
 8006d5a:	2b05      	cmp	r3, #5
 8006d5c:	d826      	bhi.n	8006dac <UART_SetConfig+0x7a0>
 8006d5e:	a201      	add	r2, pc, #4	; (adr r2, 8006d64 <UART_SetConfig+0x758>)
 8006d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d64:	08006d7d 	.word	0x08006d7d
 8006d68:	08006d85 	.word	0x08006d85
 8006d6c:	08006d8d 	.word	0x08006d8d
 8006d70:	08006d95 	.word	0x08006d95
 8006d74:	08006d9d 	.word	0x08006d9d
 8006d78:	08006da5 	.word	0x08006da5
 8006d7c:	2302      	movs	r3, #2
 8006d7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d82:	e01a      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006d84:	2304      	movs	r3, #4
 8006d86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d8a:	e016      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006d8c:	2308      	movs	r3, #8
 8006d8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d92:	e012      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006d94:	2310      	movs	r3, #16
 8006d96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d9a:	e00e      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006d9c:	2320      	movs	r3, #32
 8006d9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006da2:	e00a      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006da4:	2340      	movs	r3, #64	; 0x40
 8006da6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006daa:	e006      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006dac:	2380      	movs	r3, #128	; 0x80
 8006dae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006db2:	e002      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006db4:	2380      	movs	r3, #128	; 0x80
 8006db6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a55      	ldr	r2, [pc, #340]	; (8006f14 <UART_SetConfig+0x908>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	f040 80f8 	bne.w	8006fb6 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006dc6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006dca:	2b20      	cmp	r3, #32
 8006dcc:	dc46      	bgt.n	8006e5c <UART_SetConfig+0x850>
 8006dce:	2b02      	cmp	r3, #2
 8006dd0:	db75      	blt.n	8006ebe <UART_SetConfig+0x8b2>
 8006dd2:	3b02      	subs	r3, #2
 8006dd4:	2b1e      	cmp	r3, #30
 8006dd6:	d872      	bhi.n	8006ebe <UART_SetConfig+0x8b2>
 8006dd8:	a201      	add	r2, pc, #4	; (adr r2, 8006de0 <UART_SetConfig+0x7d4>)
 8006dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dde:	bf00      	nop
 8006de0:	08006e63 	.word	0x08006e63
 8006de4:	08006ebf 	.word	0x08006ebf
 8006de8:	08006e6b 	.word	0x08006e6b
 8006dec:	08006ebf 	.word	0x08006ebf
 8006df0:	08006ebf 	.word	0x08006ebf
 8006df4:	08006ebf 	.word	0x08006ebf
 8006df8:	08006e7b 	.word	0x08006e7b
 8006dfc:	08006ebf 	.word	0x08006ebf
 8006e00:	08006ebf 	.word	0x08006ebf
 8006e04:	08006ebf 	.word	0x08006ebf
 8006e08:	08006ebf 	.word	0x08006ebf
 8006e0c:	08006ebf 	.word	0x08006ebf
 8006e10:	08006ebf 	.word	0x08006ebf
 8006e14:	08006ebf 	.word	0x08006ebf
 8006e18:	08006e8b 	.word	0x08006e8b
 8006e1c:	08006ebf 	.word	0x08006ebf
 8006e20:	08006ebf 	.word	0x08006ebf
 8006e24:	08006ebf 	.word	0x08006ebf
 8006e28:	08006ebf 	.word	0x08006ebf
 8006e2c:	08006ebf 	.word	0x08006ebf
 8006e30:	08006ebf 	.word	0x08006ebf
 8006e34:	08006ebf 	.word	0x08006ebf
 8006e38:	08006ebf 	.word	0x08006ebf
 8006e3c:	08006ebf 	.word	0x08006ebf
 8006e40:	08006ebf 	.word	0x08006ebf
 8006e44:	08006ebf 	.word	0x08006ebf
 8006e48:	08006ebf 	.word	0x08006ebf
 8006e4c:	08006ebf 	.word	0x08006ebf
 8006e50:	08006ebf 	.word	0x08006ebf
 8006e54:	08006ebf 	.word	0x08006ebf
 8006e58:	08006eb1 	.word	0x08006eb1
 8006e5c:	2b40      	cmp	r3, #64	; 0x40
 8006e5e:	d02a      	beq.n	8006eb6 <UART_SetConfig+0x8aa>
 8006e60:	e02d      	b.n	8006ebe <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006e62:	f7fd f83d 	bl	8003ee0 <HAL_RCCEx_GetD3PCLK1Freq>
 8006e66:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006e68:	e02f      	b.n	8006eca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f7fd f84c 	bl	8003f0c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e78:	e027      	b.n	8006eca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e7a:	f107 0318 	add.w	r3, r7, #24
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f7fd f998 	bl	80041b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006e84:	69fb      	ldr	r3, [r7, #28]
 8006e86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e88:	e01f      	b.n	8006eca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e8a:	4b21      	ldr	r3, [pc, #132]	; (8006f10 <UART_SetConfig+0x904>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f003 0320 	and.w	r3, r3, #32
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d009      	beq.n	8006eaa <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006e96:	4b1e      	ldr	r3, [pc, #120]	; (8006f10 <UART_SetConfig+0x904>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	08db      	lsrs	r3, r3, #3
 8006e9c:	f003 0303 	and.w	r3, r3, #3
 8006ea0:	4a1d      	ldr	r2, [pc, #116]	; (8006f18 <UART_SetConfig+0x90c>)
 8006ea2:	fa22 f303 	lsr.w	r3, r2, r3
 8006ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006ea8:	e00f      	b.n	8006eca <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006eaa:	4b1b      	ldr	r3, [pc, #108]	; (8006f18 <UART_SetConfig+0x90c>)
 8006eac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006eae:	e00c      	b.n	8006eca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006eb0:	4b1a      	ldr	r3, [pc, #104]	; (8006f1c <UART_SetConfig+0x910>)
 8006eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006eb4:	e009      	b.n	8006eca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006eb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006eba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ebc:	e005      	b.n	8006eca <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006ec8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006eca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	f000 81ee 	beq.w	80072ae <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed6:	4a12      	ldr	r2, [pc, #72]	; (8006f20 <UART_SetConfig+0x914>)
 8006ed8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006edc:	461a      	mov	r2, r3
 8006ede:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ee0:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ee4:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	685a      	ldr	r2, [r3, #4]
 8006eea:	4613      	mov	r3, r2
 8006eec:	005b      	lsls	r3, r3, #1
 8006eee:	4413      	add	r3, r2
 8006ef0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	d305      	bcc.n	8006f02 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006efc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006efe:	429a      	cmp	r2, r3
 8006f00:	d910      	bls.n	8006f24 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8006f02:	2301      	movs	r3, #1
 8006f04:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006f08:	e1d1      	b.n	80072ae <UART_SetConfig+0xca2>
 8006f0a:	bf00      	nop
 8006f0c:	40011c00 	.word	0x40011c00
 8006f10:	58024400 	.word	0x58024400
 8006f14:	58000c00 	.word	0x58000c00
 8006f18:	03d09000 	.word	0x03d09000
 8006f1c:	003d0900 	.word	0x003d0900
 8006f20:	08009ed8 	.word	0x08009ed8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f26:	2200      	movs	r2, #0
 8006f28:	60bb      	str	r3, [r7, #8]
 8006f2a:	60fa      	str	r2, [r7, #12]
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f30:	4ac0      	ldr	r2, [pc, #768]	; (8007234 <UART_SetConfig+0xc28>)
 8006f32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	2200      	movs	r2, #0
 8006f3a:	603b      	str	r3, [r7, #0]
 8006f3c:	607a      	str	r2, [r7, #4]
 8006f3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f42:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006f46:	f7f9 fa3b 	bl	80003c0 <__aeabi_uldivmod>
 8006f4a:	4602      	mov	r2, r0
 8006f4c:	460b      	mov	r3, r1
 8006f4e:	4610      	mov	r0, r2
 8006f50:	4619      	mov	r1, r3
 8006f52:	f04f 0200 	mov.w	r2, #0
 8006f56:	f04f 0300 	mov.w	r3, #0
 8006f5a:	020b      	lsls	r3, r1, #8
 8006f5c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006f60:	0202      	lsls	r2, r0, #8
 8006f62:	6979      	ldr	r1, [r7, #20]
 8006f64:	6849      	ldr	r1, [r1, #4]
 8006f66:	0849      	lsrs	r1, r1, #1
 8006f68:	2000      	movs	r0, #0
 8006f6a:	460c      	mov	r4, r1
 8006f6c:	4605      	mov	r5, r0
 8006f6e:	eb12 0804 	adds.w	r8, r2, r4
 8006f72:	eb43 0905 	adc.w	r9, r3, r5
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	469a      	mov	sl, r3
 8006f7e:	4693      	mov	fp, r2
 8006f80:	4652      	mov	r2, sl
 8006f82:	465b      	mov	r3, fp
 8006f84:	4640      	mov	r0, r8
 8006f86:	4649      	mov	r1, r9
 8006f88:	f7f9 fa1a 	bl	80003c0 <__aeabi_uldivmod>
 8006f8c:	4602      	mov	r2, r0
 8006f8e:	460b      	mov	r3, r1
 8006f90:	4613      	mov	r3, r2
 8006f92:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f9a:	d308      	bcc.n	8006fae <UART_SetConfig+0x9a2>
 8006f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006fa2:	d204      	bcs.n	8006fae <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006faa:	60da      	str	r2, [r3, #12]
 8006fac:	e17f      	b.n	80072ae <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8006fae:	2301      	movs	r3, #1
 8006fb0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006fb4:	e17b      	b.n	80072ae <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	69db      	ldr	r3, [r3, #28]
 8006fba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fbe:	f040 80bd 	bne.w	800713c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8006fc2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006fc6:	2b20      	cmp	r3, #32
 8006fc8:	dc48      	bgt.n	800705c <UART_SetConfig+0xa50>
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	db7b      	blt.n	80070c6 <UART_SetConfig+0xaba>
 8006fce:	2b20      	cmp	r3, #32
 8006fd0:	d879      	bhi.n	80070c6 <UART_SetConfig+0xaba>
 8006fd2:	a201      	add	r2, pc, #4	; (adr r2, 8006fd8 <UART_SetConfig+0x9cc>)
 8006fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fd8:	08007063 	.word	0x08007063
 8006fdc:	0800706b 	.word	0x0800706b
 8006fe0:	080070c7 	.word	0x080070c7
 8006fe4:	080070c7 	.word	0x080070c7
 8006fe8:	08007073 	.word	0x08007073
 8006fec:	080070c7 	.word	0x080070c7
 8006ff0:	080070c7 	.word	0x080070c7
 8006ff4:	080070c7 	.word	0x080070c7
 8006ff8:	08007083 	.word	0x08007083
 8006ffc:	080070c7 	.word	0x080070c7
 8007000:	080070c7 	.word	0x080070c7
 8007004:	080070c7 	.word	0x080070c7
 8007008:	080070c7 	.word	0x080070c7
 800700c:	080070c7 	.word	0x080070c7
 8007010:	080070c7 	.word	0x080070c7
 8007014:	080070c7 	.word	0x080070c7
 8007018:	08007093 	.word	0x08007093
 800701c:	080070c7 	.word	0x080070c7
 8007020:	080070c7 	.word	0x080070c7
 8007024:	080070c7 	.word	0x080070c7
 8007028:	080070c7 	.word	0x080070c7
 800702c:	080070c7 	.word	0x080070c7
 8007030:	080070c7 	.word	0x080070c7
 8007034:	080070c7 	.word	0x080070c7
 8007038:	080070c7 	.word	0x080070c7
 800703c:	080070c7 	.word	0x080070c7
 8007040:	080070c7 	.word	0x080070c7
 8007044:	080070c7 	.word	0x080070c7
 8007048:	080070c7 	.word	0x080070c7
 800704c:	080070c7 	.word	0x080070c7
 8007050:	080070c7 	.word	0x080070c7
 8007054:	080070c7 	.word	0x080070c7
 8007058:	080070b9 	.word	0x080070b9
 800705c:	2b40      	cmp	r3, #64	; 0x40
 800705e:	d02e      	beq.n	80070be <UART_SetConfig+0xab2>
 8007060:	e031      	b.n	80070c6 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007062:	f7fc f817 	bl	8003094 <HAL_RCC_GetPCLK1Freq>
 8007066:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007068:	e033      	b.n	80070d2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800706a:	f7fc f829 	bl	80030c0 <HAL_RCC_GetPCLK2Freq>
 800706e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007070:	e02f      	b.n	80070d2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007072:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007076:	4618      	mov	r0, r3
 8007078:	f7fc ff48 	bl	8003f0c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800707c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800707e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007080:	e027      	b.n	80070d2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007082:	f107 0318 	add.w	r3, r7, #24
 8007086:	4618      	mov	r0, r3
 8007088:	f7fd f894 	bl	80041b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800708c:	69fb      	ldr	r3, [r7, #28]
 800708e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007090:	e01f      	b.n	80070d2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007092:	4b69      	ldr	r3, [pc, #420]	; (8007238 <UART_SetConfig+0xc2c>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f003 0320 	and.w	r3, r3, #32
 800709a:	2b00      	cmp	r3, #0
 800709c:	d009      	beq.n	80070b2 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800709e:	4b66      	ldr	r3, [pc, #408]	; (8007238 <UART_SetConfig+0xc2c>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	08db      	lsrs	r3, r3, #3
 80070a4:	f003 0303 	and.w	r3, r3, #3
 80070a8:	4a64      	ldr	r2, [pc, #400]	; (800723c <UART_SetConfig+0xc30>)
 80070aa:	fa22 f303 	lsr.w	r3, r2, r3
 80070ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80070b0:	e00f      	b.n	80070d2 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80070b2:	4b62      	ldr	r3, [pc, #392]	; (800723c <UART_SetConfig+0xc30>)
 80070b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070b6:	e00c      	b.n	80070d2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80070b8:	4b61      	ldr	r3, [pc, #388]	; (8007240 <UART_SetConfig+0xc34>)
 80070ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070bc:	e009      	b.n	80070d2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070c4:	e005      	b.n	80070d2 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80070c6:	2300      	movs	r3, #0
 80070c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80070ca:	2301      	movs	r3, #1
 80070cc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80070d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80070d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	f000 80ea 	beq.w	80072ae <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070de:	4a55      	ldr	r2, [pc, #340]	; (8007234 <UART_SetConfig+0xc28>)
 80070e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070e4:	461a      	mov	r2, r3
 80070e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80070ec:	005a      	lsls	r2, r3, #1
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	085b      	lsrs	r3, r3, #1
 80070f4:	441a      	add	r2, r3
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80070fe:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007102:	2b0f      	cmp	r3, #15
 8007104:	d916      	bls.n	8007134 <UART_SetConfig+0xb28>
 8007106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007108:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800710c:	d212      	bcs.n	8007134 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800710e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007110:	b29b      	uxth	r3, r3
 8007112:	f023 030f 	bic.w	r3, r3, #15
 8007116:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800711a:	085b      	lsrs	r3, r3, #1
 800711c:	b29b      	uxth	r3, r3
 800711e:	f003 0307 	and.w	r3, r3, #7
 8007122:	b29a      	uxth	r2, r3
 8007124:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007126:	4313      	orrs	r3, r2
 8007128:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007130:	60da      	str	r2, [r3, #12]
 8007132:	e0bc      	b.n	80072ae <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007134:	2301      	movs	r3, #1
 8007136:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800713a:	e0b8      	b.n	80072ae <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800713c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007140:	2b20      	cmp	r3, #32
 8007142:	dc4b      	bgt.n	80071dc <UART_SetConfig+0xbd0>
 8007144:	2b00      	cmp	r3, #0
 8007146:	f2c0 8087 	blt.w	8007258 <UART_SetConfig+0xc4c>
 800714a:	2b20      	cmp	r3, #32
 800714c:	f200 8084 	bhi.w	8007258 <UART_SetConfig+0xc4c>
 8007150:	a201      	add	r2, pc, #4	; (adr r2, 8007158 <UART_SetConfig+0xb4c>)
 8007152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007156:	bf00      	nop
 8007158:	080071e3 	.word	0x080071e3
 800715c:	080071eb 	.word	0x080071eb
 8007160:	08007259 	.word	0x08007259
 8007164:	08007259 	.word	0x08007259
 8007168:	080071f3 	.word	0x080071f3
 800716c:	08007259 	.word	0x08007259
 8007170:	08007259 	.word	0x08007259
 8007174:	08007259 	.word	0x08007259
 8007178:	08007203 	.word	0x08007203
 800717c:	08007259 	.word	0x08007259
 8007180:	08007259 	.word	0x08007259
 8007184:	08007259 	.word	0x08007259
 8007188:	08007259 	.word	0x08007259
 800718c:	08007259 	.word	0x08007259
 8007190:	08007259 	.word	0x08007259
 8007194:	08007259 	.word	0x08007259
 8007198:	08007213 	.word	0x08007213
 800719c:	08007259 	.word	0x08007259
 80071a0:	08007259 	.word	0x08007259
 80071a4:	08007259 	.word	0x08007259
 80071a8:	08007259 	.word	0x08007259
 80071ac:	08007259 	.word	0x08007259
 80071b0:	08007259 	.word	0x08007259
 80071b4:	08007259 	.word	0x08007259
 80071b8:	08007259 	.word	0x08007259
 80071bc:	08007259 	.word	0x08007259
 80071c0:	08007259 	.word	0x08007259
 80071c4:	08007259 	.word	0x08007259
 80071c8:	08007259 	.word	0x08007259
 80071cc:	08007259 	.word	0x08007259
 80071d0:	08007259 	.word	0x08007259
 80071d4:	08007259 	.word	0x08007259
 80071d8:	0800724b 	.word	0x0800724b
 80071dc:	2b40      	cmp	r3, #64	; 0x40
 80071de:	d037      	beq.n	8007250 <UART_SetConfig+0xc44>
 80071e0:	e03a      	b.n	8007258 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071e2:	f7fb ff57 	bl	8003094 <HAL_RCC_GetPCLK1Freq>
 80071e6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80071e8:	e03c      	b.n	8007264 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80071ea:	f7fb ff69 	bl	80030c0 <HAL_RCC_GetPCLK2Freq>
 80071ee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80071f0:	e038      	b.n	8007264 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80071f6:	4618      	mov	r0, r3
 80071f8:	f7fc fe88 	bl	8003f0c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80071fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007200:	e030      	b.n	8007264 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007202:	f107 0318 	add.w	r3, r7, #24
 8007206:	4618      	mov	r0, r3
 8007208:	f7fc ffd4 	bl	80041b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800720c:	69fb      	ldr	r3, [r7, #28]
 800720e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007210:	e028      	b.n	8007264 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007212:	4b09      	ldr	r3, [pc, #36]	; (8007238 <UART_SetConfig+0xc2c>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f003 0320 	and.w	r3, r3, #32
 800721a:	2b00      	cmp	r3, #0
 800721c:	d012      	beq.n	8007244 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800721e:	4b06      	ldr	r3, [pc, #24]	; (8007238 <UART_SetConfig+0xc2c>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	08db      	lsrs	r3, r3, #3
 8007224:	f003 0303 	and.w	r3, r3, #3
 8007228:	4a04      	ldr	r2, [pc, #16]	; (800723c <UART_SetConfig+0xc30>)
 800722a:	fa22 f303 	lsr.w	r3, r2, r3
 800722e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007230:	e018      	b.n	8007264 <UART_SetConfig+0xc58>
 8007232:	bf00      	nop
 8007234:	08009ed8 	.word	0x08009ed8
 8007238:	58024400 	.word	0x58024400
 800723c:	03d09000 	.word	0x03d09000
 8007240:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8007244:	4b24      	ldr	r3, [pc, #144]	; (80072d8 <UART_SetConfig+0xccc>)
 8007246:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007248:	e00c      	b.n	8007264 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800724a:	4b24      	ldr	r3, [pc, #144]	; (80072dc <UART_SetConfig+0xcd0>)
 800724c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800724e:	e009      	b.n	8007264 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007250:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007254:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007256:	e005      	b.n	8007264 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8007258:	2300      	movs	r3, #0
 800725a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800725c:	2301      	movs	r3, #1
 800725e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007262:	bf00      	nop
    }

    if (pclk != 0U)
 8007264:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007266:	2b00      	cmp	r3, #0
 8007268:	d021      	beq.n	80072ae <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800726e:	4a1c      	ldr	r2, [pc, #112]	; (80072e0 <UART_SetConfig+0xcd4>)
 8007270:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007274:	461a      	mov	r2, r3
 8007276:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007278:	fbb3 f2f2 	udiv	r2, r3, r2
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	085b      	lsrs	r3, r3, #1
 8007282:	441a      	add	r2, r3
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	fbb2 f3f3 	udiv	r3, r2, r3
 800728c:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800728e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007290:	2b0f      	cmp	r3, #15
 8007292:	d909      	bls.n	80072a8 <UART_SetConfig+0xc9c>
 8007294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007296:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800729a:	d205      	bcs.n	80072a8 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800729c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800729e:	b29a      	uxth	r2, r3
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	60da      	str	r2, [r3, #12]
 80072a6:	e002      	b.n	80072ae <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80072a8:	2301      	movs	r3, #1
 80072aa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	2201      	movs	r2, #1
 80072b2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	2201      	movs	r2, #1
 80072ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	2200      	movs	r2, #0
 80072c2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	2200      	movs	r2, #0
 80072c8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80072ca:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	3748      	adds	r7, #72	; 0x48
 80072d2:	46bd      	mov	sp, r7
 80072d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80072d8:	03d09000 	.word	0x03d09000
 80072dc:	003d0900 	.word	0x003d0900
 80072e0:	08009ed8 	.word	0x08009ed8

080072e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b083      	sub	sp, #12
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072f0:	f003 0301 	and.w	r3, r3, #1
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d00a      	beq.n	800730e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	430a      	orrs	r2, r1
 800730c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007312:	f003 0302 	and.w	r3, r3, #2
 8007316:	2b00      	cmp	r3, #0
 8007318:	d00a      	beq.n	8007330 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	430a      	orrs	r2, r1
 800732e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007334:	f003 0304 	and.w	r3, r3, #4
 8007338:	2b00      	cmp	r3, #0
 800733a:	d00a      	beq.n	8007352 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	430a      	orrs	r2, r1
 8007350:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007356:	f003 0308 	and.w	r3, r3, #8
 800735a:	2b00      	cmp	r3, #0
 800735c:	d00a      	beq.n	8007374 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	430a      	orrs	r2, r1
 8007372:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007378:	f003 0310 	and.w	r3, r3, #16
 800737c:	2b00      	cmp	r3, #0
 800737e:	d00a      	beq.n	8007396 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	689b      	ldr	r3, [r3, #8]
 8007386:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	430a      	orrs	r2, r1
 8007394:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800739a:	f003 0320 	and.w	r3, r3, #32
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d00a      	beq.n	80073b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	689b      	ldr	r3, [r3, #8]
 80073a8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	430a      	orrs	r2, r1
 80073b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d01a      	beq.n	80073fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	685b      	ldr	r3, [r3, #4]
 80073ca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	430a      	orrs	r2, r1
 80073d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80073e2:	d10a      	bne.n	80073fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	685b      	ldr	r3, [r3, #4]
 80073ea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	430a      	orrs	r2, r1
 80073f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007402:	2b00      	cmp	r3, #0
 8007404:	d00a      	beq.n	800741c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	430a      	orrs	r2, r1
 800741a:	605a      	str	r2, [r3, #4]
  }
}
 800741c:	bf00      	nop
 800741e:	370c      	adds	r7, #12
 8007420:	46bd      	mov	sp, r7
 8007422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007426:	4770      	bx	lr

08007428 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b086      	sub	sp, #24
 800742c:	af02      	add	r7, sp, #8
 800742e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2200      	movs	r2, #0
 8007434:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007438:	f7fa fbe2 	bl	8001c00 <HAL_GetTick>
 800743c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f003 0308 	and.w	r3, r3, #8
 8007448:	2b08      	cmp	r3, #8
 800744a:	d10e      	bne.n	800746a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800744c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007450:	9300      	str	r3, [sp, #0]
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2200      	movs	r2, #0
 8007456:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f000 f82f 	bl	80074be <UART_WaitOnFlagUntilTimeout>
 8007460:	4603      	mov	r3, r0
 8007462:	2b00      	cmp	r3, #0
 8007464:	d001      	beq.n	800746a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007466:	2303      	movs	r3, #3
 8007468:	e025      	b.n	80074b6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f003 0304 	and.w	r3, r3, #4
 8007474:	2b04      	cmp	r3, #4
 8007476:	d10e      	bne.n	8007496 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007478:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800747c:	9300      	str	r3, [sp, #0]
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2200      	movs	r2, #0
 8007482:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f000 f819 	bl	80074be <UART_WaitOnFlagUntilTimeout>
 800748c:	4603      	mov	r3, r0
 800748e:	2b00      	cmp	r3, #0
 8007490:	d001      	beq.n	8007496 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007492:	2303      	movs	r3, #3
 8007494:	e00f      	b.n	80074b6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2220      	movs	r2, #32
 800749a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2220      	movs	r2, #32
 80074a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2200      	movs	r2, #0
 80074aa:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2200      	movs	r2, #0
 80074b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80074b4:	2300      	movs	r3, #0
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3710      	adds	r7, #16
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}

080074be <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80074be:	b580      	push	{r7, lr}
 80074c0:	b09c      	sub	sp, #112	; 0x70
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	60f8      	str	r0, [r7, #12]
 80074c6:	60b9      	str	r1, [r7, #8]
 80074c8:	603b      	str	r3, [r7, #0]
 80074ca:	4613      	mov	r3, r2
 80074cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074ce:	e0a9      	b.n	8007624 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80074d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074d6:	f000 80a5 	beq.w	8007624 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074da:	f7fa fb91 	bl	8001c00 <HAL_GetTick>
 80074de:	4602      	mov	r2, r0
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	1ad3      	subs	r3, r2, r3
 80074e4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80074e6:	429a      	cmp	r2, r3
 80074e8:	d302      	bcc.n	80074f0 <UART_WaitOnFlagUntilTimeout+0x32>
 80074ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d140      	bne.n	8007572 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074f8:	e853 3f00 	ldrex	r3, [r3]
 80074fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80074fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007500:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007504:	667b      	str	r3, [r7, #100]	; 0x64
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	461a      	mov	r2, r3
 800750c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800750e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007510:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007512:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007514:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007516:	e841 2300 	strex	r3, r2, [r1]
 800751a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800751c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800751e:	2b00      	cmp	r3, #0
 8007520:	d1e6      	bne.n	80074f0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	3308      	adds	r3, #8
 8007528:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800752a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800752c:	e853 3f00 	ldrex	r3, [r3]
 8007530:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007534:	f023 0301 	bic.w	r3, r3, #1
 8007538:	663b      	str	r3, [r7, #96]	; 0x60
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	3308      	adds	r3, #8
 8007540:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007542:	64ba      	str	r2, [r7, #72]	; 0x48
 8007544:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007546:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007548:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800754a:	e841 2300 	strex	r3, r2, [r1]
 800754e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007550:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007552:	2b00      	cmp	r3, #0
 8007554:	d1e5      	bne.n	8007522 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2220      	movs	r2, #32
 800755a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2220      	movs	r2, #32
 8007562:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	2200      	movs	r2, #0
 800756a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800756e:	2303      	movs	r3, #3
 8007570:	e069      	b.n	8007646 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f003 0304 	and.w	r3, r3, #4
 800757c:	2b00      	cmp	r3, #0
 800757e:	d051      	beq.n	8007624 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	69db      	ldr	r3, [r3, #28]
 8007586:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800758a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800758e:	d149      	bne.n	8007624 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007598:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075a2:	e853 3f00 	ldrex	r3, [r3]
 80075a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80075a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075aa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80075ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	461a      	mov	r2, r3
 80075b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075b8:	637b      	str	r3, [r7, #52]	; 0x34
 80075ba:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80075be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80075c0:	e841 2300 	strex	r3, r2, [r1]
 80075c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80075c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d1e6      	bne.n	800759a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	3308      	adds	r3, #8
 80075d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	e853 3f00 	ldrex	r3, [r3]
 80075da:	613b      	str	r3, [r7, #16]
   return(result);
 80075dc:	693b      	ldr	r3, [r7, #16]
 80075de:	f023 0301 	bic.w	r3, r3, #1
 80075e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	3308      	adds	r3, #8
 80075ea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80075ec:	623a      	str	r2, [r7, #32]
 80075ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075f0:	69f9      	ldr	r1, [r7, #28]
 80075f2:	6a3a      	ldr	r2, [r7, #32]
 80075f4:	e841 2300 	strex	r3, r2, [r1]
 80075f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80075fa:	69bb      	ldr	r3, [r7, #24]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d1e5      	bne.n	80075cc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	2220      	movs	r2, #32
 8007604:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2220      	movs	r2, #32
 800760c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2220      	movs	r2, #32
 8007614:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	2200      	movs	r2, #0
 800761c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007620:	2303      	movs	r3, #3
 8007622:	e010      	b.n	8007646 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	69da      	ldr	r2, [r3, #28]
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	4013      	ands	r3, r2
 800762e:	68ba      	ldr	r2, [r7, #8]
 8007630:	429a      	cmp	r2, r3
 8007632:	bf0c      	ite	eq
 8007634:	2301      	moveq	r3, #1
 8007636:	2300      	movne	r3, #0
 8007638:	b2db      	uxtb	r3, r3
 800763a:	461a      	mov	r2, r3
 800763c:	79fb      	ldrb	r3, [r7, #7]
 800763e:	429a      	cmp	r2, r3
 8007640:	f43f af46 	beq.w	80074d0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007644:	2300      	movs	r3, #0
}
 8007646:	4618      	mov	r0, r3
 8007648:	3770      	adds	r7, #112	; 0x70
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}

0800764e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800764e:	b480      	push	{r7}
 8007650:	b085      	sub	sp, #20
 8007652:	af00      	add	r7, sp, #0
 8007654:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800765c:	2b01      	cmp	r3, #1
 800765e:	d101      	bne.n	8007664 <HAL_UARTEx_DisableFifoMode+0x16>
 8007660:	2302      	movs	r3, #2
 8007662:	e027      	b.n	80076b4 <HAL_UARTEx_DisableFifoMode+0x66>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2201      	movs	r2, #1
 8007668:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2224      	movs	r2, #36	; 0x24
 8007670:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	681a      	ldr	r2, [r3, #0]
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f022 0201 	bic.w	r2, r2, #1
 800768a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007692:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2200      	movs	r2, #0
 8007698:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	68fa      	ldr	r2, [r7, #12]
 80076a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2220      	movs	r2, #32
 80076a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2200      	movs	r2, #0
 80076ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80076b2:	2300      	movs	r3, #0
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	3714      	adds	r7, #20
 80076b8:	46bd      	mov	sp, r7
 80076ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076be:	4770      	bx	lr

080076c0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b084      	sub	sp, #16
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
 80076c8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	d101      	bne.n	80076d8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80076d4:	2302      	movs	r3, #2
 80076d6:	e02d      	b.n	8007734 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2201      	movs	r2, #1
 80076dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2224      	movs	r2, #36	; 0x24
 80076e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	681a      	ldr	r2, [r3, #0]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f022 0201 	bic.w	r2, r2, #1
 80076fe:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	689b      	ldr	r3, [r3, #8]
 8007706:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	683a      	ldr	r2, [r7, #0]
 8007710:	430a      	orrs	r2, r1
 8007712:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f000 f84f 	bl	80077b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	68fa      	ldr	r2, [r7, #12]
 8007720:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2220      	movs	r2, #32
 8007726:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2200      	movs	r2, #0
 800772e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007732:	2300      	movs	r3, #0
}
 8007734:	4618      	mov	r0, r3
 8007736:	3710      	adds	r7, #16
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}

0800773c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b084      	sub	sp, #16
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
 8007744:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800774c:	2b01      	cmp	r3, #1
 800774e:	d101      	bne.n	8007754 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007750:	2302      	movs	r3, #2
 8007752:	e02d      	b.n	80077b0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2201      	movs	r2, #1
 8007758:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2224      	movs	r2, #36	; 0x24
 8007760:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	681a      	ldr	r2, [r3, #0]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f022 0201 	bic.w	r2, r2, #1
 800777a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	689b      	ldr	r3, [r3, #8]
 8007782:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	683a      	ldr	r2, [r7, #0]
 800778c:	430a      	orrs	r2, r1
 800778e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f000 f811 	bl	80077b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	68fa      	ldr	r2, [r7, #12]
 800779c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2220      	movs	r2, #32
 80077a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2200      	movs	r2, #0
 80077aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80077ae:	2300      	movs	r3, #0
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3710      	adds	r7, #16
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}

080077b8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80077b8:	b480      	push	{r7}
 80077ba:	b085      	sub	sp, #20
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d108      	bne.n	80077da <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2201      	movs	r2, #1
 80077cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2201      	movs	r2, #1
 80077d4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80077d8:	e031      	b.n	800783e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80077da:	2310      	movs	r3, #16
 80077dc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80077de:	2310      	movs	r3, #16
 80077e0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	689b      	ldr	r3, [r3, #8]
 80077e8:	0e5b      	lsrs	r3, r3, #25
 80077ea:	b2db      	uxtb	r3, r3
 80077ec:	f003 0307 	and.w	r3, r3, #7
 80077f0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	689b      	ldr	r3, [r3, #8]
 80077f8:	0f5b      	lsrs	r3, r3, #29
 80077fa:	b2db      	uxtb	r3, r3
 80077fc:	f003 0307 	and.w	r3, r3, #7
 8007800:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007802:	7bbb      	ldrb	r3, [r7, #14]
 8007804:	7b3a      	ldrb	r2, [r7, #12]
 8007806:	4911      	ldr	r1, [pc, #68]	; (800784c <UARTEx_SetNbDataToProcess+0x94>)
 8007808:	5c8a      	ldrb	r2, [r1, r2]
 800780a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800780e:	7b3a      	ldrb	r2, [r7, #12]
 8007810:	490f      	ldr	r1, [pc, #60]	; (8007850 <UARTEx_SetNbDataToProcess+0x98>)
 8007812:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007814:	fb93 f3f2 	sdiv	r3, r3, r2
 8007818:	b29a      	uxth	r2, r3
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007820:	7bfb      	ldrb	r3, [r7, #15]
 8007822:	7b7a      	ldrb	r2, [r7, #13]
 8007824:	4909      	ldr	r1, [pc, #36]	; (800784c <UARTEx_SetNbDataToProcess+0x94>)
 8007826:	5c8a      	ldrb	r2, [r1, r2]
 8007828:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800782c:	7b7a      	ldrb	r2, [r7, #13]
 800782e:	4908      	ldr	r1, [pc, #32]	; (8007850 <UARTEx_SetNbDataToProcess+0x98>)
 8007830:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007832:	fb93 f3f2 	sdiv	r3, r3, r2
 8007836:	b29a      	uxth	r2, r3
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800783e:	bf00      	nop
 8007840:	3714      	adds	r7, #20
 8007842:	46bd      	mov	sp, r7
 8007844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007848:	4770      	bx	lr
 800784a:	bf00      	nop
 800784c:	08009ef0 	.word	0x08009ef0
 8007850:	08009ef8 	.word	0x08009ef8

08007854 <findslot>:
 8007854:	4b0a      	ldr	r3, [pc, #40]	; (8007880 <findslot+0x2c>)
 8007856:	b510      	push	{r4, lr}
 8007858:	4604      	mov	r4, r0
 800785a:	6818      	ldr	r0, [r3, #0]
 800785c:	b118      	cbz	r0, 8007866 <findslot+0x12>
 800785e:	6983      	ldr	r3, [r0, #24]
 8007860:	b90b      	cbnz	r3, 8007866 <findslot+0x12>
 8007862:	f000 fc4b 	bl	80080fc <__sinit>
 8007866:	2c13      	cmp	r4, #19
 8007868:	d807      	bhi.n	800787a <findslot+0x26>
 800786a:	4806      	ldr	r0, [pc, #24]	; (8007884 <findslot+0x30>)
 800786c:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8007870:	3201      	adds	r2, #1
 8007872:	d002      	beq.n	800787a <findslot+0x26>
 8007874:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8007878:	bd10      	pop	{r4, pc}
 800787a:	2000      	movs	r0, #0
 800787c:	e7fc      	b.n	8007878 <findslot+0x24>
 800787e:	bf00      	nop
 8007880:	24000020 	.word	0x24000020
 8007884:	2400039c 	.word	0x2400039c

08007888 <error>:
 8007888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800788a:	4604      	mov	r4, r0
 800788c:	f000 fa8e 	bl	8007dac <__errno>
 8007890:	2613      	movs	r6, #19
 8007892:	4605      	mov	r5, r0
 8007894:	2700      	movs	r7, #0
 8007896:	4630      	mov	r0, r6
 8007898:	4639      	mov	r1, r7
 800789a:	beab      	bkpt	0x00ab
 800789c:	4606      	mov	r6, r0
 800789e:	602e      	str	r6, [r5, #0]
 80078a0:	4620      	mov	r0, r4
 80078a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080078a4 <checkerror>:
 80078a4:	1c43      	adds	r3, r0, #1
 80078a6:	d101      	bne.n	80078ac <checkerror+0x8>
 80078a8:	f7ff bfee 	b.w	8007888 <error>
 80078ac:	4770      	bx	lr

080078ae <_swiread>:
 80078ae:	b530      	push	{r4, r5, lr}
 80078b0:	b085      	sub	sp, #20
 80078b2:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80078b6:	9203      	str	r2, [sp, #12]
 80078b8:	2406      	movs	r4, #6
 80078ba:	ad01      	add	r5, sp, #4
 80078bc:	4620      	mov	r0, r4
 80078be:	4629      	mov	r1, r5
 80078c0:	beab      	bkpt	0x00ab
 80078c2:	4604      	mov	r4, r0
 80078c4:	4620      	mov	r0, r4
 80078c6:	f7ff ffed 	bl	80078a4 <checkerror>
 80078ca:	b005      	add	sp, #20
 80078cc:	bd30      	pop	{r4, r5, pc}

080078ce <_read>:
 80078ce:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80078d0:	4615      	mov	r5, r2
 80078d2:	9101      	str	r1, [sp, #4]
 80078d4:	f7ff ffbe 	bl	8007854 <findslot>
 80078d8:	9901      	ldr	r1, [sp, #4]
 80078da:	4604      	mov	r4, r0
 80078dc:	b938      	cbnz	r0, 80078ee <_read+0x20>
 80078de:	f000 fa65 	bl	8007dac <__errno>
 80078e2:	2309      	movs	r3, #9
 80078e4:	6003      	str	r3, [r0, #0]
 80078e6:	f04f 30ff 	mov.w	r0, #4294967295
 80078ea:	b003      	add	sp, #12
 80078ec:	bd30      	pop	{r4, r5, pc}
 80078ee:	6800      	ldr	r0, [r0, #0]
 80078f0:	462a      	mov	r2, r5
 80078f2:	f7ff ffdc 	bl	80078ae <_swiread>
 80078f6:	1c43      	adds	r3, r0, #1
 80078f8:	d0f7      	beq.n	80078ea <_read+0x1c>
 80078fa:	6863      	ldr	r3, [r4, #4]
 80078fc:	1a2a      	subs	r2, r5, r0
 80078fe:	4413      	add	r3, r2
 8007900:	6063      	str	r3, [r4, #4]
 8007902:	4610      	mov	r0, r2
 8007904:	e7f1      	b.n	80078ea <_read+0x1c>

08007906 <_swilseek>:
 8007906:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007908:	460c      	mov	r4, r1
 800790a:	4616      	mov	r6, r2
 800790c:	f7ff ffa2 	bl	8007854 <findslot>
 8007910:	4605      	mov	r5, r0
 8007912:	b940      	cbnz	r0, 8007926 <_swilseek+0x20>
 8007914:	f000 fa4a 	bl	8007dac <__errno>
 8007918:	2309      	movs	r3, #9
 800791a:	6003      	str	r3, [r0, #0]
 800791c:	f04f 34ff 	mov.w	r4, #4294967295
 8007920:	4620      	mov	r0, r4
 8007922:	b003      	add	sp, #12
 8007924:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007926:	2e02      	cmp	r6, #2
 8007928:	d903      	bls.n	8007932 <_swilseek+0x2c>
 800792a:	f000 fa3f 	bl	8007dac <__errno>
 800792e:	2316      	movs	r3, #22
 8007930:	e7f3      	b.n	800791a <_swilseek+0x14>
 8007932:	2e01      	cmp	r6, #1
 8007934:	d112      	bne.n	800795c <_swilseek+0x56>
 8007936:	6843      	ldr	r3, [r0, #4]
 8007938:	18e4      	adds	r4, r4, r3
 800793a:	d4f6      	bmi.n	800792a <_swilseek+0x24>
 800793c:	682b      	ldr	r3, [r5, #0]
 800793e:	260a      	movs	r6, #10
 8007940:	e9cd 3400 	strd	r3, r4, [sp]
 8007944:	466f      	mov	r7, sp
 8007946:	4630      	mov	r0, r6
 8007948:	4639      	mov	r1, r7
 800794a:	beab      	bkpt	0x00ab
 800794c:	4606      	mov	r6, r0
 800794e:	4630      	mov	r0, r6
 8007950:	f7ff ffa8 	bl	80078a4 <checkerror>
 8007954:	2800      	cmp	r0, #0
 8007956:	dbe1      	blt.n	800791c <_swilseek+0x16>
 8007958:	606c      	str	r4, [r5, #4]
 800795a:	e7e1      	b.n	8007920 <_swilseek+0x1a>
 800795c:	2e02      	cmp	r6, #2
 800795e:	d1ed      	bne.n	800793c <_swilseek+0x36>
 8007960:	6803      	ldr	r3, [r0, #0]
 8007962:	9300      	str	r3, [sp, #0]
 8007964:	260c      	movs	r6, #12
 8007966:	466f      	mov	r7, sp
 8007968:	4630      	mov	r0, r6
 800796a:	4639      	mov	r1, r7
 800796c:	beab      	bkpt	0x00ab
 800796e:	4606      	mov	r6, r0
 8007970:	4630      	mov	r0, r6
 8007972:	f7ff ff97 	bl	80078a4 <checkerror>
 8007976:	1c43      	adds	r3, r0, #1
 8007978:	d0d0      	beq.n	800791c <_swilseek+0x16>
 800797a:	4404      	add	r4, r0
 800797c:	e7de      	b.n	800793c <_swilseek+0x36>

0800797e <_lseek>:
 800797e:	f7ff bfc2 	b.w	8007906 <_swilseek>

08007982 <_swiwrite>:
 8007982:	b530      	push	{r4, r5, lr}
 8007984:	b085      	sub	sp, #20
 8007986:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800798a:	9203      	str	r2, [sp, #12]
 800798c:	2405      	movs	r4, #5
 800798e:	ad01      	add	r5, sp, #4
 8007990:	4620      	mov	r0, r4
 8007992:	4629      	mov	r1, r5
 8007994:	beab      	bkpt	0x00ab
 8007996:	4604      	mov	r4, r0
 8007998:	4620      	mov	r0, r4
 800799a:	f7ff ff83 	bl	80078a4 <checkerror>
 800799e:	b005      	add	sp, #20
 80079a0:	bd30      	pop	{r4, r5, pc}

080079a2 <_write>:
 80079a2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80079a4:	4615      	mov	r5, r2
 80079a6:	9101      	str	r1, [sp, #4]
 80079a8:	f7ff ff54 	bl	8007854 <findslot>
 80079ac:	9901      	ldr	r1, [sp, #4]
 80079ae:	4604      	mov	r4, r0
 80079b0:	b930      	cbnz	r0, 80079c0 <_write+0x1e>
 80079b2:	f000 f9fb 	bl	8007dac <__errno>
 80079b6:	2309      	movs	r3, #9
 80079b8:	6003      	str	r3, [r0, #0]
 80079ba:	f04f 30ff 	mov.w	r0, #4294967295
 80079be:	e012      	b.n	80079e6 <_write+0x44>
 80079c0:	6800      	ldr	r0, [r0, #0]
 80079c2:	462a      	mov	r2, r5
 80079c4:	f7ff ffdd 	bl	8007982 <_swiwrite>
 80079c8:	2800      	cmp	r0, #0
 80079ca:	dbf6      	blt.n	80079ba <_write+0x18>
 80079cc:	6862      	ldr	r2, [r4, #4]
 80079ce:	1a2b      	subs	r3, r5, r0
 80079d0:	441a      	add	r2, r3
 80079d2:	42a8      	cmp	r0, r5
 80079d4:	6062      	str	r2, [r4, #4]
 80079d6:	d105      	bne.n	80079e4 <_write+0x42>
 80079d8:	2000      	movs	r0, #0
 80079da:	b003      	add	sp, #12
 80079dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80079e0:	f7ff bf52 	b.w	8007888 <error>
 80079e4:	4618      	mov	r0, r3
 80079e6:	b003      	add	sp, #12
 80079e8:	bd30      	pop	{r4, r5, pc}

080079ea <_swiclose>:
 80079ea:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80079ec:	2402      	movs	r4, #2
 80079ee:	9001      	str	r0, [sp, #4]
 80079f0:	ad01      	add	r5, sp, #4
 80079f2:	4620      	mov	r0, r4
 80079f4:	4629      	mov	r1, r5
 80079f6:	beab      	bkpt	0x00ab
 80079f8:	4604      	mov	r4, r0
 80079fa:	4620      	mov	r0, r4
 80079fc:	f7ff ff52 	bl	80078a4 <checkerror>
 8007a00:	b003      	add	sp, #12
 8007a02:	bd30      	pop	{r4, r5, pc}

08007a04 <_close>:
 8007a04:	b538      	push	{r3, r4, r5, lr}
 8007a06:	4605      	mov	r5, r0
 8007a08:	f7ff ff24 	bl	8007854 <findslot>
 8007a0c:	4604      	mov	r4, r0
 8007a0e:	b930      	cbnz	r0, 8007a1e <_close+0x1a>
 8007a10:	f000 f9cc 	bl	8007dac <__errno>
 8007a14:	2309      	movs	r3, #9
 8007a16:	6003      	str	r3, [r0, #0]
 8007a18:	f04f 30ff 	mov.w	r0, #4294967295
 8007a1c:	bd38      	pop	{r3, r4, r5, pc}
 8007a1e:	3d01      	subs	r5, #1
 8007a20:	2d01      	cmp	r5, #1
 8007a22:	d809      	bhi.n	8007a38 <_close+0x34>
 8007a24:	4b09      	ldr	r3, [pc, #36]	; (8007a4c <_close+0x48>)
 8007a26:	689a      	ldr	r2, [r3, #8]
 8007a28:	691b      	ldr	r3, [r3, #16]
 8007a2a:	429a      	cmp	r2, r3
 8007a2c:	d104      	bne.n	8007a38 <_close+0x34>
 8007a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8007a32:	6003      	str	r3, [r0, #0]
 8007a34:	2000      	movs	r0, #0
 8007a36:	e7f1      	b.n	8007a1c <_close+0x18>
 8007a38:	6820      	ldr	r0, [r4, #0]
 8007a3a:	f7ff ffd6 	bl	80079ea <_swiclose>
 8007a3e:	2800      	cmp	r0, #0
 8007a40:	d1ec      	bne.n	8007a1c <_close+0x18>
 8007a42:	f04f 33ff 	mov.w	r3, #4294967295
 8007a46:	6023      	str	r3, [r4, #0]
 8007a48:	e7e8      	b.n	8007a1c <_close+0x18>
 8007a4a:	bf00      	nop
 8007a4c:	2400039c 	.word	0x2400039c

08007a50 <_swistat>:
 8007a50:	b570      	push	{r4, r5, r6, lr}
 8007a52:	460c      	mov	r4, r1
 8007a54:	f7ff fefe 	bl	8007854 <findslot>
 8007a58:	4605      	mov	r5, r0
 8007a5a:	b930      	cbnz	r0, 8007a6a <_swistat+0x1a>
 8007a5c:	f000 f9a6 	bl	8007dac <__errno>
 8007a60:	2309      	movs	r3, #9
 8007a62:	6003      	str	r3, [r0, #0]
 8007a64:	f04f 30ff 	mov.w	r0, #4294967295
 8007a68:	bd70      	pop	{r4, r5, r6, pc}
 8007a6a:	6863      	ldr	r3, [r4, #4]
 8007a6c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007a70:	6063      	str	r3, [r4, #4]
 8007a72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a76:	64a3      	str	r3, [r4, #72]	; 0x48
 8007a78:	260c      	movs	r6, #12
 8007a7a:	4630      	mov	r0, r6
 8007a7c:	4629      	mov	r1, r5
 8007a7e:	beab      	bkpt	0x00ab
 8007a80:	4605      	mov	r5, r0
 8007a82:	4628      	mov	r0, r5
 8007a84:	f7ff ff0e 	bl	80078a4 <checkerror>
 8007a88:	1c43      	adds	r3, r0, #1
 8007a8a:	bf1c      	itt	ne
 8007a8c:	6120      	strne	r0, [r4, #16]
 8007a8e:	2000      	movne	r0, #0
 8007a90:	e7ea      	b.n	8007a68 <_swistat+0x18>

08007a92 <_fstat>:
 8007a92:	460b      	mov	r3, r1
 8007a94:	b510      	push	{r4, lr}
 8007a96:	2100      	movs	r1, #0
 8007a98:	4604      	mov	r4, r0
 8007a9a:	2258      	movs	r2, #88	; 0x58
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f000 fde1 	bl	8008664 <memset>
 8007aa2:	4601      	mov	r1, r0
 8007aa4:	4620      	mov	r0, r4
 8007aa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007aaa:	f7ff bfd1 	b.w	8007a50 <_swistat>

08007aae <_stat>:
 8007aae:	b538      	push	{r3, r4, r5, lr}
 8007ab0:	460d      	mov	r5, r1
 8007ab2:	4604      	mov	r4, r0
 8007ab4:	2258      	movs	r2, #88	; 0x58
 8007ab6:	2100      	movs	r1, #0
 8007ab8:	4628      	mov	r0, r5
 8007aba:	f000 fdd3 	bl	8008664 <memset>
 8007abe:	4620      	mov	r0, r4
 8007ac0:	2100      	movs	r1, #0
 8007ac2:	f000 f811 	bl	8007ae8 <_swiopen>
 8007ac6:	1c43      	adds	r3, r0, #1
 8007ac8:	4604      	mov	r4, r0
 8007aca:	d00b      	beq.n	8007ae4 <_stat+0x36>
 8007acc:	686b      	ldr	r3, [r5, #4]
 8007ace:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007ad2:	606b      	str	r3, [r5, #4]
 8007ad4:	4629      	mov	r1, r5
 8007ad6:	f7ff ffbb 	bl	8007a50 <_swistat>
 8007ada:	4605      	mov	r5, r0
 8007adc:	4620      	mov	r0, r4
 8007ade:	f7ff ff91 	bl	8007a04 <_close>
 8007ae2:	462c      	mov	r4, r5
 8007ae4:	4620      	mov	r0, r4
 8007ae6:	bd38      	pop	{r3, r4, r5, pc}

08007ae8 <_swiopen>:
 8007ae8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007aec:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8007b98 <_swiopen+0xb0>
 8007af0:	b097      	sub	sp, #92	; 0x5c
 8007af2:	4607      	mov	r7, r0
 8007af4:	460e      	mov	r6, r1
 8007af6:	2500      	movs	r5, #0
 8007af8:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 8007afc:	1c61      	adds	r1, r4, #1
 8007afe:	d037      	beq.n	8007b70 <_swiopen+0x88>
 8007b00:	3501      	adds	r5, #1
 8007b02:	2d14      	cmp	r5, #20
 8007b04:	d1f8      	bne.n	8007af8 <_swiopen+0x10>
 8007b06:	f000 f951 	bl	8007dac <__errno>
 8007b0a:	2318      	movs	r3, #24
 8007b0c:	6003      	str	r3, [r0, #0]
 8007b0e:	f04f 34ff 	mov.w	r4, #4294967295
 8007b12:	e03d      	b.n	8007b90 <_swiopen+0xa8>
 8007b14:	f3c6 4400 	ubfx	r4, r6, #16, #1
 8007b18:	f240 6301 	movw	r3, #1537	; 0x601
 8007b1c:	07b2      	lsls	r2, r6, #30
 8007b1e:	bf48      	it	mi
 8007b20:	f044 0402 	orrmi.w	r4, r4, #2
 8007b24:	421e      	tst	r6, r3
 8007b26:	bf18      	it	ne
 8007b28:	f044 0404 	orrne.w	r4, r4, #4
 8007b2c:	0733      	lsls	r3, r6, #28
 8007b2e:	bf48      	it	mi
 8007b30:	f024 0404 	bicmi.w	r4, r4, #4
 8007b34:	4638      	mov	r0, r7
 8007b36:	bf48      	it	mi
 8007b38:	f044 0408 	orrmi.w	r4, r4, #8
 8007b3c:	9700      	str	r7, [sp, #0]
 8007b3e:	f7f8 fbe7 	bl	8000310 <strlen>
 8007b42:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8007b46:	2401      	movs	r4, #1
 8007b48:	4620      	mov	r0, r4
 8007b4a:	4649      	mov	r1, r9
 8007b4c:	beab      	bkpt	0x00ab
 8007b4e:	4604      	mov	r4, r0
 8007b50:	2c00      	cmp	r4, #0
 8007b52:	db08      	blt.n	8007b66 <_swiopen+0x7e>
 8007b54:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8007b58:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	f8c8 3004 	str.w	r3, [r8, #4]
 8007b62:	462c      	mov	r4, r5
 8007b64:	e014      	b.n	8007b90 <_swiopen+0xa8>
 8007b66:	4620      	mov	r0, r4
 8007b68:	f7ff fe8e 	bl	8007888 <error>
 8007b6c:	4604      	mov	r4, r0
 8007b6e:	e00f      	b.n	8007b90 <_swiopen+0xa8>
 8007b70:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8007b74:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8007b78:	46e9      	mov	r9, sp
 8007b7a:	d1cb      	bne.n	8007b14 <_swiopen+0x2c>
 8007b7c:	4649      	mov	r1, r9
 8007b7e:	4638      	mov	r0, r7
 8007b80:	f7ff ff95 	bl	8007aae <_stat>
 8007b84:	3001      	adds	r0, #1
 8007b86:	d0c5      	beq.n	8007b14 <_swiopen+0x2c>
 8007b88:	f000 f910 	bl	8007dac <__errno>
 8007b8c:	2311      	movs	r3, #17
 8007b8e:	6003      	str	r3, [r0, #0]
 8007b90:	4620      	mov	r0, r4
 8007b92:	b017      	add	sp, #92	; 0x5c
 8007b94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007b98:	2400039c 	.word	0x2400039c

08007b9c <_open>:
 8007b9c:	b40e      	push	{r1, r2, r3}
 8007b9e:	b500      	push	{lr}
 8007ba0:	9901      	ldr	r1, [sp, #4]
 8007ba2:	f7ff ffa1 	bl	8007ae8 <_swiopen>
 8007ba6:	f85d eb04 	ldr.w	lr, [sp], #4
 8007baa:	b003      	add	sp, #12
 8007bac:	4770      	bx	lr
	...

08007bb0 <_get_semihosting_exts>:
 8007bb0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007bb4:	4606      	mov	r6, r0
 8007bb6:	460f      	mov	r7, r1
 8007bb8:	482a      	ldr	r0, [pc, #168]	; (8007c64 <_get_semihosting_exts+0xb4>)
 8007bba:	2100      	movs	r1, #0
 8007bbc:	4615      	mov	r5, r2
 8007bbe:	f7ff ff93 	bl	8007ae8 <_swiopen>
 8007bc2:	462a      	mov	r2, r5
 8007bc4:	4604      	mov	r4, r0
 8007bc6:	2100      	movs	r1, #0
 8007bc8:	4630      	mov	r0, r6
 8007bca:	f000 fd4b 	bl	8008664 <memset>
 8007bce:	1c63      	adds	r3, r4, #1
 8007bd0:	d016      	beq.n	8007c00 <_get_semihosting_exts+0x50>
 8007bd2:	4620      	mov	r0, r4
 8007bd4:	f7ff fe3e 	bl	8007854 <findslot>
 8007bd8:	f04f 090c 	mov.w	r9, #12
 8007bdc:	4680      	mov	r8, r0
 8007bde:	4648      	mov	r0, r9
 8007be0:	4641      	mov	r1, r8
 8007be2:	beab      	bkpt	0x00ab
 8007be4:	4680      	mov	r8, r0
 8007be6:	4640      	mov	r0, r8
 8007be8:	f7ff fe5c 	bl	80078a4 <checkerror>
 8007bec:	2803      	cmp	r0, #3
 8007bee:	dd02      	ble.n	8007bf6 <_get_semihosting_exts+0x46>
 8007bf0:	1ec3      	subs	r3, r0, #3
 8007bf2:	42ab      	cmp	r3, r5
 8007bf4:	dc08      	bgt.n	8007c08 <_get_semihosting_exts+0x58>
 8007bf6:	4620      	mov	r0, r4
 8007bf8:	f7ff ff04 	bl	8007a04 <_close>
 8007bfc:	f04f 34ff 	mov.w	r4, #4294967295
 8007c00:	4620      	mov	r0, r4
 8007c02:	b003      	add	sp, #12
 8007c04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007c08:	2204      	movs	r2, #4
 8007c0a:	eb0d 0102 	add.w	r1, sp, r2
 8007c0e:	4620      	mov	r0, r4
 8007c10:	f7ff fe5d 	bl	80078ce <_read>
 8007c14:	2803      	cmp	r0, #3
 8007c16:	ddee      	ble.n	8007bf6 <_get_semihosting_exts+0x46>
 8007c18:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8007c1c:	2b53      	cmp	r3, #83	; 0x53
 8007c1e:	d1ea      	bne.n	8007bf6 <_get_semihosting_exts+0x46>
 8007c20:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8007c24:	2b48      	cmp	r3, #72	; 0x48
 8007c26:	d1e6      	bne.n	8007bf6 <_get_semihosting_exts+0x46>
 8007c28:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8007c2c:	2b46      	cmp	r3, #70	; 0x46
 8007c2e:	d1e2      	bne.n	8007bf6 <_get_semihosting_exts+0x46>
 8007c30:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007c34:	2b42      	cmp	r3, #66	; 0x42
 8007c36:	d1de      	bne.n	8007bf6 <_get_semihosting_exts+0x46>
 8007c38:	2201      	movs	r2, #1
 8007c3a:	4639      	mov	r1, r7
 8007c3c:	4620      	mov	r0, r4
 8007c3e:	f7ff fe62 	bl	8007906 <_swilseek>
 8007c42:	2800      	cmp	r0, #0
 8007c44:	dbd7      	blt.n	8007bf6 <_get_semihosting_exts+0x46>
 8007c46:	462a      	mov	r2, r5
 8007c48:	4631      	mov	r1, r6
 8007c4a:	4620      	mov	r0, r4
 8007c4c:	f7ff fe3f 	bl	80078ce <_read>
 8007c50:	4605      	mov	r5, r0
 8007c52:	4620      	mov	r0, r4
 8007c54:	f7ff fed6 	bl	8007a04 <_close>
 8007c58:	4628      	mov	r0, r5
 8007c5a:	f7ff fe23 	bl	80078a4 <checkerror>
 8007c5e:	4604      	mov	r4, r0
 8007c60:	e7ce      	b.n	8007c00 <_get_semihosting_exts+0x50>
 8007c62:	bf00      	nop
 8007c64:	08009f00 	.word	0x08009f00

08007c68 <initialise_semihosting_exts>:
 8007c68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007c6a:	4d0a      	ldr	r5, [pc, #40]	; (8007c94 <initialise_semihosting_exts+0x2c>)
 8007c6c:	4c0a      	ldr	r4, [pc, #40]	; (8007c98 <initialise_semihosting_exts+0x30>)
 8007c6e:	2100      	movs	r1, #0
 8007c70:	2201      	movs	r2, #1
 8007c72:	a801      	add	r0, sp, #4
 8007c74:	6029      	str	r1, [r5, #0]
 8007c76:	6022      	str	r2, [r4, #0]
 8007c78:	f7ff ff9a 	bl	8007bb0 <_get_semihosting_exts>
 8007c7c:	2800      	cmp	r0, #0
 8007c7e:	dd07      	ble.n	8007c90 <initialise_semihosting_exts+0x28>
 8007c80:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8007c84:	f003 0201 	and.w	r2, r3, #1
 8007c88:	f003 0302 	and.w	r3, r3, #2
 8007c8c:	602a      	str	r2, [r5, #0]
 8007c8e:	6023      	str	r3, [r4, #0]
 8007c90:	b003      	add	sp, #12
 8007c92:	bd30      	pop	{r4, r5, pc}
 8007c94:	24000018 	.word	0x24000018
 8007c98:	2400001c 	.word	0x2400001c

08007c9c <_has_ext_stdout_stderr>:
 8007c9c:	b510      	push	{r4, lr}
 8007c9e:	4c04      	ldr	r4, [pc, #16]	; (8007cb0 <_has_ext_stdout_stderr+0x14>)
 8007ca0:	6823      	ldr	r3, [r4, #0]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	da01      	bge.n	8007caa <_has_ext_stdout_stderr+0xe>
 8007ca6:	f7ff ffdf 	bl	8007c68 <initialise_semihosting_exts>
 8007caa:	6820      	ldr	r0, [r4, #0]
 8007cac:	bd10      	pop	{r4, pc}
 8007cae:	bf00      	nop
 8007cb0:	2400001c 	.word	0x2400001c

08007cb4 <initialise_monitor_handles>:
 8007cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cb8:	b085      	sub	sp, #20
 8007cba:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8007d6c <initialise_monitor_handles+0xb8>
 8007cbe:	f8cd 9004 	str.w	r9, [sp, #4]
 8007cc2:	2303      	movs	r3, #3
 8007cc4:	2400      	movs	r4, #0
 8007cc6:	9303      	str	r3, [sp, #12]
 8007cc8:	af01      	add	r7, sp, #4
 8007cca:	9402      	str	r4, [sp, #8]
 8007ccc:	2501      	movs	r5, #1
 8007cce:	4628      	mov	r0, r5
 8007cd0:	4639      	mov	r1, r7
 8007cd2:	beab      	bkpt	0x00ab
 8007cd4:	4605      	mov	r5, r0
 8007cd6:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8007d70 <initialise_monitor_handles+0xbc>
 8007cda:	4623      	mov	r3, r4
 8007cdc:	4c20      	ldr	r4, [pc, #128]	; (8007d60 <initialise_monitor_handles+0xac>)
 8007cde:	f8c8 5000 	str.w	r5, [r8]
 8007ce2:	f04f 32ff 	mov.w	r2, #4294967295
 8007ce6:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8007cea:	3301      	adds	r3, #1
 8007cec:	2b14      	cmp	r3, #20
 8007cee:	d1fa      	bne.n	8007ce6 <initialise_monitor_handles+0x32>
 8007cf0:	f7ff ffd4 	bl	8007c9c <_has_ext_stdout_stderr>
 8007cf4:	4d1b      	ldr	r5, [pc, #108]	; (8007d64 <initialise_monitor_handles+0xb0>)
 8007cf6:	b1d0      	cbz	r0, 8007d2e <initialise_monitor_handles+0x7a>
 8007cf8:	f04f 0a03 	mov.w	sl, #3
 8007cfc:	2304      	movs	r3, #4
 8007cfe:	f8cd 9004 	str.w	r9, [sp, #4]
 8007d02:	2601      	movs	r6, #1
 8007d04:	f8cd a00c 	str.w	sl, [sp, #12]
 8007d08:	9302      	str	r3, [sp, #8]
 8007d0a:	4630      	mov	r0, r6
 8007d0c:	4639      	mov	r1, r7
 8007d0e:	beab      	bkpt	0x00ab
 8007d10:	4683      	mov	fp, r0
 8007d12:	4b15      	ldr	r3, [pc, #84]	; (8007d68 <initialise_monitor_handles+0xb4>)
 8007d14:	f8cd 9004 	str.w	r9, [sp, #4]
 8007d18:	f8c3 b000 	str.w	fp, [r3]
 8007d1c:	2308      	movs	r3, #8
 8007d1e:	f8cd a00c 	str.w	sl, [sp, #12]
 8007d22:	9302      	str	r3, [sp, #8]
 8007d24:	4630      	mov	r0, r6
 8007d26:	4639      	mov	r1, r7
 8007d28:	beab      	bkpt	0x00ab
 8007d2a:	4606      	mov	r6, r0
 8007d2c:	602e      	str	r6, [r5, #0]
 8007d2e:	682b      	ldr	r3, [r5, #0]
 8007d30:	3301      	adds	r3, #1
 8007d32:	bf02      	ittt	eq
 8007d34:	4b0c      	ldreq	r3, [pc, #48]	; (8007d68 <initialise_monitor_handles+0xb4>)
 8007d36:	681b      	ldreq	r3, [r3, #0]
 8007d38:	602b      	streq	r3, [r5, #0]
 8007d3a:	2600      	movs	r6, #0
 8007d3c:	f8d8 3000 	ldr.w	r3, [r8]
 8007d40:	6023      	str	r3, [r4, #0]
 8007d42:	6066      	str	r6, [r4, #4]
 8007d44:	f7ff ffaa 	bl	8007c9c <_has_ext_stdout_stderr>
 8007d48:	b130      	cbz	r0, 8007d58 <initialise_monitor_handles+0xa4>
 8007d4a:	4b07      	ldr	r3, [pc, #28]	; (8007d68 <initialise_monitor_handles+0xb4>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8007d52:	682b      	ldr	r3, [r5, #0]
 8007d54:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8007d58:	b005      	add	sp, #20
 8007d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d5e:	bf00      	nop
 8007d60:	2400039c 	.word	0x2400039c
 8007d64:	24000390 	.word	0x24000390
 8007d68:	24000398 	.word	0x24000398
 8007d6c:	08009f16 	.word	0x08009f16
 8007d70:	24000394 	.word	0x24000394

08007d74 <_isatty>:
 8007d74:	b570      	push	{r4, r5, r6, lr}
 8007d76:	f7ff fd6d 	bl	8007854 <findslot>
 8007d7a:	2509      	movs	r5, #9
 8007d7c:	4604      	mov	r4, r0
 8007d7e:	b920      	cbnz	r0, 8007d8a <_isatty+0x16>
 8007d80:	f000 f814 	bl	8007dac <__errno>
 8007d84:	6005      	str	r5, [r0, #0]
 8007d86:	4620      	mov	r0, r4
 8007d88:	bd70      	pop	{r4, r5, r6, pc}
 8007d8a:	4628      	mov	r0, r5
 8007d8c:	4621      	mov	r1, r4
 8007d8e:	beab      	bkpt	0x00ab
 8007d90:	4604      	mov	r4, r0
 8007d92:	2c01      	cmp	r4, #1
 8007d94:	d0f7      	beq.n	8007d86 <_isatty+0x12>
 8007d96:	f000 f809 	bl	8007dac <__errno>
 8007d9a:	2400      	movs	r4, #0
 8007d9c:	4605      	mov	r5, r0
 8007d9e:	2613      	movs	r6, #19
 8007da0:	4630      	mov	r0, r6
 8007da2:	4621      	mov	r1, r4
 8007da4:	beab      	bkpt	0x00ab
 8007da6:	4606      	mov	r6, r0
 8007da8:	602e      	str	r6, [r5, #0]
 8007daa:	e7ec      	b.n	8007d86 <_isatty+0x12>

08007dac <__errno>:
 8007dac:	4b01      	ldr	r3, [pc, #4]	; (8007db4 <__errno+0x8>)
 8007dae:	6818      	ldr	r0, [r3, #0]
 8007db0:	4770      	bx	lr
 8007db2:	bf00      	nop
 8007db4:	24000020 	.word	0x24000020

08007db8 <exit>:
 8007db8:	b508      	push	{r3, lr}
 8007dba:	4b07      	ldr	r3, [pc, #28]	; (8007dd8 <exit+0x20>)
 8007dbc:	4604      	mov	r4, r0
 8007dbe:	b113      	cbz	r3, 8007dc6 <exit+0xe>
 8007dc0:	2100      	movs	r1, #0
 8007dc2:	f3af 8000 	nop.w
 8007dc6:	4b05      	ldr	r3, [pc, #20]	; (8007ddc <exit+0x24>)
 8007dc8:	6818      	ldr	r0, [r3, #0]
 8007dca:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007dcc:	b103      	cbz	r3, 8007dd0 <exit+0x18>
 8007dce:	4798      	blx	r3
 8007dd0:	4620      	mov	r0, r4
 8007dd2:	f002 f843 	bl	8009e5c <_exit>
 8007dd6:	bf00      	nop
 8007dd8:	00000000 	.word	0x00000000
 8007ddc:	08009f7c 	.word	0x08009f7c

08007de0 <_fclose_r>:
 8007de0:	b570      	push	{r4, r5, r6, lr}
 8007de2:	4605      	mov	r5, r0
 8007de4:	460c      	mov	r4, r1
 8007de6:	b911      	cbnz	r1, 8007dee <_fclose_r+0xe>
 8007de8:	2600      	movs	r6, #0
 8007dea:	4630      	mov	r0, r6
 8007dec:	bd70      	pop	{r4, r5, r6, pc}
 8007dee:	b118      	cbz	r0, 8007df8 <_fclose_r+0x18>
 8007df0:	6983      	ldr	r3, [r0, #24]
 8007df2:	b90b      	cbnz	r3, 8007df8 <_fclose_r+0x18>
 8007df4:	f000 f982 	bl	80080fc <__sinit>
 8007df8:	4b2c      	ldr	r3, [pc, #176]	; (8007eac <_fclose_r+0xcc>)
 8007dfa:	429c      	cmp	r4, r3
 8007dfc:	d114      	bne.n	8007e28 <_fclose_r+0x48>
 8007dfe:	686c      	ldr	r4, [r5, #4]
 8007e00:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e02:	07d8      	lsls	r0, r3, #31
 8007e04:	d405      	bmi.n	8007e12 <_fclose_r+0x32>
 8007e06:	89a3      	ldrh	r3, [r4, #12]
 8007e08:	0599      	lsls	r1, r3, #22
 8007e0a:	d402      	bmi.n	8007e12 <_fclose_r+0x32>
 8007e0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e0e:	f000 fbb9 	bl	8008584 <__retarget_lock_acquire_recursive>
 8007e12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e16:	b98b      	cbnz	r3, 8007e3c <_fclose_r+0x5c>
 8007e18:	6e66      	ldr	r6, [r4, #100]	; 0x64
 8007e1a:	f016 0601 	ands.w	r6, r6, #1
 8007e1e:	d1e3      	bne.n	8007de8 <_fclose_r+0x8>
 8007e20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e22:	f000 fbb0 	bl	8008586 <__retarget_lock_release_recursive>
 8007e26:	e7e0      	b.n	8007dea <_fclose_r+0xa>
 8007e28:	4b21      	ldr	r3, [pc, #132]	; (8007eb0 <_fclose_r+0xd0>)
 8007e2a:	429c      	cmp	r4, r3
 8007e2c:	d101      	bne.n	8007e32 <_fclose_r+0x52>
 8007e2e:	68ac      	ldr	r4, [r5, #8]
 8007e30:	e7e6      	b.n	8007e00 <_fclose_r+0x20>
 8007e32:	4b20      	ldr	r3, [pc, #128]	; (8007eb4 <_fclose_r+0xd4>)
 8007e34:	429c      	cmp	r4, r3
 8007e36:	bf08      	it	eq
 8007e38:	68ec      	ldreq	r4, [r5, #12]
 8007e3a:	e7e1      	b.n	8007e00 <_fclose_r+0x20>
 8007e3c:	4621      	mov	r1, r4
 8007e3e:	4628      	mov	r0, r5
 8007e40:	f000 f842 	bl	8007ec8 <__sflush_r>
 8007e44:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007e46:	4606      	mov	r6, r0
 8007e48:	b133      	cbz	r3, 8007e58 <_fclose_r+0x78>
 8007e4a:	6a21      	ldr	r1, [r4, #32]
 8007e4c:	4628      	mov	r0, r5
 8007e4e:	4798      	blx	r3
 8007e50:	2800      	cmp	r0, #0
 8007e52:	bfb8      	it	lt
 8007e54:	f04f 36ff 	movlt.w	r6, #4294967295
 8007e58:	89a3      	ldrh	r3, [r4, #12]
 8007e5a:	061a      	lsls	r2, r3, #24
 8007e5c:	d503      	bpl.n	8007e66 <_fclose_r+0x86>
 8007e5e:	6921      	ldr	r1, [r4, #16]
 8007e60:	4628      	mov	r0, r5
 8007e62:	f000 fc07 	bl	8008674 <_free_r>
 8007e66:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e68:	b141      	cbz	r1, 8007e7c <_fclose_r+0x9c>
 8007e6a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e6e:	4299      	cmp	r1, r3
 8007e70:	d002      	beq.n	8007e78 <_fclose_r+0x98>
 8007e72:	4628      	mov	r0, r5
 8007e74:	f000 fbfe 	bl	8008674 <_free_r>
 8007e78:	2300      	movs	r3, #0
 8007e7a:	6363      	str	r3, [r4, #52]	; 0x34
 8007e7c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007e7e:	b121      	cbz	r1, 8007e8a <_fclose_r+0xaa>
 8007e80:	4628      	mov	r0, r5
 8007e82:	f000 fbf7 	bl	8008674 <_free_r>
 8007e86:	2300      	movs	r3, #0
 8007e88:	64a3      	str	r3, [r4, #72]	; 0x48
 8007e8a:	f000 f91f 	bl	80080cc <__sfp_lock_acquire>
 8007e8e:	2300      	movs	r3, #0
 8007e90:	81a3      	strh	r3, [r4, #12]
 8007e92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e94:	07db      	lsls	r3, r3, #31
 8007e96:	d402      	bmi.n	8007e9e <_fclose_r+0xbe>
 8007e98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e9a:	f000 fb74 	bl	8008586 <__retarget_lock_release_recursive>
 8007e9e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ea0:	f000 fb6f 	bl	8008582 <__retarget_lock_close_recursive>
 8007ea4:	f000 f918 	bl	80080d8 <__sfp_lock_release>
 8007ea8:	e79f      	b.n	8007dea <_fclose_r+0xa>
 8007eaa:	bf00      	nop
 8007eac:	08009f3c 	.word	0x08009f3c
 8007eb0:	08009f5c 	.word	0x08009f5c
 8007eb4:	08009f1c 	.word	0x08009f1c

08007eb8 <fclose>:
 8007eb8:	4b02      	ldr	r3, [pc, #8]	; (8007ec4 <fclose+0xc>)
 8007eba:	4601      	mov	r1, r0
 8007ebc:	6818      	ldr	r0, [r3, #0]
 8007ebe:	f7ff bf8f 	b.w	8007de0 <_fclose_r>
 8007ec2:	bf00      	nop
 8007ec4:	24000020 	.word	0x24000020

08007ec8 <__sflush_r>:
 8007ec8:	898a      	ldrh	r2, [r1, #12]
 8007eca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ece:	4605      	mov	r5, r0
 8007ed0:	0710      	lsls	r0, r2, #28
 8007ed2:	460c      	mov	r4, r1
 8007ed4:	d458      	bmi.n	8007f88 <__sflush_r+0xc0>
 8007ed6:	684b      	ldr	r3, [r1, #4]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	dc05      	bgt.n	8007ee8 <__sflush_r+0x20>
 8007edc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	dc02      	bgt.n	8007ee8 <__sflush_r+0x20>
 8007ee2:	2000      	movs	r0, #0
 8007ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ee8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007eea:	2e00      	cmp	r6, #0
 8007eec:	d0f9      	beq.n	8007ee2 <__sflush_r+0x1a>
 8007eee:	2300      	movs	r3, #0
 8007ef0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007ef4:	682f      	ldr	r7, [r5, #0]
 8007ef6:	602b      	str	r3, [r5, #0]
 8007ef8:	d032      	beq.n	8007f60 <__sflush_r+0x98>
 8007efa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007efc:	89a3      	ldrh	r3, [r4, #12]
 8007efe:	075a      	lsls	r2, r3, #29
 8007f00:	d505      	bpl.n	8007f0e <__sflush_r+0x46>
 8007f02:	6863      	ldr	r3, [r4, #4]
 8007f04:	1ac0      	subs	r0, r0, r3
 8007f06:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007f08:	b10b      	cbz	r3, 8007f0e <__sflush_r+0x46>
 8007f0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007f0c:	1ac0      	subs	r0, r0, r3
 8007f0e:	2300      	movs	r3, #0
 8007f10:	4602      	mov	r2, r0
 8007f12:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f14:	6a21      	ldr	r1, [r4, #32]
 8007f16:	4628      	mov	r0, r5
 8007f18:	47b0      	blx	r6
 8007f1a:	1c43      	adds	r3, r0, #1
 8007f1c:	89a3      	ldrh	r3, [r4, #12]
 8007f1e:	d106      	bne.n	8007f2e <__sflush_r+0x66>
 8007f20:	6829      	ldr	r1, [r5, #0]
 8007f22:	291d      	cmp	r1, #29
 8007f24:	d82c      	bhi.n	8007f80 <__sflush_r+0xb8>
 8007f26:	4a2a      	ldr	r2, [pc, #168]	; (8007fd0 <__sflush_r+0x108>)
 8007f28:	40ca      	lsrs	r2, r1
 8007f2a:	07d6      	lsls	r6, r2, #31
 8007f2c:	d528      	bpl.n	8007f80 <__sflush_r+0xb8>
 8007f2e:	2200      	movs	r2, #0
 8007f30:	6062      	str	r2, [r4, #4]
 8007f32:	04d9      	lsls	r1, r3, #19
 8007f34:	6922      	ldr	r2, [r4, #16]
 8007f36:	6022      	str	r2, [r4, #0]
 8007f38:	d504      	bpl.n	8007f44 <__sflush_r+0x7c>
 8007f3a:	1c42      	adds	r2, r0, #1
 8007f3c:	d101      	bne.n	8007f42 <__sflush_r+0x7a>
 8007f3e:	682b      	ldr	r3, [r5, #0]
 8007f40:	b903      	cbnz	r3, 8007f44 <__sflush_r+0x7c>
 8007f42:	6560      	str	r0, [r4, #84]	; 0x54
 8007f44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f46:	602f      	str	r7, [r5, #0]
 8007f48:	2900      	cmp	r1, #0
 8007f4a:	d0ca      	beq.n	8007ee2 <__sflush_r+0x1a>
 8007f4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f50:	4299      	cmp	r1, r3
 8007f52:	d002      	beq.n	8007f5a <__sflush_r+0x92>
 8007f54:	4628      	mov	r0, r5
 8007f56:	f000 fb8d 	bl	8008674 <_free_r>
 8007f5a:	2000      	movs	r0, #0
 8007f5c:	6360      	str	r0, [r4, #52]	; 0x34
 8007f5e:	e7c1      	b.n	8007ee4 <__sflush_r+0x1c>
 8007f60:	6a21      	ldr	r1, [r4, #32]
 8007f62:	2301      	movs	r3, #1
 8007f64:	4628      	mov	r0, r5
 8007f66:	47b0      	blx	r6
 8007f68:	1c41      	adds	r1, r0, #1
 8007f6a:	d1c7      	bne.n	8007efc <__sflush_r+0x34>
 8007f6c:	682b      	ldr	r3, [r5, #0]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d0c4      	beq.n	8007efc <__sflush_r+0x34>
 8007f72:	2b1d      	cmp	r3, #29
 8007f74:	d001      	beq.n	8007f7a <__sflush_r+0xb2>
 8007f76:	2b16      	cmp	r3, #22
 8007f78:	d101      	bne.n	8007f7e <__sflush_r+0xb6>
 8007f7a:	602f      	str	r7, [r5, #0]
 8007f7c:	e7b1      	b.n	8007ee2 <__sflush_r+0x1a>
 8007f7e:	89a3      	ldrh	r3, [r4, #12]
 8007f80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f84:	81a3      	strh	r3, [r4, #12]
 8007f86:	e7ad      	b.n	8007ee4 <__sflush_r+0x1c>
 8007f88:	690f      	ldr	r7, [r1, #16]
 8007f8a:	2f00      	cmp	r7, #0
 8007f8c:	d0a9      	beq.n	8007ee2 <__sflush_r+0x1a>
 8007f8e:	0793      	lsls	r3, r2, #30
 8007f90:	680e      	ldr	r6, [r1, #0]
 8007f92:	bf08      	it	eq
 8007f94:	694b      	ldreq	r3, [r1, #20]
 8007f96:	600f      	str	r7, [r1, #0]
 8007f98:	bf18      	it	ne
 8007f9a:	2300      	movne	r3, #0
 8007f9c:	eba6 0807 	sub.w	r8, r6, r7
 8007fa0:	608b      	str	r3, [r1, #8]
 8007fa2:	f1b8 0f00 	cmp.w	r8, #0
 8007fa6:	dd9c      	ble.n	8007ee2 <__sflush_r+0x1a>
 8007fa8:	6a21      	ldr	r1, [r4, #32]
 8007faa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007fac:	4643      	mov	r3, r8
 8007fae:	463a      	mov	r2, r7
 8007fb0:	4628      	mov	r0, r5
 8007fb2:	47b0      	blx	r6
 8007fb4:	2800      	cmp	r0, #0
 8007fb6:	dc06      	bgt.n	8007fc6 <__sflush_r+0xfe>
 8007fb8:	89a3      	ldrh	r3, [r4, #12]
 8007fba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fbe:	81a3      	strh	r3, [r4, #12]
 8007fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8007fc4:	e78e      	b.n	8007ee4 <__sflush_r+0x1c>
 8007fc6:	4407      	add	r7, r0
 8007fc8:	eba8 0800 	sub.w	r8, r8, r0
 8007fcc:	e7e9      	b.n	8007fa2 <__sflush_r+0xda>
 8007fce:	bf00      	nop
 8007fd0:	20400001 	.word	0x20400001

08007fd4 <_fflush_r>:
 8007fd4:	b538      	push	{r3, r4, r5, lr}
 8007fd6:	690b      	ldr	r3, [r1, #16]
 8007fd8:	4605      	mov	r5, r0
 8007fda:	460c      	mov	r4, r1
 8007fdc:	b913      	cbnz	r3, 8007fe4 <_fflush_r+0x10>
 8007fde:	2500      	movs	r5, #0
 8007fe0:	4628      	mov	r0, r5
 8007fe2:	bd38      	pop	{r3, r4, r5, pc}
 8007fe4:	b118      	cbz	r0, 8007fee <_fflush_r+0x1a>
 8007fe6:	6983      	ldr	r3, [r0, #24]
 8007fe8:	b90b      	cbnz	r3, 8007fee <_fflush_r+0x1a>
 8007fea:	f000 f887 	bl	80080fc <__sinit>
 8007fee:	4b14      	ldr	r3, [pc, #80]	; (8008040 <_fflush_r+0x6c>)
 8007ff0:	429c      	cmp	r4, r3
 8007ff2:	d11b      	bne.n	800802c <_fflush_r+0x58>
 8007ff4:	686c      	ldr	r4, [r5, #4]
 8007ff6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d0ef      	beq.n	8007fde <_fflush_r+0xa>
 8007ffe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008000:	07d0      	lsls	r0, r2, #31
 8008002:	d404      	bmi.n	800800e <_fflush_r+0x3a>
 8008004:	0599      	lsls	r1, r3, #22
 8008006:	d402      	bmi.n	800800e <_fflush_r+0x3a>
 8008008:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800800a:	f000 fabb 	bl	8008584 <__retarget_lock_acquire_recursive>
 800800e:	4628      	mov	r0, r5
 8008010:	4621      	mov	r1, r4
 8008012:	f7ff ff59 	bl	8007ec8 <__sflush_r>
 8008016:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008018:	07da      	lsls	r2, r3, #31
 800801a:	4605      	mov	r5, r0
 800801c:	d4e0      	bmi.n	8007fe0 <_fflush_r+0xc>
 800801e:	89a3      	ldrh	r3, [r4, #12]
 8008020:	059b      	lsls	r3, r3, #22
 8008022:	d4dd      	bmi.n	8007fe0 <_fflush_r+0xc>
 8008024:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008026:	f000 faae 	bl	8008586 <__retarget_lock_release_recursive>
 800802a:	e7d9      	b.n	8007fe0 <_fflush_r+0xc>
 800802c:	4b05      	ldr	r3, [pc, #20]	; (8008044 <_fflush_r+0x70>)
 800802e:	429c      	cmp	r4, r3
 8008030:	d101      	bne.n	8008036 <_fflush_r+0x62>
 8008032:	68ac      	ldr	r4, [r5, #8]
 8008034:	e7df      	b.n	8007ff6 <_fflush_r+0x22>
 8008036:	4b04      	ldr	r3, [pc, #16]	; (8008048 <_fflush_r+0x74>)
 8008038:	429c      	cmp	r4, r3
 800803a:	bf08      	it	eq
 800803c:	68ec      	ldreq	r4, [r5, #12]
 800803e:	e7da      	b.n	8007ff6 <_fflush_r+0x22>
 8008040:	08009f3c 	.word	0x08009f3c
 8008044:	08009f5c 	.word	0x08009f5c
 8008048:	08009f1c 	.word	0x08009f1c

0800804c <std>:
 800804c:	2300      	movs	r3, #0
 800804e:	b510      	push	{r4, lr}
 8008050:	4604      	mov	r4, r0
 8008052:	e9c0 3300 	strd	r3, r3, [r0]
 8008056:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800805a:	6083      	str	r3, [r0, #8]
 800805c:	8181      	strh	r1, [r0, #12]
 800805e:	6643      	str	r3, [r0, #100]	; 0x64
 8008060:	81c2      	strh	r2, [r0, #14]
 8008062:	6183      	str	r3, [r0, #24]
 8008064:	4619      	mov	r1, r3
 8008066:	2208      	movs	r2, #8
 8008068:	305c      	adds	r0, #92	; 0x5c
 800806a:	f000 fafb 	bl	8008664 <memset>
 800806e:	4b05      	ldr	r3, [pc, #20]	; (8008084 <std+0x38>)
 8008070:	6263      	str	r3, [r4, #36]	; 0x24
 8008072:	4b05      	ldr	r3, [pc, #20]	; (8008088 <std+0x3c>)
 8008074:	62a3      	str	r3, [r4, #40]	; 0x28
 8008076:	4b05      	ldr	r3, [pc, #20]	; (800808c <std+0x40>)
 8008078:	62e3      	str	r3, [r4, #44]	; 0x2c
 800807a:	4b05      	ldr	r3, [pc, #20]	; (8008090 <std+0x44>)
 800807c:	6224      	str	r4, [r4, #32]
 800807e:	6323      	str	r3, [r4, #48]	; 0x30
 8008080:	bd10      	pop	{r4, pc}
 8008082:	bf00      	nop
 8008084:	080088a9 	.word	0x080088a9
 8008088:	080088cb 	.word	0x080088cb
 800808c:	08008903 	.word	0x08008903
 8008090:	08008927 	.word	0x08008927

08008094 <_cleanup_r>:
 8008094:	4901      	ldr	r1, [pc, #4]	; (800809c <_cleanup_r+0x8>)
 8008096:	f000 b9c1 	b.w	800841c <_fwalk_reent>
 800809a:	bf00      	nop
 800809c:	08007fd5 	.word	0x08007fd5

080080a0 <__sfmoreglue>:
 80080a0:	b570      	push	{r4, r5, r6, lr}
 80080a2:	2268      	movs	r2, #104	; 0x68
 80080a4:	1e4d      	subs	r5, r1, #1
 80080a6:	4355      	muls	r5, r2
 80080a8:	460e      	mov	r6, r1
 80080aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80080ae:	f000 fb4d 	bl	800874c <_malloc_r>
 80080b2:	4604      	mov	r4, r0
 80080b4:	b140      	cbz	r0, 80080c8 <__sfmoreglue+0x28>
 80080b6:	2100      	movs	r1, #0
 80080b8:	e9c0 1600 	strd	r1, r6, [r0]
 80080bc:	300c      	adds	r0, #12
 80080be:	60a0      	str	r0, [r4, #8]
 80080c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80080c4:	f000 face 	bl	8008664 <memset>
 80080c8:	4620      	mov	r0, r4
 80080ca:	bd70      	pop	{r4, r5, r6, pc}

080080cc <__sfp_lock_acquire>:
 80080cc:	4801      	ldr	r0, [pc, #4]	; (80080d4 <__sfp_lock_acquire+0x8>)
 80080ce:	f000 ba59 	b.w	8008584 <__retarget_lock_acquire_recursive>
 80080d2:	bf00      	nop
 80080d4:	2400043d 	.word	0x2400043d

080080d8 <__sfp_lock_release>:
 80080d8:	4801      	ldr	r0, [pc, #4]	; (80080e0 <__sfp_lock_release+0x8>)
 80080da:	f000 ba54 	b.w	8008586 <__retarget_lock_release_recursive>
 80080de:	bf00      	nop
 80080e0:	2400043d 	.word	0x2400043d

080080e4 <__sinit_lock_acquire>:
 80080e4:	4801      	ldr	r0, [pc, #4]	; (80080ec <__sinit_lock_acquire+0x8>)
 80080e6:	f000 ba4d 	b.w	8008584 <__retarget_lock_acquire_recursive>
 80080ea:	bf00      	nop
 80080ec:	2400043e 	.word	0x2400043e

080080f0 <__sinit_lock_release>:
 80080f0:	4801      	ldr	r0, [pc, #4]	; (80080f8 <__sinit_lock_release+0x8>)
 80080f2:	f000 ba48 	b.w	8008586 <__retarget_lock_release_recursive>
 80080f6:	bf00      	nop
 80080f8:	2400043e 	.word	0x2400043e

080080fc <__sinit>:
 80080fc:	b510      	push	{r4, lr}
 80080fe:	4604      	mov	r4, r0
 8008100:	f7ff fff0 	bl	80080e4 <__sinit_lock_acquire>
 8008104:	69a3      	ldr	r3, [r4, #24]
 8008106:	b11b      	cbz	r3, 8008110 <__sinit+0x14>
 8008108:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800810c:	f7ff bff0 	b.w	80080f0 <__sinit_lock_release>
 8008110:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008114:	6523      	str	r3, [r4, #80]	; 0x50
 8008116:	4b13      	ldr	r3, [pc, #76]	; (8008164 <__sinit+0x68>)
 8008118:	4a13      	ldr	r2, [pc, #76]	; (8008168 <__sinit+0x6c>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	62a2      	str	r2, [r4, #40]	; 0x28
 800811e:	42a3      	cmp	r3, r4
 8008120:	bf04      	itt	eq
 8008122:	2301      	moveq	r3, #1
 8008124:	61a3      	streq	r3, [r4, #24]
 8008126:	4620      	mov	r0, r4
 8008128:	f000 f820 	bl	800816c <__sfp>
 800812c:	6060      	str	r0, [r4, #4]
 800812e:	4620      	mov	r0, r4
 8008130:	f000 f81c 	bl	800816c <__sfp>
 8008134:	60a0      	str	r0, [r4, #8]
 8008136:	4620      	mov	r0, r4
 8008138:	f000 f818 	bl	800816c <__sfp>
 800813c:	2200      	movs	r2, #0
 800813e:	60e0      	str	r0, [r4, #12]
 8008140:	2104      	movs	r1, #4
 8008142:	6860      	ldr	r0, [r4, #4]
 8008144:	f7ff ff82 	bl	800804c <std>
 8008148:	68a0      	ldr	r0, [r4, #8]
 800814a:	2201      	movs	r2, #1
 800814c:	2109      	movs	r1, #9
 800814e:	f7ff ff7d 	bl	800804c <std>
 8008152:	68e0      	ldr	r0, [r4, #12]
 8008154:	2202      	movs	r2, #2
 8008156:	2112      	movs	r1, #18
 8008158:	f7ff ff78 	bl	800804c <std>
 800815c:	2301      	movs	r3, #1
 800815e:	61a3      	str	r3, [r4, #24]
 8008160:	e7d2      	b.n	8008108 <__sinit+0xc>
 8008162:	bf00      	nop
 8008164:	08009f7c 	.word	0x08009f7c
 8008168:	08008095 	.word	0x08008095

0800816c <__sfp>:
 800816c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800816e:	4607      	mov	r7, r0
 8008170:	f7ff ffac 	bl	80080cc <__sfp_lock_acquire>
 8008174:	4b1e      	ldr	r3, [pc, #120]	; (80081f0 <__sfp+0x84>)
 8008176:	681e      	ldr	r6, [r3, #0]
 8008178:	69b3      	ldr	r3, [r6, #24]
 800817a:	b913      	cbnz	r3, 8008182 <__sfp+0x16>
 800817c:	4630      	mov	r0, r6
 800817e:	f7ff ffbd 	bl	80080fc <__sinit>
 8008182:	3648      	adds	r6, #72	; 0x48
 8008184:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008188:	3b01      	subs	r3, #1
 800818a:	d503      	bpl.n	8008194 <__sfp+0x28>
 800818c:	6833      	ldr	r3, [r6, #0]
 800818e:	b30b      	cbz	r3, 80081d4 <__sfp+0x68>
 8008190:	6836      	ldr	r6, [r6, #0]
 8008192:	e7f7      	b.n	8008184 <__sfp+0x18>
 8008194:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008198:	b9d5      	cbnz	r5, 80081d0 <__sfp+0x64>
 800819a:	4b16      	ldr	r3, [pc, #88]	; (80081f4 <__sfp+0x88>)
 800819c:	60e3      	str	r3, [r4, #12]
 800819e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80081a2:	6665      	str	r5, [r4, #100]	; 0x64
 80081a4:	f000 f9ec 	bl	8008580 <__retarget_lock_init_recursive>
 80081a8:	f7ff ff96 	bl	80080d8 <__sfp_lock_release>
 80081ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80081b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80081b4:	6025      	str	r5, [r4, #0]
 80081b6:	61a5      	str	r5, [r4, #24]
 80081b8:	2208      	movs	r2, #8
 80081ba:	4629      	mov	r1, r5
 80081bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80081c0:	f000 fa50 	bl	8008664 <memset>
 80081c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80081c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80081cc:	4620      	mov	r0, r4
 80081ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081d0:	3468      	adds	r4, #104	; 0x68
 80081d2:	e7d9      	b.n	8008188 <__sfp+0x1c>
 80081d4:	2104      	movs	r1, #4
 80081d6:	4638      	mov	r0, r7
 80081d8:	f7ff ff62 	bl	80080a0 <__sfmoreglue>
 80081dc:	4604      	mov	r4, r0
 80081de:	6030      	str	r0, [r6, #0]
 80081e0:	2800      	cmp	r0, #0
 80081e2:	d1d5      	bne.n	8008190 <__sfp+0x24>
 80081e4:	f7ff ff78 	bl	80080d8 <__sfp_lock_release>
 80081e8:	230c      	movs	r3, #12
 80081ea:	603b      	str	r3, [r7, #0]
 80081ec:	e7ee      	b.n	80081cc <__sfp+0x60>
 80081ee:	bf00      	nop
 80081f0:	08009f7c 	.word	0x08009f7c
 80081f4:	ffff0001 	.word	0xffff0001

080081f8 <_fopen_r>:
 80081f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80081fa:	460f      	mov	r7, r1
 80081fc:	4611      	mov	r1, r2
 80081fe:	aa01      	add	r2, sp, #4
 8008200:	4605      	mov	r5, r0
 8008202:	f000 fc77 	bl	8008af4 <__sflags>
 8008206:	4606      	mov	r6, r0
 8008208:	b918      	cbnz	r0, 8008212 <_fopen_r+0x1a>
 800820a:	2400      	movs	r4, #0
 800820c:	4620      	mov	r0, r4
 800820e:	b003      	add	sp, #12
 8008210:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008212:	4628      	mov	r0, r5
 8008214:	f7ff ffaa 	bl	800816c <__sfp>
 8008218:	4604      	mov	r4, r0
 800821a:	2800      	cmp	r0, #0
 800821c:	d0f5      	beq.n	800820a <_fopen_r+0x12>
 800821e:	4639      	mov	r1, r7
 8008220:	9a01      	ldr	r2, [sp, #4]
 8008222:	f44f 73db 	mov.w	r3, #438	; 0x1b6
 8008226:	4628      	mov	r0, r5
 8008228:	f000 fb04 	bl	8008834 <_open_r>
 800822c:	1e07      	subs	r7, r0, #0
 800822e:	da09      	bge.n	8008244 <_fopen_r+0x4c>
 8008230:	2500      	movs	r5, #0
 8008232:	f7ff ff4b 	bl	80080cc <__sfp_lock_acquire>
 8008236:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008238:	81a5      	strh	r5, [r4, #12]
 800823a:	f000 f9a2 	bl	8008582 <__retarget_lock_close_recursive>
 800823e:	f7ff ff4b 	bl	80080d8 <__sfp_lock_release>
 8008242:	e7e2      	b.n	800820a <_fopen_r+0x12>
 8008244:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008246:	07db      	lsls	r3, r3, #31
 8008248:	d405      	bmi.n	8008256 <_fopen_r+0x5e>
 800824a:	89a3      	ldrh	r3, [r4, #12]
 800824c:	0598      	lsls	r0, r3, #22
 800824e:	d402      	bmi.n	8008256 <_fopen_r+0x5e>
 8008250:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008252:	f000 f997 	bl	8008584 <__retarget_lock_acquire_recursive>
 8008256:	4b0e      	ldr	r3, [pc, #56]	; (8008290 <_fopen_r+0x98>)
 8008258:	6263      	str	r3, [r4, #36]	; 0x24
 800825a:	4b0e      	ldr	r3, [pc, #56]	; (8008294 <_fopen_r+0x9c>)
 800825c:	62a3      	str	r3, [r4, #40]	; 0x28
 800825e:	4b0e      	ldr	r3, [pc, #56]	; (8008298 <_fopen_r+0xa0>)
 8008260:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008262:	05f1      	lsls	r1, r6, #23
 8008264:	4b0d      	ldr	r3, [pc, #52]	; (800829c <_fopen_r+0xa4>)
 8008266:	81e7      	strh	r7, [r4, #14]
 8008268:	81a6      	strh	r6, [r4, #12]
 800826a:	6224      	str	r4, [r4, #32]
 800826c:	6323      	str	r3, [r4, #48]	; 0x30
 800826e:	d505      	bpl.n	800827c <_fopen_r+0x84>
 8008270:	2302      	movs	r3, #2
 8008272:	2200      	movs	r2, #0
 8008274:	4621      	mov	r1, r4
 8008276:	4628      	mov	r0, r5
 8008278:	f000 f81a 	bl	80082b0 <_fseek_r>
 800827c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800827e:	07da      	lsls	r2, r3, #31
 8008280:	d4c4      	bmi.n	800820c <_fopen_r+0x14>
 8008282:	89a3      	ldrh	r3, [r4, #12]
 8008284:	059b      	lsls	r3, r3, #22
 8008286:	d4c1      	bmi.n	800820c <_fopen_r+0x14>
 8008288:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800828a:	f000 f97c 	bl	8008586 <__retarget_lock_release_recursive>
 800828e:	e7bd      	b.n	800820c <_fopen_r+0x14>
 8008290:	080088a9 	.word	0x080088a9
 8008294:	080088cb 	.word	0x080088cb
 8008298:	08008903 	.word	0x08008903
 800829c:	08008927 	.word	0x08008927

080082a0 <fopen>:
 80082a0:	4b02      	ldr	r3, [pc, #8]	; (80082ac <fopen+0xc>)
 80082a2:	460a      	mov	r2, r1
 80082a4:	4601      	mov	r1, r0
 80082a6:	6818      	ldr	r0, [r3, #0]
 80082a8:	f7ff bfa6 	b.w	80081f8 <_fopen_r>
 80082ac:	24000020 	.word	0x24000020

080082b0 <_fseek_r>:
 80082b0:	f000 b800 	b.w	80082b4 <_fseeko_r>

080082b4 <_fseeko_r>:
 80082b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082b8:	460c      	mov	r4, r1
 80082ba:	4617      	mov	r7, r2
 80082bc:	461d      	mov	r5, r3
 80082be:	4606      	mov	r6, r0
 80082c0:	b118      	cbz	r0, 80082ca <_fseeko_r+0x16>
 80082c2:	6983      	ldr	r3, [r0, #24]
 80082c4:	b90b      	cbnz	r3, 80082ca <_fseeko_r+0x16>
 80082c6:	f7ff ff19 	bl	80080fc <__sinit>
 80082ca:	4b51      	ldr	r3, [pc, #324]	; (8008410 <_fseeko_r+0x15c>)
 80082cc:	429c      	cmp	r4, r3
 80082ce:	d122      	bne.n	8008316 <_fseeko_r+0x62>
 80082d0:	6874      	ldr	r4, [r6, #4]
 80082d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80082d4:	07d9      	lsls	r1, r3, #31
 80082d6:	d405      	bmi.n	80082e4 <_fseeko_r+0x30>
 80082d8:	89a3      	ldrh	r3, [r4, #12]
 80082da:	059a      	lsls	r2, r3, #22
 80082dc:	d402      	bmi.n	80082e4 <_fseeko_r+0x30>
 80082de:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80082e0:	f000 f950 	bl	8008584 <__retarget_lock_acquire_recursive>
 80082e4:	89a3      	ldrh	r3, [r4, #12]
 80082e6:	f403 7384 	and.w	r3, r3, #264	; 0x108
 80082ea:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 80082ee:	d103      	bne.n	80082f8 <_fseeko_r+0x44>
 80082f0:	4621      	mov	r1, r4
 80082f2:	4630      	mov	r0, r6
 80082f4:	f7ff fe6e 	bl	8007fd4 <_fflush_r>
 80082f8:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
 80082fc:	f1b8 0f00 	cmp.w	r8, #0
 8008300:	d113      	bne.n	800832a <_fseeko_r+0x76>
 8008302:	231d      	movs	r3, #29
 8008304:	6033      	str	r3, [r6, #0]
 8008306:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008308:	07d9      	lsls	r1, r3, #31
 800830a:	d578      	bpl.n	80083fe <_fseeko_r+0x14a>
 800830c:	f04f 35ff 	mov.w	r5, #4294967295
 8008310:	4628      	mov	r0, r5
 8008312:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008316:	4b3f      	ldr	r3, [pc, #252]	; (8008414 <_fseeko_r+0x160>)
 8008318:	429c      	cmp	r4, r3
 800831a:	d101      	bne.n	8008320 <_fseeko_r+0x6c>
 800831c:	68b4      	ldr	r4, [r6, #8]
 800831e:	e7d8      	b.n	80082d2 <_fseeko_r+0x1e>
 8008320:	4b3d      	ldr	r3, [pc, #244]	; (8008418 <_fseeko_r+0x164>)
 8008322:	429c      	cmp	r4, r3
 8008324:	bf08      	it	eq
 8008326:	68f4      	ldreq	r4, [r6, #12]
 8008328:	e7d3      	b.n	80082d2 <_fseeko_r+0x1e>
 800832a:	2d01      	cmp	r5, #1
 800832c:	d036      	beq.n	800839c <_fseeko_r+0xe8>
 800832e:	f035 0302 	bics.w	r3, r5, #2
 8008332:	d162      	bne.n	80083fa <_fseeko_r+0x146>
 8008334:	6923      	ldr	r3, [r4, #16]
 8008336:	b91b      	cbnz	r3, 8008340 <_fseeko_r+0x8c>
 8008338:	4621      	mov	r1, r4
 800833a:	4630      	mov	r0, r6
 800833c:	f000 f94a 	bl	80085d4 <__smakebuf_r>
 8008340:	4621      	mov	r1, r4
 8008342:	4630      	mov	r0, r6
 8008344:	f7ff fe46 	bl	8007fd4 <_fflush_r>
 8008348:	2800      	cmp	r0, #0
 800834a:	d1dc      	bne.n	8008306 <_fseeko_r+0x52>
 800834c:	6a21      	ldr	r1, [r4, #32]
 800834e:	462b      	mov	r3, r5
 8008350:	463a      	mov	r2, r7
 8008352:	4630      	mov	r0, r6
 8008354:	47c0      	blx	r8
 8008356:	3001      	adds	r0, #1
 8008358:	d0d5      	beq.n	8008306 <_fseeko_r+0x52>
 800835a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800835c:	b141      	cbz	r1, 8008370 <_fseeko_r+0xbc>
 800835e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008362:	4299      	cmp	r1, r3
 8008364:	d002      	beq.n	800836c <_fseeko_r+0xb8>
 8008366:	4630      	mov	r0, r6
 8008368:	f000 f984 	bl	8008674 <_free_r>
 800836c:	2300      	movs	r3, #0
 800836e:	6363      	str	r3, [r4, #52]	; 0x34
 8008370:	6923      	ldr	r3, [r4, #16]
 8008372:	6023      	str	r3, [r4, #0]
 8008374:	89a3      	ldrh	r3, [r4, #12]
 8008376:	2600      	movs	r6, #0
 8008378:	f423 6302 	bic.w	r3, r3, #2080	; 0x820
 800837c:	6066      	str	r6, [r4, #4]
 800837e:	81a3      	strh	r3, [r4, #12]
 8008380:	2208      	movs	r2, #8
 8008382:	4631      	mov	r1, r6
 8008384:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008388:	f000 f96c 	bl	8008664 <memset>
 800838c:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800838e:	f015 0501 	ands.w	r5, r5, #1
 8008392:	d13b      	bne.n	800840c <_fseeko_r+0x158>
 8008394:	89a3      	ldrh	r3, [r4, #12]
 8008396:	059b      	lsls	r3, r3, #22
 8008398:	d4ba      	bmi.n	8008310 <_fseeko_r+0x5c>
 800839a:	e021      	b.n	80083e0 <_fseeko_r+0x12c>
 800839c:	4621      	mov	r1, r4
 800839e:	4630      	mov	r0, r6
 80083a0:	f7ff fe18 	bl	8007fd4 <_fflush_r>
 80083a4:	89a2      	ldrh	r2, [r4, #12]
 80083a6:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80083aa:	d00c      	beq.n	80083c6 <_fseeko_r+0x112>
 80083ac:	6d65      	ldr	r5, [r4, #84]	; 0x54
 80083ae:	89a3      	ldrh	r3, [r4, #12]
 80083b0:	075a      	lsls	r2, r3, #29
 80083b2:	d519      	bpl.n	80083e8 <_fseeko_r+0x134>
 80083b4:	6863      	ldr	r3, [r4, #4]
 80083b6:	1aed      	subs	r5, r5, r3
 80083b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80083ba:	b10b      	cbz	r3, 80083c0 <_fseeko_r+0x10c>
 80083bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80083be:	1aed      	subs	r5, r5, r3
 80083c0:	442f      	add	r7, r5
 80083c2:	2500      	movs	r5, #0
 80083c4:	e7b6      	b.n	8008334 <_fseeko_r+0x80>
 80083c6:	462b      	mov	r3, r5
 80083c8:	6a21      	ldr	r1, [r4, #32]
 80083ca:	4630      	mov	r0, r6
 80083cc:	47c0      	blx	r8
 80083ce:	1c43      	adds	r3, r0, #1
 80083d0:	4605      	mov	r5, r0
 80083d2:	d1ec      	bne.n	80083ae <_fseeko_r+0xfa>
 80083d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80083d6:	07d8      	lsls	r0, r3, #31
 80083d8:	d498      	bmi.n	800830c <_fseeko_r+0x58>
 80083da:	89a3      	ldrh	r3, [r4, #12]
 80083dc:	0599      	lsls	r1, r3, #22
 80083de:	d495      	bmi.n	800830c <_fseeko_r+0x58>
 80083e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80083e2:	f000 f8d0 	bl	8008586 <__retarget_lock_release_recursive>
 80083e6:	e793      	b.n	8008310 <_fseeko_r+0x5c>
 80083e8:	0718      	lsls	r0, r3, #28
 80083ea:	d5e9      	bpl.n	80083c0 <_fseeko_r+0x10c>
 80083ec:	6823      	ldr	r3, [r4, #0]
 80083ee:	6922      	ldr	r2, [r4, #16]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d0e5      	beq.n	80083c0 <_fseeko_r+0x10c>
 80083f4:	1a9b      	subs	r3, r3, r2
 80083f6:	441d      	add	r5, r3
 80083f8:	e7e2      	b.n	80083c0 <_fseeko_r+0x10c>
 80083fa:	2316      	movs	r3, #22
 80083fc:	e782      	b.n	8008304 <_fseeko_r+0x50>
 80083fe:	89a3      	ldrh	r3, [r4, #12]
 8008400:	059a      	lsls	r2, r3, #22
 8008402:	d483      	bmi.n	800830c <_fseeko_r+0x58>
 8008404:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008406:	f000 f8be 	bl	8008586 <__retarget_lock_release_recursive>
 800840a:	e77f      	b.n	800830c <_fseeko_r+0x58>
 800840c:	4635      	mov	r5, r6
 800840e:	e77f      	b.n	8008310 <_fseeko_r+0x5c>
 8008410:	08009f3c 	.word	0x08009f3c
 8008414:	08009f5c 	.word	0x08009f5c
 8008418:	08009f1c 	.word	0x08009f1c

0800841c <_fwalk_reent>:
 800841c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008420:	4606      	mov	r6, r0
 8008422:	4688      	mov	r8, r1
 8008424:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008428:	2700      	movs	r7, #0
 800842a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800842e:	f1b9 0901 	subs.w	r9, r9, #1
 8008432:	d505      	bpl.n	8008440 <_fwalk_reent+0x24>
 8008434:	6824      	ldr	r4, [r4, #0]
 8008436:	2c00      	cmp	r4, #0
 8008438:	d1f7      	bne.n	800842a <_fwalk_reent+0xe>
 800843a:	4638      	mov	r0, r7
 800843c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008440:	89ab      	ldrh	r3, [r5, #12]
 8008442:	2b01      	cmp	r3, #1
 8008444:	d907      	bls.n	8008456 <_fwalk_reent+0x3a>
 8008446:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800844a:	3301      	adds	r3, #1
 800844c:	d003      	beq.n	8008456 <_fwalk_reent+0x3a>
 800844e:	4629      	mov	r1, r5
 8008450:	4630      	mov	r0, r6
 8008452:	47c0      	blx	r8
 8008454:	4307      	orrs	r7, r0
 8008456:	3568      	adds	r5, #104	; 0x68
 8008458:	e7e9      	b.n	800842e <_fwalk_reent+0x12>
	...

0800845c <_fwrite_r>:
 800845c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008460:	9c08      	ldr	r4, [sp, #32]
 8008462:	468a      	mov	sl, r1
 8008464:	4690      	mov	r8, r2
 8008466:	fb02 f903 	mul.w	r9, r2, r3
 800846a:	4605      	mov	r5, r0
 800846c:	b118      	cbz	r0, 8008476 <_fwrite_r+0x1a>
 800846e:	6983      	ldr	r3, [r0, #24]
 8008470:	b90b      	cbnz	r3, 8008476 <_fwrite_r+0x1a>
 8008472:	f7ff fe43 	bl	80080fc <__sinit>
 8008476:	4b26      	ldr	r3, [pc, #152]	; (8008510 <_fwrite_r+0xb4>)
 8008478:	429c      	cmp	r4, r3
 800847a:	d123      	bne.n	80084c4 <_fwrite_r+0x68>
 800847c:	686c      	ldr	r4, [r5, #4]
 800847e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008480:	07de      	lsls	r6, r3, #31
 8008482:	d405      	bmi.n	8008490 <_fwrite_r+0x34>
 8008484:	89a3      	ldrh	r3, [r4, #12]
 8008486:	0598      	lsls	r0, r3, #22
 8008488:	d402      	bmi.n	8008490 <_fwrite_r+0x34>
 800848a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800848c:	f000 f87a 	bl	8008584 <__retarget_lock_acquire_recursive>
 8008490:	89a3      	ldrh	r3, [r4, #12]
 8008492:	0719      	lsls	r1, r3, #28
 8008494:	d520      	bpl.n	80084d8 <_fwrite_r+0x7c>
 8008496:	6923      	ldr	r3, [r4, #16]
 8008498:	b1f3      	cbz	r3, 80084d8 <_fwrite_r+0x7c>
 800849a:	2600      	movs	r6, #0
 800849c:	454e      	cmp	r6, r9
 800849e:	d029      	beq.n	80084f4 <_fwrite_r+0x98>
 80084a0:	68a7      	ldr	r7, [r4, #8]
 80084a2:	f81a 1006 	ldrb.w	r1, [sl, r6]
 80084a6:	3f01      	subs	r7, #1
 80084a8:	2f00      	cmp	r7, #0
 80084aa:	60a7      	str	r7, [r4, #8]
 80084ac:	da04      	bge.n	80084b8 <_fwrite_r+0x5c>
 80084ae:	69a3      	ldr	r3, [r4, #24]
 80084b0:	429f      	cmp	r7, r3
 80084b2:	db19      	blt.n	80084e8 <_fwrite_r+0x8c>
 80084b4:	290a      	cmp	r1, #10
 80084b6:	d017      	beq.n	80084e8 <_fwrite_r+0x8c>
 80084b8:	6823      	ldr	r3, [r4, #0]
 80084ba:	1c5a      	adds	r2, r3, #1
 80084bc:	6022      	str	r2, [r4, #0]
 80084be:	7019      	strb	r1, [r3, #0]
 80084c0:	3601      	adds	r6, #1
 80084c2:	e7eb      	b.n	800849c <_fwrite_r+0x40>
 80084c4:	4b13      	ldr	r3, [pc, #76]	; (8008514 <_fwrite_r+0xb8>)
 80084c6:	429c      	cmp	r4, r3
 80084c8:	d101      	bne.n	80084ce <_fwrite_r+0x72>
 80084ca:	68ac      	ldr	r4, [r5, #8]
 80084cc:	e7d7      	b.n	800847e <_fwrite_r+0x22>
 80084ce:	4b12      	ldr	r3, [pc, #72]	; (8008518 <_fwrite_r+0xbc>)
 80084d0:	429c      	cmp	r4, r3
 80084d2:	bf08      	it	eq
 80084d4:	68ec      	ldreq	r4, [r5, #12]
 80084d6:	e7d2      	b.n	800847e <_fwrite_r+0x22>
 80084d8:	4621      	mov	r1, r4
 80084da:	4628      	mov	r0, r5
 80084dc:	f000 fa8c 	bl	80089f8 <__swsetup_r>
 80084e0:	2800      	cmp	r0, #0
 80084e2:	d0da      	beq.n	800849a <_fwrite_r+0x3e>
 80084e4:	2600      	movs	r6, #0
 80084e6:	e005      	b.n	80084f4 <_fwrite_r+0x98>
 80084e8:	4622      	mov	r2, r4
 80084ea:	4628      	mov	r0, r5
 80084ec:	f000 fa20 	bl	8008930 <__swbuf_r>
 80084f0:	3001      	adds	r0, #1
 80084f2:	d1e5      	bne.n	80084c0 <_fwrite_r+0x64>
 80084f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80084f6:	07da      	lsls	r2, r3, #31
 80084f8:	d405      	bmi.n	8008506 <_fwrite_r+0xaa>
 80084fa:	89a3      	ldrh	r3, [r4, #12]
 80084fc:	059b      	lsls	r3, r3, #22
 80084fe:	d402      	bmi.n	8008506 <_fwrite_r+0xaa>
 8008500:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008502:	f000 f840 	bl	8008586 <__retarget_lock_release_recursive>
 8008506:	fbb6 f0f8 	udiv	r0, r6, r8
 800850a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800850e:	bf00      	nop
 8008510:	08009f3c 	.word	0x08009f3c
 8008514:	08009f5c 	.word	0x08009f5c
 8008518:	08009f1c 	.word	0x08009f1c

0800851c <fwrite>:
 800851c:	b507      	push	{r0, r1, r2, lr}
 800851e:	9300      	str	r3, [sp, #0]
 8008520:	4613      	mov	r3, r2
 8008522:	460a      	mov	r2, r1
 8008524:	4601      	mov	r1, r0
 8008526:	4803      	ldr	r0, [pc, #12]	; (8008534 <fwrite+0x18>)
 8008528:	6800      	ldr	r0, [r0, #0]
 800852a:	f7ff ff97 	bl	800845c <_fwrite_r>
 800852e:	b003      	add	sp, #12
 8008530:	f85d fb04 	ldr.w	pc, [sp], #4
 8008534:	24000020 	.word	0x24000020

08008538 <__libc_init_array>:
 8008538:	b570      	push	{r4, r5, r6, lr}
 800853a:	4d0d      	ldr	r5, [pc, #52]	; (8008570 <__libc_init_array+0x38>)
 800853c:	4c0d      	ldr	r4, [pc, #52]	; (8008574 <__libc_init_array+0x3c>)
 800853e:	1b64      	subs	r4, r4, r5
 8008540:	10a4      	asrs	r4, r4, #2
 8008542:	2600      	movs	r6, #0
 8008544:	42a6      	cmp	r6, r4
 8008546:	d109      	bne.n	800855c <__libc_init_array+0x24>
 8008548:	4d0b      	ldr	r5, [pc, #44]	; (8008578 <__libc_init_array+0x40>)
 800854a:	4c0c      	ldr	r4, [pc, #48]	; (800857c <__libc_init_array+0x44>)
 800854c:	f001 fc88 	bl	8009e60 <_init>
 8008550:	1b64      	subs	r4, r4, r5
 8008552:	10a4      	asrs	r4, r4, #2
 8008554:	2600      	movs	r6, #0
 8008556:	42a6      	cmp	r6, r4
 8008558:	d105      	bne.n	8008566 <__libc_init_array+0x2e>
 800855a:	bd70      	pop	{r4, r5, r6, pc}
 800855c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008560:	4798      	blx	r3
 8008562:	3601      	adds	r6, #1
 8008564:	e7ee      	b.n	8008544 <__libc_init_array+0xc>
 8008566:	f855 3b04 	ldr.w	r3, [r5], #4
 800856a:	4798      	blx	r3
 800856c:	3601      	adds	r6, #1
 800856e:	e7f2      	b.n	8008556 <__libc_init_array+0x1e>
 8008570:	0800a198 	.word	0x0800a198
 8008574:	0800a198 	.word	0x0800a198
 8008578:	0800a198 	.word	0x0800a198
 800857c:	0800a19c 	.word	0x0800a19c

08008580 <__retarget_lock_init_recursive>:
 8008580:	4770      	bx	lr

08008582 <__retarget_lock_close_recursive>:
 8008582:	4770      	bx	lr

08008584 <__retarget_lock_acquire_recursive>:
 8008584:	4770      	bx	lr

08008586 <__retarget_lock_release_recursive>:
 8008586:	4770      	bx	lr

08008588 <__swhatbuf_r>:
 8008588:	b570      	push	{r4, r5, r6, lr}
 800858a:	460e      	mov	r6, r1
 800858c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008590:	2900      	cmp	r1, #0
 8008592:	b096      	sub	sp, #88	; 0x58
 8008594:	4614      	mov	r4, r2
 8008596:	461d      	mov	r5, r3
 8008598:	da08      	bge.n	80085ac <__swhatbuf_r+0x24>
 800859a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800859e:	2200      	movs	r2, #0
 80085a0:	602a      	str	r2, [r5, #0]
 80085a2:	061a      	lsls	r2, r3, #24
 80085a4:	d410      	bmi.n	80085c8 <__swhatbuf_r+0x40>
 80085a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80085aa:	e00e      	b.n	80085ca <__swhatbuf_r+0x42>
 80085ac:	466a      	mov	r2, sp
 80085ae:	f000 fad7 	bl	8008b60 <_fstat_r>
 80085b2:	2800      	cmp	r0, #0
 80085b4:	dbf1      	blt.n	800859a <__swhatbuf_r+0x12>
 80085b6:	9a01      	ldr	r2, [sp, #4]
 80085b8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80085bc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80085c0:	425a      	negs	r2, r3
 80085c2:	415a      	adcs	r2, r3
 80085c4:	602a      	str	r2, [r5, #0]
 80085c6:	e7ee      	b.n	80085a6 <__swhatbuf_r+0x1e>
 80085c8:	2340      	movs	r3, #64	; 0x40
 80085ca:	2000      	movs	r0, #0
 80085cc:	6023      	str	r3, [r4, #0]
 80085ce:	b016      	add	sp, #88	; 0x58
 80085d0:	bd70      	pop	{r4, r5, r6, pc}
	...

080085d4 <__smakebuf_r>:
 80085d4:	898b      	ldrh	r3, [r1, #12]
 80085d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80085d8:	079d      	lsls	r5, r3, #30
 80085da:	4606      	mov	r6, r0
 80085dc:	460c      	mov	r4, r1
 80085de:	d507      	bpl.n	80085f0 <__smakebuf_r+0x1c>
 80085e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80085e4:	6023      	str	r3, [r4, #0]
 80085e6:	6123      	str	r3, [r4, #16]
 80085e8:	2301      	movs	r3, #1
 80085ea:	6163      	str	r3, [r4, #20]
 80085ec:	b002      	add	sp, #8
 80085ee:	bd70      	pop	{r4, r5, r6, pc}
 80085f0:	ab01      	add	r3, sp, #4
 80085f2:	466a      	mov	r2, sp
 80085f4:	f7ff ffc8 	bl	8008588 <__swhatbuf_r>
 80085f8:	9900      	ldr	r1, [sp, #0]
 80085fa:	4605      	mov	r5, r0
 80085fc:	4630      	mov	r0, r6
 80085fe:	f000 f8a5 	bl	800874c <_malloc_r>
 8008602:	b948      	cbnz	r0, 8008618 <__smakebuf_r+0x44>
 8008604:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008608:	059a      	lsls	r2, r3, #22
 800860a:	d4ef      	bmi.n	80085ec <__smakebuf_r+0x18>
 800860c:	f023 0303 	bic.w	r3, r3, #3
 8008610:	f043 0302 	orr.w	r3, r3, #2
 8008614:	81a3      	strh	r3, [r4, #12]
 8008616:	e7e3      	b.n	80085e0 <__smakebuf_r+0xc>
 8008618:	4b0d      	ldr	r3, [pc, #52]	; (8008650 <__smakebuf_r+0x7c>)
 800861a:	62b3      	str	r3, [r6, #40]	; 0x28
 800861c:	89a3      	ldrh	r3, [r4, #12]
 800861e:	6020      	str	r0, [r4, #0]
 8008620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008624:	81a3      	strh	r3, [r4, #12]
 8008626:	9b00      	ldr	r3, [sp, #0]
 8008628:	6163      	str	r3, [r4, #20]
 800862a:	9b01      	ldr	r3, [sp, #4]
 800862c:	6120      	str	r0, [r4, #16]
 800862e:	b15b      	cbz	r3, 8008648 <__smakebuf_r+0x74>
 8008630:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008634:	4630      	mov	r0, r6
 8008636:	f000 faa5 	bl	8008b84 <_isatty_r>
 800863a:	b128      	cbz	r0, 8008648 <__smakebuf_r+0x74>
 800863c:	89a3      	ldrh	r3, [r4, #12]
 800863e:	f023 0303 	bic.w	r3, r3, #3
 8008642:	f043 0301 	orr.w	r3, r3, #1
 8008646:	81a3      	strh	r3, [r4, #12]
 8008648:	89a0      	ldrh	r0, [r4, #12]
 800864a:	4305      	orrs	r5, r0
 800864c:	81a5      	strh	r5, [r4, #12]
 800864e:	e7cd      	b.n	80085ec <__smakebuf_r+0x18>
 8008650:	08008095 	.word	0x08008095

08008654 <malloc>:
 8008654:	4b02      	ldr	r3, [pc, #8]	; (8008660 <malloc+0xc>)
 8008656:	4601      	mov	r1, r0
 8008658:	6818      	ldr	r0, [r3, #0]
 800865a:	f000 b877 	b.w	800874c <_malloc_r>
 800865e:	bf00      	nop
 8008660:	24000020 	.word	0x24000020

08008664 <memset>:
 8008664:	4402      	add	r2, r0
 8008666:	4603      	mov	r3, r0
 8008668:	4293      	cmp	r3, r2
 800866a:	d100      	bne.n	800866e <memset+0xa>
 800866c:	4770      	bx	lr
 800866e:	f803 1b01 	strb.w	r1, [r3], #1
 8008672:	e7f9      	b.n	8008668 <memset+0x4>

08008674 <_free_r>:
 8008674:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008676:	2900      	cmp	r1, #0
 8008678:	d044      	beq.n	8008704 <_free_r+0x90>
 800867a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800867e:	9001      	str	r0, [sp, #4]
 8008680:	2b00      	cmp	r3, #0
 8008682:	f1a1 0404 	sub.w	r4, r1, #4
 8008686:	bfb8      	it	lt
 8008688:	18e4      	addlt	r4, r4, r3
 800868a:	f000 fa9d 	bl	8008bc8 <__malloc_lock>
 800868e:	4a1e      	ldr	r2, [pc, #120]	; (8008708 <_free_r+0x94>)
 8008690:	9801      	ldr	r0, [sp, #4]
 8008692:	6813      	ldr	r3, [r2, #0]
 8008694:	b933      	cbnz	r3, 80086a4 <_free_r+0x30>
 8008696:	6063      	str	r3, [r4, #4]
 8008698:	6014      	str	r4, [r2, #0]
 800869a:	b003      	add	sp, #12
 800869c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80086a0:	f000 ba98 	b.w	8008bd4 <__malloc_unlock>
 80086a4:	42a3      	cmp	r3, r4
 80086a6:	d908      	bls.n	80086ba <_free_r+0x46>
 80086a8:	6825      	ldr	r5, [r4, #0]
 80086aa:	1961      	adds	r1, r4, r5
 80086ac:	428b      	cmp	r3, r1
 80086ae:	bf01      	itttt	eq
 80086b0:	6819      	ldreq	r1, [r3, #0]
 80086b2:	685b      	ldreq	r3, [r3, #4]
 80086b4:	1949      	addeq	r1, r1, r5
 80086b6:	6021      	streq	r1, [r4, #0]
 80086b8:	e7ed      	b.n	8008696 <_free_r+0x22>
 80086ba:	461a      	mov	r2, r3
 80086bc:	685b      	ldr	r3, [r3, #4]
 80086be:	b10b      	cbz	r3, 80086c4 <_free_r+0x50>
 80086c0:	42a3      	cmp	r3, r4
 80086c2:	d9fa      	bls.n	80086ba <_free_r+0x46>
 80086c4:	6811      	ldr	r1, [r2, #0]
 80086c6:	1855      	adds	r5, r2, r1
 80086c8:	42a5      	cmp	r5, r4
 80086ca:	d10b      	bne.n	80086e4 <_free_r+0x70>
 80086cc:	6824      	ldr	r4, [r4, #0]
 80086ce:	4421      	add	r1, r4
 80086d0:	1854      	adds	r4, r2, r1
 80086d2:	42a3      	cmp	r3, r4
 80086d4:	6011      	str	r1, [r2, #0]
 80086d6:	d1e0      	bne.n	800869a <_free_r+0x26>
 80086d8:	681c      	ldr	r4, [r3, #0]
 80086da:	685b      	ldr	r3, [r3, #4]
 80086dc:	6053      	str	r3, [r2, #4]
 80086de:	4421      	add	r1, r4
 80086e0:	6011      	str	r1, [r2, #0]
 80086e2:	e7da      	b.n	800869a <_free_r+0x26>
 80086e4:	d902      	bls.n	80086ec <_free_r+0x78>
 80086e6:	230c      	movs	r3, #12
 80086e8:	6003      	str	r3, [r0, #0]
 80086ea:	e7d6      	b.n	800869a <_free_r+0x26>
 80086ec:	6825      	ldr	r5, [r4, #0]
 80086ee:	1961      	adds	r1, r4, r5
 80086f0:	428b      	cmp	r3, r1
 80086f2:	bf04      	itt	eq
 80086f4:	6819      	ldreq	r1, [r3, #0]
 80086f6:	685b      	ldreq	r3, [r3, #4]
 80086f8:	6063      	str	r3, [r4, #4]
 80086fa:	bf04      	itt	eq
 80086fc:	1949      	addeq	r1, r1, r5
 80086fe:	6021      	streq	r1, [r4, #0]
 8008700:	6054      	str	r4, [r2, #4]
 8008702:	e7ca      	b.n	800869a <_free_r+0x26>
 8008704:	b003      	add	sp, #12
 8008706:	bd30      	pop	{r4, r5, pc}
 8008708:	24000440 	.word	0x24000440

0800870c <sbrk_aligned>:
 800870c:	b570      	push	{r4, r5, r6, lr}
 800870e:	4e0e      	ldr	r6, [pc, #56]	; (8008748 <sbrk_aligned+0x3c>)
 8008710:	460c      	mov	r4, r1
 8008712:	6831      	ldr	r1, [r6, #0]
 8008714:	4605      	mov	r5, r0
 8008716:	b911      	cbnz	r1, 800871e <sbrk_aligned+0x12>
 8008718:	f000 f8b6 	bl	8008888 <_sbrk_r>
 800871c:	6030      	str	r0, [r6, #0]
 800871e:	4621      	mov	r1, r4
 8008720:	4628      	mov	r0, r5
 8008722:	f000 f8b1 	bl	8008888 <_sbrk_r>
 8008726:	1c43      	adds	r3, r0, #1
 8008728:	d00a      	beq.n	8008740 <sbrk_aligned+0x34>
 800872a:	1cc4      	adds	r4, r0, #3
 800872c:	f024 0403 	bic.w	r4, r4, #3
 8008730:	42a0      	cmp	r0, r4
 8008732:	d007      	beq.n	8008744 <sbrk_aligned+0x38>
 8008734:	1a21      	subs	r1, r4, r0
 8008736:	4628      	mov	r0, r5
 8008738:	f000 f8a6 	bl	8008888 <_sbrk_r>
 800873c:	3001      	adds	r0, #1
 800873e:	d101      	bne.n	8008744 <sbrk_aligned+0x38>
 8008740:	f04f 34ff 	mov.w	r4, #4294967295
 8008744:	4620      	mov	r0, r4
 8008746:	bd70      	pop	{r4, r5, r6, pc}
 8008748:	24000444 	.word	0x24000444

0800874c <_malloc_r>:
 800874c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008750:	1ccd      	adds	r5, r1, #3
 8008752:	f025 0503 	bic.w	r5, r5, #3
 8008756:	3508      	adds	r5, #8
 8008758:	2d0c      	cmp	r5, #12
 800875a:	bf38      	it	cc
 800875c:	250c      	movcc	r5, #12
 800875e:	2d00      	cmp	r5, #0
 8008760:	4607      	mov	r7, r0
 8008762:	db01      	blt.n	8008768 <_malloc_r+0x1c>
 8008764:	42a9      	cmp	r1, r5
 8008766:	d905      	bls.n	8008774 <_malloc_r+0x28>
 8008768:	230c      	movs	r3, #12
 800876a:	603b      	str	r3, [r7, #0]
 800876c:	2600      	movs	r6, #0
 800876e:	4630      	mov	r0, r6
 8008770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008774:	4e2e      	ldr	r6, [pc, #184]	; (8008830 <_malloc_r+0xe4>)
 8008776:	f000 fa27 	bl	8008bc8 <__malloc_lock>
 800877a:	6833      	ldr	r3, [r6, #0]
 800877c:	461c      	mov	r4, r3
 800877e:	bb34      	cbnz	r4, 80087ce <_malloc_r+0x82>
 8008780:	4629      	mov	r1, r5
 8008782:	4638      	mov	r0, r7
 8008784:	f7ff ffc2 	bl	800870c <sbrk_aligned>
 8008788:	1c43      	adds	r3, r0, #1
 800878a:	4604      	mov	r4, r0
 800878c:	d14d      	bne.n	800882a <_malloc_r+0xde>
 800878e:	6834      	ldr	r4, [r6, #0]
 8008790:	4626      	mov	r6, r4
 8008792:	2e00      	cmp	r6, #0
 8008794:	d140      	bne.n	8008818 <_malloc_r+0xcc>
 8008796:	6823      	ldr	r3, [r4, #0]
 8008798:	4631      	mov	r1, r6
 800879a:	4638      	mov	r0, r7
 800879c:	eb04 0803 	add.w	r8, r4, r3
 80087a0:	f000 f872 	bl	8008888 <_sbrk_r>
 80087a4:	4580      	cmp	r8, r0
 80087a6:	d13a      	bne.n	800881e <_malloc_r+0xd2>
 80087a8:	6821      	ldr	r1, [r4, #0]
 80087aa:	3503      	adds	r5, #3
 80087ac:	1a6d      	subs	r5, r5, r1
 80087ae:	f025 0503 	bic.w	r5, r5, #3
 80087b2:	3508      	adds	r5, #8
 80087b4:	2d0c      	cmp	r5, #12
 80087b6:	bf38      	it	cc
 80087b8:	250c      	movcc	r5, #12
 80087ba:	4629      	mov	r1, r5
 80087bc:	4638      	mov	r0, r7
 80087be:	f7ff ffa5 	bl	800870c <sbrk_aligned>
 80087c2:	3001      	adds	r0, #1
 80087c4:	d02b      	beq.n	800881e <_malloc_r+0xd2>
 80087c6:	6823      	ldr	r3, [r4, #0]
 80087c8:	442b      	add	r3, r5
 80087ca:	6023      	str	r3, [r4, #0]
 80087cc:	e00e      	b.n	80087ec <_malloc_r+0xa0>
 80087ce:	6822      	ldr	r2, [r4, #0]
 80087d0:	1b52      	subs	r2, r2, r5
 80087d2:	d41e      	bmi.n	8008812 <_malloc_r+0xc6>
 80087d4:	2a0b      	cmp	r2, #11
 80087d6:	d916      	bls.n	8008806 <_malloc_r+0xba>
 80087d8:	1961      	adds	r1, r4, r5
 80087da:	42a3      	cmp	r3, r4
 80087dc:	6025      	str	r5, [r4, #0]
 80087de:	bf18      	it	ne
 80087e0:	6059      	strne	r1, [r3, #4]
 80087e2:	6863      	ldr	r3, [r4, #4]
 80087e4:	bf08      	it	eq
 80087e6:	6031      	streq	r1, [r6, #0]
 80087e8:	5162      	str	r2, [r4, r5]
 80087ea:	604b      	str	r3, [r1, #4]
 80087ec:	4638      	mov	r0, r7
 80087ee:	f104 060b 	add.w	r6, r4, #11
 80087f2:	f000 f9ef 	bl	8008bd4 <__malloc_unlock>
 80087f6:	f026 0607 	bic.w	r6, r6, #7
 80087fa:	1d23      	adds	r3, r4, #4
 80087fc:	1af2      	subs	r2, r6, r3
 80087fe:	d0b6      	beq.n	800876e <_malloc_r+0x22>
 8008800:	1b9b      	subs	r3, r3, r6
 8008802:	50a3      	str	r3, [r4, r2]
 8008804:	e7b3      	b.n	800876e <_malloc_r+0x22>
 8008806:	6862      	ldr	r2, [r4, #4]
 8008808:	42a3      	cmp	r3, r4
 800880a:	bf0c      	ite	eq
 800880c:	6032      	streq	r2, [r6, #0]
 800880e:	605a      	strne	r2, [r3, #4]
 8008810:	e7ec      	b.n	80087ec <_malloc_r+0xa0>
 8008812:	4623      	mov	r3, r4
 8008814:	6864      	ldr	r4, [r4, #4]
 8008816:	e7b2      	b.n	800877e <_malloc_r+0x32>
 8008818:	4634      	mov	r4, r6
 800881a:	6876      	ldr	r6, [r6, #4]
 800881c:	e7b9      	b.n	8008792 <_malloc_r+0x46>
 800881e:	230c      	movs	r3, #12
 8008820:	603b      	str	r3, [r7, #0]
 8008822:	4638      	mov	r0, r7
 8008824:	f000 f9d6 	bl	8008bd4 <__malloc_unlock>
 8008828:	e7a1      	b.n	800876e <_malloc_r+0x22>
 800882a:	6025      	str	r5, [r4, #0]
 800882c:	e7de      	b.n	80087ec <_malloc_r+0xa0>
 800882e:	bf00      	nop
 8008830:	24000440 	.word	0x24000440

08008834 <_open_r>:
 8008834:	b538      	push	{r3, r4, r5, lr}
 8008836:	4d07      	ldr	r5, [pc, #28]	; (8008854 <_open_r+0x20>)
 8008838:	4604      	mov	r4, r0
 800883a:	4608      	mov	r0, r1
 800883c:	4611      	mov	r1, r2
 800883e:	2200      	movs	r2, #0
 8008840:	602a      	str	r2, [r5, #0]
 8008842:	461a      	mov	r2, r3
 8008844:	f7ff f9aa 	bl	8007b9c <_open>
 8008848:	1c43      	adds	r3, r0, #1
 800884a:	d102      	bne.n	8008852 <_open_r+0x1e>
 800884c:	682b      	ldr	r3, [r5, #0]
 800884e:	b103      	cbz	r3, 8008852 <_open_r+0x1e>
 8008850:	6023      	str	r3, [r4, #0]
 8008852:	bd38      	pop	{r3, r4, r5, pc}
 8008854:	24000448 	.word	0x24000448

08008858 <iprintf>:
 8008858:	b40f      	push	{r0, r1, r2, r3}
 800885a:	4b0a      	ldr	r3, [pc, #40]	; (8008884 <iprintf+0x2c>)
 800885c:	b513      	push	{r0, r1, r4, lr}
 800885e:	681c      	ldr	r4, [r3, #0]
 8008860:	b124      	cbz	r4, 800886c <iprintf+0x14>
 8008862:	69a3      	ldr	r3, [r4, #24]
 8008864:	b913      	cbnz	r3, 800886c <iprintf+0x14>
 8008866:	4620      	mov	r0, r4
 8008868:	f7ff fc48 	bl	80080fc <__sinit>
 800886c:	ab05      	add	r3, sp, #20
 800886e:	9a04      	ldr	r2, [sp, #16]
 8008870:	68a1      	ldr	r1, [r4, #8]
 8008872:	9301      	str	r3, [sp, #4]
 8008874:	4620      	mov	r0, r4
 8008876:	f000 f9dd 	bl	8008c34 <_vfiprintf_r>
 800887a:	b002      	add	sp, #8
 800887c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008880:	b004      	add	sp, #16
 8008882:	4770      	bx	lr
 8008884:	24000020 	.word	0x24000020

08008888 <_sbrk_r>:
 8008888:	b538      	push	{r3, r4, r5, lr}
 800888a:	4d06      	ldr	r5, [pc, #24]	; (80088a4 <_sbrk_r+0x1c>)
 800888c:	2300      	movs	r3, #0
 800888e:	4604      	mov	r4, r0
 8008890:	4608      	mov	r0, r1
 8008892:	602b      	str	r3, [r5, #0]
 8008894:	f7f9 f856 	bl	8001944 <_sbrk>
 8008898:	1c43      	adds	r3, r0, #1
 800889a:	d102      	bne.n	80088a2 <_sbrk_r+0x1a>
 800889c:	682b      	ldr	r3, [r5, #0]
 800889e:	b103      	cbz	r3, 80088a2 <_sbrk_r+0x1a>
 80088a0:	6023      	str	r3, [r4, #0]
 80088a2:	bd38      	pop	{r3, r4, r5, pc}
 80088a4:	24000448 	.word	0x24000448

080088a8 <__sread>:
 80088a8:	b510      	push	{r4, lr}
 80088aa:	460c      	mov	r4, r1
 80088ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088b0:	f000 fc84 	bl	80091bc <_read_r>
 80088b4:	2800      	cmp	r0, #0
 80088b6:	bfab      	itete	ge
 80088b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80088ba:	89a3      	ldrhlt	r3, [r4, #12]
 80088bc:	181b      	addge	r3, r3, r0
 80088be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80088c2:	bfac      	ite	ge
 80088c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80088c6:	81a3      	strhlt	r3, [r4, #12]
 80088c8:	bd10      	pop	{r4, pc}

080088ca <__swrite>:
 80088ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088ce:	461f      	mov	r7, r3
 80088d0:	898b      	ldrh	r3, [r1, #12]
 80088d2:	05db      	lsls	r3, r3, #23
 80088d4:	4605      	mov	r5, r0
 80088d6:	460c      	mov	r4, r1
 80088d8:	4616      	mov	r6, r2
 80088da:	d505      	bpl.n	80088e8 <__swrite+0x1e>
 80088dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088e0:	2302      	movs	r3, #2
 80088e2:	2200      	movs	r2, #0
 80088e4:	f000 f95e 	bl	8008ba4 <_lseek_r>
 80088e8:	89a3      	ldrh	r3, [r4, #12]
 80088ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80088ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80088f2:	81a3      	strh	r3, [r4, #12]
 80088f4:	4632      	mov	r2, r6
 80088f6:	463b      	mov	r3, r7
 80088f8:	4628      	mov	r0, r5
 80088fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088fe:	f000 b869 	b.w	80089d4 <_write_r>

08008902 <__sseek>:
 8008902:	b510      	push	{r4, lr}
 8008904:	460c      	mov	r4, r1
 8008906:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800890a:	f000 f94b 	bl	8008ba4 <_lseek_r>
 800890e:	1c43      	adds	r3, r0, #1
 8008910:	89a3      	ldrh	r3, [r4, #12]
 8008912:	bf15      	itete	ne
 8008914:	6560      	strne	r0, [r4, #84]	; 0x54
 8008916:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800891a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800891e:	81a3      	strheq	r3, [r4, #12]
 8008920:	bf18      	it	ne
 8008922:	81a3      	strhne	r3, [r4, #12]
 8008924:	bd10      	pop	{r4, pc}

08008926 <__sclose>:
 8008926:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800892a:	f000 b8d3 	b.w	8008ad4 <_close_r>
	...

08008930 <__swbuf_r>:
 8008930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008932:	460e      	mov	r6, r1
 8008934:	4614      	mov	r4, r2
 8008936:	4605      	mov	r5, r0
 8008938:	b118      	cbz	r0, 8008942 <__swbuf_r+0x12>
 800893a:	6983      	ldr	r3, [r0, #24]
 800893c:	b90b      	cbnz	r3, 8008942 <__swbuf_r+0x12>
 800893e:	f7ff fbdd 	bl	80080fc <__sinit>
 8008942:	4b21      	ldr	r3, [pc, #132]	; (80089c8 <__swbuf_r+0x98>)
 8008944:	429c      	cmp	r4, r3
 8008946:	d12b      	bne.n	80089a0 <__swbuf_r+0x70>
 8008948:	686c      	ldr	r4, [r5, #4]
 800894a:	69a3      	ldr	r3, [r4, #24]
 800894c:	60a3      	str	r3, [r4, #8]
 800894e:	89a3      	ldrh	r3, [r4, #12]
 8008950:	071a      	lsls	r2, r3, #28
 8008952:	d52f      	bpl.n	80089b4 <__swbuf_r+0x84>
 8008954:	6923      	ldr	r3, [r4, #16]
 8008956:	b36b      	cbz	r3, 80089b4 <__swbuf_r+0x84>
 8008958:	6923      	ldr	r3, [r4, #16]
 800895a:	6820      	ldr	r0, [r4, #0]
 800895c:	1ac0      	subs	r0, r0, r3
 800895e:	6963      	ldr	r3, [r4, #20]
 8008960:	b2f6      	uxtb	r6, r6
 8008962:	4283      	cmp	r3, r0
 8008964:	4637      	mov	r7, r6
 8008966:	dc04      	bgt.n	8008972 <__swbuf_r+0x42>
 8008968:	4621      	mov	r1, r4
 800896a:	4628      	mov	r0, r5
 800896c:	f7ff fb32 	bl	8007fd4 <_fflush_r>
 8008970:	bb30      	cbnz	r0, 80089c0 <__swbuf_r+0x90>
 8008972:	68a3      	ldr	r3, [r4, #8]
 8008974:	3b01      	subs	r3, #1
 8008976:	60a3      	str	r3, [r4, #8]
 8008978:	6823      	ldr	r3, [r4, #0]
 800897a:	1c5a      	adds	r2, r3, #1
 800897c:	6022      	str	r2, [r4, #0]
 800897e:	701e      	strb	r6, [r3, #0]
 8008980:	6963      	ldr	r3, [r4, #20]
 8008982:	3001      	adds	r0, #1
 8008984:	4283      	cmp	r3, r0
 8008986:	d004      	beq.n	8008992 <__swbuf_r+0x62>
 8008988:	89a3      	ldrh	r3, [r4, #12]
 800898a:	07db      	lsls	r3, r3, #31
 800898c:	d506      	bpl.n	800899c <__swbuf_r+0x6c>
 800898e:	2e0a      	cmp	r6, #10
 8008990:	d104      	bne.n	800899c <__swbuf_r+0x6c>
 8008992:	4621      	mov	r1, r4
 8008994:	4628      	mov	r0, r5
 8008996:	f7ff fb1d 	bl	8007fd4 <_fflush_r>
 800899a:	b988      	cbnz	r0, 80089c0 <__swbuf_r+0x90>
 800899c:	4638      	mov	r0, r7
 800899e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089a0:	4b0a      	ldr	r3, [pc, #40]	; (80089cc <__swbuf_r+0x9c>)
 80089a2:	429c      	cmp	r4, r3
 80089a4:	d101      	bne.n	80089aa <__swbuf_r+0x7a>
 80089a6:	68ac      	ldr	r4, [r5, #8]
 80089a8:	e7cf      	b.n	800894a <__swbuf_r+0x1a>
 80089aa:	4b09      	ldr	r3, [pc, #36]	; (80089d0 <__swbuf_r+0xa0>)
 80089ac:	429c      	cmp	r4, r3
 80089ae:	bf08      	it	eq
 80089b0:	68ec      	ldreq	r4, [r5, #12]
 80089b2:	e7ca      	b.n	800894a <__swbuf_r+0x1a>
 80089b4:	4621      	mov	r1, r4
 80089b6:	4628      	mov	r0, r5
 80089b8:	f000 f81e 	bl	80089f8 <__swsetup_r>
 80089bc:	2800      	cmp	r0, #0
 80089be:	d0cb      	beq.n	8008958 <__swbuf_r+0x28>
 80089c0:	f04f 37ff 	mov.w	r7, #4294967295
 80089c4:	e7ea      	b.n	800899c <__swbuf_r+0x6c>
 80089c6:	bf00      	nop
 80089c8:	08009f3c 	.word	0x08009f3c
 80089cc:	08009f5c 	.word	0x08009f5c
 80089d0:	08009f1c 	.word	0x08009f1c

080089d4 <_write_r>:
 80089d4:	b538      	push	{r3, r4, r5, lr}
 80089d6:	4d07      	ldr	r5, [pc, #28]	; (80089f4 <_write_r+0x20>)
 80089d8:	4604      	mov	r4, r0
 80089da:	4608      	mov	r0, r1
 80089dc:	4611      	mov	r1, r2
 80089de:	2200      	movs	r2, #0
 80089e0:	602a      	str	r2, [r5, #0]
 80089e2:	461a      	mov	r2, r3
 80089e4:	f7fe ffdd 	bl	80079a2 <_write>
 80089e8:	1c43      	adds	r3, r0, #1
 80089ea:	d102      	bne.n	80089f2 <_write_r+0x1e>
 80089ec:	682b      	ldr	r3, [r5, #0]
 80089ee:	b103      	cbz	r3, 80089f2 <_write_r+0x1e>
 80089f0:	6023      	str	r3, [r4, #0]
 80089f2:	bd38      	pop	{r3, r4, r5, pc}
 80089f4:	24000448 	.word	0x24000448

080089f8 <__swsetup_r>:
 80089f8:	4b32      	ldr	r3, [pc, #200]	; (8008ac4 <__swsetup_r+0xcc>)
 80089fa:	b570      	push	{r4, r5, r6, lr}
 80089fc:	681d      	ldr	r5, [r3, #0]
 80089fe:	4606      	mov	r6, r0
 8008a00:	460c      	mov	r4, r1
 8008a02:	b125      	cbz	r5, 8008a0e <__swsetup_r+0x16>
 8008a04:	69ab      	ldr	r3, [r5, #24]
 8008a06:	b913      	cbnz	r3, 8008a0e <__swsetup_r+0x16>
 8008a08:	4628      	mov	r0, r5
 8008a0a:	f7ff fb77 	bl	80080fc <__sinit>
 8008a0e:	4b2e      	ldr	r3, [pc, #184]	; (8008ac8 <__swsetup_r+0xd0>)
 8008a10:	429c      	cmp	r4, r3
 8008a12:	d10f      	bne.n	8008a34 <__swsetup_r+0x3c>
 8008a14:	686c      	ldr	r4, [r5, #4]
 8008a16:	89a3      	ldrh	r3, [r4, #12]
 8008a18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008a1c:	0719      	lsls	r1, r3, #28
 8008a1e:	d42c      	bmi.n	8008a7a <__swsetup_r+0x82>
 8008a20:	06dd      	lsls	r5, r3, #27
 8008a22:	d411      	bmi.n	8008a48 <__swsetup_r+0x50>
 8008a24:	2309      	movs	r3, #9
 8008a26:	6033      	str	r3, [r6, #0]
 8008a28:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008a2c:	81a3      	strh	r3, [r4, #12]
 8008a2e:	f04f 30ff 	mov.w	r0, #4294967295
 8008a32:	e03e      	b.n	8008ab2 <__swsetup_r+0xba>
 8008a34:	4b25      	ldr	r3, [pc, #148]	; (8008acc <__swsetup_r+0xd4>)
 8008a36:	429c      	cmp	r4, r3
 8008a38:	d101      	bne.n	8008a3e <__swsetup_r+0x46>
 8008a3a:	68ac      	ldr	r4, [r5, #8]
 8008a3c:	e7eb      	b.n	8008a16 <__swsetup_r+0x1e>
 8008a3e:	4b24      	ldr	r3, [pc, #144]	; (8008ad0 <__swsetup_r+0xd8>)
 8008a40:	429c      	cmp	r4, r3
 8008a42:	bf08      	it	eq
 8008a44:	68ec      	ldreq	r4, [r5, #12]
 8008a46:	e7e6      	b.n	8008a16 <__swsetup_r+0x1e>
 8008a48:	0758      	lsls	r0, r3, #29
 8008a4a:	d512      	bpl.n	8008a72 <__swsetup_r+0x7a>
 8008a4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a4e:	b141      	cbz	r1, 8008a62 <__swsetup_r+0x6a>
 8008a50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a54:	4299      	cmp	r1, r3
 8008a56:	d002      	beq.n	8008a5e <__swsetup_r+0x66>
 8008a58:	4630      	mov	r0, r6
 8008a5a:	f7ff fe0b 	bl	8008674 <_free_r>
 8008a5e:	2300      	movs	r3, #0
 8008a60:	6363      	str	r3, [r4, #52]	; 0x34
 8008a62:	89a3      	ldrh	r3, [r4, #12]
 8008a64:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008a68:	81a3      	strh	r3, [r4, #12]
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	6063      	str	r3, [r4, #4]
 8008a6e:	6923      	ldr	r3, [r4, #16]
 8008a70:	6023      	str	r3, [r4, #0]
 8008a72:	89a3      	ldrh	r3, [r4, #12]
 8008a74:	f043 0308 	orr.w	r3, r3, #8
 8008a78:	81a3      	strh	r3, [r4, #12]
 8008a7a:	6923      	ldr	r3, [r4, #16]
 8008a7c:	b94b      	cbnz	r3, 8008a92 <__swsetup_r+0x9a>
 8008a7e:	89a3      	ldrh	r3, [r4, #12]
 8008a80:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008a84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a88:	d003      	beq.n	8008a92 <__swsetup_r+0x9a>
 8008a8a:	4621      	mov	r1, r4
 8008a8c:	4630      	mov	r0, r6
 8008a8e:	f7ff fda1 	bl	80085d4 <__smakebuf_r>
 8008a92:	89a0      	ldrh	r0, [r4, #12]
 8008a94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008a98:	f010 0301 	ands.w	r3, r0, #1
 8008a9c:	d00a      	beq.n	8008ab4 <__swsetup_r+0xbc>
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	60a3      	str	r3, [r4, #8]
 8008aa2:	6963      	ldr	r3, [r4, #20]
 8008aa4:	425b      	negs	r3, r3
 8008aa6:	61a3      	str	r3, [r4, #24]
 8008aa8:	6923      	ldr	r3, [r4, #16]
 8008aaa:	b943      	cbnz	r3, 8008abe <__swsetup_r+0xc6>
 8008aac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008ab0:	d1ba      	bne.n	8008a28 <__swsetup_r+0x30>
 8008ab2:	bd70      	pop	{r4, r5, r6, pc}
 8008ab4:	0781      	lsls	r1, r0, #30
 8008ab6:	bf58      	it	pl
 8008ab8:	6963      	ldrpl	r3, [r4, #20]
 8008aba:	60a3      	str	r3, [r4, #8]
 8008abc:	e7f4      	b.n	8008aa8 <__swsetup_r+0xb0>
 8008abe:	2000      	movs	r0, #0
 8008ac0:	e7f7      	b.n	8008ab2 <__swsetup_r+0xba>
 8008ac2:	bf00      	nop
 8008ac4:	24000020 	.word	0x24000020
 8008ac8:	08009f3c 	.word	0x08009f3c
 8008acc:	08009f5c 	.word	0x08009f5c
 8008ad0:	08009f1c 	.word	0x08009f1c

08008ad4 <_close_r>:
 8008ad4:	b538      	push	{r3, r4, r5, lr}
 8008ad6:	4d06      	ldr	r5, [pc, #24]	; (8008af0 <_close_r+0x1c>)
 8008ad8:	2300      	movs	r3, #0
 8008ada:	4604      	mov	r4, r0
 8008adc:	4608      	mov	r0, r1
 8008ade:	602b      	str	r3, [r5, #0]
 8008ae0:	f7fe ff90 	bl	8007a04 <_close>
 8008ae4:	1c43      	adds	r3, r0, #1
 8008ae6:	d102      	bne.n	8008aee <_close_r+0x1a>
 8008ae8:	682b      	ldr	r3, [r5, #0]
 8008aea:	b103      	cbz	r3, 8008aee <_close_r+0x1a>
 8008aec:	6023      	str	r3, [r4, #0]
 8008aee:	bd38      	pop	{r3, r4, r5, pc}
 8008af0:	24000448 	.word	0x24000448

08008af4 <__sflags>:
 8008af4:	780b      	ldrb	r3, [r1, #0]
 8008af6:	2b72      	cmp	r3, #114	; 0x72
 8008af8:	b530      	push	{r4, r5, lr}
 8008afa:	d022      	beq.n	8008b42 <__sflags+0x4e>
 8008afc:	2b77      	cmp	r3, #119	; 0x77
 8008afe:	d024      	beq.n	8008b4a <__sflags+0x56>
 8008b00:	2b61      	cmp	r3, #97	; 0x61
 8008b02:	d027      	beq.n	8008b54 <__sflags+0x60>
 8008b04:	2316      	movs	r3, #22
 8008b06:	6003      	str	r3, [r0, #0]
 8008b08:	2000      	movs	r0, #0
 8008b0a:	bd30      	pop	{r4, r5, pc}
 8008b0c:	2d62      	cmp	r5, #98	; 0x62
 8008b0e:	d012      	beq.n	8008b36 <__sflags+0x42>
 8008b10:	2d78      	cmp	r5, #120	; 0x78
 8008b12:	d013      	beq.n	8008b3c <__sflags+0x48>
 8008b14:	2d2b      	cmp	r5, #43	; 0x2b
 8008b16:	d107      	bne.n	8008b28 <__sflags+0x34>
 8008b18:	f020 001c 	bic.w	r0, r0, #28
 8008b1c:	f023 0303 	bic.w	r3, r3, #3
 8008b20:	f040 0010 	orr.w	r0, r0, #16
 8008b24:	f043 0302 	orr.w	r3, r3, #2
 8008b28:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8008b2c:	2d00      	cmp	r5, #0
 8008b2e:	d1ed      	bne.n	8008b0c <__sflags+0x18>
 8008b30:	4323      	orrs	r3, r4
 8008b32:	6013      	str	r3, [r2, #0]
 8008b34:	e7e9      	b.n	8008b0a <__sflags+0x16>
 8008b36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b3a:	e7f5      	b.n	8008b28 <__sflags+0x34>
 8008b3c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008b40:	e7f2      	b.n	8008b28 <__sflags+0x34>
 8008b42:	2400      	movs	r4, #0
 8008b44:	4623      	mov	r3, r4
 8008b46:	2004      	movs	r0, #4
 8008b48:	e7ee      	b.n	8008b28 <__sflags+0x34>
 8008b4a:	f44f 64c0 	mov.w	r4, #1536	; 0x600
 8008b4e:	2301      	movs	r3, #1
 8008b50:	2008      	movs	r0, #8
 8008b52:	e7e9      	b.n	8008b28 <__sflags+0x34>
 8008b54:	f44f 7402 	mov.w	r4, #520	; 0x208
 8008b58:	2301      	movs	r3, #1
 8008b5a:	f44f 7084 	mov.w	r0, #264	; 0x108
 8008b5e:	e7e3      	b.n	8008b28 <__sflags+0x34>

08008b60 <_fstat_r>:
 8008b60:	b538      	push	{r3, r4, r5, lr}
 8008b62:	4d07      	ldr	r5, [pc, #28]	; (8008b80 <_fstat_r+0x20>)
 8008b64:	2300      	movs	r3, #0
 8008b66:	4604      	mov	r4, r0
 8008b68:	4608      	mov	r0, r1
 8008b6a:	4611      	mov	r1, r2
 8008b6c:	602b      	str	r3, [r5, #0]
 8008b6e:	f7fe ff90 	bl	8007a92 <_fstat>
 8008b72:	1c43      	adds	r3, r0, #1
 8008b74:	d102      	bne.n	8008b7c <_fstat_r+0x1c>
 8008b76:	682b      	ldr	r3, [r5, #0]
 8008b78:	b103      	cbz	r3, 8008b7c <_fstat_r+0x1c>
 8008b7a:	6023      	str	r3, [r4, #0]
 8008b7c:	bd38      	pop	{r3, r4, r5, pc}
 8008b7e:	bf00      	nop
 8008b80:	24000448 	.word	0x24000448

08008b84 <_isatty_r>:
 8008b84:	b538      	push	{r3, r4, r5, lr}
 8008b86:	4d06      	ldr	r5, [pc, #24]	; (8008ba0 <_isatty_r+0x1c>)
 8008b88:	2300      	movs	r3, #0
 8008b8a:	4604      	mov	r4, r0
 8008b8c:	4608      	mov	r0, r1
 8008b8e:	602b      	str	r3, [r5, #0]
 8008b90:	f7ff f8f0 	bl	8007d74 <_isatty>
 8008b94:	1c43      	adds	r3, r0, #1
 8008b96:	d102      	bne.n	8008b9e <_isatty_r+0x1a>
 8008b98:	682b      	ldr	r3, [r5, #0]
 8008b9a:	b103      	cbz	r3, 8008b9e <_isatty_r+0x1a>
 8008b9c:	6023      	str	r3, [r4, #0]
 8008b9e:	bd38      	pop	{r3, r4, r5, pc}
 8008ba0:	24000448 	.word	0x24000448

08008ba4 <_lseek_r>:
 8008ba4:	b538      	push	{r3, r4, r5, lr}
 8008ba6:	4d07      	ldr	r5, [pc, #28]	; (8008bc4 <_lseek_r+0x20>)
 8008ba8:	4604      	mov	r4, r0
 8008baa:	4608      	mov	r0, r1
 8008bac:	4611      	mov	r1, r2
 8008bae:	2200      	movs	r2, #0
 8008bb0:	602a      	str	r2, [r5, #0]
 8008bb2:	461a      	mov	r2, r3
 8008bb4:	f7fe fee3 	bl	800797e <_lseek>
 8008bb8:	1c43      	adds	r3, r0, #1
 8008bba:	d102      	bne.n	8008bc2 <_lseek_r+0x1e>
 8008bbc:	682b      	ldr	r3, [r5, #0]
 8008bbe:	b103      	cbz	r3, 8008bc2 <_lseek_r+0x1e>
 8008bc0:	6023      	str	r3, [r4, #0]
 8008bc2:	bd38      	pop	{r3, r4, r5, pc}
 8008bc4:	24000448 	.word	0x24000448

08008bc8 <__malloc_lock>:
 8008bc8:	4801      	ldr	r0, [pc, #4]	; (8008bd0 <__malloc_lock+0x8>)
 8008bca:	f7ff bcdb 	b.w	8008584 <__retarget_lock_acquire_recursive>
 8008bce:	bf00      	nop
 8008bd0:	2400043c 	.word	0x2400043c

08008bd4 <__malloc_unlock>:
 8008bd4:	4801      	ldr	r0, [pc, #4]	; (8008bdc <__malloc_unlock+0x8>)
 8008bd6:	f7ff bcd6 	b.w	8008586 <__retarget_lock_release_recursive>
 8008bda:	bf00      	nop
 8008bdc:	2400043c 	.word	0x2400043c

08008be0 <__sfputc_r>:
 8008be0:	6893      	ldr	r3, [r2, #8]
 8008be2:	3b01      	subs	r3, #1
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	b410      	push	{r4}
 8008be8:	6093      	str	r3, [r2, #8]
 8008bea:	da08      	bge.n	8008bfe <__sfputc_r+0x1e>
 8008bec:	6994      	ldr	r4, [r2, #24]
 8008bee:	42a3      	cmp	r3, r4
 8008bf0:	db01      	blt.n	8008bf6 <__sfputc_r+0x16>
 8008bf2:	290a      	cmp	r1, #10
 8008bf4:	d103      	bne.n	8008bfe <__sfputc_r+0x1e>
 8008bf6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008bfa:	f7ff be99 	b.w	8008930 <__swbuf_r>
 8008bfe:	6813      	ldr	r3, [r2, #0]
 8008c00:	1c58      	adds	r0, r3, #1
 8008c02:	6010      	str	r0, [r2, #0]
 8008c04:	7019      	strb	r1, [r3, #0]
 8008c06:	4608      	mov	r0, r1
 8008c08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c0c:	4770      	bx	lr

08008c0e <__sfputs_r>:
 8008c0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c10:	4606      	mov	r6, r0
 8008c12:	460f      	mov	r7, r1
 8008c14:	4614      	mov	r4, r2
 8008c16:	18d5      	adds	r5, r2, r3
 8008c18:	42ac      	cmp	r4, r5
 8008c1a:	d101      	bne.n	8008c20 <__sfputs_r+0x12>
 8008c1c:	2000      	movs	r0, #0
 8008c1e:	e007      	b.n	8008c30 <__sfputs_r+0x22>
 8008c20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c24:	463a      	mov	r2, r7
 8008c26:	4630      	mov	r0, r6
 8008c28:	f7ff ffda 	bl	8008be0 <__sfputc_r>
 8008c2c:	1c43      	adds	r3, r0, #1
 8008c2e:	d1f3      	bne.n	8008c18 <__sfputs_r+0xa>
 8008c30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008c34 <_vfiprintf_r>:
 8008c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c38:	460d      	mov	r5, r1
 8008c3a:	b09d      	sub	sp, #116	; 0x74
 8008c3c:	4614      	mov	r4, r2
 8008c3e:	4698      	mov	r8, r3
 8008c40:	4606      	mov	r6, r0
 8008c42:	b118      	cbz	r0, 8008c4c <_vfiprintf_r+0x18>
 8008c44:	6983      	ldr	r3, [r0, #24]
 8008c46:	b90b      	cbnz	r3, 8008c4c <_vfiprintf_r+0x18>
 8008c48:	f7ff fa58 	bl	80080fc <__sinit>
 8008c4c:	4b89      	ldr	r3, [pc, #548]	; (8008e74 <_vfiprintf_r+0x240>)
 8008c4e:	429d      	cmp	r5, r3
 8008c50:	d11b      	bne.n	8008c8a <_vfiprintf_r+0x56>
 8008c52:	6875      	ldr	r5, [r6, #4]
 8008c54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c56:	07d9      	lsls	r1, r3, #31
 8008c58:	d405      	bmi.n	8008c66 <_vfiprintf_r+0x32>
 8008c5a:	89ab      	ldrh	r3, [r5, #12]
 8008c5c:	059a      	lsls	r2, r3, #22
 8008c5e:	d402      	bmi.n	8008c66 <_vfiprintf_r+0x32>
 8008c60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c62:	f7ff fc8f 	bl	8008584 <__retarget_lock_acquire_recursive>
 8008c66:	89ab      	ldrh	r3, [r5, #12]
 8008c68:	071b      	lsls	r3, r3, #28
 8008c6a:	d501      	bpl.n	8008c70 <_vfiprintf_r+0x3c>
 8008c6c:	692b      	ldr	r3, [r5, #16]
 8008c6e:	b9eb      	cbnz	r3, 8008cac <_vfiprintf_r+0x78>
 8008c70:	4629      	mov	r1, r5
 8008c72:	4630      	mov	r0, r6
 8008c74:	f7ff fec0 	bl	80089f8 <__swsetup_r>
 8008c78:	b1c0      	cbz	r0, 8008cac <_vfiprintf_r+0x78>
 8008c7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c7c:	07dc      	lsls	r4, r3, #31
 8008c7e:	d50e      	bpl.n	8008c9e <_vfiprintf_r+0x6a>
 8008c80:	f04f 30ff 	mov.w	r0, #4294967295
 8008c84:	b01d      	add	sp, #116	; 0x74
 8008c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c8a:	4b7b      	ldr	r3, [pc, #492]	; (8008e78 <_vfiprintf_r+0x244>)
 8008c8c:	429d      	cmp	r5, r3
 8008c8e:	d101      	bne.n	8008c94 <_vfiprintf_r+0x60>
 8008c90:	68b5      	ldr	r5, [r6, #8]
 8008c92:	e7df      	b.n	8008c54 <_vfiprintf_r+0x20>
 8008c94:	4b79      	ldr	r3, [pc, #484]	; (8008e7c <_vfiprintf_r+0x248>)
 8008c96:	429d      	cmp	r5, r3
 8008c98:	bf08      	it	eq
 8008c9a:	68f5      	ldreq	r5, [r6, #12]
 8008c9c:	e7da      	b.n	8008c54 <_vfiprintf_r+0x20>
 8008c9e:	89ab      	ldrh	r3, [r5, #12]
 8008ca0:	0598      	lsls	r0, r3, #22
 8008ca2:	d4ed      	bmi.n	8008c80 <_vfiprintf_r+0x4c>
 8008ca4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ca6:	f7ff fc6e 	bl	8008586 <__retarget_lock_release_recursive>
 8008caa:	e7e9      	b.n	8008c80 <_vfiprintf_r+0x4c>
 8008cac:	2300      	movs	r3, #0
 8008cae:	9309      	str	r3, [sp, #36]	; 0x24
 8008cb0:	2320      	movs	r3, #32
 8008cb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008cb6:	f8cd 800c 	str.w	r8, [sp, #12]
 8008cba:	2330      	movs	r3, #48	; 0x30
 8008cbc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008e80 <_vfiprintf_r+0x24c>
 8008cc0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008cc4:	f04f 0901 	mov.w	r9, #1
 8008cc8:	4623      	mov	r3, r4
 8008cca:	469a      	mov	sl, r3
 8008ccc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008cd0:	b10a      	cbz	r2, 8008cd6 <_vfiprintf_r+0xa2>
 8008cd2:	2a25      	cmp	r2, #37	; 0x25
 8008cd4:	d1f9      	bne.n	8008cca <_vfiprintf_r+0x96>
 8008cd6:	ebba 0b04 	subs.w	fp, sl, r4
 8008cda:	d00b      	beq.n	8008cf4 <_vfiprintf_r+0xc0>
 8008cdc:	465b      	mov	r3, fp
 8008cde:	4622      	mov	r2, r4
 8008ce0:	4629      	mov	r1, r5
 8008ce2:	4630      	mov	r0, r6
 8008ce4:	f7ff ff93 	bl	8008c0e <__sfputs_r>
 8008ce8:	3001      	adds	r0, #1
 8008cea:	f000 80aa 	beq.w	8008e42 <_vfiprintf_r+0x20e>
 8008cee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008cf0:	445a      	add	r2, fp
 8008cf2:	9209      	str	r2, [sp, #36]	; 0x24
 8008cf4:	f89a 3000 	ldrb.w	r3, [sl]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	f000 80a2 	beq.w	8008e42 <_vfiprintf_r+0x20e>
 8008cfe:	2300      	movs	r3, #0
 8008d00:	f04f 32ff 	mov.w	r2, #4294967295
 8008d04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d08:	f10a 0a01 	add.w	sl, sl, #1
 8008d0c:	9304      	str	r3, [sp, #16]
 8008d0e:	9307      	str	r3, [sp, #28]
 8008d10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008d14:	931a      	str	r3, [sp, #104]	; 0x68
 8008d16:	4654      	mov	r4, sl
 8008d18:	2205      	movs	r2, #5
 8008d1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d1e:	4858      	ldr	r0, [pc, #352]	; (8008e80 <_vfiprintf_r+0x24c>)
 8008d20:	f7f7 fafe 	bl	8000320 <memchr>
 8008d24:	9a04      	ldr	r2, [sp, #16]
 8008d26:	b9d8      	cbnz	r0, 8008d60 <_vfiprintf_r+0x12c>
 8008d28:	06d1      	lsls	r1, r2, #27
 8008d2a:	bf44      	itt	mi
 8008d2c:	2320      	movmi	r3, #32
 8008d2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d32:	0713      	lsls	r3, r2, #28
 8008d34:	bf44      	itt	mi
 8008d36:	232b      	movmi	r3, #43	; 0x2b
 8008d38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d3c:	f89a 3000 	ldrb.w	r3, [sl]
 8008d40:	2b2a      	cmp	r3, #42	; 0x2a
 8008d42:	d015      	beq.n	8008d70 <_vfiprintf_r+0x13c>
 8008d44:	9a07      	ldr	r2, [sp, #28]
 8008d46:	4654      	mov	r4, sl
 8008d48:	2000      	movs	r0, #0
 8008d4a:	f04f 0c0a 	mov.w	ip, #10
 8008d4e:	4621      	mov	r1, r4
 8008d50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d54:	3b30      	subs	r3, #48	; 0x30
 8008d56:	2b09      	cmp	r3, #9
 8008d58:	d94e      	bls.n	8008df8 <_vfiprintf_r+0x1c4>
 8008d5a:	b1b0      	cbz	r0, 8008d8a <_vfiprintf_r+0x156>
 8008d5c:	9207      	str	r2, [sp, #28]
 8008d5e:	e014      	b.n	8008d8a <_vfiprintf_r+0x156>
 8008d60:	eba0 0308 	sub.w	r3, r0, r8
 8008d64:	fa09 f303 	lsl.w	r3, r9, r3
 8008d68:	4313      	orrs	r3, r2
 8008d6a:	9304      	str	r3, [sp, #16]
 8008d6c:	46a2      	mov	sl, r4
 8008d6e:	e7d2      	b.n	8008d16 <_vfiprintf_r+0xe2>
 8008d70:	9b03      	ldr	r3, [sp, #12]
 8008d72:	1d19      	adds	r1, r3, #4
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	9103      	str	r1, [sp, #12]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	bfbb      	ittet	lt
 8008d7c:	425b      	neglt	r3, r3
 8008d7e:	f042 0202 	orrlt.w	r2, r2, #2
 8008d82:	9307      	strge	r3, [sp, #28]
 8008d84:	9307      	strlt	r3, [sp, #28]
 8008d86:	bfb8      	it	lt
 8008d88:	9204      	strlt	r2, [sp, #16]
 8008d8a:	7823      	ldrb	r3, [r4, #0]
 8008d8c:	2b2e      	cmp	r3, #46	; 0x2e
 8008d8e:	d10c      	bne.n	8008daa <_vfiprintf_r+0x176>
 8008d90:	7863      	ldrb	r3, [r4, #1]
 8008d92:	2b2a      	cmp	r3, #42	; 0x2a
 8008d94:	d135      	bne.n	8008e02 <_vfiprintf_r+0x1ce>
 8008d96:	9b03      	ldr	r3, [sp, #12]
 8008d98:	1d1a      	adds	r2, r3, #4
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	9203      	str	r2, [sp, #12]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	bfb8      	it	lt
 8008da2:	f04f 33ff 	movlt.w	r3, #4294967295
 8008da6:	3402      	adds	r4, #2
 8008da8:	9305      	str	r3, [sp, #20]
 8008daa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008e90 <_vfiprintf_r+0x25c>
 8008dae:	7821      	ldrb	r1, [r4, #0]
 8008db0:	2203      	movs	r2, #3
 8008db2:	4650      	mov	r0, sl
 8008db4:	f7f7 fab4 	bl	8000320 <memchr>
 8008db8:	b140      	cbz	r0, 8008dcc <_vfiprintf_r+0x198>
 8008dba:	2340      	movs	r3, #64	; 0x40
 8008dbc:	eba0 000a 	sub.w	r0, r0, sl
 8008dc0:	fa03 f000 	lsl.w	r0, r3, r0
 8008dc4:	9b04      	ldr	r3, [sp, #16]
 8008dc6:	4303      	orrs	r3, r0
 8008dc8:	3401      	adds	r4, #1
 8008dca:	9304      	str	r3, [sp, #16]
 8008dcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dd0:	482c      	ldr	r0, [pc, #176]	; (8008e84 <_vfiprintf_r+0x250>)
 8008dd2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008dd6:	2206      	movs	r2, #6
 8008dd8:	f7f7 faa2 	bl	8000320 <memchr>
 8008ddc:	2800      	cmp	r0, #0
 8008dde:	d03f      	beq.n	8008e60 <_vfiprintf_r+0x22c>
 8008de0:	4b29      	ldr	r3, [pc, #164]	; (8008e88 <_vfiprintf_r+0x254>)
 8008de2:	bb1b      	cbnz	r3, 8008e2c <_vfiprintf_r+0x1f8>
 8008de4:	9b03      	ldr	r3, [sp, #12]
 8008de6:	3307      	adds	r3, #7
 8008de8:	f023 0307 	bic.w	r3, r3, #7
 8008dec:	3308      	adds	r3, #8
 8008dee:	9303      	str	r3, [sp, #12]
 8008df0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008df2:	443b      	add	r3, r7
 8008df4:	9309      	str	r3, [sp, #36]	; 0x24
 8008df6:	e767      	b.n	8008cc8 <_vfiprintf_r+0x94>
 8008df8:	fb0c 3202 	mla	r2, ip, r2, r3
 8008dfc:	460c      	mov	r4, r1
 8008dfe:	2001      	movs	r0, #1
 8008e00:	e7a5      	b.n	8008d4e <_vfiprintf_r+0x11a>
 8008e02:	2300      	movs	r3, #0
 8008e04:	3401      	adds	r4, #1
 8008e06:	9305      	str	r3, [sp, #20]
 8008e08:	4619      	mov	r1, r3
 8008e0a:	f04f 0c0a 	mov.w	ip, #10
 8008e0e:	4620      	mov	r0, r4
 8008e10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e14:	3a30      	subs	r2, #48	; 0x30
 8008e16:	2a09      	cmp	r2, #9
 8008e18:	d903      	bls.n	8008e22 <_vfiprintf_r+0x1ee>
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d0c5      	beq.n	8008daa <_vfiprintf_r+0x176>
 8008e1e:	9105      	str	r1, [sp, #20]
 8008e20:	e7c3      	b.n	8008daa <_vfiprintf_r+0x176>
 8008e22:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e26:	4604      	mov	r4, r0
 8008e28:	2301      	movs	r3, #1
 8008e2a:	e7f0      	b.n	8008e0e <_vfiprintf_r+0x1da>
 8008e2c:	ab03      	add	r3, sp, #12
 8008e2e:	9300      	str	r3, [sp, #0]
 8008e30:	462a      	mov	r2, r5
 8008e32:	4b16      	ldr	r3, [pc, #88]	; (8008e8c <_vfiprintf_r+0x258>)
 8008e34:	a904      	add	r1, sp, #16
 8008e36:	4630      	mov	r0, r6
 8008e38:	f3af 8000 	nop.w
 8008e3c:	4607      	mov	r7, r0
 8008e3e:	1c78      	adds	r0, r7, #1
 8008e40:	d1d6      	bne.n	8008df0 <_vfiprintf_r+0x1bc>
 8008e42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e44:	07d9      	lsls	r1, r3, #31
 8008e46:	d405      	bmi.n	8008e54 <_vfiprintf_r+0x220>
 8008e48:	89ab      	ldrh	r3, [r5, #12]
 8008e4a:	059a      	lsls	r2, r3, #22
 8008e4c:	d402      	bmi.n	8008e54 <_vfiprintf_r+0x220>
 8008e4e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e50:	f7ff fb99 	bl	8008586 <__retarget_lock_release_recursive>
 8008e54:	89ab      	ldrh	r3, [r5, #12]
 8008e56:	065b      	lsls	r3, r3, #25
 8008e58:	f53f af12 	bmi.w	8008c80 <_vfiprintf_r+0x4c>
 8008e5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e5e:	e711      	b.n	8008c84 <_vfiprintf_r+0x50>
 8008e60:	ab03      	add	r3, sp, #12
 8008e62:	9300      	str	r3, [sp, #0]
 8008e64:	462a      	mov	r2, r5
 8008e66:	4b09      	ldr	r3, [pc, #36]	; (8008e8c <_vfiprintf_r+0x258>)
 8008e68:	a904      	add	r1, sp, #16
 8008e6a:	4630      	mov	r0, r6
 8008e6c:	f000 f880 	bl	8008f70 <_printf_i>
 8008e70:	e7e4      	b.n	8008e3c <_vfiprintf_r+0x208>
 8008e72:	bf00      	nop
 8008e74:	08009f3c 	.word	0x08009f3c
 8008e78:	08009f5c 	.word	0x08009f5c
 8008e7c:	08009f1c 	.word	0x08009f1c
 8008e80:	08009f80 	.word	0x08009f80
 8008e84:	08009f8a 	.word	0x08009f8a
 8008e88:	00000000 	.word	0x00000000
 8008e8c:	08008c0f 	.word	0x08008c0f
 8008e90:	08009f86 	.word	0x08009f86

08008e94 <_printf_common>:
 8008e94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e98:	4616      	mov	r6, r2
 8008e9a:	4699      	mov	r9, r3
 8008e9c:	688a      	ldr	r2, [r1, #8]
 8008e9e:	690b      	ldr	r3, [r1, #16]
 8008ea0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	bfb8      	it	lt
 8008ea8:	4613      	movlt	r3, r2
 8008eaa:	6033      	str	r3, [r6, #0]
 8008eac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008eb0:	4607      	mov	r7, r0
 8008eb2:	460c      	mov	r4, r1
 8008eb4:	b10a      	cbz	r2, 8008eba <_printf_common+0x26>
 8008eb6:	3301      	adds	r3, #1
 8008eb8:	6033      	str	r3, [r6, #0]
 8008eba:	6823      	ldr	r3, [r4, #0]
 8008ebc:	0699      	lsls	r1, r3, #26
 8008ebe:	bf42      	ittt	mi
 8008ec0:	6833      	ldrmi	r3, [r6, #0]
 8008ec2:	3302      	addmi	r3, #2
 8008ec4:	6033      	strmi	r3, [r6, #0]
 8008ec6:	6825      	ldr	r5, [r4, #0]
 8008ec8:	f015 0506 	ands.w	r5, r5, #6
 8008ecc:	d106      	bne.n	8008edc <_printf_common+0x48>
 8008ece:	f104 0a19 	add.w	sl, r4, #25
 8008ed2:	68e3      	ldr	r3, [r4, #12]
 8008ed4:	6832      	ldr	r2, [r6, #0]
 8008ed6:	1a9b      	subs	r3, r3, r2
 8008ed8:	42ab      	cmp	r3, r5
 8008eda:	dc26      	bgt.n	8008f2a <_printf_common+0x96>
 8008edc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008ee0:	1e13      	subs	r3, r2, #0
 8008ee2:	6822      	ldr	r2, [r4, #0]
 8008ee4:	bf18      	it	ne
 8008ee6:	2301      	movne	r3, #1
 8008ee8:	0692      	lsls	r2, r2, #26
 8008eea:	d42b      	bmi.n	8008f44 <_printf_common+0xb0>
 8008eec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008ef0:	4649      	mov	r1, r9
 8008ef2:	4638      	mov	r0, r7
 8008ef4:	47c0      	blx	r8
 8008ef6:	3001      	adds	r0, #1
 8008ef8:	d01e      	beq.n	8008f38 <_printf_common+0xa4>
 8008efa:	6823      	ldr	r3, [r4, #0]
 8008efc:	68e5      	ldr	r5, [r4, #12]
 8008efe:	6832      	ldr	r2, [r6, #0]
 8008f00:	f003 0306 	and.w	r3, r3, #6
 8008f04:	2b04      	cmp	r3, #4
 8008f06:	bf08      	it	eq
 8008f08:	1aad      	subeq	r5, r5, r2
 8008f0a:	68a3      	ldr	r3, [r4, #8]
 8008f0c:	6922      	ldr	r2, [r4, #16]
 8008f0e:	bf0c      	ite	eq
 8008f10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008f14:	2500      	movne	r5, #0
 8008f16:	4293      	cmp	r3, r2
 8008f18:	bfc4      	itt	gt
 8008f1a:	1a9b      	subgt	r3, r3, r2
 8008f1c:	18ed      	addgt	r5, r5, r3
 8008f1e:	2600      	movs	r6, #0
 8008f20:	341a      	adds	r4, #26
 8008f22:	42b5      	cmp	r5, r6
 8008f24:	d11a      	bne.n	8008f5c <_printf_common+0xc8>
 8008f26:	2000      	movs	r0, #0
 8008f28:	e008      	b.n	8008f3c <_printf_common+0xa8>
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	4652      	mov	r2, sl
 8008f2e:	4649      	mov	r1, r9
 8008f30:	4638      	mov	r0, r7
 8008f32:	47c0      	blx	r8
 8008f34:	3001      	adds	r0, #1
 8008f36:	d103      	bne.n	8008f40 <_printf_common+0xac>
 8008f38:	f04f 30ff 	mov.w	r0, #4294967295
 8008f3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f40:	3501      	adds	r5, #1
 8008f42:	e7c6      	b.n	8008ed2 <_printf_common+0x3e>
 8008f44:	18e1      	adds	r1, r4, r3
 8008f46:	1c5a      	adds	r2, r3, #1
 8008f48:	2030      	movs	r0, #48	; 0x30
 8008f4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008f4e:	4422      	add	r2, r4
 8008f50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008f54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008f58:	3302      	adds	r3, #2
 8008f5a:	e7c7      	b.n	8008eec <_printf_common+0x58>
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	4622      	mov	r2, r4
 8008f60:	4649      	mov	r1, r9
 8008f62:	4638      	mov	r0, r7
 8008f64:	47c0      	blx	r8
 8008f66:	3001      	adds	r0, #1
 8008f68:	d0e6      	beq.n	8008f38 <_printf_common+0xa4>
 8008f6a:	3601      	adds	r6, #1
 8008f6c:	e7d9      	b.n	8008f22 <_printf_common+0x8e>
	...

08008f70 <_printf_i>:
 8008f70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f74:	7e0f      	ldrb	r7, [r1, #24]
 8008f76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008f78:	2f78      	cmp	r7, #120	; 0x78
 8008f7a:	4691      	mov	r9, r2
 8008f7c:	4680      	mov	r8, r0
 8008f7e:	460c      	mov	r4, r1
 8008f80:	469a      	mov	sl, r3
 8008f82:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008f86:	d807      	bhi.n	8008f98 <_printf_i+0x28>
 8008f88:	2f62      	cmp	r7, #98	; 0x62
 8008f8a:	d80a      	bhi.n	8008fa2 <_printf_i+0x32>
 8008f8c:	2f00      	cmp	r7, #0
 8008f8e:	f000 80d8 	beq.w	8009142 <_printf_i+0x1d2>
 8008f92:	2f58      	cmp	r7, #88	; 0x58
 8008f94:	f000 80a3 	beq.w	80090de <_printf_i+0x16e>
 8008f98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008fa0:	e03a      	b.n	8009018 <_printf_i+0xa8>
 8008fa2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008fa6:	2b15      	cmp	r3, #21
 8008fa8:	d8f6      	bhi.n	8008f98 <_printf_i+0x28>
 8008faa:	a101      	add	r1, pc, #4	; (adr r1, 8008fb0 <_printf_i+0x40>)
 8008fac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008fb0:	08009009 	.word	0x08009009
 8008fb4:	0800901d 	.word	0x0800901d
 8008fb8:	08008f99 	.word	0x08008f99
 8008fbc:	08008f99 	.word	0x08008f99
 8008fc0:	08008f99 	.word	0x08008f99
 8008fc4:	08008f99 	.word	0x08008f99
 8008fc8:	0800901d 	.word	0x0800901d
 8008fcc:	08008f99 	.word	0x08008f99
 8008fd0:	08008f99 	.word	0x08008f99
 8008fd4:	08008f99 	.word	0x08008f99
 8008fd8:	08008f99 	.word	0x08008f99
 8008fdc:	08009129 	.word	0x08009129
 8008fe0:	0800904d 	.word	0x0800904d
 8008fe4:	0800910b 	.word	0x0800910b
 8008fe8:	08008f99 	.word	0x08008f99
 8008fec:	08008f99 	.word	0x08008f99
 8008ff0:	0800914b 	.word	0x0800914b
 8008ff4:	08008f99 	.word	0x08008f99
 8008ff8:	0800904d 	.word	0x0800904d
 8008ffc:	08008f99 	.word	0x08008f99
 8009000:	08008f99 	.word	0x08008f99
 8009004:	08009113 	.word	0x08009113
 8009008:	682b      	ldr	r3, [r5, #0]
 800900a:	1d1a      	adds	r2, r3, #4
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	602a      	str	r2, [r5, #0]
 8009010:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009014:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009018:	2301      	movs	r3, #1
 800901a:	e0a3      	b.n	8009164 <_printf_i+0x1f4>
 800901c:	6820      	ldr	r0, [r4, #0]
 800901e:	6829      	ldr	r1, [r5, #0]
 8009020:	0606      	lsls	r6, r0, #24
 8009022:	f101 0304 	add.w	r3, r1, #4
 8009026:	d50a      	bpl.n	800903e <_printf_i+0xce>
 8009028:	680e      	ldr	r6, [r1, #0]
 800902a:	602b      	str	r3, [r5, #0]
 800902c:	2e00      	cmp	r6, #0
 800902e:	da03      	bge.n	8009038 <_printf_i+0xc8>
 8009030:	232d      	movs	r3, #45	; 0x2d
 8009032:	4276      	negs	r6, r6
 8009034:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009038:	485e      	ldr	r0, [pc, #376]	; (80091b4 <_printf_i+0x244>)
 800903a:	230a      	movs	r3, #10
 800903c:	e019      	b.n	8009072 <_printf_i+0x102>
 800903e:	680e      	ldr	r6, [r1, #0]
 8009040:	602b      	str	r3, [r5, #0]
 8009042:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009046:	bf18      	it	ne
 8009048:	b236      	sxthne	r6, r6
 800904a:	e7ef      	b.n	800902c <_printf_i+0xbc>
 800904c:	682b      	ldr	r3, [r5, #0]
 800904e:	6820      	ldr	r0, [r4, #0]
 8009050:	1d19      	adds	r1, r3, #4
 8009052:	6029      	str	r1, [r5, #0]
 8009054:	0601      	lsls	r1, r0, #24
 8009056:	d501      	bpl.n	800905c <_printf_i+0xec>
 8009058:	681e      	ldr	r6, [r3, #0]
 800905a:	e002      	b.n	8009062 <_printf_i+0xf2>
 800905c:	0646      	lsls	r6, r0, #25
 800905e:	d5fb      	bpl.n	8009058 <_printf_i+0xe8>
 8009060:	881e      	ldrh	r6, [r3, #0]
 8009062:	4854      	ldr	r0, [pc, #336]	; (80091b4 <_printf_i+0x244>)
 8009064:	2f6f      	cmp	r7, #111	; 0x6f
 8009066:	bf0c      	ite	eq
 8009068:	2308      	moveq	r3, #8
 800906a:	230a      	movne	r3, #10
 800906c:	2100      	movs	r1, #0
 800906e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009072:	6865      	ldr	r5, [r4, #4]
 8009074:	60a5      	str	r5, [r4, #8]
 8009076:	2d00      	cmp	r5, #0
 8009078:	bfa2      	ittt	ge
 800907a:	6821      	ldrge	r1, [r4, #0]
 800907c:	f021 0104 	bicge.w	r1, r1, #4
 8009080:	6021      	strge	r1, [r4, #0]
 8009082:	b90e      	cbnz	r6, 8009088 <_printf_i+0x118>
 8009084:	2d00      	cmp	r5, #0
 8009086:	d04d      	beq.n	8009124 <_printf_i+0x1b4>
 8009088:	4615      	mov	r5, r2
 800908a:	fbb6 f1f3 	udiv	r1, r6, r3
 800908e:	fb03 6711 	mls	r7, r3, r1, r6
 8009092:	5dc7      	ldrb	r7, [r0, r7]
 8009094:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009098:	4637      	mov	r7, r6
 800909a:	42bb      	cmp	r3, r7
 800909c:	460e      	mov	r6, r1
 800909e:	d9f4      	bls.n	800908a <_printf_i+0x11a>
 80090a0:	2b08      	cmp	r3, #8
 80090a2:	d10b      	bne.n	80090bc <_printf_i+0x14c>
 80090a4:	6823      	ldr	r3, [r4, #0]
 80090a6:	07de      	lsls	r6, r3, #31
 80090a8:	d508      	bpl.n	80090bc <_printf_i+0x14c>
 80090aa:	6923      	ldr	r3, [r4, #16]
 80090ac:	6861      	ldr	r1, [r4, #4]
 80090ae:	4299      	cmp	r1, r3
 80090b0:	bfde      	ittt	le
 80090b2:	2330      	movle	r3, #48	; 0x30
 80090b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80090b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80090bc:	1b52      	subs	r2, r2, r5
 80090be:	6122      	str	r2, [r4, #16]
 80090c0:	f8cd a000 	str.w	sl, [sp]
 80090c4:	464b      	mov	r3, r9
 80090c6:	aa03      	add	r2, sp, #12
 80090c8:	4621      	mov	r1, r4
 80090ca:	4640      	mov	r0, r8
 80090cc:	f7ff fee2 	bl	8008e94 <_printf_common>
 80090d0:	3001      	adds	r0, #1
 80090d2:	d14c      	bne.n	800916e <_printf_i+0x1fe>
 80090d4:	f04f 30ff 	mov.w	r0, #4294967295
 80090d8:	b004      	add	sp, #16
 80090da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090de:	4835      	ldr	r0, [pc, #212]	; (80091b4 <_printf_i+0x244>)
 80090e0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80090e4:	6829      	ldr	r1, [r5, #0]
 80090e6:	6823      	ldr	r3, [r4, #0]
 80090e8:	f851 6b04 	ldr.w	r6, [r1], #4
 80090ec:	6029      	str	r1, [r5, #0]
 80090ee:	061d      	lsls	r5, r3, #24
 80090f0:	d514      	bpl.n	800911c <_printf_i+0x1ac>
 80090f2:	07df      	lsls	r7, r3, #31
 80090f4:	bf44      	itt	mi
 80090f6:	f043 0320 	orrmi.w	r3, r3, #32
 80090fa:	6023      	strmi	r3, [r4, #0]
 80090fc:	b91e      	cbnz	r6, 8009106 <_printf_i+0x196>
 80090fe:	6823      	ldr	r3, [r4, #0]
 8009100:	f023 0320 	bic.w	r3, r3, #32
 8009104:	6023      	str	r3, [r4, #0]
 8009106:	2310      	movs	r3, #16
 8009108:	e7b0      	b.n	800906c <_printf_i+0xfc>
 800910a:	6823      	ldr	r3, [r4, #0]
 800910c:	f043 0320 	orr.w	r3, r3, #32
 8009110:	6023      	str	r3, [r4, #0]
 8009112:	2378      	movs	r3, #120	; 0x78
 8009114:	4828      	ldr	r0, [pc, #160]	; (80091b8 <_printf_i+0x248>)
 8009116:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800911a:	e7e3      	b.n	80090e4 <_printf_i+0x174>
 800911c:	0659      	lsls	r1, r3, #25
 800911e:	bf48      	it	mi
 8009120:	b2b6      	uxthmi	r6, r6
 8009122:	e7e6      	b.n	80090f2 <_printf_i+0x182>
 8009124:	4615      	mov	r5, r2
 8009126:	e7bb      	b.n	80090a0 <_printf_i+0x130>
 8009128:	682b      	ldr	r3, [r5, #0]
 800912a:	6826      	ldr	r6, [r4, #0]
 800912c:	6961      	ldr	r1, [r4, #20]
 800912e:	1d18      	adds	r0, r3, #4
 8009130:	6028      	str	r0, [r5, #0]
 8009132:	0635      	lsls	r5, r6, #24
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	d501      	bpl.n	800913c <_printf_i+0x1cc>
 8009138:	6019      	str	r1, [r3, #0]
 800913a:	e002      	b.n	8009142 <_printf_i+0x1d2>
 800913c:	0670      	lsls	r0, r6, #25
 800913e:	d5fb      	bpl.n	8009138 <_printf_i+0x1c8>
 8009140:	8019      	strh	r1, [r3, #0]
 8009142:	2300      	movs	r3, #0
 8009144:	6123      	str	r3, [r4, #16]
 8009146:	4615      	mov	r5, r2
 8009148:	e7ba      	b.n	80090c0 <_printf_i+0x150>
 800914a:	682b      	ldr	r3, [r5, #0]
 800914c:	1d1a      	adds	r2, r3, #4
 800914e:	602a      	str	r2, [r5, #0]
 8009150:	681d      	ldr	r5, [r3, #0]
 8009152:	6862      	ldr	r2, [r4, #4]
 8009154:	2100      	movs	r1, #0
 8009156:	4628      	mov	r0, r5
 8009158:	f7f7 f8e2 	bl	8000320 <memchr>
 800915c:	b108      	cbz	r0, 8009162 <_printf_i+0x1f2>
 800915e:	1b40      	subs	r0, r0, r5
 8009160:	6060      	str	r0, [r4, #4]
 8009162:	6863      	ldr	r3, [r4, #4]
 8009164:	6123      	str	r3, [r4, #16]
 8009166:	2300      	movs	r3, #0
 8009168:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800916c:	e7a8      	b.n	80090c0 <_printf_i+0x150>
 800916e:	6923      	ldr	r3, [r4, #16]
 8009170:	462a      	mov	r2, r5
 8009172:	4649      	mov	r1, r9
 8009174:	4640      	mov	r0, r8
 8009176:	47d0      	blx	sl
 8009178:	3001      	adds	r0, #1
 800917a:	d0ab      	beq.n	80090d4 <_printf_i+0x164>
 800917c:	6823      	ldr	r3, [r4, #0]
 800917e:	079b      	lsls	r3, r3, #30
 8009180:	d413      	bmi.n	80091aa <_printf_i+0x23a>
 8009182:	68e0      	ldr	r0, [r4, #12]
 8009184:	9b03      	ldr	r3, [sp, #12]
 8009186:	4298      	cmp	r0, r3
 8009188:	bfb8      	it	lt
 800918a:	4618      	movlt	r0, r3
 800918c:	e7a4      	b.n	80090d8 <_printf_i+0x168>
 800918e:	2301      	movs	r3, #1
 8009190:	4632      	mov	r2, r6
 8009192:	4649      	mov	r1, r9
 8009194:	4640      	mov	r0, r8
 8009196:	47d0      	blx	sl
 8009198:	3001      	adds	r0, #1
 800919a:	d09b      	beq.n	80090d4 <_printf_i+0x164>
 800919c:	3501      	adds	r5, #1
 800919e:	68e3      	ldr	r3, [r4, #12]
 80091a0:	9903      	ldr	r1, [sp, #12]
 80091a2:	1a5b      	subs	r3, r3, r1
 80091a4:	42ab      	cmp	r3, r5
 80091a6:	dcf2      	bgt.n	800918e <_printf_i+0x21e>
 80091a8:	e7eb      	b.n	8009182 <_printf_i+0x212>
 80091aa:	2500      	movs	r5, #0
 80091ac:	f104 0619 	add.w	r6, r4, #25
 80091b0:	e7f5      	b.n	800919e <_printf_i+0x22e>
 80091b2:	bf00      	nop
 80091b4:	08009f91 	.word	0x08009f91
 80091b8:	08009fa2 	.word	0x08009fa2

080091bc <_read_r>:
 80091bc:	b538      	push	{r3, r4, r5, lr}
 80091be:	4d07      	ldr	r5, [pc, #28]	; (80091dc <_read_r+0x20>)
 80091c0:	4604      	mov	r4, r0
 80091c2:	4608      	mov	r0, r1
 80091c4:	4611      	mov	r1, r2
 80091c6:	2200      	movs	r2, #0
 80091c8:	602a      	str	r2, [r5, #0]
 80091ca:	461a      	mov	r2, r3
 80091cc:	f7fe fb7f 	bl	80078ce <_read>
 80091d0:	1c43      	adds	r3, r0, #1
 80091d2:	d102      	bne.n	80091da <_read_r+0x1e>
 80091d4:	682b      	ldr	r3, [r5, #0]
 80091d6:	b103      	cbz	r3, 80091da <_read_r+0x1e>
 80091d8:	6023      	str	r3, [r4, #0]
 80091da:	bd38      	pop	{r3, r4, r5, pc}
 80091dc:	24000448 	.word	0x24000448

080091e0 <round>:
 80091e0:	ee10 1a90 	vmov	r1, s1
 80091e4:	f3c1 500a 	ubfx	r0, r1, #20, #11
 80091e8:	f2a0 32ff 	subw	r2, r0, #1023	; 0x3ff
 80091ec:	2a13      	cmp	r2, #19
 80091ee:	b510      	push	{r4, lr}
 80091f0:	ee10 3a10 	vmov	r3, s0
 80091f4:	dc19      	bgt.n	800922a <round+0x4a>
 80091f6:	2a00      	cmp	r2, #0
 80091f8:	da09      	bge.n	800920e <round+0x2e>
 80091fa:	3201      	adds	r2, #1
 80091fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8009200:	d103      	bne.n	800920a <round+0x2a>
 8009202:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8009206:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800920a:	2000      	movs	r0, #0
 800920c:	e026      	b.n	800925c <round+0x7c>
 800920e:	4816      	ldr	r0, [pc, #88]	; (8009268 <round+0x88>)
 8009210:	4110      	asrs	r0, r2
 8009212:	ea01 0400 	and.w	r4, r1, r0
 8009216:	4323      	orrs	r3, r4
 8009218:	d00e      	beq.n	8009238 <round+0x58>
 800921a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800921e:	fa43 f202 	asr.w	r2, r3, r2
 8009222:	4411      	add	r1, r2
 8009224:	ea21 0100 	bic.w	r1, r1, r0
 8009228:	e7ef      	b.n	800920a <round+0x2a>
 800922a:	2a33      	cmp	r2, #51	; 0x33
 800922c:	dd05      	ble.n	800923a <round+0x5a>
 800922e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8009232:	d101      	bne.n	8009238 <round+0x58>
 8009234:	ee30 0b00 	vadd.f64	d0, d0, d0
 8009238:	bd10      	pop	{r4, pc}
 800923a:	f2a0 4413 	subw	r4, r0, #1043	; 0x413
 800923e:	f04f 30ff 	mov.w	r0, #4294967295
 8009242:	40e0      	lsrs	r0, r4
 8009244:	4203      	tst	r3, r0
 8009246:	d0f7      	beq.n	8009238 <round+0x58>
 8009248:	2401      	movs	r4, #1
 800924a:	f1c2 0233 	rsb	r2, r2, #51	; 0x33
 800924e:	fa04 f202 	lsl.w	r2, r4, r2
 8009252:	189b      	adds	r3, r3, r2
 8009254:	bf28      	it	cs
 8009256:	1909      	addcs	r1, r1, r4
 8009258:	ea23 0000 	bic.w	r0, r3, r0
 800925c:	460b      	mov	r3, r1
 800925e:	4602      	mov	r2, r0
 8009260:	ec43 2b10 	vmov	d0, r2, r3
 8009264:	e7e8      	b.n	8009238 <round+0x58>
 8009266:	bf00      	nop
 8009268:	000fffff 	.word	0x000fffff
 800926c:	00000000 	.word	0x00000000

08009270 <sin>:
 8009270:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009272:	eeb0 7b40 	vmov.f64	d7, d0
 8009276:	ee17 3a90 	vmov	r3, s15
 800927a:	4a21      	ldr	r2, [pc, #132]	; (8009300 <sin+0x90>)
 800927c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009280:	4293      	cmp	r3, r2
 8009282:	dc07      	bgt.n	8009294 <sin+0x24>
 8009284:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 80092f8 <sin+0x88>
 8009288:	2000      	movs	r0, #0
 800928a:	b005      	add	sp, #20
 800928c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009290:	f000 bc82 	b.w	8009b98 <__kernel_sin>
 8009294:	4a1b      	ldr	r2, [pc, #108]	; (8009304 <sin+0x94>)
 8009296:	4293      	cmp	r3, r2
 8009298:	dd04      	ble.n	80092a4 <sin+0x34>
 800929a:	ee30 0b40 	vsub.f64	d0, d0, d0
 800929e:	b005      	add	sp, #20
 80092a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80092a4:	4668      	mov	r0, sp
 80092a6:	f000 f82f 	bl	8009308 <__ieee754_rem_pio2>
 80092aa:	f000 0003 	and.w	r0, r0, #3
 80092ae:	2801      	cmp	r0, #1
 80092b0:	d00a      	beq.n	80092c8 <sin+0x58>
 80092b2:	2802      	cmp	r0, #2
 80092b4:	d00f      	beq.n	80092d6 <sin+0x66>
 80092b6:	b9c0      	cbnz	r0, 80092ea <sin+0x7a>
 80092b8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80092bc:	ed9d 0b00 	vldr	d0, [sp]
 80092c0:	2001      	movs	r0, #1
 80092c2:	f000 fc69 	bl	8009b98 <__kernel_sin>
 80092c6:	e7ea      	b.n	800929e <sin+0x2e>
 80092c8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80092cc:	ed9d 0b00 	vldr	d0, [sp]
 80092d0:	f000 f95e 	bl	8009590 <__kernel_cos>
 80092d4:	e7e3      	b.n	800929e <sin+0x2e>
 80092d6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80092da:	ed9d 0b00 	vldr	d0, [sp]
 80092de:	2001      	movs	r0, #1
 80092e0:	f000 fc5a 	bl	8009b98 <__kernel_sin>
 80092e4:	eeb1 0b40 	vneg.f64	d0, d0
 80092e8:	e7d9      	b.n	800929e <sin+0x2e>
 80092ea:	ed9d 1b02 	vldr	d1, [sp, #8]
 80092ee:	ed9d 0b00 	vldr	d0, [sp]
 80092f2:	f000 f94d 	bl	8009590 <__kernel_cos>
 80092f6:	e7f5      	b.n	80092e4 <sin+0x74>
	...
 8009300:	3fe921fb 	.word	0x3fe921fb
 8009304:	7fefffff 	.word	0x7fefffff

08009308 <__ieee754_rem_pio2>:
 8009308:	b570      	push	{r4, r5, r6, lr}
 800930a:	eeb0 7b40 	vmov.f64	d7, d0
 800930e:	ee17 5a90 	vmov	r5, s15
 8009312:	4b99      	ldr	r3, [pc, #612]	; (8009578 <__ieee754_rem_pio2+0x270>)
 8009314:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009318:	429e      	cmp	r6, r3
 800931a:	b088      	sub	sp, #32
 800931c:	4604      	mov	r4, r0
 800931e:	dc07      	bgt.n	8009330 <__ieee754_rem_pio2+0x28>
 8009320:	2200      	movs	r2, #0
 8009322:	2300      	movs	r3, #0
 8009324:	ed84 0b00 	vstr	d0, [r4]
 8009328:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800932c:	2000      	movs	r0, #0
 800932e:	e01b      	b.n	8009368 <__ieee754_rem_pio2+0x60>
 8009330:	4b92      	ldr	r3, [pc, #584]	; (800957c <__ieee754_rem_pio2+0x274>)
 8009332:	429e      	cmp	r6, r3
 8009334:	dc3b      	bgt.n	80093ae <__ieee754_rem_pio2+0xa6>
 8009336:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 800933a:	2d00      	cmp	r5, #0
 800933c:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 8009538 <__ieee754_rem_pio2+0x230>
 8009340:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 8009344:	dd19      	ble.n	800937a <__ieee754_rem_pio2+0x72>
 8009346:	ee30 7b46 	vsub.f64	d7, d0, d6
 800934a:	429e      	cmp	r6, r3
 800934c:	d00e      	beq.n	800936c <__ieee754_rem_pio2+0x64>
 800934e:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8009540 <__ieee754_rem_pio2+0x238>
 8009352:	ee37 5b46 	vsub.f64	d5, d7, d6
 8009356:	ee37 7b45 	vsub.f64	d7, d7, d5
 800935a:	ed84 5b00 	vstr	d5, [r4]
 800935e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009362:	ed84 7b02 	vstr	d7, [r4, #8]
 8009366:	2001      	movs	r0, #1
 8009368:	b008      	add	sp, #32
 800936a:	bd70      	pop	{r4, r5, r6, pc}
 800936c:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8009548 <__ieee754_rem_pio2+0x240>
 8009370:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009374:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8009550 <__ieee754_rem_pio2+0x248>
 8009378:	e7eb      	b.n	8009352 <__ieee754_rem_pio2+0x4a>
 800937a:	429e      	cmp	r6, r3
 800937c:	ee30 7b06 	vadd.f64	d7, d0, d6
 8009380:	d00e      	beq.n	80093a0 <__ieee754_rem_pio2+0x98>
 8009382:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 8009540 <__ieee754_rem_pio2+0x238>
 8009386:	ee37 5b06 	vadd.f64	d5, d7, d6
 800938a:	ee37 7b45 	vsub.f64	d7, d7, d5
 800938e:	ed84 5b00 	vstr	d5, [r4]
 8009392:	ee37 7b06 	vadd.f64	d7, d7, d6
 8009396:	f04f 30ff 	mov.w	r0, #4294967295
 800939a:	ed84 7b02 	vstr	d7, [r4, #8]
 800939e:	e7e3      	b.n	8009368 <__ieee754_rem_pio2+0x60>
 80093a0:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8009548 <__ieee754_rem_pio2+0x240>
 80093a4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80093a8:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8009550 <__ieee754_rem_pio2+0x248>
 80093ac:	e7eb      	b.n	8009386 <__ieee754_rem_pio2+0x7e>
 80093ae:	4b74      	ldr	r3, [pc, #464]	; (8009580 <__ieee754_rem_pio2+0x278>)
 80093b0:	429e      	cmp	r6, r3
 80093b2:	dc70      	bgt.n	8009496 <__ieee754_rem_pio2+0x18e>
 80093b4:	f000 fc48 	bl	8009c48 <fabs>
 80093b8:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80093bc:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8009558 <__ieee754_rem_pio2+0x250>
 80093c0:	eea0 7b06 	vfma.f64	d7, d0, d6
 80093c4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80093c8:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80093cc:	ee17 0a90 	vmov	r0, s15
 80093d0:	eeb1 4b45 	vneg.f64	d4, d5
 80093d4:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8009538 <__ieee754_rem_pio2+0x230>
 80093d8:	eea5 0b47 	vfms.f64	d0, d5, d7
 80093dc:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8009540 <__ieee754_rem_pio2+0x238>
 80093e0:	281f      	cmp	r0, #31
 80093e2:	ee25 7b07 	vmul.f64	d7, d5, d7
 80093e6:	ee30 6b47 	vsub.f64	d6, d0, d7
 80093ea:	dc08      	bgt.n	80093fe <__ieee754_rem_pio2+0xf6>
 80093ec:	4b65      	ldr	r3, [pc, #404]	; (8009584 <__ieee754_rem_pio2+0x27c>)
 80093ee:	1e42      	subs	r2, r0, #1
 80093f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093f4:	42b3      	cmp	r3, r6
 80093f6:	d002      	beq.n	80093fe <__ieee754_rem_pio2+0xf6>
 80093f8:	ed84 6b00 	vstr	d6, [r4]
 80093fc:	e026      	b.n	800944c <__ieee754_rem_pio2+0x144>
 80093fe:	ee16 3a90 	vmov	r3, s13
 8009402:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8009406:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 800940a:	2b10      	cmp	r3, #16
 800940c:	ea4f 5226 	mov.w	r2, r6, asr #20
 8009410:	ddf2      	ble.n	80093f8 <__ieee754_rem_pio2+0xf0>
 8009412:	eeb0 6b40 	vmov.f64	d6, d0
 8009416:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 8009548 <__ieee754_rem_pio2+0x240>
 800941a:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 8009550 <__ieee754_rem_pio2+0x248>
 800941e:	eea4 6b07 	vfma.f64	d6, d4, d7
 8009422:	ee30 0b46 	vsub.f64	d0, d0, d6
 8009426:	eea4 0b07 	vfma.f64	d0, d4, d7
 800942a:	eeb0 7b40 	vmov.f64	d7, d0
 800942e:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8009432:	ee36 3b47 	vsub.f64	d3, d6, d7
 8009436:	ee13 3a90 	vmov	r3, s7
 800943a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800943e:	1ad3      	subs	r3, r2, r3
 8009440:	2b31      	cmp	r3, #49	; 0x31
 8009442:	dc17      	bgt.n	8009474 <__ieee754_rem_pio2+0x16c>
 8009444:	eeb0 0b46 	vmov.f64	d0, d6
 8009448:	ed84 3b00 	vstr	d3, [r4]
 800944c:	ed94 6b00 	vldr	d6, [r4]
 8009450:	2d00      	cmp	r5, #0
 8009452:	ee30 0b46 	vsub.f64	d0, d0, d6
 8009456:	ee30 0b47 	vsub.f64	d0, d0, d7
 800945a:	ed84 0b02 	vstr	d0, [r4, #8]
 800945e:	da83      	bge.n	8009368 <__ieee754_rem_pio2+0x60>
 8009460:	eeb1 6b46 	vneg.f64	d6, d6
 8009464:	eeb1 0b40 	vneg.f64	d0, d0
 8009468:	ed84 6b00 	vstr	d6, [r4]
 800946c:	ed84 0b02 	vstr	d0, [r4, #8]
 8009470:	4240      	negs	r0, r0
 8009472:	e779      	b.n	8009368 <__ieee754_rem_pio2+0x60>
 8009474:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 8009560 <__ieee754_rem_pio2+0x258>
 8009478:	eeb0 0b46 	vmov.f64	d0, d6
 800947c:	eea4 0b03 	vfma.f64	d0, d4, d3
 8009480:	ee36 7b40 	vsub.f64	d7, d6, d0
 8009484:	ed9f 6b38 	vldr	d6, [pc, #224]	; 8009568 <__ieee754_rem_pio2+0x260>
 8009488:	eea4 7b03 	vfma.f64	d7, d4, d3
 800948c:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8009490:	ee30 6b47 	vsub.f64	d6, d0, d7
 8009494:	e7b0      	b.n	80093f8 <__ieee754_rem_pio2+0xf0>
 8009496:	4b3c      	ldr	r3, [pc, #240]	; (8009588 <__ieee754_rem_pio2+0x280>)
 8009498:	429e      	cmp	r6, r3
 800949a:	dd06      	ble.n	80094aa <__ieee754_rem_pio2+0x1a2>
 800949c:	ee30 7b40 	vsub.f64	d7, d0, d0
 80094a0:	ed80 7b02 	vstr	d7, [r0, #8]
 80094a4:	ed80 7b00 	vstr	d7, [r0]
 80094a8:	e740      	b.n	800932c <__ieee754_rem_pio2+0x24>
 80094aa:	1532      	asrs	r2, r6, #20
 80094ac:	ee10 0a10 	vmov	r0, s0
 80094b0:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 80094b4:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 80094b8:	ec41 0b17 	vmov	d7, r0, r1
 80094bc:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 80094c0:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 8009570 <__ieee754_rem_pio2+0x268>
 80094c4:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 80094c8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80094cc:	ed8d 6b02 	vstr	d6, [sp, #8]
 80094d0:	ee27 7b05 	vmul.f64	d7, d7, d5
 80094d4:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 80094d8:	a902      	add	r1, sp, #8
 80094da:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 80094de:	ee37 7b46 	vsub.f64	d7, d7, d6
 80094e2:	ed8d 6b04 	vstr	d6, [sp, #16]
 80094e6:	ee27 7b05 	vmul.f64	d7, d7, d5
 80094ea:	ed8d 7b06 	vstr	d7, [sp, #24]
 80094ee:	2603      	movs	r6, #3
 80094f0:	4608      	mov	r0, r1
 80094f2:	ed91 7b04 	vldr	d7, [r1, #16]
 80094f6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80094fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094fe:	4633      	mov	r3, r6
 8009500:	f1a1 0108 	sub.w	r1, r1, #8
 8009504:	f106 36ff 	add.w	r6, r6, #4294967295
 8009508:	d0f3      	beq.n	80094f2 <__ieee754_rem_pio2+0x1ea>
 800950a:	4920      	ldr	r1, [pc, #128]	; (800958c <__ieee754_rem_pio2+0x284>)
 800950c:	9101      	str	r1, [sp, #4]
 800950e:	2102      	movs	r1, #2
 8009510:	9100      	str	r1, [sp, #0]
 8009512:	4621      	mov	r1, r4
 8009514:	f000 f8a8 	bl	8009668 <__kernel_rem_pio2>
 8009518:	2d00      	cmp	r5, #0
 800951a:	f6bf af25 	bge.w	8009368 <__ieee754_rem_pio2+0x60>
 800951e:	ed94 7b00 	vldr	d7, [r4]
 8009522:	eeb1 7b47 	vneg.f64	d7, d7
 8009526:	ed84 7b00 	vstr	d7, [r4]
 800952a:	ed94 7b02 	vldr	d7, [r4, #8]
 800952e:	eeb1 7b47 	vneg.f64	d7, d7
 8009532:	ed84 7b02 	vstr	d7, [r4, #8]
 8009536:	e79b      	b.n	8009470 <__ieee754_rem_pio2+0x168>
 8009538:	54400000 	.word	0x54400000
 800953c:	3ff921fb 	.word	0x3ff921fb
 8009540:	1a626331 	.word	0x1a626331
 8009544:	3dd0b461 	.word	0x3dd0b461
 8009548:	1a600000 	.word	0x1a600000
 800954c:	3dd0b461 	.word	0x3dd0b461
 8009550:	2e037073 	.word	0x2e037073
 8009554:	3ba3198a 	.word	0x3ba3198a
 8009558:	6dc9c883 	.word	0x6dc9c883
 800955c:	3fe45f30 	.word	0x3fe45f30
 8009560:	2e000000 	.word	0x2e000000
 8009564:	3ba3198a 	.word	0x3ba3198a
 8009568:	252049c1 	.word	0x252049c1
 800956c:	397b839a 	.word	0x397b839a
 8009570:	00000000 	.word	0x00000000
 8009574:	41700000 	.word	0x41700000
 8009578:	3fe921fb 	.word	0x3fe921fb
 800957c:	4002d97b 	.word	0x4002d97b
 8009580:	413921fb 	.word	0x413921fb
 8009584:	08009fb4 	.word	0x08009fb4
 8009588:	7fefffff 	.word	0x7fefffff
 800958c:	0800a034 	.word	0x0800a034

08009590 <__kernel_cos>:
 8009590:	ee10 1a90 	vmov	r1, s1
 8009594:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8009598:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800959c:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 80095a0:	da05      	bge.n	80095ae <__kernel_cos+0x1e>
 80095a2:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 80095a6:	ee17 3a90 	vmov	r3, s15
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d03d      	beq.n	800962a <__kernel_cos+0x9a>
 80095ae:	ee20 3b00 	vmul.f64	d3, d0, d0
 80095b2:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8009630 <__kernel_cos+0xa0>
 80095b6:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8009638 <__kernel_cos+0xa8>
 80095ba:	eea3 6b07 	vfma.f64	d6, d3, d7
 80095be:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8009640 <__kernel_cos+0xb0>
 80095c2:	eea6 7b03 	vfma.f64	d7, d6, d3
 80095c6:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8009648 <__kernel_cos+0xb8>
 80095ca:	eea7 6b03 	vfma.f64	d6, d7, d3
 80095ce:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8009650 <__kernel_cos+0xc0>
 80095d2:	4b23      	ldr	r3, [pc, #140]	; (8009660 <__kernel_cos+0xd0>)
 80095d4:	eea6 7b03 	vfma.f64	d7, d6, d3
 80095d8:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8009658 <__kernel_cos+0xc8>
 80095dc:	4299      	cmp	r1, r3
 80095de:	eea7 6b03 	vfma.f64	d6, d7, d3
 80095e2:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80095e6:	ee26 5b03 	vmul.f64	d5, d6, d3
 80095ea:	ee23 7b07 	vmul.f64	d7, d3, d7
 80095ee:	ee21 6b40 	vnmul.f64	d6, d1, d0
 80095f2:	eea3 6b05 	vfma.f64	d6, d3, d5
 80095f6:	dc04      	bgt.n	8009602 <__kernel_cos+0x72>
 80095f8:	ee37 6b46 	vsub.f64	d6, d7, d6
 80095fc:	ee34 0b46 	vsub.f64	d0, d4, d6
 8009600:	4770      	bx	lr
 8009602:	4b18      	ldr	r3, [pc, #96]	; (8009664 <__kernel_cos+0xd4>)
 8009604:	4299      	cmp	r1, r3
 8009606:	dc0d      	bgt.n	8009624 <__kernel_cos+0x94>
 8009608:	2200      	movs	r2, #0
 800960a:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 800960e:	ec43 2b15 	vmov	d5, r2, r3
 8009612:	ee34 0b45 	vsub.f64	d0, d4, d5
 8009616:	ee37 7b45 	vsub.f64	d7, d7, d5
 800961a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800961e:	ee30 0b47 	vsub.f64	d0, d0, d7
 8009622:	4770      	bx	lr
 8009624:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8009628:	e7f3      	b.n	8009612 <__kernel_cos+0x82>
 800962a:	eeb0 0b44 	vmov.f64	d0, d4
 800962e:	4770      	bx	lr
 8009630:	be8838d4 	.word	0xbe8838d4
 8009634:	bda8fae9 	.word	0xbda8fae9
 8009638:	bdb4b1c4 	.word	0xbdb4b1c4
 800963c:	3e21ee9e 	.word	0x3e21ee9e
 8009640:	809c52ad 	.word	0x809c52ad
 8009644:	be927e4f 	.word	0xbe927e4f
 8009648:	19cb1590 	.word	0x19cb1590
 800964c:	3efa01a0 	.word	0x3efa01a0
 8009650:	16c15177 	.word	0x16c15177
 8009654:	bf56c16c 	.word	0xbf56c16c
 8009658:	5555554c 	.word	0x5555554c
 800965c:	3fa55555 	.word	0x3fa55555
 8009660:	3fd33332 	.word	0x3fd33332
 8009664:	3fe90000 	.word	0x3fe90000

08009668 <__kernel_rem_pio2>:
 8009668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800966c:	ed2d 8b06 	vpush	{d8-d10}
 8009670:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 8009674:	460f      	mov	r7, r1
 8009676:	9002      	str	r0, [sp, #8]
 8009678:	49c5      	ldr	r1, [pc, #788]	; (8009990 <__kernel_rem_pio2+0x328>)
 800967a:	98a2      	ldr	r0, [sp, #648]	; 0x288
 800967c:	f8dd e28c 	ldr.w	lr, [sp, #652]	; 0x28c
 8009680:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 8009684:	9301      	str	r3, [sp, #4]
 8009686:	f112 0f14 	cmn.w	r2, #20
 800968a:	bfa8      	it	ge
 800968c:	2018      	movge	r0, #24
 800968e:	f103 31ff 	add.w	r1, r3, #4294967295
 8009692:	bfb8      	it	lt
 8009694:	2000      	movlt	r0, #0
 8009696:	f06f 0417 	mvn.w	r4, #23
 800969a:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 8009978 <__kernel_rem_pio2+0x310>
 800969e:	bfa4      	itt	ge
 80096a0:	f1a2 0a03 	subge.w	sl, r2, #3
 80096a4:	fb9a f0f0 	sdivge	r0, sl, r0
 80096a8:	fb00 4404 	mla	r4, r0, r4, r4
 80096ac:	1a46      	subs	r6, r0, r1
 80096ae:	4414      	add	r4, r2
 80096b0:	eb09 0c01 	add.w	ip, r9, r1
 80096b4:	ad1a      	add	r5, sp, #104	; 0x68
 80096b6:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
 80096ba:	2200      	movs	r2, #0
 80096bc:	4562      	cmp	r2, ip
 80096be:	dd10      	ble.n	80096e2 <__kernel_rem_pio2+0x7a>
 80096c0:	9a01      	ldr	r2, [sp, #4]
 80096c2:	ab1a      	add	r3, sp, #104	; 0x68
 80096c4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80096c8:	f50d 7ad4 	add.w	sl, sp, #424	; 0x1a8
 80096cc:	f04f 0c00 	mov.w	ip, #0
 80096d0:	45cc      	cmp	ip, r9
 80096d2:	dc26      	bgt.n	8009722 <__kernel_rem_pio2+0xba>
 80096d4:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 8009978 <__kernel_rem_pio2+0x310>
 80096d8:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80096dc:	4616      	mov	r6, r2
 80096de:	2500      	movs	r5, #0
 80096e0:	e015      	b.n	800970e <__kernel_rem_pio2+0xa6>
 80096e2:	42d6      	cmn	r6, r2
 80096e4:	d409      	bmi.n	80096fa <__kernel_rem_pio2+0x92>
 80096e6:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
 80096ea:	ee07 3a90 	vmov	s15, r3
 80096ee:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80096f2:	eca5 7b02 	vstmia	r5!, {d7}
 80096f6:	3201      	adds	r2, #1
 80096f8:	e7e0      	b.n	80096bc <__kernel_rem_pio2+0x54>
 80096fa:	eeb0 7b46 	vmov.f64	d7, d6
 80096fe:	e7f8      	b.n	80096f2 <__kernel_rem_pio2+0x8a>
 8009700:	ecb8 5b02 	vldmia	r8!, {d5}
 8009704:	ed96 6b00 	vldr	d6, [r6]
 8009708:	3501      	adds	r5, #1
 800970a:	eea5 7b06 	vfma.f64	d7, d5, d6
 800970e:	428d      	cmp	r5, r1
 8009710:	f1a6 0608 	sub.w	r6, r6, #8
 8009714:	ddf4      	ble.n	8009700 <__kernel_rem_pio2+0x98>
 8009716:	ecaa 7b02 	vstmia	sl!, {d7}
 800971a:	f10c 0c01 	add.w	ip, ip, #1
 800971e:	3208      	adds	r2, #8
 8009720:	e7d6      	b.n	80096d0 <__kernel_rem_pio2+0x68>
 8009722:	ab06      	add	r3, sp, #24
 8009724:	ed9f 9b96 	vldr	d9, [pc, #600]	; 8009980 <__kernel_rem_pio2+0x318>
 8009728:	ed9f ab97 	vldr	d10, [pc, #604]	; 8009988 <__kernel_rem_pio2+0x320>
 800972c:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8009730:	9303      	str	r3, [sp, #12]
 8009732:	eb0e 0a80 	add.w	sl, lr, r0, lsl #2
 8009736:	464d      	mov	r5, r9
 8009738:	00eb      	lsls	r3, r5, #3
 800973a:	9304      	str	r3, [sp, #16]
 800973c:	ab92      	add	r3, sp, #584	; 0x248
 800973e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8009742:	f10d 0b18 	add.w	fp, sp, #24
 8009746:	ab6a      	add	r3, sp, #424	; 0x1a8
 8009748:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 800974c:	465e      	mov	r6, fp
 800974e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8009752:	4628      	mov	r0, r5
 8009754:	2800      	cmp	r0, #0
 8009756:	f1a2 0208 	sub.w	r2, r2, #8
 800975a:	dc4c      	bgt.n	80097f6 <__kernel_rem_pio2+0x18e>
 800975c:	4620      	mov	r0, r4
 800975e:	9105      	str	r1, [sp, #20]
 8009760:	f000 faf2 	bl	8009d48 <scalbn>
 8009764:	eeb0 8b40 	vmov.f64	d8, d0
 8009768:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 800976c:	ee28 0b00 	vmul.f64	d0, d8, d0
 8009770:	f000 fa76 	bl	8009c60 <floor>
 8009774:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8009778:	eea0 8b47 	vfms.f64	d8, d0, d7
 800977c:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8009780:	2c00      	cmp	r4, #0
 8009782:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 8009786:	ee17 8a90 	vmov	r8, s15
 800978a:	ee38 8b40 	vsub.f64	d8, d8, d0
 800978e:	9905      	ldr	r1, [sp, #20]
 8009790:	dd43      	ble.n	800981a <__kernel_rem_pio2+0x1b2>
 8009792:	1e68      	subs	r0, r5, #1
 8009794:	ab06      	add	r3, sp, #24
 8009796:	f1c4 0c18 	rsb	ip, r4, #24
 800979a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 800979e:	fa46 f20c 	asr.w	r2, r6, ip
 80097a2:	4490      	add	r8, r2
 80097a4:	fa02 f20c 	lsl.w	r2, r2, ip
 80097a8:	1ab6      	subs	r6, r6, r2
 80097aa:	f1c4 0217 	rsb	r2, r4, #23
 80097ae:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 80097b2:	4116      	asrs	r6, r2
 80097b4:	2e00      	cmp	r6, #0
 80097b6:	dd3f      	ble.n	8009838 <__kernel_rem_pio2+0x1d0>
 80097b8:	f04f 0c00 	mov.w	ip, #0
 80097bc:	f108 0801 	add.w	r8, r8, #1
 80097c0:	4660      	mov	r0, ip
 80097c2:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 80097c6:	4565      	cmp	r5, ip
 80097c8:	dc6e      	bgt.n	80098a8 <__kernel_rem_pio2+0x240>
 80097ca:	2c00      	cmp	r4, #0
 80097cc:	dd04      	ble.n	80097d8 <__kernel_rem_pio2+0x170>
 80097ce:	2c01      	cmp	r4, #1
 80097d0:	d07f      	beq.n	80098d2 <__kernel_rem_pio2+0x26a>
 80097d2:	2c02      	cmp	r4, #2
 80097d4:	f000 8087 	beq.w	80098e6 <__kernel_rem_pio2+0x27e>
 80097d8:	2e02      	cmp	r6, #2
 80097da:	d12d      	bne.n	8009838 <__kernel_rem_pio2+0x1d0>
 80097dc:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80097e0:	ee30 8b48 	vsub.f64	d8, d0, d8
 80097e4:	b340      	cbz	r0, 8009838 <__kernel_rem_pio2+0x1d0>
 80097e6:	4620      	mov	r0, r4
 80097e8:	9105      	str	r1, [sp, #20]
 80097ea:	f000 faad 	bl	8009d48 <scalbn>
 80097ee:	9905      	ldr	r1, [sp, #20]
 80097f0:	ee38 8b40 	vsub.f64	d8, d8, d0
 80097f4:	e020      	b.n	8009838 <__kernel_rem_pio2+0x1d0>
 80097f6:	ee20 7b09 	vmul.f64	d7, d0, d9
 80097fa:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80097fe:	3801      	subs	r0, #1
 8009800:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8009804:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8009808:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800980c:	eca6 0a01 	vstmia	r6!, {s0}
 8009810:	ed92 0b00 	vldr	d0, [r2]
 8009814:	ee37 0b00 	vadd.f64	d0, d7, d0
 8009818:	e79c      	b.n	8009754 <__kernel_rem_pio2+0xec>
 800981a:	d105      	bne.n	8009828 <__kernel_rem_pio2+0x1c0>
 800981c:	1e6a      	subs	r2, r5, #1
 800981e:	ab06      	add	r3, sp, #24
 8009820:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8009824:	15f6      	asrs	r6, r6, #23
 8009826:	e7c5      	b.n	80097b4 <__kernel_rem_pio2+0x14c>
 8009828:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800982c:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8009830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009834:	da36      	bge.n	80098a4 <__kernel_rem_pio2+0x23c>
 8009836:	2600      	movs	r6, #0
 8009838:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800983c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009840:	f040 80aa 	bne.w	8009998 <__kernel_rem_pio2+0x330>
 8009844:	f105 3bff 	add.w	fp, r5, #4294967295
 8009848:	4658      	mov	r0, fp
 800984a:	2200      	movs	r2, #0
 800984c:	4548      	cmp	r0, r9
 800984e:	da52      	bge.n	80098f6 <__kernel_rem_pio2+0x28e>
 8009850:	2a00      	cmp	r2, #0
 8009852:	f000 8081 	beq.w	8009958 <__kernel_rem_pio2+0x2f0>
 8009856:	ab06      	add	r3, sp, #24
 8009858:	3c18      	subs	r4, #24
 800985a:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800985e:	2b00      	cmp	r3, #0
 8009860:	f000 8087 	beq.w	8009972 <__kernel_rem_pio2+0x30a>
 8009864:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8009868:	4620      	mov	r0, r4
 800986a:	f000 fa6d 	bl	8009d48 <scalbn>
 800986e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009872:	ed9f 6b43 	vldr	d6, [pc, #268]	; 8009980 <__kernel_rem_pio2+0x318>
 8009876:	a96a      	add	r1, sp, #424	; 0x1a8
 8009878:	f103 0208 	add.w	r2, r3, #8
 800987c:	1888      	adds	r0, r1, r2
 800987e:	4659      	mov	r1, fp
 8009880:	2900      	cmp	r1, #0
 8009882:	f280 80b7 	bge.w	80099f4 <__kernel_rem_pio2+0x38c>
 8009886:	4659      	mov	r1, fp
 8009888:	2900      	cmp	r1, #0
 800988a:	f2c0 80d5 	blt.w	8009a38 <__kernel_rem_pio2+0x3d0>
 800988e:	a86a      	add	r0, sp, #424	; 0x1a8
 8009890:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
 8009894:	ed9f 7b38 	vldr	d7, [pc, #224]	; 8009978 <__kernel_rem_pio2+0x310>
 8009898:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 8009994 <__kernel_rem_pio2+0x32c>
 800989c:	2400      	movs	r4, #0
 800989e:	ebab 0001 	sub.w	r0, fp, r1
 80098a2:	e0be      	b.n	8009a22 <__kernel_rem_pio2+0x3ba>
 80098a4:	2602      	movs	r6, #2
 80098a6:	e787      	b.n	80097b8 <__kernel_rem_pio2+0x150>
 80098a8:	f8db 2000 	ldr.w	r2, [fp]
 80098ac:	b958      	cbnz	r0, 80098c6 <__kernel_rem_pio2+0x25e>
 80098ae:	b122      	cbz	r2, 80098ba <__kernel_rem_pio2+0x252>
 80098b0:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 80098b4:	f8cb 2000 	str.w	r2, [fp]
 80098b8:	2201      	movs	r2, #1
 80098ba:	f10c 0c01 	add.w	ip, ip, #1
 80098be:	f10b 0b04 	add.w	fp, fp, #4
 80098c2:	4610      	mov	r0, r2
 80098c4:	e77f      	b.n	80097c6 <__kernel_rem_pio2+0x15e>
 80098c6:	ebae 0202 	sub.w	r2, lr, r2
 80098ca:	f8cb 2000 	str.w	r2, [fp]
 80098ce:	4602      	mov	r2, r0
 80098d0:	e7f3      	b.n	80098ba <__kernel_rem_pio2+0x252>
 80098d2:	f105 3cff 	add.w	ip, r5, #4294967295
 80098d6:	ab06      	add	r3, sp, #24
 80098d8:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 80098dc:	f3c2 0216 	ubfx	r2, r2, #0, #23
 80098e0:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 80098e4:	e778      	b.n	80097d8 <__kernel_rem_pio2+0x170>
 80098e6:	f105 3cff 	add.w	ip, r5, #4294967295
 80098ea:	ab06      	add	r3, sp, #24
 80098ec:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 80098f0:	f3c2 0215 	ubfx	r2, r2, #0, #22
 80098f4:	e7f4      	b.n	80098e0 <__kernel_rem_pio2+0x278>
 80098f6:	ab06      	add	r3, sp, #24
 80098f8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80098fc:	3801      	subs	r0, #1
 80098fe:	431a      	orrs	r2, r3
 8009900:	e7a4      	b.n	800984c <__kernel_rem_pio2+0x1e4>
 8009902:	f10c 0c01 	add.w	ip, ip, #1
 8009906:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 800990a:	2800      	cmp	r0, #0
 800990c:	d0f9      	beq.n	8009902 <__kernel_rem_pio2+0x29a>
 800990e:	9b04      	ldr	r3, [sp, #16]
 8009910:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8009914:	eb0d 0203 	add.w	r2, sp, r3
 8009918:	9b01      	ldr	r3, [sp, #4]
 800991a:	18e8      	adds	r0, r5, r3
 800991c:	ab1a      	add	r3, sp, #104	; 0x68
 800991e:	1c6e      	adds	r6, r5, #1
 8009920:	3a98      	subs	r2, #152	; 0x98
 8009922:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8009926:	4465      	add	r5, ip
 8009928:	42b5      	cmp	r5, r6
 800992a:	f6ff af05 	blt.w	8009738 <__kernel_rem_pio2+0xd0>
 800992e:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
 8009932:	f8dd e008 	ldr.w	lr, [sp, #8]
 8009936:	ee07 3a90 	vmov	s15, r3
 800993a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800993e:	f04f 0c00 	mov.w	ip, #0
 8009942:	eca0 7b02 	vstmia	r0!, {d7}
 8009946:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8009978 <__kernel_rem_pio2+0x310>
 800994a:	4680      	mov	r8, r0
 800994c:	458c      	cmp	ip, r1
 800994e:	dd07      	ble.n	8009960 <__kernel_rem_pio2+0x2f8>
 8009950:	eca2 7b02 	vstmia	r2!, {d7}
 8009954:	3601      	adds	r6, #1
 8009956:	e7e7      	b.n	8009928 <__kernel_rem_pio2+0x2c0>
 8009958:	9a03      	ldr	r2, [sp, #12]
 800995a:	f04f 0c01 	mov.w	ip, #1
 800995e:	e7d2      	b.n	8009906 <__kernel_rem_pio2+0x29e>
 8009960:	ecbe 5b02 	vldmia	lr!, {d5}
 8009964:	ed38 6b02 	vldmdb	r8!, {d6}
 8009968:	f10c 0c01 	add.w	ip, ip, #1
 800996c:	eea5 7b06 	vfma.f64	d7, d5, d6
 8009970:	e7ec      	b.n	800994c <__kernel_rem_pio2+0x2e4>
 8009972:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009976:	e76e      	b.n	8009856 <__kernel_rem_pio2+0x1ee>
	...
 8009984:	3e700000 	.word	0x3e700000
 8009988:	00000000 	.word	0x00000000
 800998c:	41700000 	.word	0x41700000
 8009990:	0800a180 	.word	0x0800a180
 8009994:	0800a140 	.word	0x0800a140
 8009998:	4260      	negs	r0, r4
 800999a:	eeb0 0b48 	vmov.f64	d0, d8
 800999e:	f000 f9d3 	bl	8009d48 <scalbn>
 80099a2:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8009b80 <__kernel_rem_pio2+0x518>
 80099a6:	eeb4 0bc6 	vcmpe.f64	d0, d6
 80099aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099ae:	db18      	blt.n	80099e2 <__kernel_rem_pio2+0x37a>
 80099b0:	ed9f 7b75 	vldr	d7, [pc, #468]	; 8009b88 <__kernel_rem_pio2+0x520>
 80099b4:	ee20 7b07 	vmul.f64	d7, d0, d7
 80099b8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80099bc:	aa06      	add	r2, sp, #24
 80099be:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 80099c2:	eea5 0b46 	vfms.f64	d0, d5, d6
 80099c6:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80099ca:	f105 0b01 	add.w	fp, r5, #1
 80099ce:	ee10 3a10 	vmov	r3, s0
 80099d2:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 80099d6:	ee17 3a10 	vmov	r3, s14
 80099da:	3418      	adds	r4, #24
 80099dc:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 80099e0:	e740      	b.n	8009864 <__kernel_rem_pio2+0x1fc>
 80099e2:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80099e6:	aa06      	add	r2, sp, #24
 80099e8:	ee10 3a10 	vmov	r3, s0
 80099ec:	46ab      	mov	fp, r5
 80099ee:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 80099f2:	e737      	b.n	8009864 <__kernel_rem_pio2+0x1fc>
 80099f4:	ac06      	add	r4, sp, #24
 80099f6:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
 80099fa:	9401      	str	r4, [sp, #4]
 80099fc:	ee07 4a90 	vmov	s15, r4
 8009a00:	3901      	subs	r1, #1
 8009a02:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009a06:	ee27 7b00 	vmul.f64	d7, d7, d0
 8009a0a:	ee20 0b06 	vmul.f64	d0, d0, d6
 8009a0e:	ed20 7b02 	vstmdb	r0!, {d7}
 8009a12:	e735      	b.n	8009880 <__kernel_rem_pio2+0x218>
 8009a14:	ecbc 5b02 	vldmia	ip!, {d5}
 8009a18:	ecb5 6b02 	vldmia	r5!, {d6}
 8009a1c:	3401      	adds	r4, #1
 8009a1e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8009a22:	454c      	cmp	r4, r9
 8009a24:	dc01      	bgt.n	8009a2a <__kernel_rem_pio2+0x3c2>
 8009a26:	4284      	cmp	r4, r0
 8009a28:	ddf4      	ble.n	8009a14 <__kernel_rem_pio2+0x3ac>
 8009a2a:	ac42      	add	r4, sp, #264	; 0x108
 8009a2c:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8009a30:	ed80 7b00 	vstr	d7, [r0]
 8009a34:	3901      	subs	r1, #1
 8009a36:	e727      	b.n	8009888 <__kernel_rem_pio2+0x220>
 8009a38:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8009a3a:	2902      	cmp	r1, #2
 8009a3c:	dc0a      	bgt.n	8009a54 <__kernel_rem_pio2+0x3ec>
 8009a3e:	2900      	cmp	r1, #0
 8009a40:	dc2c      	bgt.n	8009a9c <__kernel_rem_pio2+0x434>
 8009a42:	d045      	beq.n	8009ad0 <__kernel_rem_pio2+0x468>
 8009a44:	f008 0007 	and.w	r0, r8, #7
 8009a48:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 8009a4c:	ecbd 8b06 	vpop	{d8-d10}
 8009a50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a54:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 8009a56:	2a03      	cmp	r2, #3
 8009a58:	d1f4      	bne.n	8009a44 <__kernel_rem_pio2+0x3dc>
 8009a5a:	aa42      	add	r2, sp, #264	; 0x108
 8009a5c:	4413      	add	r3, r2
 8009a5e:	461a      	mov	r2, r3
 8009a60:	4619      	mov	r1, r3
 8009a62:	4658      	mov	r0, fp
 8009a64:	2800      	cmp	r0, #0
 8009a66:	f1a1 0108 	sub.w	r1, r1, #8
 8009a6a:	dc54      	bgt.n	8009b16 <__kernel_rem_pio2+0x4ae>
 8009a6c:	4659      	mov	r1, fp
 8009a6e:	2901      	cmp	r1, #1
 8009a70:	f1a2 0208 	sub.w	r2, r2, #8
 8009a74:	dc5f      	bgt.n	8009b36 <__kernel_rem_pio2+0x4ce>
 8009a76:	ed9f 7b46 	vldr	d7, [pc, #280]	; 8009b90 <__kernel_rem_pio2+0x528>
 8009a7a:	3308      	adds	r3, #8
 8009a7c:	f1bb 0f01 	cmp.w	fp, #1
 8009a80:	dc69      	bgt.n	8009b56 <__kernel_rem_pio2+0x4ee>
 8009a82:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 8009a86:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 8009a8a:	2e00      	cmp	r6, #0
 8009a8c:	d16a      	bne.n	8009b64 <__kernel_rem_pio2+0x4fc>
 8009a8e:	ed87 5b00 	vstr	d5, [r7]
 8009a92:	ed87 6b02 	vstr	d6, [r7, #8]
 8009a96:	ed87 7b04 	vstr	d7, [r7, #16]
 8009a9a:	e7d3      	b.n	8009a44 <__kernel_rem_pio2+0x3dc>
 8009a9c:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8009b90 <__kernel_rem_pio2+0x528>
 8009aa0:	ab42      	add	r3, sp, #264	; 0x108
 8009aa2:	441a      	add	r2, r3
 8009aa4:	465b      	mov	r3, fp
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	da26      	bge.n	8009af8 <__kernel_rem_pio2+0x490>
 8009aaa:	b35e      	cbz	r6, 8009b04 <__kernel_rem_pio2+0x49c>
 8009aac:	eeb1 7b46 	vneg.f64	d7, d6
 8009ab0:	ed87 7b00 	vstr	d7, [r7]
 8009ab4:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 8009ab8:	aa44      	add	r2, sp, #272	; 0x110
 8009aba:	2301      	movs	r3, #1
 8009abc:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009ac0:	459b      	cmp	fp, r3
 8009ac2:	da22      	bge.n	8009b0a <__kernel_rem_pio2+0x4a2>
 8009ac4:	b10e      	cbz	r6, 8009aca <__kernel_rem_pio2+0x462>
 8009ac6:	eeb1 7b47 	vneg.f64	d7, d7
 8009aca:	ed87 7b02 	vstr	d7, [r7, #8]
 8009ace:	e7b9      	b.n	8009a44 <__kernel_rem_pio2+0x3dc>
 8009ad0:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8009b90 <__kernel_rem_pio2+0x528>
 8009ad4:	ab42      	add	r3, sp, #264	; 0x108
 8009ad6:	441a      	add	r2, r3
 8009ad8:	f1bb 0f00 	cmp.w	fp, #0
 8009adc:	da05      	bge.n	8009aea <__kernel_rem_pio2+0x482>
 8009ade:	b10e      	cbz	r6, 8009ae4 <__kernel_rem_pio2+0x47c>
 8009ae0:	eeb1 7b47 	vneg.f64	d7, d7
 8009ae4:	ed87 7b00 	vstr	d7, [r7]
 8009ae8:	e7ac      	b.n	8009a44 <__kernel_rem_pio2+0x3dc>
 8009aea:	ed32 6b02 	vldmdb	r2!, {d6}
 8009aee:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009af2:	ee37 7b06 	vadd.f64	d7, d7, d6
 8009af6:	e7ef      	b.n	8009ad8 <__kernel_rem_pio2+0x470>
 8009af8:	ed32 7b02 	vldmdb	r2!, {d7}
 8009afc:	3b01      	subs	r3, #1
 8009afe:	ee36 6b07 	vadd.f64	d6, d6, d7
 8009b02:	e7d0      	b.n	8009aa6 <__kernel_rem_pio2+0x43e>
 8009b04:	eeb0 7b46 	vmov.f64	d7, d6
 8009b08:	e7d2      	b.n	8009ab0 <__kernel_rem_pio2+0x448>
 8009b0a:	ecb2 6b02 	vldmia	r2!, {d6}
 8009b0e:	3301      	adds	r3, #1
 8009b10:	ee37 7b06 	vadd.f64	d7, d7, d6
 8009b14:	e7d4      	b.n	8009ac0 <__kernel_rem_pio2+0x458>
 8009b16:	ed91 7b00 	vldr	d7, [r1]
 8009b1a:	ed91 5b02 	vldr	d5, [r1, #8]
 8009b1e:	3801      	subs	r0, #1
 8009b20:	ee37 6b05 	vadd.f64	d6, d7, d5
 8009b24:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009b28:	ed81 6b00 	vstr	d6, [r1]
 8009b2c:	ee37 7b05 	vadd.f64	d7, d7, d5
 8009b30:	ed81 7b02 	vstr	d7, [r1, #8]
 8009b34:	e796      	b.n	8009a64 <__kernel_rem_pio2+0x3fc>
 8009b36:	ed92 7b00 	vldr	d7, [r2]
 8009b3a:	ed92 5b02 	vldr	d5, [r2, #8]
 8009b3e:	3901      	subs	r1, #1
 8009b40:	ee37 6b05 	vadd.f64	d6, d7, d5
 8009b44:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009b48:	ed82 6b00 	vstr	d6, [r2]
 8009b4c:	ee37 7b05 	vadd.f64	d7, d7, d5
 8009b50:	ed82 7b02 	vstr	d7, [r2, #8]
 8009b54:	e78b      	b.n	8009a6e <__kernel_rem_pio2+0x406>
 8009b56:	ed33 6b02 	vldmdb	r3!, {d6}
 8009b5a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009b5e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8009b62:	e78b      	b.n	8009a7c <__kernel_rem_pio2+0x414>
 8009b64:	eeb1 5b45 	vneg.f64	d5, d5
 8009b68:	eeb1 6b46 	vneg.f64	d6, d6
 8009b6c:	ed87 5b00 	vstr	d5, [r7]
 8009b70:	eeb1 7b47 	vneg.f64	d7, d7
 8009b74:	ed87 6b02 	vstr	d6, [r7, #8]
 8009b78:	e78d      	b.n	8009a96 <__kernel_rem_pio2+0x42e>
 8009b7a:	bf00      	nop
 8009b7c:	f3af 8000 	nop.w
 8009b80:	00000000 	.word	0x00000000
 8009b84:	41700000 	.word	0x41700000
 8009b88:	00000000 	.word	0x00000000
 8009b8c:	3e700000 	.word	0x3e700000
	...

08009b98 <__kernel_sin>:
 8009b98:	ee10 3a90 	vmov	r3, s1
 8009b9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009ba0:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8009ba4:	da04      	bge.n	8009bb0 <__kernel_sin+0x18>
 8009ba6:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8009baa:	ee17 3a90 	vmov	r3, s15
 8009bae:	b35b      	cbz	r3, 8009c08 <__kernel_sin+0x70>
 8009bb0:	ee20 6b00 	vmul.f64	d6, d0, d0
 8009bb4:	ee20 5b06 	vmul.f64	d5, d0, d6
 8009bb8:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8009c10 <__kernel_sin+0x78>
 8009bbc:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8009c18 <__kernel_sin+0x80>
 8009bc0:	eea6 4b07 	vfma.f64	d4, d6, d7
 8009bc4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8009c20 <__kernel_sin+0x88>
 8009bc8:	eea4 7b06 	vfma.f64	d7, d4, d6
 8009bcc:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8009c28 <__kernel_sin+0x90>
 8009bd0:	eea7 4b06 	vfma.f64	d4, d7, d6
 8009bd4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8009c30 <__kernel_sin+0x98>
 8009bd8:	eea4 7b06 	vfma.f64	d7, d4, d6
 8009bdc:	b930      	cbnz	r0, 8009bec <__kernel_sin+0x54>
 8009bde:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8009c38 <__kernel_sin+0xa0>
 8009be2:	eea6 4b07 	vfma.f64	d4, d6, d7
 8009be6:	eea4 0b05 	vfma.f64	d0, d4, d5
 8009bea:	4770      	bx	lr
 8009bec:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8009bf0:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8009bf4:	eea1 7b04 	vfma.f64	d7, d1, d4
 8009bf8:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8009bfc:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8009c40 <__kernel_sin+0xa8>
 8009c00:	eea5 1b07 	vfma.f64	d1, d5, d7
 8009c04:	ee30 0b41 	vsub.f64	d0, d0, d1
 8009c08:	4770      	bx	lr
 8009c0a:	bf00      	nop
 8009c0c:	f3af 8000 	nop.w
 8009c10:	5acfd57c 	.word	0x5acfd57c
 8009c14:	3de5d93a 	.word	0x3de5d93a
 8009c18:	8a2b9ceb 	.word	0x8a2b9ceb
 8009c1c:	be5ae5e6 	.word	0xbe5ae5e6
 8009c20:	57b1fe7d 	.word	0x57b1fe7d
 8009c24:	3ec71de3 	.word	0x3ec71de3
 8009c28:	19c161d5 	.word	0x19c161d5
 8009c2c:	bf2a01a0 	.word	0xbf2a01a0
 8009c30:	1110f8a6 	.word	0x1110f8a6
 8009c34:	3f811111 	.word	0x3f811111
 8009c38:	55555549 	.word	0x55555549
 8009c3c:	bfc55555 	.word	0xbfc55555
 8009c40:	55555549 	.word	0x55555549
 8009c44:	3fc55555 	.word	0x3fc55555

08009c48 <fabs>:
 8009c48:	ec51 0b10 	vmov	r0, r1, d0
 8009c4c:	ee10 2a10 	vmov	r2, s0
 8009c50:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009c54:	ec43 2b10 	vmov	d0, r2, r3
 8009c58:	4770      	bx	lr
 8009c5a:	0000      	movs	r0, r0
 8009c5c:	0000      	movs	r0, r0
	...

08009c60 <floor>:
 8009c60:	ee10 1a90 	vmov	r1, s1
 8009c64:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009c68:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8009c6c:	2b13      	cmp	r3, #19
 8009c6e:	b530      	push	{r4, r5, lr}
 8009c70:	ee10 0a10 	vmov	r0, s0
 8009c74:	ee10 5a10 	vmov	r5, s0
 8009c78:	dc31      	bgt.n	8009cde <floor+0x7e>
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	da15      	bge.n	8009caa <floor+0x4a>
 8009c7e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8009d38 <floor+0xd8>
 8009c82:	ee30 0b07 	vadd.f64	d0, d0, d7
 8009c86:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8009c8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c8e:	dd07      	ble.n	8009ca0 <floor+0x40>
 8009c90:	2900      	cmp	r1, #0
 8009c92:	da4e      	bge.n	8009d32 <floor+0xd2>
 8009c94:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009c98:	4318      	orrs	r0, r3
 8009c9a:	d001      	beq.n	8009ca0 <floor+0x40>
 8009c9c:	4928      	ldr	r1, [pc, #160]	; (8009d40 <floor+0xe0>)
 8009c9e:	2000      	movs	r0, #0
 8009ca0:	460b      	mov	r3, r1
 8009ca2:	4602      	mov	r2, r0
 8009ca4:	ec43 2b10 	vmov	d0, r2, r3
 8009ca8:	e020      	b.n	8009cec <floor+0x8c>
 8009caa:	4a26      	ldr	r2, [pc, #152]	; (8009d44 <floor+0xe4>)
 8009cac:	411a      	asrs	r2, r3
 8009cae:	ea01 0402 	and.w	r4, r1, r2
 8009cb2:	4304      	orrs	r4, r0
 8009cb4:	d01a      	beq.n	8009cec <floor+0x8c>
 8009cb6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8009d38 <floor+0xd8>
 8009cba:	ee30 0b07 	vadd.f64	d0, d0, d7
 8009cbe:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8009cc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cc6:	ddeb      	ble.n	8009ca0 <floor+0x40>
 8009cc8:	2900      	cmp	r1, #0
 8009cca:	bfbe      	ittt	lt
 8009ccc:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8009cd0:	fa40 f303 	asrlt.w	r3, r0, r3
 8009cd4:	18c9      	addlt	r1, r1, r3
 8009cd6:	ea21 0102 	bic.w	r1, r1, r2
 8009cda:	2000      	movs	r0, #0
 8009cdc:	e7e0      	b.n	8009ca0 <floor+0x40>
 8009cde:	2b33      	cmp	r3, #51	; 0x33
 8009ce0:	dd05      	ble.n	8009cee <floor+0x8e>
 8009ce2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009ce6:	d101      	bne.n	8009cec <floor+0x8c>
 8009ce8:	ee30 0b00 	vadd.f64	d0, d0, d0
 8009cec:	bd30      	pop	{r4, r5, pc}
 8009cee:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8009cf2:	f04f 32ff 	mov.w	r2, #4294967295
 8009cf6:	40e2      	lsrs	r2, r4
 8009cf8:	4202      	tst	r2, r0
 8009cfa:	d0f7      	beq.n	8009cec <floor+0x8c>
 8009cfc:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8009d38 <floor+0xd8>
 8009d00:	ee30 0b07 	vadd.f64	d0, d0, d7
 8009d04:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8009d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d0c:	ddc8      	ble.n	8009ca0 <floor+0x40>
 8009d0e:	2900      	cmp	r1, #0
 8009d10:	da02      	bge.n	8009d18 <floor+0xb8>
 8009d12:	2b14      	cmp	r3, #20
 8009d14:	d103      	bne.n	8009d1e <floor+0xbe>
 8009d16:	3101      	adds	r1, #1
 8009d18:	ea20 0002 	bic.w	r0, r0, r2
 8009d1c:	e7c0      	b.n	8009ca0 <floor+0x40>
 8009d1e:	2401      	movs	r4, #1
 8009d20:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8009d24:	fa04 f303 	lsl.w	r3, r4, r3
 8009d28:	4418      	add	r0, r3
 8009d2a:	42a8      	cmp	r0, r5
 8009d2c:	bf38      	it	cc
 8009d2e:	1909      	addcc	r1, r1, r4
 8009d30:	e7f2      	b.n	8009d18 <floor+0xb8>
 8009d32:	2000      	movs	r0, #0
 8009d34:	4601      	mov	r1, r0
 8009d36:	e7b3      	b.n	8009ca0 <floor+0x40>
 8009d38:	8800759c 	.word	0x8800759c
 8009d3c:	7e37e43c 	.word	0x7e37e43c
 8009d40:	bff00000 	.word	0xbff00000
 8009d44:	000fffff 	.word	0x000fffff

08009d48 <scalbn>:
 8009d48:	ee10 1a90 	vmov	r1, s1
 8009d4c:	b510      	push	{r4, lr}
 8009d4e:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8009d52:	b98c      	cbnz	r4, 8009d78 <scalbn+0x30>
 8009d54:	ee10 3a10 	vmov	r3, s0
 8009d58:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8009d5c:	430b      	orrs	r3, r1
 8009d5e:	d011      	beq.n	8009d84 <scalbn+0x3c>
 8009d60:	ed9f 7b31 	vldr	d7, [pc, #196]	; 8009e28 <scalbn+0xe0>
 8009d64:	4b3c      	ldr	r3, [pc, #240]	; (8009e58 <scalbn+0x110>)
 8009d66:	ee20 0b07 	vmul.f64	d0, d0, d7
 8009d6a:	4298      	cmp	r0, r3
 8009d6c:	da0b      	bge.n	8009d86 <scalbn+0x3e>
 8009d6e:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8009e30 <scalbn+0xe8>
 8009d72:	ee20 0b07 	vmul.f64	d0, d0, d7
 8009d76:	e005      	b.n	8009d84 <scalbn+0x3c>
 8009d78:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8009d7c:	429c      	cmp	r4, r3
 8009d7e:	d107      	bne.n	8009d90 <scalbn+0x48>
 8009d80:	ee30 0b00 	vadd.f64	d0, d0, d0
 8009d84:	bd10      	pop	{r4, pc}
 8009d86:	ee10 1a90 	vmov	r1, s1
 8009d8a:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8009d8e:	3c36      	subs	r4, #54	; 0x36
 8009d90:	4404      	add	r4, r0
 8009d92:	f240 73fe 	movw	r3, #2046	; 0x7fe
 8009d96:	429c      	cmp	r4, r3
 8009d98:	dd0d      	ble.n	8009db6 <scalbn+0x6e>
 8009d9a:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8009e38 <scalbn+0xf0>
 8009d9e:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8009e40 <scalbn+0xf8>
 8009da2:	eeb0 6b47 	vmov.f64	d6, d7
 8009da6:	ee10 3a90 	vmov	r3, s1
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	fe27 7b05 	vselge.f64	d7, d7, d5
 8009db0:	ee27 0b06 	vmul.f64	d0, d7, d6
 8009db4:	e7e6      	b.n	8009d84 <scalbn+0x3c>
 8009db6:	2c00      	cmp	r4, #0
 8009db8:	dd0a      	ble.n	8009dd0 <scalbn+0x88>
 8009dba:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 8009dbe:	ec53 2b10 	vmov	r2, r3, d0
 8009dc2:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8009dc6:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 8009dca:	ec43 2b10 	vmov	d0, r2, r3
 8009dce:	e7d9      	b.n	8009d84 <scalbn+0x3c>
 8009dd0:	f114 0f35 	cmn.w	r4, #53	; 0x35
 8009dd4:	da19      	bge.n	8009e0a <scalbn+0xc2>
 8009dd6:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009dda:	4298      	cmp	r0, r3
 8009ddc:	ee10 3a90 	vmov	r3, s1
 8009de0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009de4:	dd09      	ble.n	8009dfa <scalbn+0xb2>
 8009de6:	ed9f 0b14 	vldr	d0, [pc, #80]	; 8009e38 <scalbn+0xf0>
 8009dea:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8009e40 <scalbn+0xf8>
 8009dee:	eeb0 7b40 	vmov.f64	d7, d0
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	fe00 0b06 	vseleq.f64	d0, d0, d6
 8009df8:	e7bb      	b.n	8009d72 <scalbn+0x2a>
 8009dfa:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 8009e30 <scalbn+0xe8>
 8009dfe:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8009e48 <scalbn+0x100>
 8009e02:	eeb0 7b40 	vmov.f64	d7, d0
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	e7f4      	b.n	8009df4 <scalbn+0xac>
 8009e0a:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 8009e0e:	ec53 2b10 	vmov	r2, r3, d0
 8009e12:	3436      	adds	r4, #54	; 0x36
 8009e14:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8009e18:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 8009e1c:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8009e50 <scalbn+0x108>
 8009e20:	ec43 2b10 	vmov	d0, r2, r3
 8009e24:	e7a5      	b.n	8009d72 <scalbn+0x2a>
 8009e26:	bf00      	nop
 8009e28:	00000000 	.word	0x00000000
 8009e2c:	43500000 	.word	0x43500000
 8009e30:	c2f8f359 	.word	0xc2f8f359
 8009e34:	01a56e1f 	.word	0x01a56e1f
 8009e38:	8800759c 	.word	0x8800759c
 8009e3c:	7e37e43c 	.word	0x7e37e43c
 8009e40:	8800759c 	.word	0x8800759c
 8009e44:	fe37e43c 	.word	0xfe37e43c
 8009e48:	c2f8f359 	.word	0xc2f8f359
 8009e4c:	81a56e1f 	.word	0x81a56e1f
 8009e50:	00000000 	.word	0x00000000
 8009e54:	3c900000 	.word	0x3c900000
 8009e58:	ffff3cb0 	.word	0xffff3cb0

08009e5c <_exit>:
 8009e5c:	e7fe      	b.n	8009e5c <_exit>
	...

08009e60 <_init>:
 8009e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e62:	bf00      	nop
 8009e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e66:	bc08      	pop	{r3}
 8009e68:	469e      	mov	lr, r3
 8009e6a:	4770      	bx	lr

08009e6c <_fini>:
 8009e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e6e:	bf00      	nop
 8009e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e72:	bc08      	pop	{r3}
 8009e74:	469e      	mov	lr, r3
 8009e76:	4770      	bx	lr
