
RLS_DC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000931c  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ac8  080095f0  080095f0  000195f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b0b8  0800b0b8  0001b0b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b0c0  0800b0c0  0001b0c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800b0c4  0800b0c4  0001b0c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000080  24000000  0800b0c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000370  24000080  0800b148  00020080  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  240003f0  0800b148  000203f0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 10 .debug_info   00022d07  00000000  00000000  000200ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000036d0  00000000  00000000  00042db5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001108  00000000  00000000  00046488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000ff0  00000000  00000000  00047590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00032a38  00000000  00000000  00048580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00015699  00000000  00000000  0007afb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014c8cf  00000000  00000000  00090651  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      000000c8  00000000  00000000  001dcf20  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004cd4  00000000  00000000  001dcfe8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loc    00000e50  00000000  00000000  001e1cbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000080 	.word	0x24000080
 80002ec:	00000000 	.word	0x00000000
 80002f0:	080095d4 	.word	0x080095d4

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000084 	.word	0x24000084
 800030c:	080095d4 	.word	0x080095d4

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b96e 	b.w	8000604 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468c      	mov	ip, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	f040 8083 	bne.w	8000456 <__udivmoddi4+0x116>
 8000350:	428a      	cmp	r2, r1
 8000352:	4617      	mov	r7, r2
 8000354:	d947      	bls.n	80003e6 <__udivmoddi4+0xa6>
 8000356:	fab2 f282 	clz	r2, r2
 800035a:	b142      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035c:	f1c2 0020 	rsb	r0, r2, #32
 8000360:	fa24 f000 	lsr.w	r0, r4, r0
 8000364:	4091      	lsls	r1, r2
 8000366:	4097      	lsls	r7, r2
 8000368:	ea40 0c01 	orr.w	ip, r0, r1
 800036c:	4094      	lsls	r4, r2
 800036e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fbbc f6f8 	udiv	r6, ip, r8
 8000378:	fa1f fe87 	uxth.w	lr, r7
 800037c:	fb08 c116 	mls	r1, r8, r6, ip
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f10e 	mul.w	r1, r6, lr
 8000388:	4299      	cmp	r1, r3
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x60>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000392:	f080 8119 	bcs.w	80005c8 <__udivmoddi4+0x288>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 8116 	bls.w	80005c8 <__udivmoddi4+0x288>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003a8:	fb08 3310 	mls	r3, r8, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003b4:	45a6      	cmp	lr, r4
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x8c>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80003be:	f080 8105 	bcs.w	80005cc <__udivmoddi4+0x28c>
 80003c2:	45a6      	cmp	lr, r4
 80003c4:	f240 8102 	bls.w	80005cc <__udivmoddi4+0x28c>
 80003c8:	3802      	subs	r0, #2
 80003ca:	443c      	add	r4, r7
 80003cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d0:	eba4 040e 	sub.w	r4, r4, lr
 80003d4:	2600      	movs	r6, #0
 80003d6:	b11d      	cbz	r5, 80003e0 <__udivmoddi4+0xa0>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c5 4300 	strd	r4, r3, [r5]
 80003e0:	4631      	mov	r1, r6
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	b902      	cbnz	r2, 80003ea <__udivmoddi4+0xaa>
 80003e8:	deff      	udf	#255	; 0xff
 80003ea:	fab2 f282 	clz	r2, r2
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	d150      	bne.n	8000494 <__udivmoddi4+0x154>
 80003f2:	1bcb      	subs	r3, r1, r7
 80003f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f8:	fa1f f887 	uxth.w	r8, r7
 80003fc:	2601      	movs	r6, #1
 80003fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000402:	0c21      	lsrs	r1, r4, #16
 8000404:	fb0e 331c 	mls	r3, lr, ip, r3
 8000408:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800040c:	fb08 f30c 	mul.w	r3, r8, ip
 8000410:	428b      	cmp	r3, r1
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0xe4>
 8000414:	1879      	adds	r1, r7, r1
 8000416:	f10c 30ff 	add.w	r0, ip, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0xe2>
 800041c:	428b      	cmp	r3, r1
 800041e:	f200 80e9 	bhi.w	80005f4 <__udivmoddi4+0x2b4>
 8000422:	4684      	mov	ip, r0
 8000424:	1ac9      	subs	r1, r1, r3
 8000426:	b2a3      	uxth	r3, r4
 8000428:	fbb1 f0fe 	udiv	r0, r1, lr
 800042c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000430:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000434:	fb08 f800 	mul.w	r8, r8, r0
 8000438:	45a0      	cmp	r8, r4
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x10c>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x10a>
 8000444:	45a0      	cmp	r8, r4
 8000446:	f200 80d9 	bhi.w	80005fc <__udivmoddi4+0x2bc>
 800044a:	4618      	mov	r0, r3
 800044c:	eba4 0408 	sub.w	r4, r4, r8
 8000450:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000454:	e7bf      	b.n	80003d6 <__udivmoddi4+0x96>
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0x12e>
 800045a:	2d00      	cmp	r5, #0
 800045c:	f000 80b1 	beq.w	80005c2 <__udivmoddi4+0x282>
 8000460:	2600      	movs	r6, #0
 8000462:	e9c5 0100 	strd	r0, r1, [r5]
 8000466:	4630      	mov	r0, r6
 8000468:	4631      	mov	r1, r6
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f683 	clz	r6, r3
 8000472:	2e00      	cmp	r6, #0
 8000474:	d14a      	bne.n	800050c <__udivmoddi4+0x1cc>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0x140>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80b8 	bhi.w	80005f0 <__udivmoddi4+0x2b0>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0103 	sbc.w	r1, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	468c      	mov	ip, r1
 800048a:	2d00      	cmp	r5, #0
 800048c:	d0a8      	beq.n	80003e0 <__udivmoddi4+0xa0>
 800048e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000492:	e7a5      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000494:	f1c2 0320 	rsb	r3, r2, #32
 8000498:	fa20 f603 	lsr.w	r6, r0, r3
 800049c:	4097      	lsls	r7, r2
 800049e:	fa01 f002 	lsl.w	r0, r1, r2
 80004a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a6:	40d9      	lsrs	r1, r3
 80004a8:	4330      	orrs	r0, r6
 80004aa:	0c03      	lsrs	r3, r0, #16
 80004ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80004b0:	fa1f f887 	uxth.w	r8, r7
 80004b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb06 f108 	mul.w	r1, r6, r8
 80004c0:	4299      	cmp	r1, r3
 80004c2:	fa04 f402 	lsl.w	r4, r4, r2
 80004c6:	d909      	bls.n	80004dc <__udivmoddi4+0x19c>
 80004c8:	18fb      	adds	r3, r7, r3
 80004ca:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ce:	f080 808d 	bcs.w	80005ec <__udivmoddi4+0x2ac>
 80004d2:	4299      	cmp	r1, r3
 80004d4:	f240 808a 	bls.w	80005ec <__udivmoddi4+0x2ac>
 80004d8:	3e02      	subs	r6, #2
 80004da:	443b      	add	r3, r7
 80004dc:	1a5b      	subs	r3, r3, r1
 80004de:	b281      	uxth	r1, r0
 80004e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ec:	fb00 f308 	mul.w	r3, r0, r8
 80004f0:	428b      	cmp	r3, r1
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x1c4>
 80004f4:	1879      	adds	r1, r7, r1
 80004f6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004fa:	d273      	bcs.n	80005e4 <__udivmoddi4+0x2a4>
 80004fc:	428b      	cmp	r3, r1
 80004fe:	d971      	bls.n	80005e4 <__udivmoddi4+0x2a4>
 8000500:	3802      	subs	r0, #2
 8000502:	4439      	add	r1, r7
 8000504:	1acb      	subs	r3, r1, r3
 8000506:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800050a:	e778      	b.n	80003fe <__udivmoddi4+0xbe>
 800050c:	f1c6 0c20 	rsb	ip, r6, #32
 8000510:	fa03 f406 	lsl.w	r4, r3, r6
 8000514:	fa22 f30c 	lsr.w	r3, r2, ip
 8000518:	431c      	orrs	r4, r3
 800051a:	fa20 f70c 	lsr.w	r7, r0, ip
 800051e:	fa01 f306 	lsl.w	r3, r1, r6
 8000522:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000526:	fa21 f10c 	lsr.w	r1, r1, ip
 800052a:	431f      	orrs	r7, r3
 800052c:	0c3b      	lsrs	r3, r7, #16
 800052e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000532:	fa1f f884 	uxth.w	r8, r4
 8000536:	fb0e 1119 	mls	r1, lr, r9, r1
 800053a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800053e:	fb09 fa08 	mul.w	sl, r9, r8
 8000542:	458a      	cmp	sl, r1
 8000544:	fa02 f206 	lsl.w	r2, r2, r6
 8000548:	fa00 f306 	lsl.w	r3, r0, r6
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x220>
 800054e:	1861      	adds	r1, r4, r1
 8000550:	f109 30ff 	add.w	r0, r9, #4294967295
 8000554:	d248      	bcs.n	80005e8 <__udivmoddi4+0x2a8>
 8000556:	458a      	cmp	sl, r1
 8000558:	d946      	bls.n	80005e8 <__udivmoddi4+0x2a8>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4421      	add	r1, r4
 8000560:	eba1 010a 	sub.w	r1, r1, sl
 8000564:	b2bf      	uxth	r7, r7
 8000566:	fbb1 f0fe 	udiv	r0, r1, lr
 800056a:	fb0e 1110 	mls	r1, lr, r0, r1
 800056e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000572:	fb00 f808 	mul.w	r8, r0, r8
 8000576:	45b8      	cmp	r8, r7
 8000578:	d907      	bls.n	800058a <__udivmoddi4+0x24a>
 800057a:	19e7      	adds	r7, r4, r7
 800057c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000580:	d22e      	bcs.n	80005e0 <__udivmoddi4+0x2a0>
 8000582:	45b8      	cmp	r8, r7
 8000584:	d92c      	bls.n	80005e0 <__udivmoddi4+0x2a0>
 8000586:	3802      	subs	r0, #2
 8000588:	4427      	add	r7, r4
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	eba7 0708 	sub.w	r7, r7, r8
 8000592:	fba0 8902 	umull	r8, r9, r0, r2
 8000596:	454f      	cmp	r7, r9
 8000598:	46c6      	mov	lr, r8
 800059a:	4649      	mov	r1, r9
 800059c:	d31a      	bcc.n	80005d4 <__udivmoddi4+0x294>
 800059e:	d017      	beq.n	80005d0 <__udivmoddi4+0x290>
 80005a0:	b15d      	cbz	r5, 80005ba <__udivmoddi4+0x27a>
 80005a2:	ebb3 020e 	subs.w	r2, r3, lr
 80005a6:	eb67 0701 	sbc.w	r7, r7, r1
 80005aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005ae:	40f2      	lsrs	r2, r6
 80005b0:	ea4c 0202 	orr.w	r2, ip, r2
 80005b4:	40f7      	lsrs	r7, r6
 80005b6:	e9c5 2700 	strd	r2, r7, [r5]
 80005ba:	2600      	movs	r6, #0
 80005bc:	4631      	mov	r1, r6
 80005be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c2:	462e      	mov	r6, r5
 80005c4:	4628      	mov	r0, r5
 80005c6:	e70b      	b.n	80003e0 <__udivmoddi4+0xa0>
 80005c8:	4606      	mov	r6, r0
 80005ca:	e6e9      	b.n	80003a0 <__udivmoddi4+0x60>
 80005cc:	4618      	mov	r0, r3
 80005ce:	e6fd      	b.n	80003cc <__udivmoddi4+0x8c>
 80005d0:	4543      	cmp	r3, r8
 80005d2:	d2e5      	bcs.n	80005a0 <__udivmoddi4+0x260>
 80005d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005d8:	eb69 0104 	sbc.w	r1, r9, r4
 80005dc:	3801      	subs	r0, #1
 80005de:	e7df      	b.n	80005a0 <__udivmoddi4+0x260>
 80005e0:	4608      	mov	r0, r1
 80005e2:	e7d2      	b.n	800058a <__udivmoddi4+0x24a>
 80005e4:	4660      	mov	r0, ip
 80005e6:	e78d      	b.n	8000504 <__udivmoddi4+0x1c4>
 80005e8:	4681      	mov	r9, r0
 80005ea:	e7b9      	b.n	8000560 <__udivmoddi4+0x220>
 80005ec:	4666      	mov	r6, ip
 80005ee:	e775      	b.n	80004dc <__udivmoddi4+0x19c>
 80005f0:	4630      	mov	r0, r6
 80005f2:	e74a      	b.n	800048a <__udivmoddi4+0x14a>
 80005f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f8:	4439      	add	r1, r7
 80005fa:	e713      	b.n	8000424 <__udivmoddi4+0xe4>
 80005fc:	3802      	subs	r0, #2
 80005fe:	443c      	add	r4, r7
 8000600:	e724      	b.n	800044c <__udivmoddi4+0x10c>
 8000602:	bf00      	nop

08000604 <__aeabi_idiv0>:
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop

08000608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	X = (float*) malloc((2*sysorder)* sizeof(float));
 800060c:	4b29      	ldr	r3, [pc, #164]	; (80006b4 <main+0xac>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	00db      	lsls	r3, r3, #3
 8000612:	4618      	mov	r0, r3
 8000614:	f007 fdca 	bl	80081ac <malloc>
 8000618:	4603      	mov	r3, r0
 800061a:	461a      	mov	r2, r3
 800061c:	4b26      	ldr	r3, [pc, #152]	; (80006b8 <main+0xb0>)
 800061e:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4, ccr_reg);
 8000620:	4b26      	ldr	r3, [pc, #152]	; (80006bc <main+0xb4>)
 8000622:	681a      	ldr	r2, [r3, #0]
 8000624:	4b26      	ldr	r3, [pc, #152]	; (80006c0 <main+0xb8>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	641a      	str	r2, [r3, #64]	; 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800062a:	f001 fd1b 	bl	8002064 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800062e:	f000 f855 	bl	80006dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000632:	f000 fb99 	bl	8000d68 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000636:	f000 fb43 	bl	8000cc0 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 800063a:	f000 fb8d 	bl	8000d58 <MX_USB_OTG_HS_USB_Init>
  MX_TIM4_Init();
 800063e:	f000 f961 	bl	8000904 <MX_TIM4_Init>
  MX_TIM3_Init();
 8000642:	f000 f909 	bl	8000858 <MX_TIM3_Init>
  MX_TIM8_Init();
 8000646:	f000 fa25 	bl	8000a94 <MX_TIM8_Init>
  MX_TIM2_Init();
 800064a:	f000 f8b7 	bl	80007bc <MX_TIM2_Init>
  MX_TIM5_Init();
 800064e:	f000 f9d1 	bl	80009f4 <MX_TIM5_Init>
  MX_TIM23_Init();
 8000652:	f000 fa97 	bl	8000b84 <MX_TIM23_Init>
  MX_TIM24_Init();
 8000656:	f000 fae5 	bl	8000c24 <MX_TIM24_Init>
  /* USER CODE BEGIN 2 */
  init_rls ();
 800065a:	f001 f80b 	bl	8001674 <init_rls>
  init_param_calcul_teta();
 800065e:	f000 fd2b 	bl	80010b8 <init_param_calcul_teta>

  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_RESET);
 8000662:	2200      	movs	r2, #0
 8000664:	2101      	movs	r1, #1
 8000666:	4817      	ldr	r0, [pc, #92]	; (80006c4 <main+0xbc>)
 8000668:	f002 f846 	bl	80026f8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_2,GPIO_PIN_SET);
 800066c:	2201      	movs	r2, #1
 800066e:	2104      	movs	r1, #4
 8000670:	4814      	ldr	r0, [pc, #80]	; (80006c4 <main+0xbc>)
 8000672:	f002 f841 	bl	80026f8 <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_4);
 8000676:	210c      	movs	r1, #12
 8000678:	4811      	ldr	r0, [pc, #68]	; (80006c0 <main+0xb8>)
 800067a:	f004 fc49 	bl	8004f10 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 800067e:	213c      	movs	r1, #60	; 0x3c
 8000680:	4811      	ldr	r0, [pc, #68]	; (80006c8 <main+0xc0>)
 8000682:	f004 ff7b 	bl	800557c <HAL_TIM_Encoder_Start>
  HAL_TIM_IC_Start (&htim8,TIM_CHANNEL_3);
 8000686:	2108      	movs	r1, #8
 8000688:	4810      	ldr	r0, [pc, #64]	; (80006cc <main+0xc4>)
 800068a:	f004 fdbf 	bl	800520c <HAL_TIM_IC_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 800068e:	4810      	ldr	r0, [pc, #64]	; (80006d0 <main+0xc8>)
 8000690:	f004 fb56 	bl	8004d40 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  speed = speed_aq();
 8000694:	f000 fcd0 	bl	8001038 <speed_aq>
 8000698:	eef0 7a40 	vmov.f32	s15, s0
 800069c:	4b0d      	ldr	r3, [pc, #52]	; (80006d4 <main+0xcc>)
 800069e:	edc3 7a00 	vstr	s15, [r3]
	  output_est =  rep_sys ();
 80006a2:	f001 f8ad 	bl	8001800 <rep_sys>
 80006a6:	eef0 7a40 	vmov.f32	s15, s0
 80006aa:	4b0b      	ldr	r3, [pc, #44]	; (80006d8 <main+0xd0>)
 80006ac:	edc3 7a00 	vstr	s15, [r3]
	  speed = speed_aq();
 80006b0:	e7f0      	b.n	8000694 <main+0x8c>
 80006b2:	bf00      	nop
 80006b4:	24000000 	.word	0x24000000
 80006b8:	240003d8 	.word	0x240003d8
 80006bc:	240000b0 	.word	0x240000b0
 80006c0:	24000174 	.word	0x24000174
 80006c4:	58020800 	.word	0x58020800
 80006c8:	240002b4 	.word	0x240002b4
 80006cc:	24000120 	.word	0x24000120
 80006d0:	24000318 	.word	0x24000318
 80006d4:	240000a0 	.word	0x240000a0
 80006d8:	240000bc 	.word	0x240000bc

080006dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b09c      	sub	sp, #112	; 0x70
 80006e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006e6:	224c      	movs	r2, #76	; 0x4c
 80006e8:	2100      	movs	r1, #0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f007 fd66 	bl	80081bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f0:	1d3b      	adds	r3, r7, #4
 80006f2:	2220      	movs	r2, #32
 80006f4:	2100      	movs	r1, #0
 80006f6:	4618      	mov	r0, r3
 80006f8:	f007 fd60 	bl	80081bc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80006fc:	2002      	movs	r0, #2
 80006fe:	f002 f839 	bl	8002774 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000702:	2300      	movs	r3, #0
 8000704:	603b      	str	r3, [r7, #0]
 8000706:	4b2c      	ldr	r3, [pc, #176]	; (80007b8 <SystemClock_Config+0xdc>)
 8000708:	699b      	ldr	r3, [r3, #24]
 800070a:	4a2b      	ldr	r2, [pc, #172]	; (80007b8 <SystemClock_Config+0xdc>)
 800070c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000710:	6193      	str	r3, [r2, #24]
 8000712:	4b29      	ldr	r3, [pc, #164]	; (80007b8 <SystemClock_Config+0xdc>)
 8000714:	699b      	ldr	r3, [r3, #24]
 8000716:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800071a:	603b      	str	r3, [r7, #0]
 800071c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800071e:	bf00      	nop
 8000720:	4b25      	ldr	r3, [pc, #148]	; (80007b8 <SystemClock_Config+0xdc>)
 8000722:	699b      	ldr	r3, [r3, #24]
 8000724:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000728:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800072c:	d1f8      	bne.n	8000720 <SystemClock_Config+0x44>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800072e:	2321      	movs	r3, #33	; 0x21
 8000730:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000732:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000736:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000738:	2301      	movs	r3, #1
 800073a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800073c:	2302      	movs	r3, #2
 800073e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000740:	2302      	movs	r3, #2
 8000742:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000744:	2304      	movs	r3, #4
 8000746:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 8000748:	f240 1313 	movw	r3, #275	; 0x113
 800074c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800074e:	2301      	movs	r3, #1
 8000750:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000752:	2304      	movs	r3, #4
 8000754:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000756:	2302      	movs	r3, #2
 8000758:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 800075a:	2304      	movs	r3, #4
 800075c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800075e:	2300      	movs	r3, #0
 8000760:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000762:	2300      	movs	r3, #0
 8000764:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000766:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800076a:	4618      	mov	r0, r3
 800076c:	f002 f83c 	bl	80027e8 <HAL_RCC_OscConfig>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000776:	f001 f96d 	bl	8001a54 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800077a:	233f      	movs	r3, #63	; 0x3f
 800077c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800077e:	2303      	movs	r3, #3
 8000780:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000782:	2300      	movs	r3, #0
 8000784:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000786:	2308      	movs	r3, #8
 8000788:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800078a:	2340      	movs	r3, #64	; 0x40
 800078c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800078e:	2340      	movs	r3, #64	; 0x40
 8000790:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000792:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000796:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000798:	2340      	movs	r3, #64	; 0x40
 800079a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800079c:	1d3b      	adds	r3, r7, #4
 800079e:	2103      	movs	r1, #3
 80007a0:	4618      	mov	r0, r3
 80007a2:	f002 fbcd 	bl	8002f40 <HAL_RCC_ClockConfig>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80007ac:	f001 f952 	bl	8001a54 <Error_Handler>
  }
}
 80007b0:	bf00      	nop
 80007b2:	3770      	adds	r7, #112	; 0x70
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	58024800 	.word	0x58024800

080007bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b088      	sub	sp, #32
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007c2:	f107 0310 	add.w	r3, r7, #16
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007d0:	1d3b      	adds	r3, r7, #4
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007da:	4b1e      	ldr	r3, [pc, #120]	; (8000854 <MX_TIM2_Init+0x98>)
 80007dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007e0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 549;
 80007e2:	4b1c      	ldr	r3, [pc, #112]	; (8000854 <MX_TIM2_Init+0x98>)
 80007e4:	f240 2225 	movw	r2, #549	; 0x225
 80007e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ea:	4b1a      	ldr	r3, [pc, #104]	; (8000854 <MX_TIM2_Init+0x98>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4999;
 80007f0:	4b18      	ldr	r3, [pc, #96]	; (8000854 <MX_TIM2_Init+0x98>)
 80007f2:	f241 3287 	movw	r2, #4999	; 0x1387
 80007f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007f8:	4b16      	ldr	r3, [pc, #88]	; (8000854 <MX_TIM2_Init+0x98>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007fe:	4b15      	ldr	r3, [pc, #84]	; (8000854 <MX_TIM2_Init+0x98>)
 8000800:	2200      	movs	r2, #0
 8000802:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000804:	4813      	ldr	r0, [pc, #76]	; (8000854 <MX_TIM2_Init+0x98>)
 8000806:	f004 fa43 	bl	8004c90 <HAL_TIM_Base_Init>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000810:	f001 f920 	bl	8001a54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000814:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000818:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800081a:	f107 0310 	add.w	r3, r7, #16
 800081e:	4619      	mov	r1, r3
 8000820:	480c      	ldr	r0, [pc, #48]	; (8000854 <MX_TIM2_Init+0x98>)
 8000822:	f005 fa09 	bl	8005c38 <HAL_TIM_ConfigClockSource>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 800082c:	f001 f912 	bl	8001a54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000830:	2300      	movs	r3, #0
 8000832:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000834:	2300      	movs	r3, #0
 8000836:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000838:	1d3b      	adds	r3, r7, #4
 800083a:	4619      	mov	r1, r3
 800083c:	4805      	ldr	r0, [pc, #20]	; (8000854 <MX_TIM2_Init+0x98>)
 800083e:	f006 f891 	bl	8006964 <HAL_TIMEx_MasterConfigSynchronization>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000848:	f001 f904 	bl	8001a54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800084c:	bf00      	nop
 800084e:	3720      	adds	r7, #32
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	24000318 	.word	0x24000318

08000858 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b08c      	sub	sp, #48	; 0x30
 800085c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800085e:	f107 030c 	add.w	r3, r7, #12
 8000862:	2224      	movs	r2, #36	; 0x24
 8000864:	2100      	movs	r1, #0
 8000866:	4618      	mov	r0, r3
 8000868:	f007 fca8 	bl	80081bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800086c:	463b      	mov	r3, r7
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	605a      	str	r2, [r3, #4]
 8000874:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000876:	4b21      	ldr	r3, [pc, #132]	; (80008fc <MX_TIM3_Init+0xa4>)
 8000878:	4a21      	ldr	r2, [pc, #132]	; (8000900 <MX_TIM3_Init+0xa8>)
 800087a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800087c:	4b1f      	ldr	r3, [pc, #124]	; (80008fc <MX_TIM3_Init+0xa4>)
 800087e:	2200      	movs	r2, #0
 8000880:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000882:	4b1e      	ldr	r3, [pc, #120]	; (80008fc <MX_TIM3_Init+0xa4>)
 8000884:	2200      	movs	r2, #0
 8000886:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65532;
 8000888:	4b1c      	ldr	r3, [pc, #112]	; (80008fc <MX_TIM3_Init+0xa4>)
 800088a:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800088e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000890:	4b1a      	ldr	r3, [pc, #104]	; (80008fc <MX_TIM3_Init+0xa4>)
 8000892:	2200      	movs	r2, #0
 8000894:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000896:	4b19      	ldr	r3, [pc, #100]	; (80008fc <MX_TIM3_Init+0xa4>)
 8000898:	2200      	movs	r2, #0
 800089a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800089c:	2303      	movs	r3, #3
 800089e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80008a0:	2300      	movs	r3, #0
 80008a2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80008a4:	2301      	movs	r3, #1
 80008a6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80008a8:	2300      	movs	r3, #0
 80008aa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80008ac:	230a      	movs	r3, #10
 80008ae:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80008b0:	2300      	movs	r3, #0
 80008b2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80008b4:	2301      	movs	r3, #1
 80008b6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80008b8:	2300      	movs	r3, #0
 80008ba:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 80008bc:	230a      	movs	r3, #10
 80008be:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80008c0:	f107 030c 	add.w	r3, r7, #12
 80008c4:	4619      	mov	r1, r3
 80008c6:	480d      	ldr	r0, [pc, #52]	; (80008fc <MX_TIM3_Init+0xa4>)
 80008c8:	f004 fdb2 	bl	8005430 <HAL_TIM_Encoder_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80008d2:	f001 f8bf 	bl	8001a54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008d6:	2300      	movs	r3, #0
 80008d8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008da:	2300      	movs	r3, #0
 80008dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008de:	463b      	mov	r3, r7
 80008e0:	4619      	mov	r1, r3
 80008e2:	4806      	ldr	r0, [pc, #24]	; (80008fc <MX_TIM3_Init+0xa4>)
 80008e4:	f006 f83e 	bl	8006964 <HAL_TIMEx_MasterConfigSynchronization>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80008ee:	f001 f8b1 	bl	8001a54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80008f2:	bf00      	nop
 80008f4:	3730      	adds	r7, #48	; 0x30
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	240002b4 	.word	0x240002b4
 8000900:	40000400 	.word	0x40000400

08000904 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b08e      	sub	sp, #56	; 0x38
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800090a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
 8000914:	609a      	str	r2, [r3, #8]
 8000916:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000918:	f107 031c 	add.w	r3, r7, #28
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000924:	463b      	mov	r3, r7
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	605a      	str	r2, [r3, #4]
 800092c:	609a      	str	r2, [r3, #8]
 800092e:	60da      	str	r2, [r3, #12]
 8000930:	611a      	str	r2, [r3, #16]
 8000932:	615a      	str	r2, [r3, #20]
 8000934:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000936:	4b2d      	ldr	r3, [pc, #180]	; (80009ec <MX_TIM4_Init+0xe8>)
 8000938:	4a2d      	ldr	r2, [pc, #180]	; (80009f0 <MX_TIM4_Init+0xec>)
 800093a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 99;
 800093c:	4b2b      	ldr	r3, [pc, #172]	; (80009ec <MX_TIM4_Init+0xe8>)
 800093e:	2263      	movs	r2, #99	; 0x63
 8000940:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000942:	4b2a      	ldr	r3, [pc, #168]	; (80009ec <MX_TIM4_Init+0xe8>)
 8000944:	2200      	movs	r2, #0
 8000946:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 27499;
 8000948:	4b28      	ldr	r3, [pc, #160]	; (80009ec <MX_TIM4_Init+0xe8>)
 800094a:	f646 326b 	movw	r2, #27499	; 0x6b6b
 800094e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000950:	4b26      	ldr	r3, [pc, #152]	; (80009ec <MX_TIM4_Init+0xe8>)
 8000952:	2200      	movs	r2, #0
 8000954:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000956:	4b25      	ldr	r3, [pc, #148]	; (80009ec <MX_TIM4_Init+0xe8>)
 8000958:	2200      	movs	r2, #0
 800095a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800095c:	4823      	ldr	r0, [pc, #140]	; (80009ec <MX_TIM4_Init+0xe8>)
 800095e:	f004 f997 	bl	8004c90 <HAL_TIM_Base_Init>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000968:	f001 f874 	bl	8001a54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800096c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000970:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000972:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000976:	4619      	mov	r1, r3
 8000978:	481c      	ldr	r0, [pc, #112]	; (80009ec <MX_TIM4_Init+0xe8>)
 800097a:	f005 f95d 	bl	8005c38 <HAL_TIM_ConfigClockSource>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000984:	f001 f866 	bl	8001a54 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000988:	4818      	ldr	r0, [pc, #96]	; (80009ec <MX_TIM4_Init+0xe8>)
 800098a:	f004 fa5f 	bl	8004e4c <HAL_TIM_PWM_Init>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000994:	f001 f85e 	bl	8001a54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000998:	2300      	movs	r3, #0
 800099a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800099c:	2300      	movs	r3, #0
 800099e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80009a0:	f107 031c 	add.w	r3, r7, #28
 80009a4:	4619      	mov	r1, r3
 80009a6:	4811      	ldr	r0, [pc, #68]	; (80009ec <MX_TIM4_Init+0xe8>)
 80009a8:	f005 ffdc 	bl	8006964 <HAL_TIMEx_MasterConfigSynchronization>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80009b2:	f001 f84f 	bl	8001a54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009b6:	2360      	movs	r3, #96	; 0x60
 80009b8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80009ba:	2300      	movs	r3, #0
 80009bc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009be:	2300      	movs	r3, #0
 80009c0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009c2:	2300      	movs	r3, #0
 80009c4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80009c6:	463b      	mov	r3, r7
 80009c8:	220c      	movs	r2, #12
 80009ca:	4619      	mov	r1, r3
 80009cc:	4807      	ldr	r0, [pc, #28]	; (80009ec <MX_TIM4_Init+0xe8>)
 80009ce:	f005 f81f 	bl	8005a10 <HAL_TIM_PWM_ConfigChannel>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80009d8:	f001 f83c 	bl	8001a54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80009dc:	4803      	ldr	r0, [pc, #12]	; (80009ec <MX_TIM4_Init+0xe8>)
 80009de:	f001 f977 	bl	8001cd0 <HAL_TIM_MspPostInit>

}
 80009e2:	bf00      	nop
 80009e4:	3738      	adds	r7, #56	; 0x38
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	24000174 	.word	0x24000174
 80009f0:	40000800 	.word	0x40000800

080009f4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b088      	sub	sp, #32
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009fa:	f107 0310 	add.w	r3, r7, #16
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	605a      	str	r2, [r3, #4]
 8000a04:	609a      	str	r2, [r3, #8]
 8000a06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a08:	1d3b      	adds	r3, r7, #4
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
 8000a0e:	605a      	str	r2, [r3, #4]
 8000a10:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000a12:	4b1d      	ldr	r3, [pc, #116]	; (8000a88 <MX_TIM5_Init+0x94>)
 8000a14:	4a1d      	ldr	r2, [pc, #116]	; (8000a8c <MX_TIM5_Init+0x98>)
 8000a16:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 5499;
 8000a18:	4b1b      	ldr	r3, [pc, #108]	; (8000a88 <MX_TIM5_Init+0x94>)
 8000a1a:	f241 527b 	movw	r2, #5499	; 0x157b
 8000a1e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a20:	4b19      	ldr	r3, [pc, #100]	; (8000a88 <MX_TIM5_Init+0x94>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 99999;
 8000a26:	4b18      	ldr	r3, [pc, #96]	; (8000a88 <MX_TIM5_Init+0x94>)
 8000a28:	4a19      	ldr	r2, [pc, #100]	; (8000a90 <MX_TIM5_Init+0x9c>)
 8000a2a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a2c:	4b16      	ldr	r3, [pc, #88]	; (8000a88 <MX_TIM5_Init+0x94>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a32:	4b15      	ldr	r3, [pc, #84]	; (8000a88 <MX_TIM5_Init+0x94>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000a38:	4813      	ldr	r0, [pc, #76]	; (8000a88 <MX_TIM5_Init+0x94>)
 8000a3a:	f004 f929 	bl	8004c90 <HAL_TIM_Base_Init>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000a44:	f001 f806 	bl	8001a54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a4c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000a4e:	f107 0310 	add.w	r3, r7, #16
 8000a52:	4619      	mov	r1, r3
 8000a54:	480c      	ldr	r0, [pc, #48]	; (8000a88 <MX_TIM5_Init+0x94>)
 8000a56:	f005 f8ef 	bl	8005c38 <HAL_TIM_ConfigClockSource>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000a60:	f000 fff8 	bl	8001a54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a64:	2300      	movs	r3, #0
 8000a66:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000a6c:	1d3b      	adds	r3, r7, #4
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4805      	ldr	r0, [pc, #20]	; (8000a88 <MX_TIM5_Init+0x94>)
 8000a72:	f005 ff77 	bl	8006964 <HAL_TIMEx_MasterConfigSynchronization>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000a7c:	f000 ffea 	bl	8001a54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000a80:	bf00      	nop
 8000a82:	3720      	adds	r7, #32
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	24000260 	.word	0x24000260
 8000a8c:	40000c00 	.word	0x40000c00
 8000a90:	0001869f 	.word	0x0001869f

08000a94 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b08c      	sub	sp, #48	; 0x30
 8000a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a9a:	f107 0320 	add.w	r3, r7, #32
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	605a      	str	r2, [r3, #4]
 8000aa4:	609a      	str	r2, [r3, #8]
 8000aa6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	605a      	str	r2, [r3, #4]
 8000ab2:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000ab4:	1d3b      	adds	r3, r7, #4
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	605a      	str	r2, [r3, #4]
 8000abc:	609a      	str	r2, [r3, #8]
 8000abe:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000ac0:	4b2e      	ldr	r3, [pc, #184]	; (8000b7c <MX_TIM8_Init+0xe8>)
 8000ac2:	4a2f      	ldr	r2, [pc, #188]	; (8000b80 <MX_TIM8_Init+0xec>)
 8000ac4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 9999;
 8000ac6:	4b2d      	ldr	r3, [pc, #180]	; (8000b7c <MX_TIM8_Init+0xe8>)
 8000ac8:	f242 720f 	movw	r2, #9999	; 0x270f
 8000acc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ace:	4b2b      	ldr	r3, [pc, #172]	; (8000b7c <MX_TIM8_Init+0xe8>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000ad4:	4b29      	ldr	r3, [pc, #164]	; (8000b7c <MX_TIM8_Init+0xe8>)
 8000ad6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ada:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000adc:	4b27      	ldr	r3, [pc, #156]	; (8000b7c <MX_TIM8_Init+0xe8>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 10;
 8000ae2:	4b26      	ldr	r3, [pc, #152]	; (8000b7c <MX_TIM8_Init+0xe8>)
 8000ae4:	220a      	movs	r2, #10
 8000ae6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ae8:	4b24      	ldr	r3, [pc, #144]	; (8000b7c <MX_TIM8_Init+0xe8>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000aee:	4823      	ldr	r0, [pc, #140]	; (8000b7c <MX_TIM8_Init+0xe8>)
 8000af0:	f004 f8ce 	bl	8004c90 <HAL_TIM_Base_Init>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_TIM8_Init+0x6a>
  {
    Error_Handler();
 8000afa:	f000 ffab 	bl	8001a54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000afe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b02:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000b04:	f107 0320 	add.w	r3, r7, #32
 8000b08:	4619      	mov	r1, r3
 8000b0a:	481c      	ldr	r0, [pc, #112]	; (8000b7c <MX_TIM8_Init+0xe8>)
 8000b0c:	f005 f894 	bl	8005c38 <HAL_TIM_ConfigClockSource>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_TIM8_Init+0x86>
  {
    Error_Handler();
 8000b16:	f000 ff9d 	bl	8001a54 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 8000b1a:	4818      	ldr	r0, [pc, #96]	; (8000b7c <MX_TIM8_Init+0xe8>)
 8000b1c:	f004 fb14 	bl	8005148 <HAL_TIM_IC_Init>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8000b26:	f000 ff95 	bl	8001a54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b32:	2300      	movs	r3, #0
 8000b34:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000b36:	f107 0314 	add.w	r3, r7, #20
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	480f      	ldr	r0, [pc, #60]	; (8000b7c <MX_TIM8_Init+0xe8>)
 8000b3e:	f005 ff11 	bl	8006964 <HAL_TIMEx_MasterConfigSynchronization>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_TIM8_Init+0xb8>
  {
    Error_Handler();
 8000b48:	f000 ff84 	bl	8001a54 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000b50:	2301      	movs	r3, #1
 8000b52:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000b54:	2300      	movs	r3, #0
 8000b56:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 10;
 8000b58:	230a      	movs	r3, #10
 8000b5a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000b5c:	1d3b      	adds	r3, r7, #4
 8000b5e:	2208      	movs	r2, #8
 8000b60:	4619      	mov	r1, r3
 8000b62:	4806      	ldr	r0, [pc, #24]	; (8000b7c <MX_TIM8_Init+0xe8>)
 8000b64:	f004 feb7 	bl	80058d6 <HAL_TIM_IC_ConfigChannel>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_TIM8_Init+0xde>
  {
    Error_Handler();
 8000b6e:	f000 ff71 	bl	8001a54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000b72:	bf00      	nop
 8000b74:	3730      	adds	r7, #48	; 0x30
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	24000120 	.word	0x24000120
 8000b80:	40010400 	.word	0x40010400

08000b84 <MX_TIM23_Init>:
  * @brief TIM23 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM23_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b088      	sub	sp, #32
 8000b88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b8a:	f107 0310 	add.w	r3, r7, #16
 8000b8e:	2200      	movs	r2, #0
 8000b90:	601a      	str	r2, [r3, #0]
 8000b92:	605a      	str	r2, [r3, #4]
 8000b94:	609a      	str	r2, [r3, #8]
 8000b96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b98:	1d3b      	adds	r3, r7, #4
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	601a      	str	r2, [r3, #0]
 8000b9e:	605a      	str	r2, [r3, #4]
 8000ba0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 8000ba2:	4b1e      	ldr	r3, [pc, #120]	; (8000c1c <MX_TIM23_Init+0x98>)
 8000ba4:	4a1e      	ldr	r2, [pc, #120]	; (8000c20 <MX_TIM23_Init+0x9c>)
 8000ba6:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 549;
 8000ba8:	4b1c      	ldr	r3, [pc, #112]	; (8000c1c <MX_TIM23_Init+0x98>)
 8000baa:	f240 2225 	movw	r2, #549	; 0x225
 8000bae:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb0:	4b1a      	ldr	r3, [pc, #104]	; (8000c1c <MX_TIM23_Init+0x98>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 9999;
 8000bb6:	4b19      	ldr	r3, [pc, #100]	; (8000c1c <MX_TIM23_Init+0x98>)
 8000bb8:	f242 720f 	movw	r2, #9999	; 0x270f
 8000bbc:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bbe:	4b17      	ldr	r3, [pc, #92]	; (8000c1c <MX_TIM23_Init+0x98>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bc4:	4b15      	ldr	r3, [pc, #84]	; (8000c1c <MX_TIM23_Init+0x98>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim23) != HAL_OK)
 8000bca:	4814      	ldr	r0, [pc, #80]	; (8000c1c <MX_TIM23_Init+0x98>)
 8000bcc:	f004 f860 	bl	8004c90 <HAL_TIM_Base_Init>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_TIM23_Init+0x56>
  {
    Error_Handler();
 8000bd6:	f000 ff3d 	bl	8001a54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bde:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim23, &sClockSourceConfig) != HAL_OK)
 8000be0:	f107 0310 	add.w	r3, r7, #16
 8000be4:	4619      	mov	r1, r3
 8000be6:	480d      	ldr	r0, [pc, #52]	; (8000c1c <MX_TIM23_Init+0x98>)
 8000be8:	f005 f826 	bl	8005c38 <HAL_TIM_ConfigClockSource>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_TIM23_Init+0x72>
  {
    Error_Handler();
 8000bf2:	f000 ff2f 	bl	8001a54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 8000bfe:	1d3b      	adds	r3, r7, #4
 8000c00:	4619      	mov	r1, r3
 8000c02:	4806      	ldr	r0, [pc, #24]	; (8000c1c <MX_TIM23_Init+0x98>)
 8000c04:	f005 feae 	bl	8006964 <HAL_TIMEx_MasterConfigSynchronization>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_TIM23_Init+0x8e>
  {
    Error_Handler();
 8000c0e:	f000 ff21 	bl	8001a54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 8000c12:	bf00      	nop
 8000c14:	3720      	adds	r7, #32
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	24000364 	.word	0x24000364
 8000c20:	4000e000 	.word	0x4000e000

08000c24 <MX_TIM24_Init>:
  * @brief TIM24 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM24_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b088      	sub	sp, #32
 8000c28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM24_Init 0 */

  /* USER CODE END TIM24_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c2a:	f107 0310 	add.w	r3, r7, #16
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
 8000c32:	605a      	str	r2, [r3, #4]
 8000c34:	609a      	str	r2, [r3, #8]
 8000c36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c38:	1d3b      	adds	r3, r7, #4
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]
 8000c3e:	605a      	str	r2, [r3, #4]
 8000c40:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM24_Init 1 */

  /* USER CODE END TIM24_Init 1 */
  htim24.Instance = TIM24;
 8000c42:	4b1d      	ldr	r3, [pc, #116]	; (8000cb8 <MX_TIM24_Init+0x94>)
 8000c44:	4a1d      	ldr	r2, [pc, #116]	; (8000cbc <MX_TIM24_Init+0x98>)
 8000c46:	601a      	str	r2, [r3, #0]
  htim24.Init.Prescaler = 65530;
 8000c48:	4b1b      	ldr	r3, [pc, #108]	; (8000cb8 <MX_TIM24_Init+0x94>)
 8000c4a:	f64f 72fa 	movw	r2, #65530	; 0xfffa
 8000c4e:	605a      	str	r2, [r3, #4]
  htim24.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c50:	4b19      	ldr	r3, [pc, #100]	; (8000cb8 <MX_TIM24_Init+0x94>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	609a      	str	r2, [r3, #8]
  htim24.Init.Period = 14;
 8000c56:	4b18      	ldr	r3, [pc, #96]	; (8000cb8 <MX_TIM24_Init+0x94>)
 8000c58:	220e      	movs	r2, #14
 8000c5a:	60da      	str	r2, [r3, #12]
  htim24.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c5c:	4b16      	ldr	r3, [pc, #88]	; (8000cb8 <MX_TIM24_Init+0x94>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	611a      	str	r2, [r3, #16]
  htim24.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c62:	4b15      	ldr	r3, [pc, #84]	; (8000cb8 <MX_TIM24_Init+0x94>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim24) != HAL_OK)
 8000c68:	4813      	ldr	r0, [pc, #76]	; (8000cb8 <MX_TIM24_Init+0x94>)
 8000c6a:	f004 f811 	bl	8004c90 <HAL_TIM_Base_Init>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_TIM24_Init+0x54>
  {
    Error_Handler();
 8000c74:	f000 feee 	bl	8001a54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c7c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim24, &sClockSourceConfig) != HAL_OK)
 8000c7e:	f107 0310 	add.w	r3, r7, #16
 8000c82:	4619      	mov	r1, r3
 8000c84:	480c      	ldr	r0, [pc, #48]	; (8000cb8 <MX_TIM24_Init+0x94>)
 8000c86:	f004 ffd7 	bl	8005c38 <HAL_TIM_ConfigClockSource>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_TIM24_Init+0x70>
  {
    Error_Handler();
 8000c90:	f000 fee0 	bl	8001a54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c94:	2300      	movs	r3, #0
 8000c96:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim24, &sMasterConfig) != HAL_OK)
 8000c9c:	1d3b      	adds	r3, r7, #4
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4805      	ldr	r0, [pc, #20]	; (8000cb8 <MX_TIM24_Init+0x94>)
 8000ca2:	f005 fe5f 	bl	8006964 <HAL_TIMEx_MasterConfigSynchronization>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_TIM24_Init+0x8c>
  {
    Error_Handler();
 8000cac:	f000 fed2 	bl	8001a54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM24_Init 2 */

  /* USER CODE END TIM24_Init 2 */

}
 8000cb0:	bf00      	nop
 8000cb2:	3720      	adds	r7, #32
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	240000cc 	.word	0x240000cc
 8000cbc:	4000e400 	.word	0x4000e400

08000cc0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000cc4:	4b22      	ldr	r3, [pc, #136]	; (8000d50 <MX_USART3_UART_Init+0x90>)
 8000cc6:	4a23      	ldr	r2, [pc, #140]	; (8000d54 <MX_USART3_UART_Init+0x94>)
 8000cc8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cca:	4b21      	ldr	r3, [pc, #132]	; (8000d50 <MX_USART3_UART_Init+0x90>)
 8000ccc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cd0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cd2:	4b1f      	ldr	r3, [pc, #124]	; (8000d50 <MX_USART3_UART_Init+0x90>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000cd8:	4b1d      	ldr	r3, [pc, #116]	; (8000d50 <MX_USART3_UART_Init+0x90>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000cde:	4b1c      	ldr	r3, [pc, #112]	; (8000d50 <MX_USART3_UART_Init+0x90>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ce4:	4b1a      	ldr	r3, [pc, #104]	; (8000d50 <MX_USART3_UART_Init+0x90>)
 8000ce6:	220c      	movs	r2, #12
 8000ce8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cea:	4b19      	ldr	r3, [pc, #100]	; (8000d50 <MX_USART3_UART_Init+0x90>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cf0:	4b17      	ldr	r3, [pc, #92]	; (8000d50 <MX_USART3_UART_Init+0x90>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cf6:	4b16      	ldr	r3, [pc, #88]	; (8000d50 <MX_USART3_UART_Init+0x90>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cfc:	4b14      	ldr	r3, [pc, #80]	; (8000d50 <MX_USART3_UART_Init+0x90>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d02:	4b13      	ldr	r3, [pc, #76]	; (8000d50 <MX_USART3_UART_Init+0x90>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d08:	4811      	ldr	r0, [pc, #68]	; (8000d50 <MX_USART3_UART_Init+0x90>)
 8000d0a:	f005 fee5 	bl	8006ad8 <HAL_UART_Init>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000d14:	f000 fe9e 	bl	8001a54 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d18:	2100      	movs	r1, #0
 8000d1a:	480d      	ldr	r0, [pc, #52]	; (8000d50 <MX_USART3_UART_Init+0x90>)
 8000d1c:	f006 ff78 	bl	8007c10 <HAL_UARTEx_SetTxFifoThreshold>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000d26:	f000 fe95 	bl	8001a54 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	4808      	ldr	r0, [pc, #32]	; (8000d50 <MX_USART3_UART_Init+0x90>)
 8000d2e:	f006 ffad 	bl	8007c8c <HAL_UARTEx_SetRxFifoThreshold>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000d38:	f000 fe8c 	bl	8001a54 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000d3c:	4804      	ldr	r0, [pc, #16]	; (8000d50 <MX_USART3_UART_Init+0x90>)
 8000d3e:	f006 ff2e 	bl	8007b9e <HAL_UARTEx_DisableFifoMode>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000d48:	f000 fe84 	bl	8001a54 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d4c:	bf00      	nop
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	240001c0 	.word	0x240001c0
 8000d54:	40004800 	.word	0x40004800

08000d58 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
	...

08000d68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b08c      	sub	sp, #48	; 0x30
 8000d6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6e:	f107 031c 	add.w	r3, r7, #28
 8000d72:	2200      	movs	r2, #0
 8000d74:	601a      	str	r2, [r3, #0]
 8000d76:	605a      	str	r2, [r3, #4]
 8000d78:	609a      	str	r2, [r3, #8]
 8000d7a:	60da      	str	r2, [r3, #12]
 8000d7c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d7e:	4ba6      	ldr	r3, [pc, #664]	; (8001018 <MX_GPIO_Init+0x2b0>)
 8000d80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d84:	4aa4      	ldr	r2, [pc, #656]	; (8001018 <MX_GPIO_Init+0x2b0>)
 8000d86:	f043 0304 	orr.w	r3, r3, #4
 8000d8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d8e:	4ba2      	ldr	r3, [pc, #648]	; (8001018 <MX_GPIO_Init+0x2b0>)
 8000d90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d94:	f003 0304 	and.w	r3, r3, #4
 8000d98:	61bb      	str	r3, [r7, #24]
 8000d9a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d9c:	4b9e      	ldr	r3, [pc, #632]	; (8001018 <MX_GPIO_Init+0x2b0>)
 8000d9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000da2:	4a9d      	ldr	r2, [pc, #628]	; (8001018 <MX_GPIO_Init+0x2b0>)
 8000da4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000da8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dac:	4b9a      	ldr	r3, [pc, #616]	; (8001018 <MX_GPIO_Init+0x2b0>)
 8000dae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000db2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000db6:	617b      	str	r3, [r7, #20]
 8000db8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dba:	4b97      	ldr	r3, [pc, #604]	; (8001018 <MX_GPIO_Init+0x2b0>)
 8000dbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dc0:	4a95      	ldr	r2, [pc, #596]	; (8001018 <MX_GPIO_Init+0x2b0>)
 8000dc2:	f043 0301 	orr.w	r3, r3, #1
 8000dc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dca:	4b93      	ldr	r3, [pc, #588]	; (8001018 <MX_GPIO_Init+0x2b0>)
 8000dcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dd0:	f003 0301 	and.w	r3, r3, #1
 8000dd4:	613b      	str	r3, [r7, #16]
 8000dd6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd8:	4b8f      	ldr	r3, [pc, #572]	; (8001018 <MX_GPIO_Init+0x2b0>)
 8000dda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dde:	4a8e      	ldr	r2, [pc, #568]	; (8001018 <MX_GPIO_Init+0x2b0>)
 8000de0:	f043 0302 	orr.w	r3, r3, #2
 8000de4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000de8:	4b8b      	ldr	r3, [pc, #556]	; (8001018 <MX_GPIO_Init+0x2b0>)
 8000dea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dee:	f003 0302 	and.w	r3, r3, #2
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000df6:	4b88      	ldr	r3, [pc, #544]	; (8001018 <MX_GPIO_Init+0x2b0>)
 8000df8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dfc:	4a86      	ldr	r2, [pc, #536]	; (8001018 <MX_GPIO_Init+0x2b0>)
 8000dfe:	f043 0308 	orr.w	r3, r3, #8
 8000e02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e06:	4b84      	ldr	r3, [pc, #528]	; (8001018 <MX_GPIO_Init+0x2b0>)
 8000e08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e0c:	f003 0308 	and.w	r3, r3, #8
 8000e10:	60bb      	str	r3, [r7, #8]
 8000e12:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e14:	4b80      	ldr	r3, [pc, #512]	; (8001018 <MX_GPIO_Init+0x2b0>)
 8000e16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e1a:	4a7f      	ldr	r2, [pc, #508]	; (8001018 <MX_GPIO_Init+0x2b0>)
 8000e1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e24:	4b7c      	ldr	r3, [pc, #496]	; (8001018 <MX_GPIO_Init+0x2b0>)
 8000e26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e2e:	607b      	str	r3, [r7, #4]
 8000e30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e32:	4b79      	ldr	r3, [pc, #484]	; (8001018 <MX_GPIO_Init+0x2b0>)
 8000e34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e38:	4a77      	ldr	r2, [pc, #476]	; (8001018 <MX_GPIO_Init+0x2b0>)
 8000e3a:	f043 0310 	orr.w	r3, r3, #16
 8000e3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e42:	4b75      	ldr	r3, [pc, #468]	; (8001018 <MX_GPIO_Init+0x2b0>)
 8000e44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e48:	f003 0310 	and.w	r3, r3, #16
 8000e4c:	603b      	str	r3, [r7, #0]
 8000e4e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, C0_Pin|C2_Pin, GPIO_PIN_RESET);
 8000e50:	2200      	movs	r2, #0
 8000e52:	2105      	movs	r1, #5
 8000e54:	4871      	ldr	r0, [pc, #452]	; (800101c <MX_GPIO_Init+0x2b4>)
 8000e56:	f001 fc4f 	bl	80026f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e60:	486f      	ldr	r0, [pc, #444]	; (8001020 <MX_GPIO_Init+0x2b8>)
 8000e62:	f001 fc49 	bl	80026f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000e66:	2200      	movs	r2, #0
 8000e68:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e6c:	486d      	ldr	r0, [pc, #436]	; (8001024 <MX_GPIO_Init+0x2bc>)
 8000e6e:	f001 fc43 	bl	80026f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000e72:	2200      	movs	r2, #0
 8000e74:	2102      	movs	r1, #2
 8000e76:	486c      	ldr	r0, [pc, #432]	; (8001028 <MX_GPIO_Init+0x2c0>)
 8000e78:	f001 fc3e 	bl	80026f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : C13_Pin */
  GPIO_InitStruct.Pin = C13_Pin;
 8000e7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e82:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(C13_GPIO_Port, &GPIO_InitStruct);
 8000e8c:	f107 031c 	add.w	r3, r7, #28
 8000e90:	4619      	mov	r1, r3
 8000e92:	4862      	ldr	r0, [pc, #392]	; (800101c <MX_GPIO_Init+0x2b4>)
 8000e94:	f001 fa88 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : C0_Pin C2_Pin */
  GPIO_InitStruct.Pin = C0_Pin|C2_Pin;
 8000e98:	2305      	movs	r3, #5
 8000e9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ea8:	f107 031c 	add.w	r3, r7, #28
 8000eac:	4619      	mov	r1, r3
 8000eae:	485b      	ldr	r0, [pc, #364]	; (800101c <MX_GPIO_Init+0x2b4>)
 8000eb0:	f001 fa7a 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000eb4:	2332      	movs	r3, #50	; 0x32
 8000eb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ec4:	230b      	movs	r3, #11
 8000ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ec8:	f107 031c 	add.w	r3, r7, #28
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4853      	ldr	r0, [pc, #332]	; (800101c <MX_GPIO_Init+0x2b4>)
 8000ed0:	f001 fa6a 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : C3_Pin */
  GPIO_InitStruct.Pin = C3_Pin;
 8000ed4:	2308      	movs	r3, #8
 8000ed6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000edc:	2300      	movs	r3, #0
 8000ede:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(C3_GPIO_Port, &GPIO_InitStruct);
 8000ee0:	f107 031c 	add.w	r3, r7, #28
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	484d      	ldr	r0, [pc, #308]	; (800101c <MX_GPIO_Init+0x2b4>)
 8000ee8:	f001 fa5e 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000eec:	2384      	movs	r3, #132	; 0x84
 8000eee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000efc:	230b      	movs	r3, #11
 8000efe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f00:	f107 031c 	add.w	r3, r7, #28
 8000f04:	4619      	mov	r1, r3
 8000f06:	4849      	ldr	r0, [pc, #292]	; (800102c <MX_GPIO_Init+0x2c4>)
 8000f08:	f001 fa4e 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000f0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f12:	2302      	movs	r3, #2
 8000f14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f1e:	230b      	movs	r3, #11
 8000f20:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000f22:	f107 031c 	add.w	r3, r7, #28
 8000f26:	4619      	mov	r1, r3
 8000f28:	483d      	ldr	r0, [pc, #244]	; (8001020 <MX_GPIO_Init+0x2b8>)
 8000f2a:	f001 fa3d 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000f2e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f34:	2301      	movs	r3, #1
 8000f36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000f40:	f107 031c 	add.w	r3, r7, #28
 8000f44:	4619      	mov	r1, r3
 8000f46:	4836      	ldr	r0, [pc, #216]	; (8001020 <MX_GPIO_Init+0x2b8>)
 8000f48:	f001 fa2e 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000f4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f52:	2301      	movs	r3, #1
 8000f54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	2300      	movs	r3, #0
 8000f58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000f5e:	f107 031c 	add.w	r3, r7, #28
 8000f62:	4619      	mov	r1, r3
 8000f64:	482f      	ldr	r0, [pc, #188]	; (8001024 <MX_GPIO_Init+0x2bc>)
 8000f66:	f001 fa1f 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000f6a:	2380      	movs	r3, #128	; 0x80
 8000f6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f6e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000f78:	f107 031c 	add.w	r3, r7, #28
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	482c      	ldr	r0, [pc, #176]	; (8001030 <MX_GPIO_Init+0x2c8>)
 8000f80:	f001 fa12 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000f84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f92:	f107 031c 	add.w	r3, r7, #28
 8000f96:	4619      	mov	r1, r3
 8000f98:	4824      	ldr	r0, [pc, #144]	; (800102c <MX_GPIO_Init+0x2c4>)
 8000f9a:	f001 fa05 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000f9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fa2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fac:	2300      	movs	r3, #0
 8000fae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000fb0:	230a      	movs	r3, #10
 8000fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000fb4:	f107 031c 	add.w	r3, r7, #28
 8000fb8:	4619      	mov	r1, r3
 8000fba:	481c      	ldr	r0, [pc, #112]	; (800102c <MX_GPIO_Init+0x2c4>)
 8000fbc:	f001 f9f4 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000fc0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000fc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fd2:	230b      	movs	r3, #11
 8000fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fd6:	f107 031c 	add.w	r3, r7, #28
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4814      	ldr	r0, [pc, #80]	; (8001030 <MX_GPIO_Init+0x2c8>)
 8000fde:	f001 f9e3 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000ff2:	f107 031c 	add.w	r3, r7, #28
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	480b      	ldr	r0, [pc, #44]	; (8001028 <MX_GPIO_Init+0x2c0>)
 8000ffa:	f001 f9d5 	bl	80023a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000ffe:	2200      	movs	r2, #0
 8001000:	2100      	movs	r1, #0
 8001002:	2028      	movs	r0, #40	; 0x28
 8001004:	f001 f99b 	bl	800233e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001008:	2028      	movs	r0, #40	; 0x28
 800100a:	f001 f9b2 	bl	8002372 <HAL_NVIC_EnableIRQ>

}
 800100e:	bf00      	nop
 8001010:	3730      	adds	r7, #48	; 0x30
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	58024400 	.word	0x58024400
 800101c:	58020800 	.word	0x58020800
 8001020:	58020400 	.word	0x58020400
 8001024:	58020c00 	.word	0x58020c00
 8001028:	58021000 	.word	0x58021000
 800102c:	58020000 	.word	0x58020000
 8001030:	58021800 	.word	0x58021800
 8001034:	00000000 	.word	0x00000000

08001038 <speed_aq>:

/* USER CODE BEGIN 4 */

float speed_aq (void)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
	  while(! (__HAL_TIM_GET_FLAG(&htim8,TIM_FLAG_CC3))) {}
 800103e:	bf00      	nop
 8001040:	4b19      	ldr	r3, [pc, #100]	; (80010a8 <speed_aq+0x70>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	691b      	ldr	r3, [r3, #16]
 8001046:	f003 0308 	and.w	r3, r3, #8
 800104a:	2b08      	cmp	r3, #8
 800104c:	d1f8      	bne.n	8001040 <speed_aq+0x8>
	  CCR_new = __HAL_TIM_GET_COMPARE(&htim8,TIM_CHANNEL_3);
 800104e:	4b16      	ldr	r3, [pc, #88]	; (80010a8 <speed_aq+0x70>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001054:	461a      	mov	r2, r3
 8001056:	4b15      	ldr	r3, [pc, #84]	; (80010ac <speed_aq+0x74>)
 8001058:	601a      	str	r2, [r3, #0]
	  int diff = CCR_new - CCR_old;
 800105a:	4b14      	ldr	r3, [pc, #80]	; (80010ac <speed_aq+0x74>)
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	4b14      	ldr	r3, [pc, #80]	; (80010b0 <speed_aq+0x78>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	1ad3      	subs	r3, r2, r3
 8001064:	607b      	str	r3, [r7, #4]
	  CCR_old = CCR_new;
 8001066:	4b11      	ldr	r3, [pc, #68]	; (80010ac <speed_aq+0x74>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a11      	ldr	r2, [pc, #68]	; (80010b0 <speed_aq+0x78>)
 800106c:	6013      	str	r3, [r2, #0]
	  speed = 154.2746392/ diff; // Rad/s
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	ee07 3a90 	vmov	s15, r3
 8001074:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001078:	ed9f 5b09 	vldr	d5, [pc, #36]	; 80010a0 <speed_aq+0x68>
 800107c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001080:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001084:	4b0b      	ldr	r3, [pc, #44]	; (80010b4 <speed_aq+0x7c>)
 8001086:	edc3 7a00 	vstr	s15, [r3]
		//143.320208327- PPR 1205.6
		// 127.0497029 - PPR 1360
		//154.2746392 - PPR 1120
	  return (speed);
 800108a:	4b0a      	ldr	r3, [pc, #40]	; (80010b4 <speed_aq+0x7c>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	ee07 3a90 	vmov	s15, r3
}
 8001092:	eeb0 0a67 	vmov.f32	s0, s15
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	d825c663 	.word	0xd825c663
 80010a4:	406348c9 	.word	0x406348c9
 80010a8:	24000120 	.word	0x24000120
 80010ac:	240000b8 	.word	0x240000b8
 80010b0:	240000b4 	.word	0x240000b4
 80010b4:	240000a0 	.word	0x240000a0

080010b8 <init_param_calcul_teta>:

int k = 0;


void init_param_calcul_teta(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	ed2d 8b02 	vpush	{d8}
 80010be:	b092      	sub	sp, #72	; 0x48
 80010c0:	af00      	add	r7, sp, #0
    //xt
    float32_t  * data = (float32_t *) malloc ((2*sysorder)*sizeof(float32_t));
 80010c2:	4b9d      	ldr	r3, [pc, #628]	; (8001338 <init_param_calcul_teta+0x280>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	00db      	lsls	r3, r3, #3
 80010c8:	4618      	mov	r0, r3
 80010ca:	f007 f86f 	bl	80081ac <malloc>
 80010ce:	4603      	mov	r3, r0
 80010d0:	627b      	str	r3, [r7, #36]	; 0x24
	for (int i = 0 ; i < (2*sysorder) ; i++)
 80010d2:	2300      	movs	r3, #0
 80010d4:	647b      	str	r3, [r7, #68]	; 0x44
 80010d6:	e009      	b.n	80010ec <init_param_calcul_teta+0x34>
	{
		data [i] = 0;
 80010d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010de:	4413      	add	r3, r2
 80010e0:	f04f 0200 	mov.w	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
	for (int i = 0 ; i < (2*sysorder) ; i++)
 80010e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80010e8:	3301      	adds	r3, #1
 80010ea:	647b      	str	r3, [r7, #68]	; 0x44
 80010ec:	4b92      	ldr	r3, [pc, #584]	; (8001338 <init_param_calcul_teta+0x280>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80010f4:	429a      	cmp	r2, r3
 80010f6:	dbef      	blt.n	80010d8 <init_param_calcul_teta+0x20>
	}

	arm_mat_init_f32 ( &Xk_t , 2*sysorder , 1  , data);
 80010f8:	4b8f      	ldr	r3, [pc, #572]	; (8001338 <init_param_calcul_teta+0x280>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	b29b      	uxth	r3, r3
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	b299      	uxth	r1, r3
 8001102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001104:	2201      	movs	r2, #1
 8001106:	488d      	ldr	r0, [pc, #564]	; (800133c <init_param_calcul_teta+0x284>)
 8001108:	f006 ffb8 	bl	800807c <arm_mat_init_f32>


    	float32_t  * data1 = (float32_t *) malloc ((2*sysorder)*sizeof(float32_t));
 800110c:	4b8a      	ldr	r3, [pc, #552]	; (8001338 <init_param_calcul_teta+0x280>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	00db      	lsls	r3, r3, #3
 8001112:	4618      	mov	r0, r3
 8001114:	f007 f84a 	bl	80081ac <malloc>
 8001118:	4603      	mov	r3, r0
 800111a:	623b      	str	r3, [r7, #32]
		for (int i = 0 ; i < (2*sysorder) ; i++)
 800111c:	2300      	movs	r3, #0
 800111e:	643b      	str	r3, [r7, #64]	; 0x40
 8001120:	e009      	b.n	8001136 <init_param_calcul_teta+0x7e>
		{
			data1 [i] = 0;
 8001122:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	6a3a      	ldr	r2, [r7, #32]
 8001128:	4413      	add	r3, r2
 800112a:	f04f 0200 	mov.w	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
		for (int i = 0 ; i < (2*sysorder) ; i++)
 8001130:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001132:	3301      	adds	r3, #1
 8001134:	643b      	str	r3, [r7, #64]	; 0x40
 8001136:	4b80      	ldr	r3, [pc, #512]	; (8001338 <init_param_calcul_teta+0x280>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800113e:	429a      	cmp	r2, r3
 8001140:	dbef      	blt.n	8001122 <init_param_calcul_teta+0x6a>
		}

	arm_mat_init_f32 (&constant , 2*sysorder , 1 , data1);
 8001142:	4b7d      	ldr	r3, [pc, #500]	; (8001338 <init_param_calcul_teta+0x280>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	b29b      	uxth	r3, r3
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	b299      	uxth	r1, r3
 800114c:	6a3b      	ldr	r3, [r7, #32]
 800114e:	2201      	movs	r2, #1
 8001150:	487b      	ldr	r0, [pc, #492]	; (8001340 <init_param_calcul_teta+0x288>)
 8001152:	f006 ff93 	bl	800807c <arm_mat_init_f32>



	float32_t  data_cst;
	arm_mat_init_f32 (&cst_lambda , 1 , 1 , &data_cst);
 8001156:	f107 0308 	add.w	r3, r7, #8
 800115a:	2201      	movs	r2, #1
 800115c:	2101      	movs	r1, #1
 800115e:	4879      	ldr	r0, [pc, #484]	; (8001344 <init_param_calcul_teta+0x28c>)
 8001160:	f006 ff8c 	bl	800807c <arm_mat_init_f32>


	float32_t  * data_k = (float32_t *) malloc ((2*sysorder)*sizeof(float32_t));
 8001164:	4b74      	ldr	r3, [pc, #464]	; (8001338 <init_param_calcul_teta+0x280>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	00db      	lsls	r3, r3, #3
 800116a:	4618      	mov	r0, r3
 800116c:	f007 f81e 	bl	80081ac <malloc>
 8001170:	4603      	mov	r3, r0
 8001172:	61fb      	str	r3, [r7, #28]
		for (int i = 0 ; i < (2*sysorder) ; i++)
 8001174:	2300      	movs	r3, #0
 8001176:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001178:	e009      	b.n	800118e <init_param_calcul_teta+0xd6>
		{
			data_k [i] = 0;
 800117a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	69fa      	ldr	r2, [r7, #28]
 8001180:	4413      	add	r3, r2
 8001182:	f04f 0200 	mov.w	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
		for (int i = 0 ; i < (2*sysorder) ; i++)
 8001188:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800118a:	3301      	adds	r3, #1
 800118c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800118e:	4b6a      	ldr	r3, [pc, #424]	; (8001338 <init_param_calcul_teta+0x280>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001196:	429a      	cmp	r2, r3
 8001198:	dbef      	blt.n	800117a <init_param_calcul_teta+0xc2>
		}

	arm_mat_init_f32 ( &K ,2*sysorder , 1 , data_k);
 800119a:	4b67      	ldr	r3, [pc, #412]	; (8001338 <init_param_calcul_teta+0x280>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	b29b      	uxth	r3, r3
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	b299      	uxth	r1, r3
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	2201      	movs	r2, #1
 80011a8:	4867      	ldr	r0, [pc, #412]	; (8001348 <init_param_calcul_teta+0x290>)
 80011aa:	f006 ff67 	bl	800807c <arm_mat_init_f32>

	float32_t  data_cst1;
	arm_mat_init_f32 (&constant1 , 1 , 1 , &data_cst1);
 80011ae:	1d3b      	adds	r3, r7, #4
 80011b0:	2201      	movs	r2, #1
 80011b2:	2101      	movs	r1, #1
 80011b4:	4865      	ldr	r0, [pc, #404]	; (800134c <init_param_calcul_teta+0x294>)
 80011b6:	f006 ff61 	bl	800807c <arm_mat_init_f32>


	float32_t  * data2= (float32_t *) malloc ((2*sysorder)*sizeof(float32_t));
 80011ba:	4b5f      	ldr	r3, [pc, #380]	; (8001338 <init_param_calcul_teta+0x280>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	00db      	lsls	r3, r3, #3
 80011c0:	4618      	mov	r0, r3
 80011c2:	f006 fff3 	bl	80081ac <malloc>
 80011c6:	4603      	mov	r3, r0
 80011c8:	61bb      	str	r3, [r7, #24]
	for (int i = 0 ; i < (2*sysorder) ; i++)
 80011ca:	2300      	movs	r3, #0
 80011cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80011ce:	e009      	b.n	80011e4 <init_param_calcul_teta+0x12c>
	{
		data2 [i] = 0;
 80011d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	4413      	add	r3, r2
 80011d8:	f04f 0200 	mov.w	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]
	for (int i = 0 ; i < (2*sysorder) ; i++)
 80011de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011e0:	3301      	adds	r3, #1
 80011e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80011e4:	4b54      	ldr	r3, [pc, #336]	; (8001338 <init_param_calcul_teta+0x280>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80011ec:	429a      	cmp	r2, r3
 80011ee:	dbef      	blt.n	80011d0 <init_param_calcul_teta+0x118>
	}

	arm_mat_init_f32 ( &cst2  , 1 ,2*sysorder , data2);
 80011f0:	4b51      	ldr	r3, [pc, #324]	; (8001338 <init_param_calcul_teta+0x280>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	b29b      	uxth	r3, r3
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	b29a      	uxth	r2, r3
 80011fa:	69bb      	ldr	r3, [r7, #24]
 80011fc:	2101      	movs	r1, #1
 80011fe:	4854      	ldr	r0, [pc, #336]	; (8001350 <init_param_calcul_teta+0x298>)
 8001200:	f006 ff3c 	bl	800807c <arm_mat_init_f32>


	float32_t  * data3= (float32_t *) malloc ((2*sysorder*2*sysorder)*sizeof(float32_t));
 8001204:	4b4c      	ldr	r3, [pc, #304]	; (8001338 <init_param_calcul_teta+0x280>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a4b      	ldr	r2, [pc, #300]	; (8001338 <init_param_calcul_teta+0x280>)
 800120a:	6812      	ldr	r2, [r2, #0]
 800120c:	fb02 f303 	mul.w	r3, r2, r3
 8001210:	011b      	lsls	r3, r3, #4
 8001212:	4618      	mov	r0, r3
 8001214:	f006 ffca 	bl	80081ac <malloc>
 8001218:	4603      	mov	r3, r0
 800121a:	617b      	str	r3, [r7, #20]
	for (int i = 0 ; i < (2*sysorder*2*sysorder) ; i++)
 800121c:	2300      	movs	r3, #0
 800121e:	637b      	str	r3, [r7, #52]	; 0x34
 8001220:	e009      	b.n	8001236 <init_param_calcul_teta+0x17e>
	{
		data3 [i] = 0;
 8001222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	697a      	ldr	r2, [r7, #20]
 8001228:	4413      	add	r3, r2
 800122a:	f04f 0200 	mov.w	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
	for (int i = 0 ; i < (2*sysorder*2*sysorder) ; i++)
 8001230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001232:	3301      	adds	r3, #1
 8001234:	637b      	str	r3, [r7, #52]	; 0x34
 8001236:	4b40      	ldr	r3, [pc, #256]	; (8001338 <init_param_calcul_teta+0x280>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a3f      	ldr	r2, [pc, #252]	; (8001338 <init_param_calcul_teta+0x280>)
 800123c:	6812      	ldr	r2, [r2, #0]
 800123e:	fb02 f303 	mul.w	r3, r2, r3
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001246:	429a      	cmp	r2, r3
 8001248:	dbeb      	blt.n	8001222 <init_param_calcul_teta+0x16a>
	}

	arm_mat_init_f32 ( &cst3  , 2*sysorder ,2*sysorder , data3);
 800124a:	4b3b      	ldr	r3, [pc, #236]	; (8001338 <init_param_calcul_teta+0x280>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	b29b      	uxth	r3, r3
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	b299      	uxth	r1, r3
 8001254:	4b38      	ldr	r3, [pc, #224]	; (8001338 <init_param_calcul_teta+0x280>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	b29b      	uxth	r3, r3
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	b29a      	uxth	r2, r3
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	483c      	ldr	r0, [pc, #240]	; (8001354 <init_param_calcul_teta+0x29c>)
 8001262:	f006 ff0b 	bl	800807c <arm_mat_init_f32>

    float32_t  * data_teta = (float32_t *) malloc ((2*sysorder)*sizeof(float32_t));
 8001266:	4b34      	ldr	r3, [pc, #208]	; (8001338 <init_param_calcul_teta+0x280>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	00db      	lsls	r3, r3, #3
 800126c:	4618      	mov	r0, r3
 800126e:	f006 ff9d 	bl	80081ac <malloc>
 8001272:	4603      	mov	r3, r0
 8001274:	613b      	str	r3, [r7, #16]
	for (int i = 0 ; i < (2*sysorder) ; i++)
 8001276:	2300      	movs	r3, #0
 8001278:	633b      	str	r3, [r7, #48]	; 0x30
 800127a:	e009      	b.n	8001290 <init_param_calcul_teta+0x1d8>
	{
		data_teta [i] = 0;
 800127c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	693a      	ldr	r2, [r7, #16]
 8001282:	4413      	add	r3, r2
 8001284:	f04f 0200 	mov.w	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
	for (int i = 0 ; i < (2*sysorder) ; i++)
 800128a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800128c:	3301      	adds	r3, #1
 800128e:	633b      	str	r3, [r7, #48]	; 0x30
 8001290:	4b29      	ldr	r3, [pc, #164]	; (8001338 <init_param_calcul_teta+0x280>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	005b      	lsls	r3, r3, #1
 8001296:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001298:	429a      	cmp	r2, r3
 800129a:	dbef      	blt.n	800127c <init_param_calcul_teta+0x1c4>
	}
	arm_mat_init_f32 ( &teta_new , 2*sysorder, 1 , data_teta);
 800129c:	4b26      	ldr	r3, [pc, #152]	; (8001338 <init_param_calcul_teta+0x280>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	b29b      	uxth	r3, r3
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	b299      	uxth	r1, r3
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	2201      	movs	r2, #1
 80012aa:	482b      	ldr	r0, [pc, #172]	; (8001358 <init_param_calcul_teta+0x2a0>)
 80012ac:	f006 fee6 	bl	800807c <arm_mat_init_f32>

    	float32_t  * data_pn_new = (float32_t *) malloc (pow((2*sysorder),2)*sizeof(float32_t));
 80012b0:	4b21      	ldr	r3, [pc, #132]	; (8001338 <init_param_calcul_teta+0x280>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	ee07 3a90 	vmov	s15, r3
 80012ba:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80012be:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80012c2:	eeb0 0b47 	vmov.f64	d0, d7
 80012c6:	f007 f82f 	bl	8008328 <pow>
 80012ca:	eeb0 7b40 	vmov.f64	d7, d0
 80012ce:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 80012d2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80012d6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80012da:	ee17 0a90 	vmov	r0, s15
 80012de:	f006 ff65 	bl	80081ac <malloc>
 80012e2:	4603      	mov	r3, r0
 80012e4:	60fb      	str	r3, [r7, #12]

	for (int i = 0 ; i < pow((2*sysorder),2) ; i++)
 80012e6:	2300      	movs	r3, #0
 80012e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012ea:	e009      	b.n	8001300 <init_param_calcul_teta+0x248>
	{
		data_pn_new [i] = 0;
 80012ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	68fa      	ldr	r2, [r7, #12]
 80012f2:	4413      	add	r3, r2
 80012f4:	f04f 0200 	mov.w	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
	for (int i = 0 ; i < pow((2*sysorder),2) ; i++)
 80012fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012fc:	3301      	adds	r3, #1
 80012fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001302:	ee07 3a90 	vmov	s15, r3
 8001306:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 800130a:	4b0b      	ldr	r3, [pc, #44]	; (8001338 <init_param_calcul_teta+0x280>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	ee07 3a90 	vmov	s15, r3
 8001314:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001318:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800131c:	eeb0 0b47 	vmov.f64	d0, d7
 8001320:	f007 f802 	bl	8008328 <pow>
 8001324:	eeb0 7b40 	vmov.f64	d7, d0
 8001328:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800132c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001330:	d4dc      	bmi.n	80012ec <init_param_calcul_teta+0x234>
	}
	for (int i = 0 ; i < 2*sysorder ; i++)
 8001332:	2300      	movs	r3, #0
 8001334:	62bb      	str	r3, [r7, #40]	; 0x28
 8001336:	e020      	b.n	800137a <init_param_calcul_teta+0x2c2>
 8001338:	24000000 	.word	0x24000000
 800133c:	240002ac 	.word	0x240002ac
 8001340:	24000308 	.word	0x24000308
 8001344:	24000258 	.word	0x24000258
 8001348:	24000250 	.word	0x24000250
 800134c:	240003c0 	.word	0x240003c0
 8001350:	240003b8 	.word	0x240003b8
 8001354:	24000300 	.word	0x24000300
 8001358:	240003b0 	.word	0x240003b0
	{
		data_pn_new [ i*(2*sysorder + 1)] = 0.1 ;
 800135c:	4b14      	ldr	r3, [pc, #80]	; (80013b0 <init_param_calcul_teta+0x2f8>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	3301      	adds	r3, #1
 8001364:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001366:	fb02 f303 	mul.w	r3, r2, r3
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	68fa      	ldr	r2, [r7, #12]
 800136e:	4413      	add	r3, r2
 8001370:	4a10      	ldr	r2, [pc, #64]	; (80013b4 <init_param_calcul_teta+0x2fc>)
 8001372:	601a      	str	r2, [r3, #0]
	for (int i = 0 ; i < 2*sysorder ; i++)
 8001374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001376:	3301      	adds	r3, #1
 8001378:	62bb      	str	r3, [r7, #40]	; 0x28
 800137a:	4b0d      	ldr	r3, [pc, #52]	; (80013b0 <init_param_calcul_teta+0x2f8>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001382:	429a      	cmp	r2, r3
 8001384:	dbea      	blt.n	800135c <init_param_calcul_teta+0x2a4>
	}
	arm_mat_init_f32 ( &Pn_new , 2*sysorder , 2*sysorder , data_pn_new);
 8001386:	4b0a      	ldr	r3, [pc, #40]	; (80013b0 <init_param_calcul_teta+0x2f8>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	b29b      	uxth	r3, r3
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	b299      	uxth	r1, r3
 8001390:	4b07      	ldr	r3, [pc, #28]	; (80013b0 <init_param_calcul_teta+0x2f8>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	b29b      	uxth	r3, r3
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	b29a      	uxth	r2, r3
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	4806      	ldr	r0, [pc, #24]	; (80013b8 <init_param_calcul_teta+0x300>)
 800139e:	f006 fe6d 	bl	800807c <arm_mat_init_f32>

}
 80013a2:	bf00      	nop
 80013a4:	3748      	adds	r7, #72	; 0x48
 80013a6:	46bd      	mov	sp, r7
 80013a8:	ecbd 8b02 	vpop	{d8}
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	24000000 	.word	0x24000000
 80013b4:	3dcccccd 	.word	0x3dcccccd
 80013b8:	2400016c 	.word	0x2400016c

080013bc <teta_calc>:
void teta_calc (arm_matrix_instance_f32  Xk , float output_t , float lambda)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b08a      	sub	sp, #40	; 0x28
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	f107 0308 	add.w	r3, r7, #8
 80013c6:	e883 0003 	stmia.w	r3, {r0, r1}
 80013ca:	ed87 0a01 	vstr	s0, [r7, #4]
 80013ce:	edc7 0a00 	vstr	s1, [r7]
	arm_status status;
	// calcul de K
	status = arm_mat_trans_f32 (&Xk , &Xk_t);
 80013d2:	f107 0308 	add.w	r3, r7, #8
 80013d6:	4968      	ldr	r1, [pc, #416]	; (8001578 <teta_calc+0x1bc>)
 80013d8:	4618      	mov	r0, r3
 80013da:	f006 fce3 	bl	8007da4 <arm_mat_trans_f32>
 80013de:	4603      	mov	r3, r0
 80013e0:	76fb      	strb	r3, [r7, #27]

	status = arm_mat_mult_f32 (&Pn , &Xk_t , &constant); // constant == Pn*Xk'
 80013e2:	4a66      	ldr	r2, [pc, #408]	; (800157c <teta_calc+0x1c0>)
 80013e4:	4964      	ldr	r1, [pc, #400]	; (8001578 <teta_calc+0x1bc>)
 80013e6:	4866      	ldr	r0, [pc, #408]	; (8001580 <teta_calc+0x1c4>)
 80013e8:	f006 fda4 	bl	8007f34 <arm_mat_mult_f32>
 80013ec:	4603      	mov	r3, r0
 80013ee:	76fb      	strb	r3, [r7, #27]

	status = arm_mat_mult_f32 (&Xk , &constant , &cst_lambda);// cst_lambda == Xk*(Pn*Xk')
 80013f0:	f107 0308 	add.w	r3, r7, #8
 80013f4:	4a63      	ldr	r2, [pc, #396]	; (8001584 <teta_calc+0x1c8>)
 80013f6:	4961      	ldr	r1, [pc, #388]	; (800157c <teta_calc+0x1c0>)
 80013f8:	4618      	mov	r0, r3
 80013fa:	f006 fd9b 	bl	8007f34 <arm_mat_mult_f32>
 80013fe:	4603      	mov	r3, r0
 8001400:	76fb      	strb	r3, [r7, #27]

	*(cst_lambda.pData) = *(cst_lambda.pData) + (float32_t)lambda; // cst_lambda = lambda + Xk*(Pn*Xk')
 8001402:	4b60      	ldr	r3, [pc, #384]	; (8001584 <teta_calc+0x1c8>)
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	ed93 7a00 	vldr	s14, [r3]
 800140a:	4b5e      	ldr	r3, [pc, #376]	; (8001584 <teta_calc+0x1c8>)
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	edd7 7a00 	vldr	s15, [r7]
 8001412:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001416:	edc3 7a00 	vstr	s15, [r3]

	status = arm_mat_mult_f32 (&Pn , &Xk_t , &K); // K == Pn*Xk'
 800141a:	4a5b      	ldr	r2, [pc, #364]	; (8001588 <teta_calc+0x1cc>)
 800141c:	4956      	ldr	r1, [pc, #344]	; (8001578 <teta_calc+0x1bc>)
 800141e:	4858      	ldr	r0, [pc, #352]	; (8001580 <teta_calc+0x1c4>)
 8001420:	f006 fd88 	bl	8007f34 <arm_mat_mult_f32>
 8001424:	4603      	mov	r3, r0
 8001426:	76fb      	strb	r3, [r7, #27]

	for (int i = 0 ; i < 2*sysorder ; i++)
 8001428:	2300      	movs	r3, #0
 800142a:	627b      	str	r3, [r7, #36]	; 0x24
 800142c:	e016      	b.n	800145c <teta_calc+0xa0>
	{
		K.pData [i] = (K.pData [i])/(*(cst_lambda.pData)); /* K == (Pn * Xk')./(cst_lambda = (lambda + Xk*(Pn*Xk')))*/
 800142e:	4b56      	ldr	r3, [pc, #344]	; (8001588 <teta_calc+0x1cc>)
 8001430:	685a      	ldr	r2, [r3, #4]
 8001432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	4413      	add	r3, r2
 8001438:	edd3 6a00 	vldr	s13, [r3]
 800143c:	4b51      	ldr	r3, [pc, #324]	; (8001584 <teta_calc+0x1c8>)
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	ed93 7a00 	vldr	s14, [r3]
 8001444:	4b50      	ldr	r3, [pc, #320]	; (8001588 <teta_calc+0x1cc>)
 8001446:	685a      	ldr	r2, [r3, #4]
 8001448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	4413      	add	r3, r2
 800144e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001452:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0 ; i < 2*sysorder ; i++)
 8001456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001458:	3301      	adds	r3, #1
 800145a:	627b      	str	r3, [r7, #36]	; 0x24
 800145c:	4b4b      	ldr	r3, [pc, #300]	; (800158c <teta_calc+0x1d0>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001464:	429a      	cmp	r2, r3
 8001466:	dbe2      	blt.n	800142e <teta_calc+0x72>
	}
	Clone_K = K;
 8001468:	4b49      	ldr	r3, [pc, #292]	; (8001590 <teta_calc+0x1d4>)
 800146a:	4a47      	ldr	r2, [pc, #284]	; (8001588 <teta_calc+0x1cc>)
 800146c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001470:	e883 0003 	stmia.w	r3, {r0, r1}

	// teta

	status = arm_mat_mult_f32 (&Xk , &teta , &constant1); // constant1 = Xk * teta
 8001474:	f107 0308 	add.w	r3, r7, #8
 8001478:	4a46      	ldr	r2, [pc, #280]	; (8001594 <teta_calc+0x1d8>)
 800147a:	4947      	ldr	r1, [pc, #284]	; (8001598 <teta_calc+0x1dc>)
 800147c:	4618      	mov	r0, r3
 800147e:	f006 fd59 	bl	8007f34 <arm_mat_mult_f32>
 8001482:	4603      	mov	r3, r0
 8001484:	76fb      	strb	r3, [r7, #27]

	float32_t cst = (float32_t) output_t - *(constant1.pData); // cst = ( Y(t,:) - Xk * teta)
 8001486:	4b43      	ldr	r3, [pc, #268]	; (8001594 <teta_calc+0x1d8>)
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	edd3 7a00 	vldr	s15, [r3]
 800148e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001492:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001496:	edc7 7a05 	vstr	s15, [r7, #20]

	for (int i = 0 ; i < 2*sysorder ; i++)
 800149a:	2300      	movs	r3, #0
 800149c:	623b      	str	r3, [r7, #32]
 800149e:	e014      	b.n	80014ca <teta_calc+0x10e>
		{
		Clone_K.pData [i] = (Clone_K.pData [i])*cst ;
 80014a0:	4b3b      	ldr	r3, [pc, #236]	; (8001590 <teta_calc+0x1d4>)
 80014a2:	685a      	ldr	r2, [r3, #4]
 80014a4:	6a3b      	ldr	r3, [r7, #32]
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	4413      	add	r3, r2
 80014aa:	ed93 7a00 	vldr	s14, [r3]
 80014ae:	4b38      	ldr	r3, [pc, #224]	; (8001590 <teta_calc+0x1d4>)
 80014b0:	685a      	ldr	r2, [r3, #4]
 80014b2:	6a3b      	ldr	r3, [r7, #32]
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	4413      	add	r3, r2
 80014b8:	edd7 7a05 	vldr	s15, [r7, #20]
 80014bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014c0:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0 ; i < 2*sysorder ; i++)
 80014c4:	6a3b      	ldr	r3, [r7, #32]
 80014c6:	3301      	adds	r3, #1
 80014c8:	623b      	str	r3, [r7, #32]
 80014ca:	4b30      	ldr	r3, [pc, #192]	; (800158c <teta_calc+0x1d0>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	6a3a      	ldr	r2, [r7, #32]
 80014d2:	429a      	cmp	r2, r3
 80014d4:	dbe4      	blt.n	80014a0 <teta_calc+0xe4>
		}


	status = arm_mat_add_f32 (&teta , &Clone_K , &teta_new);
 80014d6:	4a31      	ldr	r2, [pc, #196]	; (800159c <teta_calc+0x1e0>)
 80014d8:	492d      	ldr	r1, [pc, #180]	; (8001590 <teta_calc+0x1d4>)
 80014da:	482f      	ldr	r0, [pc, #188]	; (8001598 <teta_calc+0x1dc>)
 80014dc:	f006 fdd2 	bl	8008084 <arm_mat_add_f32>
 80014e0:	4603      	mov	r3, r0
 80014e2:	76fb      	strb	r3, [r7, #27]
	teta = teta_new;
 80014e4:	4b2c      	ldr	r3, [pc, #176]	; (8001598 <teta_calc+0x1dc>)
 80014e6:	4a2d      	ldr	r2, [pc, #180]	; (800159c <teta_calc+0x1e0>)
 80014e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014ec:	e883 0003 	stmia.w	r3, {r0, r1}


	status = arm_mat_mult_f32 (&Xk , &Pn , &cst2); // cst2 = Xk*Pn
 80014f0:	f107 0308 	add.w	r3, r7, #8
 80014f4:	4a2a      	ldr	r2, [pc, #168]	; (80015a0 <teta_calc+0x1e4>)
 80014f6:	4922      	ldr	r1, [pc, #136]	; (8001580 <teta_calc+0x1c4>)
 80014f8:	4618      	mov	r0, r3
 80014fa:	f006 fd1b 	bl	8007f34 <arm_mat_mult_f32>
 80014fe:	4603      	mov	r3, r0
 8001500:	76fb      	strb	r3, [r7, #27]


	status = arm_mat_mult_f32 (&K , &cst2 , &cst3); // cst3 == K*(Xk*Pn)
 8001502:	4a28      	ldr	r2, [pc, #160]	; (80015a4 <teta_calc+0x1e8>)
 8001504:	4926      	ldr	r1, [pc, #152]	; (80015a0 <teta_calc+0x1e4>)
 8001506:	4820      	ldr	r0, [pc, #128]	; (8001588 <teta_calc+0x1cc>)
 8001508:	f006 fd14 	bl	8007f34 <arm_mat_mult_f32>
 800150c:	4603      	mov	r3, r0
 800150e:	76fb      	strb	r3, [r7, #27]


	status = arm_mat_sub_f32 (&Pn , &cst3 , &Pn_new);
 8001510:	4a25      	ldr	r2, [pc, #148]	; (80015a8 <teta_calc+0x1ec>)
 8001512:	4924      	ldr	r1, [pc, #144]	; (80015a4 <teta_calc+0x1e8>)
 8001514:	481a      	ldr	r0, [pc, #104]	; (8001580 <teta_calc+0x1c4>)
 8001516:	f006 fca3 	bl	8007e60 <arm_mat_sub_f32>
 800151a:	4603      	mov	r3, r0
 800151c:	76fb      	strb	r3, [r7, #27]

	for (int i = 0 ; i < ((2*sysorder)*(2*sysorder)) ; i ++)
 800151e:	2300      	movs	r3, #0
 8001520:	61fb      	str	r3, [r7, #28]
 8001522:	e014      	b.n	800154e <teta_calc+0x192>
	{
		Pn_new.pData [i] = Pn_new.pData [i] / lambda ;
 8001524:	4b20      	ldr	r3, [pc, #128]	; (80015a8 <teta_calc+0x1ec>)
 8001526:	685a      	ldr	r2, [r3, #4]
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	4413      	add	r3, r2
 800152e:	edd3 6a00 	vldr	s13, [r3]
 8001532:	4b1d      	ldr	r3, [pc, #116]	; (80015a8 <teta_calc+0x1ec>)
 8001534:	685a      	ldr	r2, [r3, #4]
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	4413      	add	r3, r2
 800153c:	ed97 7a00 	vldr	s14, [r7]
 8001540:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001544:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0 ; i < ((2*sysorder)*(2*sysorder)) ; i ++)
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	3301      	adds	r3, #1
 800154c:	61fb      	str	r3, [r7, #28]
 800154e:	4b0f      	ldr	r3, [pc, #60]	; (800158c <teta_calc+0x1d0>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a0e      	ldr	r2, [pc, #56]	; (800158c <teta_calc+0x1d0>)
 8001554:	6812      	ldr	r2, [r2, #0]
 8001556:	fb02 f303 	mul.w	r3, r2, r3
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	69fa      	ldr	r2, [r7, #28]
 800155e:	429a      	cmp	r2, r3
 8001560:	dbe0      	blt.n	8001524 <teta_calc+0x168>
	}
	Pn= Pn_new;
 8001562:	4b07      	ldr	r3, [pc, #28]	; (8001580 <teta_calc+0x1c4>)
 8001564:	4a10      	ldr	r2, [pc, #64]	; (80015a8 <teta_calc+0x1ec>)
 8001566:	e892 0003 	ldmia.w	r2, {r0, r1}
 800156a:	e883 0003 	stmia.w	r3, {r0, r1}

}
 800156e:	bf00      	nop
 8001570:	3728      	adds	r7, #40	; 0x28
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	240002ac 	.word	0x240002ac
 800157c:	24000308 	.word	0x24000308
 8001580:	24000310 	.word	0x24000310
 8001584:	24000258 	.word	0x24000258
 8001588:	24000250 	.word	0x24000250
 800158c:	24000000 	.word	0x24000000
 8001590:	24000118 	.word	0x24000118
 8001594:	240003c0 	.word	0x240003c0
 8001598:	240003d0 	.word	0x240003d0
 800159c:	240003b0 	.word	0x240003b0
 80015a0:	240003b8 	.word	0x240003b8
 80015a4:	24000300 	.word	0x24000300
 80015a8:	2400016c 	.word	0x2400016c

080015ac <update_X>:


void update_X (float input , float output)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	ed87 0a01 	vstr	s0, [r7, #4]
 80015b6:	edc7 0a00 	vstr	s1, [r7]
	// Yk
	for (int i = (sysorder -1) ; i>0 ; i--)
 80015ba:	4b2b      	ldr	r3, [pc, #172]	; (8001668 <update_X+0xbc>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	3b01      	subs	r3, #1
 80015c0:	60fb      	str	r3, [r7, #12]
 80015c2:	e011      	b.n	80015e8 <update_X+0x3c>
	{
		X[i] = X[i-1];
 80015c4:	4b29      	ldr	r3, [pc, #164]	; (800166c <update_X+0xc0>)
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	68f9      	ldr	r1, [r7, #12]
 80015ca:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80015ce:	440b      	add	r3, r1
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	441a      	add	r2, r3
 80015d4:	4b25      	ldr	r3, [pc, #148]	; (800166c <update_X+0xc0>)
 80015d6:	6819      	ldr	r1, [r3, #0]
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	440b      	add	r3, r1
 80015de:	6812      	ldr	r2, [r2, #0]
 80015e0:	601a      	str	r2, [r3, #0]
	for (int i = (sysorder -1) ; i>0 ; i--)
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	3b01      	subs	r3, #1
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	dcea      	bgt.n	80015c4 <update_X+0x18>
	}
	X[0] = (-1) * output;
 80015ee:	4b1f      	ldr	r3, [pc, #124]	; (800166c <update_X+0xc0>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	edd7 7a00 	vldr	s15, [r7]
 80015f6:	eef1 7a67 	vneg.f32	s15, s15
 80015fa:	edc3 7a00 	vstr	s15, [r3]

	// Uk
	for (int i = (2*sysorder -1) ; i > sysorder ; i--)
 80015fe:	4b1a      	ldr	r3, [pc, #104]	; (8001668 <update_X+0xbc>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	3b01      	subs	r3, #1
 8001606:	60bb      	str	r3, [r7, #8]
 8001608:	e011      	b.n	800162e <update_X+0x82>
	{
		X[i] = X[i-1];
 800160a:	4b18      	ldr	r3, [pc, #96]	; (800166c <update_X+0xc0>)
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	68b9      	ldr	r1, [r7, #8]
 8001610:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8001614:	440b      	add	r3, r1
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	441a      	add	r2, r3
 800161a:	4b14      	ldr	r3, [pc, #80]	; (800166c <update_X+0xc0>)
 800161c:	6819      	ldr	r1, [r3, #0]
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	440b      	add	r3, r1
 8001624:	6812      	ldr	r2, [r2, #0]
 8001626:	601a      	str	r2, [r3, #0]
	for (int i = (2*sysorder -1) ; i > sysorder ; i--)
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	3b01      	subs	r3, #1
 800162c:	60bb      	str	r3, [r7, #8]
 800162e:	4b0e      	ldr	r3, [pc, #56]	; (8001668 <update_X+0xbc>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	68ba      	ldr	r2, [r7, #8]
 8001634:	429a      	cmp	r2, r3
 8001636:	dce8      	bgt.n	800160a <update_X+0x5e>
	}
	X[sysorder] = input;
 8001638:	4b0c      	ldr	r3, [pc, #48]	; (800166c <update_X+0xc0>)
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	4b0a      	ldr	r3, [pc, #40]	; (8001668 <update_X+0xbc>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	4413      	add	r3, r2
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	601a      	str	r2, [r3, #0]
	arm_mat_init_f32 ( &Xk , 1 , 2*sysorder , X);
 8001648:	4b07      	ldr	r3, [pc, #28]	; (8001668 <update_X+0xbc>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	b29b      	uxth	r3, r3
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	b29a      	uxth	r2, r3
 8001652:	4b06      	ldr	r3, [pc, #24]	; (800166c <update_X+0xc0>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	2101      	movs	r1, #1
 8001658:	4805      	ldr	r0, [pc, #20]	; (8001670 <update_X+0xc4>)
 800165a:	f006 fd0f 	bl	800807c <arm_mat_init_f32>

}
 800165e:	bf00      	nop
 8001660:	3710      	adds	r7, #16
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	24000000 	.word	0x24000000
 800166c:	240003d8 	.word	0x240003d8
 8001670:	240003c8 	.word	0x240003c8

08001674 <init_rls>:

void init_rls (void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	ed2d 8b02 	vpush	{d8}
 800167a:	b088      	sub	sp, #32
 800167c:	af00      	add	r7, sp, #0

	// init teta
	float32_t  * data_t = (float32_t *) malloc ((2*sysorder)*sizeof(float32_t));
 800167e:	4b5b      	ldr	r3, [pc, #364]	; (80017ec <init_rls+0x178>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	00db      	lsls	r3, r3, #3
 8001684:	4618      	mov	r0, r3
 8001686:	f006 fd91 	bl	80081ac <malloc>
 800168a:	4603      	mov	r3, r0
 800168c:	60fb      	str	r3, [r7, #12]
	for (int i = 0 ; i < (2*sysorder) ; i++)
 800168e:	2300      	movs	r3, #0
 8001690:	61fb      	str	r3, [r7, #28]
 8001692:	e009      	b.n	80016a8 <init_rls+0x34>
	{
		data_t [i] = 0;
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	68fa      	ldr	r2, [r7, #12]
 800169a:	4413      	add	r3, r2
 800169c:	f04f 0200 	mov.w	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
	for (int i = 0 ; i < (2*sysorder) ; i++)
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	3301      	adds	r3, #1
 80016a6:	61fb      	str	r3, [r7, #28]
 80016a8:	4b50      	ldr	r3, [pc, #320]	; (80017ec <init_rls+0x178>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	69fa      	ldr	r2, [r7, #28]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	dbef      	blt.n	8001694 <init_rls+0x20>
	}
	arm_mat_init_f32 ( &teta , 2*sysorder, 1 , data_t);
 80016b4:	4b4d      	ldr	r3, [pc, #308]	; (80017ec <init_rls+0x178>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	b29b      	uxth	r3, r3
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	b299      	uxth	r1, r3
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	2201      	movs	r2, #1
 80016c2:	484b      	ldr	r0, [pc, #300]	; (80017f0 <init_rls+0x17c>)
 80016c4:	f006 fcda 	bl	800807c <arm_mat_init_f32>


	//init Xk
	float32_t  * data_xk = (float32_t *) malloc ((2*sysorder)*sizeof(float32_t));
 80016c8:	4b48      	ldr	r3, [pc, #288]	; (80017ec <init_rls+0x178>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	00db      	lsls	r3, r3, #3
 80016ce:	4618      	mov	r0, r3
 80016d0:	f006 fd6c 	bl	80081ac <malloc>
 80016d4:	4603      	mov	r3, r0
 80016d6:	60bb      	str	r3, [r7, #8]
		for (int i = 0 ; i < (2*sysorder) ; i++)
 80016d8:	2300      	movs	r3, #0
 80016da:	61bb      	str	r3, [r7, #24]
 80016dc:	e009      	b.n	80016f2 <init_rls+0x7e>
		{
			data_xk [i] = 0;
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	68ba      	ldr	r2, [r7, #8]
 80016e4:	4413      	add	r3, r2
 80016e6:	f04f 0200 	mov.w	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
		for (int i = 0 ; i < (2*sysorder) ; i++)
 80016ec:	69bb      	ldr	r3, [r7, #24]
 80016ee:	3301      	adds	r3, #1
 80016f0:	61bb      	str	r3, [r7, #24]
 80016f2:	4b3e      	ldr	r3, [pc, #248]	; (80017ec <init_rls+0x178>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	69ba      	ldr	r2, [r7, #24]
 80016fa:	429a      	cmp	r2, r3
 80016fc:	dbef      	blt.n	80016de <init_rls+0x6a>
		}
	arm_mat_init_f32 ( &Xk , 1 , 2*sysorder , data_xk);
 80016fe:	4b3b      	ldr	r3, [pc, #236]	; (80017ec <init_rls+0x178>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	b29b      	uxth	r3, r3
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	b29a      	uxth	r2, r3
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	2101      	movs	r1, #1
 800170c:	4839      	ldr	r0, [pc, #228]	; (80017f4 <init_rls+0x180>)
 800170e:	f006 fcb5 	bl	800807c <arm_mat_init_f32>

	//Init Pn
	float32_t  * data_pn = (float32_t *) malloc (pow((2*sysorder),2)*sizeof(float32_t));
 8001712:	4b36      	ldr	r3, [pc, #216]	; (80017ec <init_rls+0x178>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	ee07 3a90 	vmov	s15, r3
 800171c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001720:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001724:	eeb0 0b47 	vmov.f64	d0, d7
 8001728:	f006 fdfe 	bl	8008328 <pow>
 800172c:	eeb0 7b40 	vmov.f64	d7, d0
 8001730:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001734:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001738:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800173c:	ee17 0a90 	vmov	r0, s15
 8001740:	f006 fd34 	bl	80081ac <malloc>
 8001744:	4603      	mov	r3, r0
 8001746:	607b      	str	r3, [r7, #4]

	for (int i = 0 ; i < pow((2*sysorder),2) ; i++)
 8001748:	2300      	movs	r3, #0
 800174a:	617b      	str	r3, [r7, #20]
 800174c:	e009      	b.n	8001762 <init_rls+0xee>
	{
		data_pn [i] = 0;
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	4413      	add	r3, r2
 8001756:	f04f 0200 	mov.w	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
	for (int i = 0 ; i < pow((2*sysorder),2) ; i++)
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	3301      	adds	r3, #1
 8001760:	617b      	str	r3, [r7, #20]
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	ee07 3a90 	vmov	s15, r3
 8001768:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 800176c:	4b1f      	ldr	r3, [pc, #124]	; (80017ec <init_rls+0x178>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	ee07 3a90 	vmov	s15, r3
 8001776:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800177a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800177e:	eeb0 0b47 	vmov.f64	d0, d7
 8001782:	f006 fdd1 	bl	8008328 <pow>
 8001786:	eeb0 7b40 	vmov.f64	d7, d0
 800178a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800178e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001792:	d4dc      	bmi.n	800174e <init_rls+0xda>
	}
	for (int i = 0 ; i < 2*sysorder ; i++)
 8001794:	2300      	movs	r3, #0
 8001796:	613b      	str	r3, [r7, #16]
 8001798:	e00e      	b.n	80017b8 <init_rls+0x144>
	{
		data_pn [ i*(2*sysorder + 1)] = 0.1 ;
 800179a:	4b14      	ldr	r3, [pc, #80]	; (80017ec <init_rls+0x178>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	3301      	adds	r3, #1
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	fb02 f303 	mul.w	r3, r2, r3
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	4413      	add	r3, r2
 80017ae:	4a12      	ldr	r2, [pc, #72]	; (80017f8 <init_rls+0x184>)
 80017b0:	601a      	str	r2, [r3, #0]
	for (int i = 0 ; i < 2*sysorder ; i++)
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	3301      	adds	r3, #1
 80017b6:	613b      	str	r3, [r7, #16]
 80017b8:	4b0c      	ldr	r3, [pc, #48]	; (80017ec <init_rls+0x178>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	693a      	ldr	r2, [r7, #16]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	dbea      	blt.n	800179a <init_rls+0x126>
	}
	arm_mat_init_f32 ( &Pn , 2*sysorder , 2*sysorder , data_pn);
 80017c4:	4b09      	ldr	r3, [pc, #36]	; (80017ec <init_rls+0x178>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	005b      	lsls	r3, r3, #1
 80017cc:	b299      	uxth	r1, r3
 80017ce:	4b07      	ldr	r3, [pc, #28]	; (80017ec <init_rls+0x178>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	b29a      	uxth	r2, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	4808      	ldr	r0, [pc, #32]	; (80017fc <init_rls+0x188>)
 80017dc:	f006 fc4e 	bl	800807c <arm_mat_init_f32>



}
 80017e0:	bf00      	nop
 80017e2:	3720      	adds	r7, #32
 80017e4:	46bd      	mov	sp, r7
 80017e6:	ecbd 8b02 	vpop	{d8}
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	24000000 	.word	0x24000000
 80017f0:	240003d0 	.word	0x240003d0
 80017f4:	240003c8 	.word	0x240003c8
 80017f8:	3dcccccd 	.word	0x3dcccccd
 80017fc:	24000310 	.word	0x24000310

08001800 <rep_sys>:

float32_t rep_sys (void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
	arm_matrix_instance_f32 rep;
	float32_t  resp_output;
	arm_mat_init_f32 (&rep , 1 , 1 , &resp_output);
 8001806:	1d3b      	adds	r3, r7, #4
 8001808:	f107 0008 	add.w	r0, r7, #8
 800180c:	2201      	movs	r2, #1
 800180e:	2101      	movs	r1, #1
 8001810:	f006 fc34 	bl	800807c <arm_mat_init_f32>
	arm_mat_mult_f32( &Xk, &teta , &rep);
 8001814:	f107 0308 	add.w	r3, r7, #8
 8001818:	461a      	mov	r2, r3
 800181a:	4906      	ldr	r1, [pc, #24]	; (8001834 <rep_sys+0x34>)
 800181c:	4806      	ldr	r0, [pc, #24]	; (8001838 <rep_sys+0x38>)
 800181e:	f006 fb89 	bl	8007f34 <arm_mat_mult_f32>
	return (*(rep.pData));
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	ee07 3a90 	vmov	s15, r3


}
 800182a:	eeb0 0a67 	vmov.f32	s0, s15
 800182e:	3710      	adds	r7, #16
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	240003d0 	.word	0x240003d0
 8001838:	240003c8 	.word	0x240003c8
 800183c:	00000000 	.word	0x00000000

08001840 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	ed2d 8b02 	vpush	{d8}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
	if (t >= sysorder)
 800184c:	4b76      	ldr	r3, [pc, #472]	; (8001a28 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	4b76      	ldr	r3, [pc, #472]	; (8001a2c <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	429a      	cmp	r2, r3
 8001856:	db0b      	blt.n	8001870 <HAL_TIM_PeriodElapsedCallback+0x30>
	{

		teta_calc (Xk , speed , 0.9995);
 8001858:	4b75      	ldr	r3, [pc, #468]	; (8001a30 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 800185a:	edd3 7a00 	vldr	s15, [r3]
 800185e:	4b75      	ldr	r3, [pc, #468]	; (8001a34 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001860:	eddf 0a75 	vldr	s1, [pc, #468]	; 8001a38 <HAL_TIM_PeriodElapsedCallback+0x1f8>
 8001864:	eeb0 0a67 	vmov.f32	s0, s15
 8001868:	e893 0003 	ldmia.w	r3, {r0, r1}
 800186c:	f7ff fda6 	bl	80013bc <teta_calc>
	}
	update_X (input_val,speed);
 8001870:	4b72      	ldr	r3, [pc, #456]	; (8001a3c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001872:	edd3 7a00 	vldr	s15, [r3]
 8001876:	4b6e      	ldr	r3, [pc, #440]	; (8001a30 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8001878:	ed93 7a00 	vldr	s14, [r3]
 800187c:	eef0 0a47 	vmov.f32	s1, s14
 8001880:	eeb0 0a67 	vmov.f32	s0, s15
 8001884:	f7ff fe92 	bl	80015ac <update_X>

	t++;
 8001888:	4b67      	ldr	r3, [pc, #412]	; (8001a28 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	3301      	adds	r3, #1
 800188e:	4a66      	ldr	r2, [pc, #408]	; (8001a28 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8001890:	6013      	str	r3, [r2, #0]
	DutyC =  (((2.2*sin(3.123*(double)(t/Fe)) + 2.3)/4.9) + ((1.7*sin(5.73*(double)(t/Fe)) + 1.8)/3.5) + ((1.4*sin(2.39*(double)(t/Fe)) + 1.4)/2.8))/3;
 8001892:	4b65      	ldr	r3, [pc, #404]	; (8001a28 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	ee07 3a90 	vmov	s15, r3
 800189a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800189e:	4b68      	ldr	r3, [pc, #416]	; (8001a40 <HAL_TIM_PeriodElapsedCallback+0x200>)
 80018a0:	ed93 7a00 	vldr	s14, [r3]
 80018a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018a8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80018ac:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 80019d8 <HAL_TIM_PeriodElapsedCallback+0x198>
 80018b0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80018b4:	eeb0 0b47 	vmov.f64	d0, d7
 80018b8:	f007 f83e 	bl	8008938 <sin>
 80018bc:	eeb0 7b40 	vmov.f64	d7, d0
 80018c0:	ed9f 6b47 	vldr	d6, [pc, #284]	; 80019e0 <HAL_TIM_PeriodElapsedCallback+0x1a0>
 80018c4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80018c8:	ed9f 6b47 	vldr	d6, [pc, #284]	; 80019e8 <HAL_TIM_PeriodElapsedCallback+0x1a8>
 80018cc:	ee37 7b06 	vadd.f64	d7, d7, d6
 80018d0:	ed9f 6b47 	vldr	d6, [pc, #284]	; 80019f0 <HAL_TIM_PeriodElapsedCallback+0x1b0>
 80018d4:	ee87 8b06 	vdiv.f64	d8, d7, d6
 80018d8:	4b53      	ldr	r3, [pc, #332]	; (8001a28 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	ee07 3a90 	vmov	s15, r3
 80018e0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80018e4:	4b56      	ldr	r3, [pc, #344]	; (8001a40 <HAL_TIM_PeriodElapsedCallback+0x200>)
 80018e6:	ed93 7a00 	vldr	s14, [r3]
 80018ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018ee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80018f2:	ed9f 6b41 	vldr	d6, [pc, #260]	; 80019f8 <HAL_TIM_PeriodElapsedCallback+0x1b8>
 80018f6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80018fa:	eeb0 0b47 	vmov.f64	d0, d7
 80018fe:	f007 f81b 	bl	8008938 <sin>
 8001902:	eeb0 7b40 	vmov.f64	d7, d0
 8001906:	ed9f 6b3e 	vldr	d6, [pc, #248]	; 8001a00 <HAL_TIM_PeriodElapsedCallback+0x1c0>
 800190a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800190e:	ed9f 6b3e 	vldr	d6, [pc, #248]	; 8001a08 <HAL_TIM_PeriodElapsedCallback+0x1c8>
 8001912:	ee37 6b06 	vadd.f64	d6, d7, d6
 8001916:	eeb0 5b0c 	vmov.f64	d5, #12	; 0x40600000  3.5
 800191a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800191e:	ee38 8b07 	vadd.f64	d8, d8, d7
 8001922:	4b41      	ldr	r3, [pc, #260]	; (8001a28 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	ee07 3a90 	vmov	s15, r3
 800192a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800192e:	4b44      	ldr	r3, [pc, #272]	; (8001a40 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001930:	ed93 7a00 	vldr	s14, [r3]
 8001934:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001938:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800193c:	ed9f 6b34 	vldr	d6, [pc, #208]	; 8001a10 <HAL_TIM_PeriodElapsedCallback+0x1d0>
 8001940:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001944:	eeb0 0b47 	vmov.f64	d0, d7
 8001948:	f006 fff6 	bl	8008938 <sin>
 800194c:	eeb0 7b40 	vmov.f64	d7, d0
 8001950:	ed9f 6b31 	vldr	d6, [pc, #196]	; 8001a18 <HAL_TIM_PeriodElapsedCallback+0x1d8>
 8001954:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001958:	ed9f 6b2f 	vldr	d6, [pc, #188]	; 8001a18 <HAL_TIM_PeriodElapsedCallback+0x1d8>
 800195c:	ee37 6b06 	vadd.f64	d6, d7, d6
 8001960:	ed9f 5b2f 	vldr	d5, [pc, #188]	; 8001a20 <HAL_TIM_PeriodElapsedCallback+0x1e0>
 8001964:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001968:	ee38 6b07 	vadd.f64	d6, d8, d7
 800196c:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8001970:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001974:	4b33      	ldr	r3, [pc, #204]	; (8001a44 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001976:	ed83 7b00 	vstr	d7, [r3]

	input_val =  DutyC * 12 ;
 800197a:	4b32      	ldr	r3, [pc, #200]	; (8001a44 <HAL_TIM_PeriodElapsedCallback+0x204>)
 800197c:	ed93 7b00 	vldr	d7, [r3]
 8001980:	eeb2 6b08 	vmov.f64	d6, #40	; 0x41400000  12.0
 8001984:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001988:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800198c:	4b2b      	ldr	r3, [pc, #172]	; (8001a3c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 800198e:	edc3 7a00 	vstr	s15, [r3]
	ccr_reg = (int) round ( DutyC * ARR ) ;
 8001992:	4b2d      	ldr	r3, [pc, #180]	; (8001a48 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	ee07 3a90 	vmov	s15, r3
 800199a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800199e:	4b29      	ldr	r3, [pc, #164]	; (8001a44 <HAL_TIM_PeriodElapsedCallback+0x204>)
 80019a0:	ed93 7b00 	vldr	d7, [r3]
 80019a4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80019a8:	eeb0 0b47 	vmov.f64	d0, d7
 80019ac:	f006 ff7e 	bl	80088ac <round>
 80019b0:	eeb0 7b40 	vmov.f64	d7, d0
 80019b4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80019b8:	ee17 2a90 	vmov	r2, s15
 80019bc:	4b23      	ldr	r3, [pc, #140]	; (8001a4c <HAL_TIM_PeriodElapsedCallback+0x20c>)
 80019be:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4, ccr_reg);
 80019c0:	4b22      	ldr	r3, [pc, #136]	; (8001a4c <HAL_TIM_PeriodElapsedCallback+0x20c>)
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	4b22      	ldr	r3, [pc, #136]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x210>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	641a      	str	r2, [r3, #64]	; 0x40





}
 80019ca:	bf00      	nop
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	ecbd 8b02 	vpop	{d8}
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	6c8b4396 	.word	0x6c8b4396
 80019dc:	4008fbe7 	.word	0x4008fbe7
 80019e0:	9999999a 	.word	0x9999999a
 80019e4:	40019999 	.word	0x40019999
 80019e8:	66666666 	.word	0x66666666
 80019ec:	40026666 	.word	0x40026666
 80019f0:	9999999a 	.word	0x9999999a
 80019f4:	40139999 	.word	0x40139999
 80019f8:	1eb851ec 	.word	0x1eb851ec
 80019fc:	4016eb85 	.word	0x4016eb85
 8001a00:	33333333 	.word	0x33333333
 8001a04:	3ffb3333 	.word	0x3ffb3333
 8001a08:	cccccccd 	.word	0xcccccccd
 8001a0c:	3ffccccc 	.word	0x3ffccccc
 8001a10:	51eb851f 	.word	0x51eb851f
 8001a14:	40031eb8 	.word	0x40031eb8
 8001a18:	66666666 	.word	0x66666666
 8001a1c:	3ff66666 	.word	0x3ff66666
 8001a20:	66666666 	.word	0x66666666
 8001a24:	40066666 	.word	0x40066666
 8001a28:	2400009c 	.word	0x2400009c
 8001a2c:	24000000 	.word	0x24000000
 8001a30:	240000a0 	.word	0x240000a0
 8001a34:	240003c8 	.word	0x240003c8
 8001a38:	3f7fdf3b 	.word	0x3f7fdf3b
 8001a3c:	240000a4 	.word	0x240000a4
 8001a40:	24000004 	.word	0x24000004
 8001a44:	240000a8 	.word	0x240000a8
 8001a48:	24000008 	.word	0x24000008
 8001a4c:	240000b0 	.word	0x240000b0
 8001a50:	24000174 	.word	0x24000174

08001a54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a58:	b672      	cpsid	i
}
 8001a5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a5c:	e7fe      	b.n	8001a5c <Error_Handler+0x8>
	...

08001a60 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a66:	4b0a      	ldr	r3, [pc, #40]	; (8001a90 <HAL_MspInit+0x30>)
 8001a68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001a6c:	4a08      	ldr	r2, [pc, #32]	; (8001a90 <HAL_MspInit+0x30>)
 8001a6e:	f043 0302 	orr.w	r3, r3, #2
 8001a72:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001a76:	4b06      	ldr	r3, [pc, #24]	; (8001a90 <HAL_MspInit+0x30>)
 8001a78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001a7c:	f003 0302 	and.w	r3, r3, #2
 8001a80:	607b      	str	r3, [r7, #4]
 8001a82:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a84:	bf00      	nop
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr
 8001a90:	58024400 	.word	0x58024400

08001a94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b08e      	sub	sp, #56	; 0x38
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	605a      	str	r2, [r3, #4]
 8001aa6:	609a      	str	r2, [r3, #8]
 8001aa8:	60da      	str	r2, [r3, #12]
 8001aaa:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ab4:	d117      	bne.n	8001ae6 <HAL_TIM_Base_MspInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ab6:	4b5a      	ldr	r3, [pc, #360]	; (8001c20 <HAL_TIM_Base_MspInit+0x18c>)
 8001ab8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001abc:	4a58      	ldr	r2, [pc, #352]	; (8001c20 <HAL_TIM_Base_MspInit+0x18c>)
 8001abe:	f043 0301 	orr.w	r3, r3, #1
 8001ac2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001ac6:	4b56      	ldr	r3, [pc, #344]	; (8001c20 <HAL_TIM_Base_MspInit+0x18c>)
 8001ac8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001acc:	f003 0301 	and.w	r3, r3, #1
 8001ad0:	623b      	str	r3, [r7, #32]
 8001ad2:	6a3b      	ldr	r3, [r7, #32]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	201c      	movs	r0, #28
 8001ada:	f000 fc30 	bl	800233e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ade:	201c      	movs	r0, #28
 8001ae0:	f000 fc47 	bl	8002372 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM24_MspInit 1 */

  /* USER CODE END TIM24_MspInit 1 */
  }

}
 8001ae4:	e097      	b.n	8001c16 <HAL_TIM_Base_MspInit+0x182>
  else if(htim_base->Instance==TIM4)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a4e      	ldr	r2, [pc, #312]	; (8001c24 <HAL_TIM_Base_MspInit+0x190>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d10f      	bne.n	8001b10 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001af0:	4b4b      	ldr	r3, [pc, #300]	; (8001c20 <HAL_TIM_Base_MspInit+0x18c>)
 8001af2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001af6:	4a4a      	ldr	r2, [pc, #296]	; (8001c20 <HAL_TIM_Base_MspInit+0x18c>)
 8001af8:	f043 0304 	orr.w	r3, r3, #4
 8001afc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001b00:	4b47      	ldr	r3, [pc, #284]	; (8001c20 <HAL_TIM_Base_MspInit+0x18c>)
 8001b02:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b06:	f003 0304 	and.w	r3, r3, #4
 8001b0a:	61fb      	str	r3, [r7, #28]
 8001b0c:	69fb      	ldr	r3, [r7, #28]
}
 8001b0e:	e082      	b.n	8001c16 <HAL_TIM_Base_MspInit+0x182>
  else if(htim_base->Instance==TIM5)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a44      	ldr	r2, [pc, #272]	; (8001c28 <HAL_TIM_Base_MspInit+0x194>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d10f      	bne.n	8001b3a <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001b1a:	4b41      	ldr	r3, [pc, #260]	; (8001c20 <HAL_TIM_Base_MspInit+0x18c>)
 8001b1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b20:	4a3f      	ldr	r2, [pc, #252]	; (8001c20 <HAL_TIM_Base_MspInit+0x18c>)
 8001b22:	f043 0308 	orr.w	r3, r3, #8
 8001b26:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001b2a:	4b3d      	ldr	r3, [pc, #244]	; (8001c20 <HAL_TIM_Base_MspInit+0x18c>)
 8001b2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b30:	f003 0308 	and.w	r3, r3, #8
 8001b34:	61bb      	str	r3, [r7, #24]
 8001b36:	69bb      	ldr	r3, [r7, #24]
}
 8001b38:	e06d      	b.n	8001c16 <HAL_TIM_Base_MspInit+0x182>
  else if(htim_base->Instance==TIM8)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a3b      	ldr	r2, [pc, #236]	; (8001c2c <HAL_TIM_Base_MspInit+0x198>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d12f      	bne.n	8001ba4 <HAL_TIM_Base_MspInit+0x110>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001b44:	4b36      	ldr	r3, [pc, #216]	; (8001c20 <HAL_TIM_Base_MspInit+0x18c>)
 8001b46:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b4a:	4a35      	ldr	r2, [pc, #212]	; (8001c20 <HAL_TIM_Base_MspInit+0x18c>)
 8001b4c:	f043 0302 	orr.w	r3, r3, #2
 8001b50:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001b54:	4b32      	ldr	r3, [pc, #200]	; (8001c20 <HAL_TIM_Base_MspInit+0x18c>)
 8001b56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	617b      	str	r3, [r7, #20]
 8001b60:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b62:	4b2f      	ldr	r3, [pc, #188]	; (8001c20 <HAL_TIM_Base_MspInit+0x18c>)
 8001b64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b68:	4a2d      	ldr	r2, [pc, #180]	; (8001c20 <HAL_TIM_Base_MspInit+0x18c>)
 8001b6a:	f043 0304 	orr.w	r3, r3, #4
 8001b6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b72:	4b2b      	ldr	r3, [pc, #172]	; (8001c20 <HAL_TIM_Base_MspInit+0x18c>)
 8001b74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b78:	f003 0304 	and.w	r3, r3, #4
 8001b7c:	613b      	str	r3, [r7, #16]
 8001b7e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001b80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b86:	2302      	movs	r3, #2
 8001b88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001b92:	2303      	movs	r3, #3
 8001b94:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4824      	ldr	r0, [pc, #144]	; (8001c30 <HAL_TIM_Base_MspInit+0x19c>)
 8001b9e:	f000 fc03 	bl	80023a8 <HAL_GPIO_Init>
}
 8001ba2:	e038      	b.n	8001c16 <HAL_TIM_Base_MspInit+0x182>
  else if(htim_base->Instance==TIM23)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a22      	ldr	r2, [pc, #136]	; (8001c34 <HAL_TIM_Base_MspInit+0x1a0>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d117      	bne.n	8001bde <HAL_TIM_Base_MspInit+0x14a>
    __HAL_RCC_TIM23_CLK_ENABLE();
 8001bae:	4b1c      	ldr	r3, [pc, #112]	; (8001c20 <HAL_TIM_Base_MspInit+0x18c>)
 8001bb0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001bb4:	4a1a      	ldr	r2, [pc, #104]	; (8001c20 <HAL_TIM_Base_MspInit+0x18c>)
 8001bb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bba:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001bbe:	4b18      	ldr	r3, [pc, #96]	; (8001c20 <HAL_TIM_Base_MspInit+0x18c>)
 8001bc0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001bc4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bc8:	60fb      	str	r3, [r7, #12]
 8001bca:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM23_IRQn, 0, 0);
 8001bcc:	2200      	movs	r2, #0
 8001bce:	2100      	movs	r1, #0
 8001bd0:	20a1      	movs	r0, #161	; 0xa1
 8001bd2:	f000 fbb4 	bl	800233e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM23_IRQn);
 8001bd6:	20a1      	movs	r0, #161	; 0xa1
 8001bd8:	f000 fbcb 	bl	8002372 <HAL_NVIC_EnableIRQ>
}
 8001bdc:	e01b      	b.n	8001c16 <HAL_TIM_Base_MspInit+0x182>
  else if(htim_base->Instance==TIM24)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a15      	ldr	r2, [pc, #84]	; (8001c38 <HAL_TIM_Base_MspInit+0x1a4>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d116      	bne.n	8001c16 <HAL_TIM_Base_MspInit+0x182>
    __HAL_RCC_TIM24_CLK_ENABLE();
 8001be8:	4b0d      	ldr	r3, [pc, #52]	; (8001c20 <HAL_TIM_Base_MspInit+0x18c>)
 8001bea:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001bee:	4a0c      	ldr	r2, [pc, #48]	; (8001c20 <HAL_TIM_Base_MspInit+0x18c>)
 8001bf0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001bf4:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001bf8:	4b09      	ldr	r3, [pc, #36]	; (8001c20 <HAL_TIM_Base_MspInit+0x18c>)
 8001bfa:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c02:	60bb      	str	r3, [r7, #8]
 8001c04:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM24_IRQn, 0, 0);
 8001c06:	2200      	movs	r2, #0
 8001c08:	2100      	movs	r1, #0
 8001c0a:	20a2      	movs	r0, #162	; 0xa2
 8001c0c:	f000 fb97 	bl	800233e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM24_IRQn);
 8001c10:	20a2      	movs	r0, #162	; 0xa2
 8001c12:	f000 fbae 	bl	8002372 <HAL_NVIC_EnableIRQ>
}
 8001c16:	bf00      	nop
 8001c18:	3738      	adds	r7, #56	; 0x38
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	58024400 	.word	0x58024400
 8001c24:	40000800 	.word	0x40000800
 8001c28:	40000c00 	.word	0x40000c00
 8001c2c:	40010400 	.word	0x40010400
 8001c30:	58020800 	.word	0x58020800
 8001c34:	4000e000 	.word	0x4000e000
 8001c38:	4000e400 	.word	0x4000e400

08001c3c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b08a      	sub	sp, #40	; 0x28
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c44:	f107 0314 	add.w	r3, r7, #20
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	605a      	str	r2, [r3, #4]
 8001c4e:	609a      	str	r2, [r3, #8]
 8001c50:	60da      	str	r2, [r3, #12]
 8001c52:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a1a      	ldr	r2, [pc, #104]	; (8001cc4 <HAL_TIM_Encoder_MspInit+0x88>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d12d      	bne.n	8001cba <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c5e:	4b1a      	ldr	r3, [pc, #104]	; (8001cc8 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001c60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c64:	4a18      	ldr	r2, [pc, #96]	; (8001cc8 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001c66:	f043 0302 	orr.w	r3, r3, #2
 8001c6a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001c6e:	4b16      	ldr	r3, [pc, #88]	; (8001cc8 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001c70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c74:	f003 0302 	and.w	r3, r3, #2
 8001c78:	613b      	str	r3, [r7, #16]
 8001c7a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c7c:	4b12      	ldr	r3, [pc, #72]	; (8001cc8 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001c7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c82:	4a11      	ldr	r2, [pc, #68]	; (8001cc8 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001c84:	f043 0302 	orr.w	r3, r3, #2
 8001c88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c8c:	4b0e      	ldr	r3, [pc, #56]	; (8001cc8 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001c8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	60fb      	str	r3, [r7, #12]
 8001c98:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4(NJTRST)     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001c9a:	2330      	movs	r3, #48	; 0x30
 8001c9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001caa:	2302      	movs	r3, #2
 8001cac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cae:	f107 0314 	add.w	r3, r7, #20
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	4805      	ldr	r0, [pc, #20]	; (8001ccc <HAL_TIM_Encoder_MspInit+0x90>)
 8001cb6:	f000 fb77 	bl	80023a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001cba:	bf00      	nop
 8001cbc:	3728      	adds	r7, #40	; 0x28
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	40000400 	.word	0x40000400
 8001cc8:	58024400 	.word	0x58024400
 8001ccc:	58020400 	.word	0x58020400

08001cd0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b088      	sub	sp, #32
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd8:	f107 030c 	add.w	r3, r7, #12
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	605a      	str	r2, [r3, #4]
 8001ce2:	609a      	str	r2, [r3, #8]
 8001ce4:	60da      	str	r2, [r3, #12]
 8001ce6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a13      	ldr	r2, [pc, #76]	; (8001d3c <HAL_TIM_MspPostInit+0x6c>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d11f      	bne.n	8001d32 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cf2:	4b13      	ldr	r3, [pc, #76]	; (8001d40 <HAL_TIM_MspPostInit+0x70>)
 8001cf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cf8:	4a11      	ldr	r2, [pc, #68]	; (8001d40 <HAL_TIM_MspPostInit+0x70>)
 8001cfa:	f043 0308 	orr.w	r3, r3, #8
 8001cfe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d02:	4b0f      	ldr	r3, [pc, #60]	; (8001d40 <HAL_TIM_MspPostInit+0x70>)
 8001d04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d08:	f003 0308 	and.w	r3, r3, #8
 8001d0c:	60bb      	str	r3, [r7, #8]
 8001d0e:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001d10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d14:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d16:	2302      	movs	r3, #2
 8001d18:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001d22:	2302      	movs	r3, #2
 8001d24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d26:	f107 030c 	add.w	r3, r7, #12
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	4805      	ldr	r0, [pc, #20]	; (8001d44 <HAL_TIM_MspPostInit+0x74>)
 8001d2e:	f000 fb3b 	bl	80023a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001d32:	bf00      	nop
 8001d34:	3720      	adds	r7, #32
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	40000800 	.word	0x40000800
 8001d40:	58024400 	.word	0x58024400
 8001d44:	58020c00 	.word	0x58020c00

08001d48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b0b6      	sub	sp, #216	; 0xd8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d50:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	605a      	str	r2, [r3, #4]
 8001d5a:	609a      	str	r2, [r3, #8]
 8001d5c:	60da      	str	r2, [r3, #12]
 8001d5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d60:	f107 0310 	add.w	r3, r7, #16
 8001d64:	22b4      	movs	r2, #180	; 0xb4
 8001d66:	2100      	movs	r1, #0
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f006 fa27 	bl	80081bc <memset>
  if(huart->Instance==USART3)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a25      	ldr	r2, [pc, #148]	; (8001e08 <HAL_UART_MspInit+0xc0>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d142      	bne.n	8001dfe <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001d78:	2302      	movs	r3, #2
 8001d7a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d82:	f107 0310 	add.w	r3, r7, #16
 8001d86:	4618      	mov	r0, r3
 8001d88:	f001 fc66 	bl	8003658 <HAL_RCCEx_PeriphCLKConfig>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001d92:	f7ff fe5f 	bl	8001a54 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d96:	4b1d      	ldr	r3, [pc, #116]	; (8001e0c <HAL_UART_MspInit+0xc4>)
 8001d98:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d9c:	4a1b      	ldr	r2, [pc, #108]	; (8001e0c <HAL_UART_MspInit+0xc4>)
 8001d9e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001da2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001da6:	4b19      	ldr	r3, [pc, #100]	; (8001e0c <HAL_UART_MspInit+0xc4>)
 8001da8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001dac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001db0:	60fb      	str	r3, [r7, #12]
 8001db2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001db4:	4b15      	ldr	r3, [pc, #84]	; (8001e0c <HAL_UART_MspInit+0xc4>)
 8001db6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dba:	4a14      	ldr	r2, [pc, #80]	; (8001e0c <HAL_UART_MspInit+0xc4>)
 8001dbc:	f043 0308 	orr.w	r3, r3, #8
 8001dc0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dc4:	4b11      	ldr	r3, [pc, #68]	; (8001e0c <HAL_UART_MspInit+0xc4>)
 8001dc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dca:	f003 0308 	and.w	r3, r3, #8
 8001dce:	60bb      	str	r3, [r7, #8]
 8001dd0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8001dd2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001dd6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dda:	2302      	movs	r3, #2
 8001ddc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de0:	2300      	movs	r3, #0
 8001de2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de6:	2300      	movs	r3, #0
 8001de8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001dec:	2307      	movs	r3, #7
 8001dee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001df2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001df6:	4619      	mov	r1, r3
 8001df8:	4805      	ldr	r0, [pc, #20]	; (8001e10 <HAL_UART_MspInit+0xc8>)
 8001dfa:	f000 fad5 	bl	80023a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001dfe:	bf00      	nop
 8001e00:	37d8      	adds	r7, #216	; 0xd8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	40004800 	.word	0x40004800
 8001e0c:	58024400 	.word	0x58024400
 8001e10:	58020c00 	.word	0x58020c00

08001e14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e18:	e7fe      	b.n	8001e18 <NMI_Handler+0x4>

08001e1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e1e:	e7fe      	b.n	8001e1e <HardFault_Handler+0x4>

08001e20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e24:	e7fe      	b.n	8001e24 <MemManage_Handler+0x4>

08001e26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e26:	b480      	push	{r7}
 8001e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e2a:	e7fe      	b.n	8001e2a <BusFault_Handler+0x4>

08001e2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e30:	e7fe      	b.n	8001e30 <UsageFault_Handler+0x4>

08001e32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e32:	b480      	push	{r7}
 8001e34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e36:	bf00      	nop
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e44:	bf00      	nop
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr

08001e4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e52:	bf00      	nop
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e60:	f000 f972 	bl	8002148 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e64:	bf00      	nop
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001e6c:	4802      	ldr	r0, [pc, #8]	; (8001e78 <TIM2_IRQHandler+0x10>)
 8001e6e:	f003 fc13 	bl	8005698 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001e72:	bf00      	nop
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	24000318 	.word	0x24000318

08001e7c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001e80:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001e84:	f000 fc51 	bl	800272a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001e88:	bf00      	nop
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <TIM23_IRQHandler>:

/**
  * @brief This function handles TIM23 global interrupt.
  */
void TIM23_IRQHandler(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM23_IRQn 0 */

  /* USER CODE END TIM23_IRQn 0 */
  HAL_TIM_IRQHandler(&htim23);
 8001e90:	4802      	ldr	r0, [pc, #8]	; (8001e9c <TIM23_IRQHandler+0x10>)
 8001e92:	f003 fc01 	bl	8005698 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM23_IRQn 1 */

  /* USER CODE END TIM23_IRQn 1 */
}
 8001e96:	bf00      	nop
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	24000364 	.word	0x24000364

08001ea0 <TIM24_IRQHandler>:

/**
  * @brief This function handles TIM24 global interrupt.
  */
void TIM24_IRQHandler(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM24_IRQn 0 */

  /* USER CODE END TIM24_IRQn 0 */
  HAL_TIM_IRQHandler(&htim24);
 8001ea4:	4802      	ldr	r0, [pc, #8]	; (8001eb0 <TIM24_IRQHandler+0x10>)
 8001ea6:	f003 fbf7 	bl	8005698 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM24_IRQn 1 */

  /* USER CODE END TIM24_IRQn 1 */
}
 8001eaa:	bf00      	nop
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	240000cc 	.word	0x240000cc

08001eb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b086      	sub	sp, #24
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ebc:	4a14      	ldr	r2, [pc, #80]	; (8001f10 <_sbrk+0x5c>)
 8001ebe:	4b15      	ldr	r3, [pc, #84]	; (8001f14 <_sbrk+0x60>)
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ec8:	4b13      	ldr	r3, [pc, #76]	; (8001f18 <_sbrk+0x64>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d102      	bne.n	8001ed6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ed0:	4b11      	ldr	r3, [pc, #68]	; (8001f18 <_sbrk+0x64>)
 8001ed2:	4a12      	ldr	r2, [pc, #72]	; (8001f1c <_sbrk+0x68>)
 8001ed4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ed6:	4b10      	ldr	r3, [pc, #64]	; (8001f18 <_sbrk+0x64>)
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4413      	add	r3, r2
 8001ede:	693a      	ldr	r2, [r7, #16]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d207      	bcs.n	8001ef4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ee4:	f006 f938 	bl	8008158 <__errno>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	220c      	movs	r2, #12
 8001eec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001eee:	f04f 33ff 	mov.w	r3, #4294967295
 8001ef2:	e009      	b.n	8001f08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ef4:	4b08      	ldr	r3, [pc, #32]	; (8001f18 <_sbrk+0x64>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001efa:	4b07      	ldr	r3, [pc, #28]	; (8001f18 <_sbrk+0x64>)
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4413      	add	r3, r2
 8001f02:	4a05      	ldr	r2, [pc, #20]	; (8001f18 <_sbrk+0x64>)
 8001f04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f06:	68fb      	ldr	r3, [r7, #12]
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3718      	adds	r7, #24
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	24050000 	.word	0x24050000
 8001f14:	00000400 	.word	0x00000400
 8001f18:	240000c0 	.word	0x240000c0
 8001f1c:	240003f0 	.word	0x240003f0

08001f20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001f24:	4b32      	ldr	r3, [pc, #200]	; (8001ff0 <SystemInit+0xd0>)
 8001f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f2a:	4a31      	ldr	r2, [pc, #196]	; (8001ff0 <SystemInit+0xd0>)
 8001f2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001f34:	4b2f      	ldr	r3, [pc, #188]	; (8001ff4 <SystemInit+0xd4>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 030f 	and.w	r3, r3, #15
 8001f3c:	2b06      	cmp	r3, #6
 8001f3e:	d807      	bhi.n	8001f50 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001f40:	4b2c      	ldr	r3, [pc, #176]	; (8001ff4 <SystemInit+0xd4>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f023 030f 	bic.w	r3, r3, #15
 8001f48:	4a2a      	ldr	r2, [pc, #168]	; (8001ff4 <SystemInit+0xd4>)
 8001f4a:	f043 0307 	orr.w	r3, r3, #7
 8001f4e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001f50:	4b29      	ldr	r3, [pc, #164]	; (8001ff8 <SystemInit+0xd8>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a28      	ldr	r2, [pc, #160]	; (8001ff8 <SystemInit+0xd8>)
 8001f56:	f043 0301 	orr.w	r3, r3, #1
 8001f5a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001f5c:	4b26      	ldr	r3, [pc, #152]	; (8001ff8 <SystemInit+0xd8>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001f62:	4b25      	ldr	r3, [pc, #148]	; (8001ff8 <SystemInit+0xd8>)
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	4924      	ldr	r1, [pc, #144]	; (8001ff8 <SystemInit+0xd8>)
 8001f68:	4b24      	ldr	r3, [pc, #144]	; (8001ffc <SystemInit+0xdc>)
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001f6e:	4b21      	ldr	r3, [pc, #132]	; (8001ff4 <SystemInit+0xd4>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0308 	and.w	r3, r3, #8
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d007      	beq.n	8001f8a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001f7a:	4b1e      	ldr	r3, [pc, #120]	; (8001ff4 <SystemInit+0xd4>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f023 030f 	bic.w	r3, r3, #15
 8001f82:	4a1c      	ldr	r2, [pc, #112]	; (8001ff4 <SystemInit+0xd4>)
 8001f84:	f043 0307 	orr.w	r3, r3, #7
 8001f88:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001f8a:	4b1b      	ldr	r3, [pc, #108]	; (8001ff8 <SystemInit+0xd8>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001f90:	4b19      	ldr	r3, [pc, #100]	; (8001ff8 <SystemInit+0xd8>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001f96:	4b18      	ldr	r3, [pc, #96]	; (8001ff8 <SystemInit+0xd8>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001f9c:	4b16      	ldr	r3, [pc, #88]	; (8001ff8 <SystemInit+0xd8>)
 8001f9e:	4a18      	ldr	r2, [pc, #96]	; (8002000 <SystemInit+0xe0>)
 8001fa0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001fa2:	4b15      	ldr	r3, [pc, #84]	; (8001ff8 <SystemInit+0xd8>)
 8001fa4:	4a17      	ldr	r2, [pc, #92]	; (8002004 <SystemInit+0xe4>)
 8001fa6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001fa8:	4b13      	ldr	r3, [pc, #76]	; (8001ff8 <SystemInit+0xd8>)
 8001faa:	4a17      	ldr	r2, [pc, #92]	; (8002008 <SystemInit+0xe8>)
 8001fac:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001fae:	4b12      	ldr	r3, [pc, #72]	; (8001ff8 <SystemInit+0xd8>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001fb4:	4b10      	ldr	r3, [pc, #64]	; (8001ff8 <SystemInit+0xd8>)
 8001fb6:	4a14      	ldr	r2, [pc, #80]	; (8002008 <SystemInit+0xe8>)
 8001fb8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001fba:	4b0f      	ldr	r3, [pc, #60]	; (8001ff8 <SystemInit+0xd8>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001fc0:	4b0d      	ldr	r3, [pc, #52]	; (8001ff8 <SystemInit+0xd8>)
 8001fc2:	4a11      	ldr	r2, [pc, #68]	; (8002008 <SystemInit+0xe8>)
 8001fc4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001fc6:	4b0c      	ldr	r3, [pc, #48]	; (8001ff8 <SystemInit+0xd8>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001fcc:	4b0a      	ldr	r3, [pc, #40]	; (8001ff8 <SystemInit+0xd8>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a09      	ldr	r2, [pc, #36]	; (8001ff8 <SystemInit+0xd8>)
 8001fd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fd6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001fd8:	4b07      	ldr	r3, [pc, #28]	; (8001ff8 <SystemInit+0xd8>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001fde:	4b0b      	ldr	r3, [pc, #44]	; (800200c <SystemInit+0xec>)
 8001fe0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001fe4:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001fe6:	bf00      	nop
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr
 8001ff0:	e000ed00 	.word	0xe000ed00
 8001ff4:	52002000 	.word	0x52002000
 8001ff8:	58024400 	.word	0x58024400
 8001ffc:	eaf6ed7f 	.word	0xeaf6ed7f
 8002000:	02020200 	.word	0x02020200
 8002004:	01ff0000 	.word	0x01ff0000
 8002008:	01010280 	.word	0x01010280
 800200c:	52004000 	.word	0x52004000

08002010 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002010:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002048 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002014:	f7ff ff84 	bl	8001f20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002018:	480c      	ldr	r0, [pc, #48]	; (800204c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800201a:	490d      	ldr	r1, [pc, #52]	; (8002050 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800201c:	4a0d      	ldr	r2, [pc, #52]	; (8002054 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800201e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002020:	e002      	b.n	8002028 <LoopCopyDataInit>

08002022 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002022:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002024:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002026:	3304      	adds	r3, #4

08002028 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002028:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800202a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800202c:	d3f9      	bcc.n	8002022 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800202e:	4a0a      	ldr	r2, [pc, #40]	; (8002058 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002030:	4c0a      	ldr	r4, [pc, #40]	; (800205c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002032:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002034:	e001      	b.n	800203a <LoopFillZerobss>

08002036 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002036:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002038:	3204      	adds	r2, #4

0800203a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800203a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800203c:	d3fb      	bcc.n	8002036 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800203e:	f006 f891 	bl	8008164 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002042:	f7fe fae1 	bl	8000608 <main>
  bx  lr
 8002046:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002048:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800204c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002050:	24000080 	.word	0x24000080
  ldr r2, =_sidata
 8002054:	0800b0c8 	.word	0x0800b0c8
  ldr r2, =_sbss
 8002058:	24000080 	.word	0x24000080
  ldr r4, =_ebss
 800205c:	240003f0 	.word	0x240003f0

08002060 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002060:	e7fe      	b.n	8002060 <ADC3_IRQHandler>
	...

08002064 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800206a:	2003      	movs	r0, #3
 800206c:	f000 f95c 	bl	8002328 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002070:	f001 f91c 	bl	80032ac <HAL_RCC_GetSysClockFreq>
 8002074:	4602      	mov	r2, r0
 8002076:	4b15      	ldr	r3, [pc, #84]	; (80020cc <HAL_Init+0x68>)
 8002078:	699b      	ldr	r3, [r3, #24]
 800207a:	0a1b      	lsrs	r3, r3, #8
 800207c:	f003 030f 	and.w	r3, r3, #15
 8002080:	4913      	ldr	r1, [pc, #76]	; (80020d0 <HAL_Init+0x6c>)
 8002082:	5ccb      	ldrb	r3, [r1, r3]
 8002084:	f003 031f 	and.w	r3, r3, #31
 8002088:	fa22 f303 	lsr.w	r3, r2, r3
 800208c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800208e:	4b0f      	ldr	r3, [pc, #60]	; (80020cc <HAL_Init+0x68>)
 8002090:	699b      	ldr	r3, [r3, #24]
 8002092:	f003 030f 	and.w	r3, r3, #15
 8002096:	4a0e      	ldr	r2, [pc, #56]	; (80020d0 <HAL_Init+0x6c>)
 8002098:	5cd3      	ldrb	r3, [r2, r3]
 800209a:	f003 031f 	and.w	r3, r3, #31
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	fa22 f303 	lsr.w	r3, r2, r3
 80020a4:	4a0b      	ldr	r2, [pc, #44]	; (80020d4 <HAL_Init+0x70>)
 80020a6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80020a8:	4a0b      	ldr	r2, [pc, #44]	; (80020d8 <HAL_Init+0x74>)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80020ae:	2000      	movs	r0, #0
 80020b0:	f000 f814 	bl	80020dc <HAL_InitTick>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e002      	b.n	80020c4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80020be:	f7ff fccf 	bl	8001a60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3708      	adds	r7, #8
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	58024400 	.word	0x58024400
 80020d0:	080095f0 	.word	0x080095f0
 80020d4:	24000010 	.word	0x24000010
 80020d8:	2400000c 	.word	0x2400000c

080020dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80020e4:	4b15      	ldr	r3, [pc, #84]	; (800213c <HAL_InitTick+0x60>)
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d101      	bne.n	80020f0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e021      	b.n	8002134 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80020f0:	4b13      	ldr	r3, [pc, #76]	; (8002140 <HAL_InitTick+0x64>)
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	4b11      	ldr	r3, [pc, #68]	; (800213c <HAL_InitTick+0x60>)
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	4619      	mov	r1, r3
 80020fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002102:	fbb2 f3f3 	udiv	r3, r2, r3
 8002106:	4618      	mov	r0, r3
 8002108:	f000 f941 	bl	800238e <HAL_SYSTICK_Config>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e00e      	b.n	8002134 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2b0f      	cmp	r3, #15
 800211a:	d80a      	bhi.n	8002132 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800211c:	2200      	movs	r2, #0
 800211e:	6879      	ldr	r1, [r7, #4]
 8002120:	f04f 30ff 	mov.w	r0, #4294967295
 8002124:	f000 f90b 	bl	800233e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002128:	4a06      	ldr	r2, [pc, #24]	; (8002144 <HAL_InitTick+0x68>)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800212e:	2300      	movs	r3, #0
 8002130:	e000      	b.n	8002134 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
}
 8002134:	4618      	mov	r0, r3
 8002136:	3708      	adds	r7, #8
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	24000018 	.word	0x24000018
 8002140:	2400000c 	.word	0x2400000c
 8002144:	24000014 	.word	0x24000014

08002148 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800214c:	4b06      	ldr	r3, [pc, #24]	; (8002168 <HAL_IncTick+0x20>)
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	461a      	mov	r2, r3
 8002152:	4b06      	ldr	r3, [pc, #24]	; (800216c <HAL_IncTick+0x24>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4413      	add	r3, r2
 8002158:	4a04      	ldr	r2, [pc, #16]	; (800216c <HAL_IncTick+0x24>)
 800215a:	6013      	str	r3, [r2, #0]
}
 800215c:	bf00      	nop
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	24000018 	.word	0x24000018
 800216c:	240003dc 	.word	0x240003dc

08002170 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  return uwTick;
 8002174:	4b03      	ldr	r3, [pc, #12]	; (8002184 <HAL_GetTick+0x14>)
 8002176:	681b      	ldr	r3, [r3, #0]
}
 8002178:	4618      	mov	r0, r3
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	240003dc 	.word	0x240003dc

08002188 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002188:	b480      	push	{r7}
 800218a:	b085      	sub	sp, #20
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f003 0307 	and.w	r3, r3, #7
 8002196:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002198:	4b0b      	ldr	r3, [pc, #44]	; (80021c8 <__NVIC_SetPriorityGrouping+0x40>)
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800219e:	68ba      	ldr	r2, [r7, #8]
 80021a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021a4:	4013      	ands	r3, r2
 80021a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80021b0:	4b06      	ldr	r3, [pc, #24]	; (80021cc <__NVIC_SetPriorityGrouping+0x44>)
 80021b2:	4313      	orrs	r3, r2
 80021b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021b6:	4a04      	ldr	r2, [pc, #16]	; (80021c8 <__NVIC_SetPriorityGrouping+0x40>)
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	60d3      	str	r3, [r2, #12]
}
 80021bc:	bf00      	nop
 80021be:	3714      	adds	r7, #20
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr
 80021c8:	e000ed00 	.word	0xe000ed00
 80021cc:	05fa0000 	.word	0x05fa0000

080021d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021d4:	4b04      	ldr	r3, [pc, #16]	; (80021e8 <__NVIC_GetPriorityGrouping+0x18>)
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	0a1b      	lsrs	r3, r3, #8
 80021da:	f003 0307 	and.w	r3, r3, #7
}
 80021de:	4618      	mov	r0, r3
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr
 80021e8:	e000ed00 	.word	0xe000ed00

080021ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	4603      	mov	r3, r0
 80021f4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80021f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	db0b      	blt.n	8002216 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021fe:	88fb      	ldrh	r3, [r7, #6]
 8002200:	f003 021f 	and.w	r2, r3, #31
 8002204:	4907      	ldr	r1, [pc, #28]	; (8002224 <__NVIC_EnableIRQ+0x38>)
 8002206:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800220a:	095b      	lsrs	r3, r3, #5
 800220c:	2001      	movs	r0, #1
 800220e:	fa00 f202 	lsl.w	r2, r0, r2
 8002212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002216:	bf00      	nop
 8002218:	370c      	adds	r7, #12
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	e000e100 	.word	0xe000e100

08002228 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	4603      	mov	r3, r0
 8002230:	6039      	str	r1, [r7, #0]
 8002232:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002234:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002238:	2b00      	cmp	r3, #0
 800223a:	db0a      	blt.n	8002252 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	b2da      	uxtb	r2, r3
 8002240:	490c      	ldr	r1, [pc, #48]	; (8002274 <__NVIC_SetPriority+0x4c>)
 8002242:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002246:	0112      	lsls	r2, r2, #4
 8002248:	b2d2      	uxtb	r2, r2
 800224a:	440b      	add	r3, r1
 800224c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002250:	e00a      	b.n	8002268 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	b2da      	uxtb	r2, r3
 8002256:	4908      	ldr	r1, [pc, #32]	; (8002278 <__NVIC_SetPriority+0x50>)
 8002258:	88fb      	ldrh	r3, [r7, #6]
 800225a:	f003 030f 	and.w	r3, r3, #15
 800225e:	3b04      	subs	r3, #4
 8002260:	0112      	lsls	r2, r2, #4
 8002262:	b2d2      	uxtb	r2, r2
 8002264:	440b      	add	r3, r1
 8002266:	761a      	strb	r2, [r3, #24]
}
 8002268:	bf00      	nop
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr
 8002274:	e000e100 	.word	0xe000e100
 8002278:	e000ed00 	.word	0xe000ed00

0800227c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800227c:	b480      	push	{r7}
 800227e:	b089      	sub	sp, #36	; 0x24
 8002280:	af00      	add	r7, sp, #0
 8002282:	60f8      	str	r0, [r7, #12]
 8002284:	60b9      	str	r1, [r7, #8]
 8002286:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f003 0307 	and.w	r3, r3, #7
 800228e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	f1c3 0307 	rsb	r3, r3, #7
 8002296:	2b04      	cmp	r3, #4
 8002298:	bf28      	it	cs
 800229a:	2304      	movcs	r3, #4
 800229c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	3304      	adds	r3, #4
 80022a2:	2b06      	cmp	r3, #6
 80022a4:	d902      	bls.n	80022ac <NVIC_EncodePriority+0x30>
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	3b03      	subs	r3, #3
 80022aa:	e000      	b.n	80022ae <NVIC_EncodePriority+0x32>
 80022ac:	2300      	movs	r3, #0
 80022ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022b0:	f04f 32ff 	mov.w	r2, #4294967295
 80022b4:	69bb      	ldr	r3, [r7, #24]
 80022b6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ba:	43da      	mvns	r2, r3
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	401a      	ands	r2, r3
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022c4:	f04f 31ff 	mov.w	r1, #4294967295
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	fa01 f303 	lsl.w	r3, r1, r3
 80022ce:	43d9      	mvns	r1, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022d4:	4313      	orrs	r3, r2
         );
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3724      	adds	r7, #36	; 0x24
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
	...

080022e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	3b01      	subs	r3, #1
 80022f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022f4:	d301      	bcc.n	80022fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022f6:	2301      	movs	r3, #1
 80022f8:	e00f      	b.n	800231a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022fa:	4a0a      	ldr	r2, [pc, #40]	; (8002324 <SysTick_Config+0x40>)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	3b01      	subs	r3, #1
 8002300:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002302:	210f      	movs	r1, #15
 8002304:	f04f 30ff 	mov.w	r0, #4294967295
 8002308:	f7ff ff8e 	bl	8002228 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800230c:	4b05      	ldr	r3, [pc, #20]	; (8002324 <SysTick_Config+0x40>)
 800230e:	2200      	movs	r2, #0
 8002310:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002312:	4b04      	ldr	r3, [pc, #16]	; (8002324 <SysTick_Config+0x40>)
 8002314:	2207      	movs	r2, #7
 8002316:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002318:	2300      	movs	r3, #0
}
 800231a:	4618      	mov	r0, r3
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	e000e010 	.word	0xe000e010

08002328 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f7ff ff29 	bl	8002188 <__NVIC_SetPriorityGrouping>
}
 8002336:	bf00      	nop
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800233e:	b580      	push	{r7, lr}
 8002340:	b086      	sub	sp, #24
 8002342:	af00      	add	r7, sp, #0
 8002344:	4603      	mov	r3, r0
 8002346:	60b9      	str	r1, [r7, #8]
 8002348:	607a      	str	r2, [r7, #4]
 800234a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800234c:	f7ff ff40 	bl	80021d0 <__NVIC_GetPriorityGrouping>
 8002350:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	68b9      	ldr	r1, [r7, #8]
 8002356:	6978      	ldr	r0, [r7, #20]
 8002358:	f7ff ff90 	bl	800227c <NVIC_EncodePriority>
 800235c:	4602      	mov	r2, r0
 800235e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002362:	4611      	mov	r1, r2
 8002364:	4618      	mov	r0, r3
 8002366:	f7ff ff5f 	bl	8002228 <__NVIC_SetPriority>
}
 800236a:	bf00      	nop
 800236c:	3718      	adds	r7, #24
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}

08002372 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002372:	b580      	push	{r7, lr}
 8002374:	b082      	sub	sp, #8
 8002376:	af00      	add	r7, sp, #0
 8002378:	4603      	mov	r3, r0
 800237a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800237c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002380:	4618      	mov	r0, r3
 8002382:	f7ff ff33 	bl	80021ec <__NVIC_EnableIRQ>
}
 8002386:	bf00      	nop
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800238e:	b580      	push	{r7, lr}
 8002390:	b082      	sub	sp, #8
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f7ff ffa4 	bl	80022e4 <SysTick_Config>
 800239c:	4603      	mov	r3, r0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
	...

080023a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b089      	sub	sp, #36	; 0x24
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80023b2:	2300      	movs	r3, #0
 80023b4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80023b6:	4b86      	ldr	r3, [pc, #536]	; (80025d0 <HAL_GPIO_Init+0x228>)
 80023b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80023ba:	e18c      	b.n	80026d6 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	2101      	movs	r1, #1
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	fa01 f303 	lsl.w	r3, r1, r3
 80023c8:	4013      	ands	r3, r2
 80023ca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	f000 817e 	beq.w	80026d0 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f003 0303 	and.w	r3, r3, #3
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d005      	beq.n	80023ec <HAL_GPIO_Init+0x44>
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f003 0303 	and.w	r3, r3, #3
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d130      	bne.n	800244e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	005b      	lsls	r3, r3, #1
 80023f6:	2203      	movs	r2, #3
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	43db      	mvns	r3, r3
 80023fe:	69ba      	ldr	r2, [r7, #24]
 8002400:	4013      	ands	r3, r2
 8002402:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	68da      	ldr	r2, [r3, #12]
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	005b      	lsls	r3, r3, #1
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	4313      	orrs	r3, r2
 8002414:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002422:	2201      	movs	r2, #1
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	fa02 f303 	lsl.w	r3, r2, r3
 800242a:	43db      	mvns	r3, r3
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	4013      	ands	r3, r2
 8002430:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	091b      	lsrs	r3, r3, #4
 8002438:	f003 0201 	and.w	r2, r3, #1
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	fa02 f303 	lsl.w	r3, r2, r3
 8002442:	69ba      	ldr	r2, [r7, #24]
 8002444:	4313      	orrs	r3, r2
 8002446:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f003 0303 	and.w	r3, r3, #3
 8002456:	2b03      	cmp	r3, #3
 8002458:	d017      	beq.n	800248a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	005b      	lsls	r3, r3, #1
 8002464:	2203      	movs	r2, #3
 8002466:	fa02 f303 	lsl.w	r3, r2, r3
 800246a:	43db      	mvns	r3, r3
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	4013      	ands	r3, r2
 8002470:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	689a      	ldr	r2, [r3, #8]
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	005b      	lsls	r3, r3, #1
 800247a:	fa02 f303 	lsl.w	r3, r2, r3
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	4313      	orrs	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	69ba      	ldr	r2, [r7, #24]
 8002488:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f003 0303 	and.w	r3, r3, #3
 8002492:	2b02      	cmp	r3, #2
 8002494:	d123      	bne.n	80024de <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	08da      	lsrs	r2, r3, #3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	3208      	adds	r2, #8
 800249e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	f003 0307 	and.w	r3, r3, #7
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	220f      	movs	r2, #15
 80024ae:	fa02 f303 	lsl.w	r3, r2, r3
 80024b2:	43db      	mvns	r3, r3
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	4013      	ands	r3, r2
 80024b8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	691a      	ldr	r2, [r3, #16]
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	f003 0307 	and.w	r3, r3, #7
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	08da      	lsrs	r2, r3, #3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	3208      	adds	r2, #8
 80024d8:	69b9      	ldr	r1, [r7, #24]
 80024da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	2203      	movs	r2, #3
 80024ea:	fa02 f303 	lsl.w	r3, r2, r3
 80024ee:	43db      	mvns	r3, r3
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	4013      	ands	r3, r2
 80024f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f003 0203 	and.w	r2, r3, #3
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	005b      	lsls	r3, r3, #1
 8002502:	fa02 f303 	lsl.w	r3, r2, r3
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	4313      	orrs	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800251a:	2b00      	cmp	r3, #0
 800251c:	f000 80d8 	beq.w	80026d0 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002520:	4b2c      	ldr	r3, [pc, #176]	; (80025d4 <HAL_GPIO_Init+0x22c>)
 8002522:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002526:	4a2b      	ldr	r2, [pc, #172]	; (80025d4 <HAL_GPIO_Init+0x22c>)
 8002528:	f043 0302 	orr.w	r3, r3, #2
 800252c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002530:	4b28      	ldr	r3, [pc, #160]	; (80025d4 <HAL_GPIO_Init+0x22c>)
 8002532:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	60fb      	str	r3, [r7, #12]
 800253c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800253e:	4a26      	ldr	r2, [pc, #152]	; (80025d8 <HAL_GPIO_Init+0x230>)
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	089b      	lsrs	r3, r3, #2
 8002544:	3302      	adds	r3, #2
 8002546:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800254a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	f003 0303 	and.w	r3, r3, #3
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	220f      	movs	r2, #15
 8002556:	fa02 f303 	lsl.w	r3, r2, r3
 800255a:	43db      	mvns	r3, r3
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	4013      	ands	r3, r2
 8002560:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a1d      	ldr	r2, [pc, #116]	; (80025dc <HAL_GPIO_Init+0x234>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d04a      	beq.n	8002600 <HAL_GPIO_Init+0x258>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a1c      	ldr	r2, [pc, #112]	; (80025e0 <HAL_GPIO_Init+0x238>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d02b      	beq.n	80025ca <HAL_GPIO_Init+0x222>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a1b      	ldr	r2, [pc, #108]	; (80025e4 <HAL_GPIO_Init+0x23c>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d025      	beq.n	80025c6 <HAL_GPIO_Init+0x21e>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a1a      	ldr	r2, [pc, #104]	; (80025e8 <HAL_GPIO_Init+0x240>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d01f      	beq.n	80025c2 <HAL_GPIO_Init+0x21a>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a19      	ldr	r2, [pc, #100]	; (80025ec <HAL_GPIO_Init+0x244>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d019      	beq.n	80025be <HAL_GPIO_Init+0x216>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a18      	ldr	r2, [pc, #96]	; (80025f0 <HAL_GPIO_Init+0x248>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d013      	beq.n	80025ba <HAL_GPIO_Init+0x212>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a17      	ldr	r2, [pc, #92]	; (80025f4 <HAL_GPIO_Init+0x24c>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d00d      	beq.n	80025b6 <HAL_GPIO_Init+0x20e>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a16      	ldr	r2, [pc, #88]	; (80025f8 <HAL_GPIO_Init+0x250>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d007      	beq.n	80025b2 <HAL_GPIO_Init+0x20a>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a15      	ldr	r2, [pc, #84]	; (80025fc <HAL_GPIO_Init+0x254>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d101      	bne.n	80025ae <HAL_GPIO_Init+0x206>
 80025aa:	2309      	movs	r3, #9
 80025ac:	e029      	b.n	8002602 <HAL_GPIO_Init+0x25a>
 80025ae:	230a      	movs	r3, #10
 80025b0:	e027      	b.n	8002602 <HAL_GPIO_Init+0x25a>
 80025b2:	2307      	movs	r3, #7
 80025b4:	e025      	b.n	8002602 <HAL_GPIO_Init+0x25a>
 80025b6:	2306      	movs	r3, #6
 80025b8:	e023      	b.n	8002602 <HAL_GPIO_Init+0x25a>
 80025ba:	2305      	movs	r3, #5
 80025bc:	e021      	b.n	8002602 <HAL_GPIO_Init+0x25a>
 80025be:	2304      	movs	r3, #4
 80025c0:	e01f      	b.n	8002602 <HAL_GPIO_Init+0x25a>
 80025c2:	2303      	movs	r3, #3
 80025c4:	e01d      	b.n	8002602 <HAL_GPIO_Init+0x25a>
 80025c6:	2302      	movs	r3, #2
 80025c8:	e01b      	b.n	8002602 <HAL_GPIO_Init+0x25a>
 80025ca:	2301      	movs	r3, #1
 80025cc:	e019      	b.n	8002602 <HAL_GPIO_Init+0x25a>
 80025ce:	bf00      	nop
 80025d0:	58000080 	.word	0x58000080
 80025d4:	58024400 	.word	0x58024400
 80025d8:	58000400 	.word	0x58000400
 80025dc:	58020000 	.word	0x58020000
 80025e0:	58020400 	.word	0x58020400
 80025e4:	58020800 	.word	0x58020800
 80025e8:	58020c00 	.word	0x58020c00
 80025ec:	58021000 	.word	0x58021000
 80025f0:	58021400 	.word	0x58021400
 80025f4:	58021800 	.word	0x58021800
 80025f8:	58021c00 	.word	0x58021c00
 80025fc:	58022400 	.word	0x58022400
 8002600:	2300      	movs	r3, #0
 8002602:	69fa      	ldr	r2, [r7, #28]
 8002604:	f002 0203 	and.w	r2, r2, #3
 8002608:	0092      	lsls	r2, r2, #2
 800260a:	4093      	lsls	r3, r2
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	4313      	orrs	r3, r2
 8002610:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002612:	4938      	ldr	r1, [pc, #224]	; (80026f4 <HAL_GPIO_Init+0x34c>)
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	089b      	lsrs	r3, r3, #2
 8002618:	3302      	adds	r3, #2
 800261a:	69ba      	ldr	r2, [r7, #24]
 800261c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002620:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	43db      	mvns	r3, r3
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	4013      	ands	r3, r2
 8002630:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d003      	beq.n	8002646 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800263e:	69ba      	ldr	r2, [r7, #24]
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	4313      	orrs	r3, r2
 8002644:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002646:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800264e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	43db      	mvns	r3, r3
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	4013      	ands	r3, r2
 800265e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d003      	beq.n	8002674 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	4313      	orrs	r3, r2
 8002672:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002674:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	43db      	mvns	r3, r3
 8002686:	69ba      	ldr	r2, [r7, #24]
 8002688:	4013      	ands	r3, r2
 800268a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d003      	beq.n	80026a0 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8002698:	69ba      	ldr	r2, [r7, #24]
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	4313      	orrs	r3, r2
 800269e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	43db      	mvns	r3, r3
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	4013      	ands	r3, r2
 80026b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d003      	beq.n	80026ca <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	3301      	adds	r3, #1
 80026d4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	fa22 f303 	lsr.w	r3, r2, r3
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	f47f ae6b 	bne.w	80023bc <HAL_GPIO_Init+0x14>
  }
}
 80026e6:	bf00      	nop
 80026e8:	bf00      	nop
 80026ea:	3724      	adds	r7, #36	; 0x24
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr
 80026f4:	58000400 	.word	0x58000400

080026f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	460b      	mov	r3, r1
 8002702:	807b      	strh	r3, [r7, #2]
 8002704:	4613      	mov	r3, r2
 8002706:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002708:	787b      	ldrb	r3, [r7, #1]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d003      	beq.n	8002716 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800270e:	887a      	ldrh	r2, [r7, #2]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002714:	e003      	b.n	800271e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002716:	887b      	ldrh	r3, [r7, #2]
 8002718:	041a      	lsls	r2, r3, #16
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	619a      	str	r2, [r3, #24]
}
 800271e:	bf00      	nop
 8002720:	370c      	adds	r7, #12
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr

0800272a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800272a:	b580      	push	{r7, lr}
 800272c:	b082      	sub	sp, #8
 800272e:	af00      	add	r7, sp, #0
 8002730:	4603      	mov	r3, r0
 8002732:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8002734:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002738:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800273c:	88fb      	ldrh	r3, [r7, #6]
 800273e:	4013      	ands	r3, r2
 8002740:	2b00      	cmp	r3, #0
 8002742:	d008      	beq.n	8002756 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002744:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002748:	88fb      	ldrh	r3, [r7, #6]
 800274a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800274e:	88fb      	ldrh	r3, [r7, #6]
 8002750:	4618      	mov	r0, r3
 8002752:	f000 f804 	bl	800275e <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8002756:	bf00      	nop
 8002758:	3708      	adds	r7, #8
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}

0800275e <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800275e:	b480      	push	{r7}
 8002760:	b083      	sub	sp, #12
 8002762:	af00      	add	r7, sp, #0
 8002764:	4603      	mov	r3, r0
 8002766:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002768:	bf00      	nop
 800276a:	370c      	adds	r7, #12
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr

08002774 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800277c:	4b19      	ldr	r3, [pc, #100]	; (80027e4 <HAL_PWREx_ConfigSupply+0x70>)
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	f003 0304 	and.w	r3, r3, #4
 8002784:	2b04      	cmp	r3, #4
 8002786:	d00a      	beq.n	800279e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002788:	4b16      	ldr	r3, [pc, #88]	; (80027e4 <HAL_PWREx_ConfigSupply+0x70>)
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	f003 0307 	and.w	r3, r3, #7
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	429a      	cmp	r2, r3
 8002794:	d001      	beq.n	800279a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e01f      	b.n	80027da <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800279a:	2300      	movs	r3, #0
 800279c:	e01d      	b.n	80027da <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800279e:	4b11      	ldr	r3, [pc, #68]	; (80027e4 <HAL_PWREx_ConfigSupply+0x70>)
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	f023 0207 	bic.w	r2, r3, #7
 80027a6:	490f      	ldr	r1, [pc, #60]	; (80027e4 <HAL_PWREx_ConfigSupply+0x70>)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80027ae:	f7ff fcdf 	bl	8002170 <HAL_GetTick>
 80027b2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80027b4:	e009      	b.n	80027ca <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80027b6:	f7ff fcdb 	bl	8002170 <HAL_GetTick>
 80027ba:	4602      	mov	r2, r0
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027c4:	d901      	bls.n	80027ca <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e007      	b.n	80027da <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80027ca:	4b06      	ldr	r3, [pc, #24]	; (80027e4 <HAL_PWREx_ConfigSupply+0x70>)
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027d6:	d1ee      	bne.n	80027b6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80027d8:	2300      	movs	r3, #0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3710      	adds	r7, #16
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	58024800 	.word	0x58024800

080027e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b08c      	sub	sp, #48	; 0x30
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d101      	bne.n	80027fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e397      	b.n	8002f2a <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0301 	and.w	r3, r3, #1
 8002802:	2b00      	cmp	r3, #0
 8002804:	f000 8087 	beq.w	8002916 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002808:	4b9e      	ldr	r3, [pc, #632]	; (8002a84 <HAL_RCC_OscConfig+0x29c>)
 800280a:	691b      	ldr	r3, [r3, #16]
 800280c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002810:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002812:	4b9c      	ldr	r3, [pc, #624]	; (8002a84 <HAL_RCC_OscConfig+0x29c>)
 8002814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002816:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800281a:	2b10      	cmp	r3, #16
 800281c:	d007      	beq.n	800282e <HAL_RCC_OscConfig+0x46>
 800281e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002820:	2b18      	cmp	r3, #24
 8002822:	d110      	bne.n	8002846 <HAL_RCC_OscConfig+0x5e>
 8002824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002826:	f003 0303 	and.w	r3, r3, #3
 800282a:	2b02      	cmp	r3, #2
 800282c:	d10b      	bne.n	8002846 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800282e:	4b95      	ldr	r3, [pc, #596]	; (8002a84 <HAL_RCC_OscConfig+0x29c>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d06c      	beq.n	8002914 <HAL_RCC_OscConfig+0x12c>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d168      	bne.n	8002914 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e371      	b.n	8002f2a <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800284e:	d106      	bne.n	800285e <HAL_RCC_OscConfig+0x76>
 8002850:	4b8c      	ldr	r3, [pc, #560]	; (8002a84 <HAL_RCC_OscConfig+0x29c>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a8b      	ldr	r2, [pc, #556]	; (8002a84 <HAL_RCC_OscConfig+0x29c>)
 8002856:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800285a:	6013      	str	r3, [r2, #0]
 800285c:	e02e      	b.n	80028bc <HAL_RCC_OscConfig+0xd4>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d10c      	bne.n	8002880 <HAL_RCC_OscConfig+0x98>
 8002866:	4b87      	ldr	r3, [pc, #540]	; (8002a84 <HAL_RCC_OscConfig+0x29c>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a86      	ldr	r2, [pc, #536]	; (8002a84 <HAL_RCC_OscConfig+0x29c>)
 800286c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002870:	6013      	str	r3, [r2, #0]
 8002872:	4b84      	ldr	r3, [pc, #528]	; (8002a84 <HAL_RCC_OscConfig+0x29c>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a83      	ldr	r2, [pc, #524]	; (8002a84 <HAL_RCC_OscConfig+0x29c>)
 8002878:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800287c:	6013      	str	r3, [r2, #0]
 800287e:	e01d      	b.n	80028bc <HAL_RCC_OscConfig+0xd4>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002888:	d10c      	bne.n	80028a4 <HAL_RCC_OscConfig+0xbc>
 800288a:	4b7e      	ldr	r3, [pc, #504]	; (8002a84 <HAL_RCC_OscConfig+0x29c>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a7d      	ldr	r2, [pc, #500]	; (8002a84 <HAL_RCC_OscConfig+0x29c>)
 8002890:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002894:	6013      	str	r3, [r2, #0]
 8002896:	4b7b      	ldr	r3, [pc, #492]	; (8002a84 <HAL_RCC_OscConfig+0x29c>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a7a      	ldr	r2, [pc, #488]	; (8002a84 <HAL_RCC_OscConfig+0x29c>)
 800289c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028a0:	6013      	str	r3, [r2, #0]
 80028a2:	e00b      	b.n	80028bc <HAL_RCC_OscConfig+0xd4>
 80028a4:	4b77      	ldr	r3, [pc, #476]	; (8002a84 <HAL_RCC_OscConfig+0x29c>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a76      	ldr	r2, [pc, #472]	; (8002a84 <HAL_RCC_OscConfig+0x29c>)
 80028aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028ae:	6013      	str	r3, [r2, #0]
 80028b0:	4b74      	ldr	r3, [pc, #464]	; (8002a84 <HAL_RCC_OscConfig+0x29c>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a73      	ldr	r2, [pc, #460]	; (8002a84 <HAL_RCC_OscConfig+0x29c>)
 80028b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d013      	beq.n	80028ec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c4:	f7ff fc54 	bl	8002170 <HAL_GetTick>
 80028c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80028ca:	e008      	b.n	80028de <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028cc:	f7ff fc50 	bl	8002170 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b64      	cmp	r3, #100	; 0x64
 80028d8:	d901      	bls.n	80028de <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e325      	b.n	8002f2a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80028de:	4b69      	ldr	r3, [pc, #420]	; (8002a84 <HAL_RCC_OscConfig+0x29c>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d0f0      	beq.n	80028cc <HAL_RCC_OscConfig+0xe4>
 80028ea:	e014      	b.n	8002916 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ec:	f7ff fc40 	bl	8002170 <HAL_GetTick>
 80028f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80028f2:	e008      	b.n	8002906 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028f4:	f7ff fc3c 	bl	8002170 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	2b64      	cmp	r3, #100	; 0x64
 8002900:	d901      	bls.n	8002906 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e311      	b.n	8002f2a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002906:	4b5f      	ldr	r3, [pc, #380]	; (8002a84 <HAL_RCC_OscConfig+0x29c>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1f0      	bne.n	80028f4 <HAL_RCC_OscConfig+0x10c>
 8002912:	e000      	b.n	8002916 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002914:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	2b00      	cmp	r3, #0
 8002920:	f000 808a 	beq.w	8002a38 <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002924:	4b57      	ldr	r3, [pc, #348]	; (8002a84 <HAL_RCC_OscConfig+0x29c>)
 8002926:	691b      	ldr	r3, [r3, #16]
 8002928:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800292c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800292e:	4b55      	ldr	r3, [pc, #340]	; (8002a84 <HAL_RCC_OscConfig+0x29c>)
 8002930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002932:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002934:	6a3b      	ldr	r3, [r7, #32]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d007      	beq.n	800294a <HAL_RCC_OscConfig+0x162>
 800293a:	6a3b      	ldr	r3, [r7, #32]
 800293c:	2b18      	cmp	r3, #24
 800293e:	d137      	bne.n	80029b0 <HAL_RCC_OscConfig+0x1c8>
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	f003 0303 	and.w	r3, r3, #3
 8002946:	2b00      	cmp	r3, #0
 8002948:	d132      	bne.n	80029b0 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800294a:	4b4e      	ldr	r3, [pc, #312]	; (8002a84 <HAL_RCC_OscConfig+0x29c>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0304 	and.w	r3, r3, #4
 8002952:	2b00      	cmp	r3, #0
 8002954:	d005      	beq.n	8002962 <HAL_RCC_OscConfig+0x17a>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d101      	bne.n	8002962 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e2e3      	b.n	8002f2a <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002962:	4b48      	ldr	r3, [pc, #288]	; (8002a84 <HAL_RCC_OscConfig+0x29c>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f023 0219 	bic.w	r2, r3, #25
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	4945      	ldr	r1, [pc, #276]	; (8002a84 <HAL_RCC_OscConfig+0x29c>)
 8002970:	4313      	orrs	r3, r2
 8002972:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002974:	f7ff fbfc 	bl	8002170 <HAL_GetTick>
 8002978:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800297a:	e008      	b.n	800298e <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800297c:	f7ff fbf8 	bl	8002170 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b02      	cmp	r3, #2
 8002988:	d901      	bls.n	800298e <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e2cd      	b.n	8002f2a <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800298e:	4b3d      	ldr	r3, [pc, #244]	; (8002a84 <HAL_RCC_OscConfig+0x29c>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0304 	and.w	r3, r3, #4
 8002996:	2b00      	cmp	r3, #0
 8002998:	d0f0      	beq.n	800297c <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800299a:	4b3a      	ldr	r3, [pc, #232]	; (8002a84 <HAL_RCC_OscConfig+0x29c>)
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	061b      	lsls	r3, r3, #24
 80029a8:	4936      	ldr	r1, [pc, #216]	; (8002a84 <HAL_RCC_OscConfig+0x29c>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029ae:	e043      	b.n	8002a38 <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d026      	beq.n	8002a06 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80029b8:	4b32      	ldr	r3, [pc, #200]	; (8002a84 <HAL_RCC_OscConfig+0x29c>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f023 0219 	bic.w	r2, r3, #25
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	492f      	ldr	r1, [pc, #188]	; (8002a84 <HAL_RCC_OscConfig+0x29c>)
 80029c6:	4313      	orrs	r3, r2
 80029c8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ca:	f7ff fbd1 	bl	8002170 <HAL_GetTick>
 80029ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029d0:	e008      	b.n	80029e4 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029d2:	f7ff fbcd 	bl	8002170 <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d901      	bls.n	80029e4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e2a2      	b.n	8002f2a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029e4:	4b27      	ldr	r3, [pc, #156]	; (8002a84 <HAL_RCC_OscConfig+0x29c>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0304 	and.w	r3, r3, #4
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d0f0      	beq.n	80029d2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029f0:	4b24      	ldr	r3, [pc, #144]	; (8002a84 <HAL_RCC_OscConfig+0x29c>)
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	691b      	ldr	r3, [r3, #16]
 80029fc:	061b      	lsls	r3, r3, #24
 80029fe:	4921      	ldr	r1, [pc, #132]	; (8002a84 <HAL_RCC_OscConfig+0x29c>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	604b      	str	r3, [r1, #4]
 8002a04:	e018      	b.n	8002a38 <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a06:	4b1f      	ldr	r3, [pc, #124]	; (8002a84 <HAL_RCC_OscConfig+0x29c>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a1e      	ldr	r2, [pc, #120]	; (8002a84 <HAL_RCC_OscConfig+0x29c>)
 8002a0c:	f023 0301 	bic.w	r3, r3, #1
 8002a10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a12:	f7ff fbad 	bl	8002170 <HAL_GetTick>
 8002a16:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a18:	e008      	b.n	8002a2c <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a1a:	f7ff fba9 	bl	8002170 <HAL_GetTick>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d901      	bls.n	8002a2c <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e27e      	b.n	8002f2a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a2c:	4b15      	ldr	r3, [pc, #84]	; (8002a84 <HAL_RCC_OscConfig+0x29c>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0304 	and.w	r3, r3, #4
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d1f0      	bne.n	8002a1a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0310 	and.w	r3, r3, #16
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d06d      	beq.n	8002b20 <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a44:	4b0f      	ldr	r3, [pc, #60]	; (8002a84 <HAL_RCC_OscConfig+0x29c>)
 8002a46:	691b      	ldr	r3, [r3, #16]
 8002a48:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a4c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002a4e:	4b0d      	ldr	r3, [pc, #52]	; (8002a84 <HAL_RCC_OscConfig+0x29c>)
 8002a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a52:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	2b08      	cmp	r3, #8
 8002a58:	d007      	beq.n	8002a6a <HAL_RCC_OscConfig+0x282>
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	2b18      	cmp	r3, #24
 8002a5e:	d11e      	bne.n	8002a9e <HAL_RCC_OscConfig+0x2b6>
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	f003 0303 	and.w	r3, r3, #3
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d119      	bne.n	8002a9e <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a6a:	4b06      	ldr	r3, [pc, #24]	; (8002a84 <HAL_RCC_OscConfig+0x29c>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d008      	beq.n	8002a88 <HAL_RCC_OscConfig+0x2a0>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	69db      	ldr	r3, [r3, #28]
 8002a7a:	2b80      	cmp	r3, #128	; 0x80
 8002a7c:	d004      	beq.n	8002a88 <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e253      	b.n	8002f2a <HAL_RCC_OscConfig+0x742>
 8002a82:	bf00      	nop
 8002a84:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a88:	4ba3      	ldr	r3, [pc, #652]	; (8002d18 <HAL_RCC_OscConfig+0x530>)
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6a1b      	ldr	r3, [r3, #32]
 8002a94:	061b      	lsls	r3, r3, #24
 8002a96:	49a0      	ldr	r1, [pc, #640]	; (8002d18 <HAL_RCC_OscConfig+0x530>)
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a9c:	e040      	b.n	8002b20 <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	69db      	ldr	r3, [r3, #28]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d023      	beq.n	8002aee <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002aa6:	4b9c      	ldr	r3, [pc, #624]	; (8002d18 <HAL_RCC_OscConfig+0x530>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a9b      	ldr	r2, [pc, #620]	; (8002d18 <HAL_RCC_OscConfig+0x530>)
 8002aac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ab0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab2:	f7ff fb5d 	bl	8002170 <HAL_GetTick>
 8002ab6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002ab8:	e008      	b.n	8002acc <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002aba:	f7ff fb59 	bl	8002170 <HAL_GetTick>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d901      	bls.n	8002acc <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	e22e      	b.n	8002f2a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002acc:	4b92      	ldr	r3, [pc, #584]	; (8002d18 <HAL_RCC_OscConfig+0x530>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d0f0      	beq.n	8002aba <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ad8:	4b8f      	ldr	r3, [pc, #572]	; (8002d18 <HAL_RCC_OscConfig+0x530>)
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6a1b      	ldr	r3, [r3, #32]
 8002ae4:	061b      	lsls	r3, r3, #24
 8002ae6:	498c      	ldr	r1, [pc, #560]	; (8002d18 <HAL_RCC_OscConfig+0x530>)
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	60cb      	str	r3, [r1, #12]
 8002aec:	e018      	b.n	8002b20 <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002aee:	4b8a      	ldr	r3, [pc, #552]	; (8002d18 <HAL_RCC_OscConfig+0x530>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a89      	ldr	r2, [pc, #548]	; (8002d18 <HAL_RCC_OscConfig+0x530>)
 8002af4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002af8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002afa:	f7ff fb39 	bl	8002170 <HAL_GetTick>
 8002afe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002b00:	e008      	b.n	8002b14 <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002b02:	f7ff fb35 	bl	8002170 <HAL_GetTick>
 8002b06:	4602      	mov	r2, r0
 8002b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	d901      	bls.n	8002b14 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e20a      	b.n	8002f2a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002b14:	4b80      	ldr	r3, [pc, #512]	; (8002d18 <HAL_RCC_OscConfig+0x530>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d1f0      	bne.n	8002b02 <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0308 	and.w	r3, r3, #8
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d036      	beq.n	8002b9a <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	695b      	ldr	r3, [r3, #20]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d019      	beq.n	8002b68 <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b34:	4b78      	ldr	r3, [pc, #480]	; (8002d18 <HAL_RCC_OscConfig+0x530>)
 8002b36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b38:	4a77      	ldr	r2, [pc, #476]	; (8002d18 <HAL_RCC_OscConfig+0x530>)
 8002b3a:	f043 0301 	orr.w	r3, r3, #1
 8002b3e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b40:	f7ff fb16 	bl	8002170 <HAL_GetTick>
 8002b44:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b46:	e008      	b.n	8002b5a <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b48:	f7ff fb12 	bl	8002170 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e1e7      	b.n	8002f2a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b5a:	4b6f      	ldr	r3, [pc, #444]	; (8002d18 <HAL_RCC_OscConfig+0x530>)
 8002b5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d0f0      	beq.n	8002b48 <HAL_RCC_OscConfig+0x360>
 8002b66:	e018      	b.n	8002b9a <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b68:	4b6b      	ldr	r3, [pc, #428]	; (8002d18 <HAL_RCC_OscConfig+0x530>)
 8002b6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b6c:	4a6a      	ldr	r2, [pc, #424]	; (8002d18 <HAL_RCC_OscConfig+0x530>)
 8002b6e:	f023 0301 	bic.w	r3, r3, #1
 8002b72:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b74:	f7ff fafc 	bl	8002170 <HAL_GetTick>
 8002b78:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b7a:	e008      	b.n	8002b8e <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b7c:	f7ff faf8 	bl	8002170 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d901      	bls.n	8002b8e <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e1cd      	b.n	8002f2a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b8e:	4b62      	ldr	r3, [pc, #392]	; (8002d18 <HAL_RCC_OscConfig+0x530>)
 8002b90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b92:	f003 0302 	and.w	r3, r3, #2
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d1f0      	bne.n	8002b7c <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0320 	and.w	r3, r3, #32
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d036      	beq.n	8002c14 <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	699b      	ldr	r3, [r3, #24]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d019      	beq.n	8002be2 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002bae:	4b5a      	ldr	r3, [pc, #360]	; (8002d18 <HAL_RCC_OscConfig+0x530>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a59      	ldr	r2, [pc, #356]	; (8002d18 <HAL_RCC_OscConfig+0x530>)
 8002bb4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002bb8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002bba:	f7ff fad9 	bl	8002170 <HAL_GetTick>
 8002bbe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002bc0:	e008      	b.n	8002bd4 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002bc2:	f7ff fad5 	bl	8002170 <HAL_GetTick>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d901      	bls.n	8002bd4 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	e1aa      	b.n	8002f2a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002bd4:	4b50      	ldr	r3, [pc, #320]	; (8002d18 <HAL_RCC_OscConfig+0x530>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d0f0      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x3da>
 8002be0:	e018      	b.n	8002c14 <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002be2:	4b4d      	ldr	r3, [pc, #308]	; (8002d18 <HAL_RCC_OscConfig+0x530>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a4c      	ldr	r2, [pc, #304]	; (8002d18 <HAL_RCC_OscConfig+0x530>)
 8002be8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002bec:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002bee:	f7ff fabf 	bl	8002170 <HAL_GetTick>
 8002bf2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002bf4:	e008      	b.n	8002c08 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002bf6:	f7ff fabb 	bl	8002170 <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d901      	bls.n	8002c08 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	e190      	b.n	8002f2a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002c08:	4b43      	ldr	r3, [pc, #268]	; (8002d18 <HAL_RCC_OscConfig+0x530>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d1f0      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0304 	and.w	r3, r3, #4
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	f000 8085 	beq.w	8002d2c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002c22:	4b3e      	ldr	r3, [pc, #248]	; (8002d1c <HAL_RCC_OscConfig+0x534>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a3d      	ldr	r2, [pc, #244]	; (8002d1c <HAL_RCC_OscConfig+0x534>)
 8002c28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c2c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c2e:	f7ff fa9f 	bl	8002170 <HAL_GetTick>
 8002c32:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c34:	e008      	b.n	8002c48 <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002c36:	f7ff fa9b 	bl	8002170 <HAL_GetTick>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	2b64      	cmp	r3, #100	; 0x64
 8002c42:	d901      	bls.n	8002c48 <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 8002c44:	2303      	movs	r3, #3
 8002c46:	e170      	b.n	8002f2a <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c48:	4b34      	ldr	r3, [pc, #208]	; (8002d1c <HAL_RCC_OscConfig+0x534>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d0f0      	beq.n	8002c36 <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d106      	bne.n	8002c6a <HAL_RCC_OscConfig+0x482>
 8002c5c:	4b2e      	ldr	r3, [pc, #184]	; (8002d18 <HAL_RCC_OscConfig+0x530>)
 8002c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c60:	4a2d      	ldr	r2, [pc, #180]	; (8002d18 <HAL_RCC_OscConfig+0x530>)
 8002c62:	f043 0301 	orr.w	r3, r3, #1
 8002c66:	6713      	str	r3, [r2, #112]	; 0x70
 8002c68:	e02d      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4de>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d10c      	bne.n	8002c8c <HAL_RCC_OscConfig+0x4a4>
 8002c72:	4b29      	ldr	r3, [pc, #164]	; (8002d18 <HAL_RCC_OscConfig+0x530>)
 8002c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c76:	4a28      	ldr	r2, [pc, #160]	; (8002d18 <HAL_RCC_OscConfig+0x530>)
 8002c78:	f023 0301 	bic.w	r3, r3, #1
 8002c7c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c7e:	4b26      	ldr	r3, [pc, #152]	; (8002d18 <HAL_RCC_OscConfig+0x530>)
 8002c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c82:	4a25      	ldr	r2, [pc, #148]	; (8002d18 <HAL_RCC_OscConfig+0x530>)
 8002c84:	f023 0304 	bic.w	r3, r3, #4
 8002c88:	6713      	str	r3, [r2, #112]	; 0x70
 8002c8a:	e01c      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4de>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	2b05      	cmp	r3, #5
 8002c92:	d10c      	bne.n	8002cae <HAL_RCC_OscConfig+0x4c6>
 8002c94:	4b20      	ldr	r3, [pc, #128]	; (8002d18 <HAL_RCC_OscConfig+0x530>)
 8002c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c98:	4a1f      	ldr	r2, [pc, #124]	; (8002d18 <HAL_RCC_OscConfig+0x530>)
 8002c9a:	f043 0304 	orr.w	r3, r3, #4
 8002c9e:	6713      	str	r3, [r2, #112]	; 0x70
 8002ca0:	4b1d      	ldr	r3, [pc, #116]	; (8002d18 <HAL_RCC_OscConfig+0x530>)
 8002ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca4:	4a1c      	ldr	r2, [pc, #112]	; (8002d18 <HAL_RCC_OscConfig+0x530>)
 8002ca6:	f043 0301 	orr.w	r3, r3, #1
 8002caa:	6713      	str	r3, [r2, #112]	; 0x70
 8002cac:	e00b      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4de>
 8002cae:	4b1a      	ldr	r3, [pc, #104]	; (8002d18 <HAL_RCC_OscConfig+0x530>)
 8002cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb2:	4a19      	ldr	r2, [pc, #100]	; (8002d18 <HAL_RCC_OscConfig+0x530>)
 8002cb4:	f023 0301 	bic.w	r3, r3, #1
 8002cb8:	6713      	str	r3, [r2, #112]	; 0x70
 8002cba:	4b17      	ldr	r3, [pc, #92]	; (8002d18 <HAL_RCC_OscConfig+0x530>)
 8002cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cbe:	4a16      	ldr	r2, [pc, #88]	; (8002d18 <HAL_RCC_OscConfig+0x530>)
 8002cc0:	f023 0304 	bic.w	r3, r3, #4
 8002cc4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d015      	beq.n	8002cfa <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cce:	f7ff fa4f 	bl	8002170 <HAL_GetTick>
 8002cd2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002cd4:	e00a      	b.n	8002cec <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cd6:	f7ff fa4b 	bl	8002170 <HAL_GetTick>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d901      	bls.n	8002cec <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e11e      	b.n	8002f2a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002cec:	4b0a      	ldr	r3, [pc, #40]	; (8002d18 <HAL_RCC_OscConfig+0x530>)
 8002cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf0:	f003 0302 	and.w	r3, r3, #2
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d0ee      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x4ee>
 8002cf8:	e018      	b.n	8002d2c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cfa:	f7ff fa39 	bl	8002170 <HAL_GetTick>
 8002cfe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002d00:	e00e      	b.n	8002d20 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d02:	f7ff fa35 	bl	8002170 <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d905      	bls.n	8002d20 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	e108      	b.n	8002f2a <HAL_RCC_OscConfig+0x742>
 8002d18:	58024400 	.word	0x58024400
 8002d1c:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002d20:	4b84      	ldr	r3, [pc, #528]	; (8002f34 <HAL_RCC_OscConfig+0x74c>)
 8002d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d24:	f003 0302 	and.w	r3, r3, #2
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d1ea      	bne.n	8002d02 <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	f000 80f9 	beq.w	8002f28 <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002d36:	4b7f      	ldr	r3, [pc, #508]	; (8002f34 <HAL_RCC_OscConfig+0x74c>)
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d3e:	2b18      	cmp	r3, #24
 8002d40:	f000 80b4 	beq.w	8002eac <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	f040 8095 	bne.w	8002e78 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d4e:	4b79      	ldr	r3, [pc, #484]	; (8002f34 <HAL_RCC_OscConfig+0x74c>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a78      	ldr	r2, [pc, #480]	; (8002f34 <HAL_RCC_OscConfig+0x74c>)
 8002d54:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d5a:	f7ff fa09 	bl	8002170 <HAL_GetTick>
 8002d5e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d60:	e008      	b.n	8002d74 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d62:	f7ff fa05 	bl	8002170 <HAL_GetTick>
 8002d66:	4602      	mov	r2, r0
 8002d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d901      	bls.n	8002d74 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e0da      	b.n	8002f2a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d74:	4b6f      	ldr	r3, [pc, #444]	; (8002f34 <HAL_RCC_OscConfig+0x74c>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d1f0      	bne.n	8002d62 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d80:	4b6c      	ldr	r3, [pc, #432]	; (8002f34 <HAL_RCC_OscConfig+0x74c>)
 8002d82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d84:	4b6c      	ldr	r3, [pc, #432]	; (8002f38 <HAL_RCC_OscConfig+0x750>)
 8002d86:	4013      	ands	r3, r2
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002d90:	0112      	lsls	r2, r2, #4
 8002d92:	430a      	orrs	r2, r1
 8002d94:	4967      	ldr	r1, [pc, #412]	; (8002f34 <HAL_RCC_OscConfig+0x74c>)
 8002d96:	4313      	orrs	r3, r2
 8002d98:	628b      	str	r3, [r1, #40]	; 0x28
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9e:	3b01      	subs	r3, #1
 8002da0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002da8:	3b01      	subs	r3, #1
 8002daa:	025b      	lsls	r3, r3, #9
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	431a      	orrs	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002db4:	3b01      	subs	r3, #1
 8002db6:	041b      	lsls	r3, r3, #16
 8002db8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002dbc:	431a      	orrs	r2, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dc2:	3b01      	subs	r3, #1
 8002dc4:	061b      	lsls	r3, r3, #24
 8002dc6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002dca:	495a      	ldr	r1, [pc, #360]	; (8002f34 <HAL_RCC_OscConfig+0x74c>)
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002dd0:	4b58      	ldr	r3, [pc, #352]	; (8002f34 <HAL_RCC_OscConfig+0x74c>)
 8002dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd4:	4a57      	ldr	r2, [pc, #348]	; (8002f34 <HAL_RCC_OscConfig+0x74c>)
 8002dd6:	f023 0301 	bic.w	r3, r3, #1
 8002dda:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002ddc:	4b55      	ldr	r3, [pc, #340]	; (8002f34 <HAL_RCC_OscConfig+0x74c>)
 8002dde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002de0:	4b56      	ldr	r3, [pc, #344]	; (8002f3c <HAL_RCC_OscConfig+0x754>)
 8002de2:	4013      	ands	r3, r2
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002de8:	00d2      	lsls	r2, r2, #3
 8002dea:	4952      	ldr	r1, [pc, #328]	; (8002f34 <HAL_RCC_OscConfig+0x74c>)
 8002dec:	4313      	orrs	r3, r2
 8002dee:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002df0:	4b50      	ldr	r3, [pc, #320]	; (8002f34 <HAL_RCC_OscConfig+0x74c>)
 8002df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df4:	f023 020c 	bic.w	r2, r3, #12
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfc:	494d      	ldr	r1, [pc, #308]	; (8002f34 <HAL_RCC_OscConfig+0x74c>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002e02:	4b4c      	ldr	r3, [pc, #304]	; (8002f34 <HAL_RCC_OscConfig+0x74c>)
 8002e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e06:	f023 0202 	bic.w	r2, r3, #2
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e0e:	4949      	ldr	r1, [pc, #292]	; (8002f34 <HAL_RCC_OscConfig+0x74c>)
 8002e10:	4313      	orrs	r3, r2
 8002e12:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002e14:	4b47      	ldr	r3, [pc, #284]	; (8002f34 <HAL_RCC_OscConfig+0x74c>)
 8002e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e18:	4a46      	ldr	r2, [pc, #280]	; (8002f34 <HAL_RCC_OscConfig+0x74c>)
 8002e1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e1e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e20:	4b44      	ldr	r3, [pc, #272]	; (8002f34 <HAL_RCC_OscConfig+0x74c>)
 8002e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e24:	4a43      	ldr	r2, [pc, #268]	; (8002f34 <HAL_RCC_OscConfig+0x74c>)
 8002e26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e2a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002e2c:	4b41      	ldr	r3, [pc, #260]	; (8002f34 <HAL_RCC_OscConfig+0x74c>)
 8002e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e30:	4a40      	ldr	r2, [pc, #256]	; (8002f34 <HAL_RCC_OscConfig+0x74c>)
 8002e32:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e36:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002e38:	4b3e      	ldr	r3, [pc, #248]	; (8002f34 <HAL_RCC_OscConfig+0x74c>)
 8002e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e3c:	4a3d      	ldr	r2, [pc, #244]	; (8002f34 <HAL_RCC_OscConfig+0x74c>)
 8002e3e:	f043 0301 	orr.w	r3, r3, #1
 8002e42:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e44:	4b3b      	ldr	r3, [pc, #236]	; (8002f34 <HAL_RCC_OscConfig+0x74c>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a3a      	ldr	r2, [pc, #232]	; (8002f34 <HAL_RCC_OscConfig+0x74c>)
 8002e4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e50:	f7ff f98e 	bl	8002170 <HAL_GetTick>
 8002e54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e56:	e008      	b.n	8002e6a <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e58:	f7ff f98a 	bl	8002170 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d901      	bls.n	8002e6a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e05f      	b.n	8002f2a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e6a:	4b32      	ldr	r3, [pc, #200]	; (8002f34 <HAL_RCC_OscConfig+0x74c>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d0f0      	beq.n	8002e58 <HAL_RCC_OscConfig+0x670>
 8002e76:	e057      	b.n	8002f28 <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e78:	4b2e      	ldr	r3, [pc, #184]	; (8002f34 <HAL_RCC_OscConfig+0x74c>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a2d      	ldr	r2, [pc, #180]	; (8002f34 <HAL_RCC_OscConfig+0x74c>)
 8002e7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e84:	f7ff f974 	bl	8002170 <HAL_GetTick>
 8002e88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e8a:	e008      	b.n	8002e9e <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e8c:	f7ff f970 	bl	8002170 <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d901      	bls.n	8002e9e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e045      	b.n	8002f2a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e9e:	4b25      	ldr	r3, [pc, #148]	; (8002f34 <HAL_RCC_OscConfig+0x74c>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d1f0      	bne.n	8002e8c <HAL_RCC_OscConfig+0x6a4>
 8002eaa:	e03d      	b.n	8002f28 <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002eac:	4b21      	ldr	r3, [pc, #132]	; (8002f34 <HAL_RCC_OscConfig+0x74c>)
 8002eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002eb2:	4b20      	ldr	r3, [pc, #128]	; (8002f34 <HAL_RCC_OscConfig+0x74c>)
 8002eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d031      	beq.n	8002f24 <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	f003 0203 	and.w	r2, r3, #3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d12a      	bne.n	8002f24 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	091b      	lsrs	r3, r3, #4
 8002ed2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d122      	bne.n	8002f24 <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d11a      	bne.n	8002f24 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	0a5b      	lsrs	r3, r3, #9
 8002ef2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002efa:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d111      	bne.n	8002f24 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	0c1b      	lsrs	r3, r3, #16
 8002f04:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f0c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d108      	bne.n	8002f24 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	0e1b      	lsrs	r3, r3, #24
 8002f16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f1e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d001      	beq.n	8002f28 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e000      	b.n	8002f2a <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3730      	adds	r7, #48	; 0x30
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	58024400 	.word	0x58024400
 8002f38:	fffffc0c 	.word	0xfffffc0c
 8002f3c:	ffff0007 	.word	0xffff0007

08002f40 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b086      	sub	sp, #24
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d101      	bne.n	8002f54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e19c      	b.n	800328e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f54:	4b8a      	ldr	r3, [pc, #552]	; (8003180 <HAL_RCC_ClockConfig+0x240>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 030f 	and.w	r3, r3, #15
 8002f5c:	683a      	ldr	r2, [r7, #0]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d910      	bls.n	8002f84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f62:	4b87      	ldr	r3, [pc, #540]	; (8003180 <HAL_RCC_ClockConfig+0x240>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f023 020f 	bic.w	r2, r3, #15
 8002f6a:	4985      	ldr	r1, [pc, #532]	; (8003180 <HAL_RCC_ClockConfig+0x240>)
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f72:	4b83      	ldr	r3, [pc, #524]	; (8003180 <HAL_RCC_ClockConfig+0x240>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 030f 	and.w	r3, r3, #15
 8002f7a:	683a      	ldr	r2, [r7, #0]
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d001      	beq.n	8002f84 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e184      	b.n	800328e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0304 	and.w	r3, r3, #4
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d010      	beq.n	8002fb2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	691a      	ldr	r2, [r3, #16]
 8002f94:	4b7b      	ldr	r3, [pc, #492]	; (8003184 <HAL_RCC_ClockConfig+0x244>)
 8002f96:	699b      	ldr	r3, [r3, #24]
 8002f98:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d908      	bls.n	8002fb2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002fa0:	4b78      	ldr	r3, [pc, #480]	; (8003184 <HAL_RCC_ClockConfig+0x244>)
 8002fa2:	699b      	ldr	r3, [r3, #24]
 8002fa4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	691b      	ldr	r3, [r3, #16]
 8002fac:	4975      	ldr	r1, [pc, #468]	; (8003184 <HAL_RCC_ClockConfig+0x244>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0308 	and.w	r3, r3, #8
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d010      	beq.n	8002fe0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	695a      	ldr	r2, [r3, #20]
 8002fc2:	4b70      	ldr	r3, [pc, #448]	; (8003184 <HAL_RCC_ClockConfig+0x244>)
 8002fc4:	69db      	ldr	r3, [r3, #28]
 8002fc6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d908      	bls.n	8002fe0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002fce:	4b6d      	ldr	r3, [pc, #436]	; (8003184 <HAL_RCC_ClockConfig+0x244>)
 8002fd0:	69db      	ldr	r3, [r3, #28]
 8002fd2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	695b      	ldr	r3, [r3, #20]
 8002fda:	496a      	ldr	r1, [pc, #424]	; (8003184 <HAL_RCC_ClockConfig+0x244>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0310 	and.w	r3, r3, #16
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d010      	beq.n	800300e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	699a      	ldr	r2, [r3, #24]
 8002ff0:	4b64      	ldr	r3, [pc, #400]	; (8003184 <HAL_RCC_ClockConfig+0x244>)
 8002ff2:	69db      	ldr	r3, [r3, #28]
 8002ff4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d908      	bls.n	800300e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002ffc:	4b61      	ldr	r3, [pc, #388]	; (8003184 <HAL_RCC_ClockConfig+0x244>)
 8002ffe:	69db      	ldr	r3, [r3, #28]
 8003000:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	699b      	ldr	r3, [r3, #24]
 8003008:	495e      	ldr	r1, [pc, #376]	; (8003184 <HAL_RCC_ClockConfig+0x244>)
 800300a:	4313      	orrs	r3, r2
 800300c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0320 	and.w	r3, r3, #32
 8003016:	2b00      	cmp	r3, #0
 8003018:	d010      	beq.n	800303c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	69da      	ldr	r2, [r3, #28]
 800301e:	4b59      	ldr	r3, [pc, #356]	; (8003184 <HAL_RCC_ClockConfig+0x244>)
 8003020:	6a1b      	ldr	r3, [r3, #32]
 8003022:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003026:	429a      	cmp	r2, r3
 8003028:	d908      	bls.n	800303c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800302a:	4b56      	ldr	r3, [pc, #344]	; (8003184 <HAL_RCC_ClockConfig+0x244>)
 800302c:	6a1b      	ldr	r3, [r3, #32]
 800302e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	69db      	ldr	r3, [r3, #28]
 8003036:	4953      	ldr	r1, [pc, #332]	; (8003184 <HAL_RCC_ClockConfig+0x244>)
 8003038:	4313      	orrs	r3, r2
 800303a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0302 	and.w	r3, r3, #2
 8003044:	2b00      	cmp	r3, #0
 8003046:	d010      	beq.n	800306a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	68da      	ldr	r2, [r3, #12]
 800304c:	4b4d      	ldr	r3, [pc, #308]	; (8003184 <HAL_RCC_ClockConfig+0x244>)
 800304e:	699b      	ldr	r3, [r3, #24]
 8003050:	f003 030f 	and.w	r3, r3, #15
 8003054:	429a      	cmp	r2, r3
 8003056:	d908      	bls.n	800306a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003058:	4b4a      	ldr	r3, [pc, #296]	; (8003184 <HAL_RCC_ClockConfig+0x244>)
 800305a:	699b      	ldr	r3, [r3, #24]
 800305c:	f023 020f 	bic.w	r2, r3, #15
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	4947      	ldr	r1, [pc, #284]	; (8003184 <HAL_RCC_ClockConfig+0x244>)
 8003066:	4313      	orrs	r3, r2
 8003068:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0301 	and.w	r3, r3, #1
 8003072:	2b00      	cmp	r3, #0
 8003074:	d055      	beq.n	8003122 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003076:	4b43      	ldr	r3, [pc, #268]	; (8003184 <HAL_RCC_ClockConfig+0x244>)
 8003078:	699b      	ldr	r3, [r3, #24]
 800307a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	4940      	ldr	r1, [pc, #256]	; (8003184 <HAL_RCC_ClockConfig+0x244>)
 8003084:	4313      	orrs	r3, r2
 8003086:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	2b02      	cmp	r3, #2
 800308e:	d107      	bne.n	80030a0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003090:	4b3c      	ldr	r3, [pc, #240]	; (8003184 <HAL_RCC_ClockConfig+0x244>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d121      	bne.n	80030e0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e0f6      	b.n	800328e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	2b03      	cmp	r3, #3
 80030a6:	d107      	bne.n	80030b8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80030a8:	4b36      	ldr	r3, [pc, #216]	; (8003184 <HAL_RCC_ClockConfig+0x244>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d115      	bne.n	80030e0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e0ea      	b.n	800328e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d107      	bne.n	80030d0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80030c0:	4b30      	ldr	r3, [pc, #192]	; (8003184 <HAL_RCC_ClockConfig+0x244>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d109      	bne.n	80030e0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e0de      	b.n	800328e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80030d0:	4b2c      	ldr	r3, [pc, #176]	; (8003184 <HAL_RCC_ClockConfig+0x244>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0304 	and.w	r3, r3, #4
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d101      	bne.n	80030e0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e0d6      	b.n	800328e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80030e0:	4b28      	ldr	r3, [pc, #160]	; (8003184 <HAL_RCC_ClockConfig+0x244>)
 80030e2:	691b      	ldr	r3, [r3, #16]
 80030e4:	f023 0207 	bic.w	r2, r3, #7
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	4925      	ldr	r1, [pc, #148]	; (8003184 <HAL_RCC_ClockConfig+0x244>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030f2:	f7ff f83d 	bl	8002170 <HAL_GetTick>
 80030f6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030f8:	e00a      	b.n	8003110 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030fa:	f7ff f839 	bl	8002170 <HAL_GetTick>
 80030fe:	4602      	mov	r2, r0
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	f241 3288 	movw	r2, #5000	; 0x1388
 8003108:	4293      	cmp	r3, r2
 800310a:	d901      	bls.n	8003110 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800310c:	2303      	movs	r3, #3
 800310e:	e0be      	b.n	800328e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003110:	4b1c      	ldr	r3, [pc, #112]	; (8003184 <HAL_RCC_ClockConfig+0x244>)
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	00db      	lsls	r3, r3, #3
 800311e:	429a      	cmp	r2, r3
 8003120:	d1eb      	bne.n	80030fa <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d010      	beq.n	8003150 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	68da      	ldr	r2, [r3, #12]
 8003132:	4b14      	ldr	r3, [pc, #80]	; (8003184 <HAL_RCC_ClockConfig+0x244>)
 8003134:	699b      	ldr	r3, [r3, #24]
 8003136:	f003 030f 	and.w	r3, r3, #15
 800313a:	429a      	cmp	r2, r3
 800313c:	d208      	bcs.n	8003150 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800313e:	4b11      	ldr	r3, [pc, #68]	; (8003184 <HAL_RCC_ClockConfig+0x244>)
 8003140:	699b      	ldr	r3, [r3, #24]
 8003142:	f023 020f 	bic.w	r2, r3, #15
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	490e      	ldr	r1, [pc, #56]	; (8003184 <HAL_RCC_ClockConfig+0x244>)
 800314c:	4313      	orrs	r3, r2
 800314e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003150:	4b0b      	ldr	r3, [pc, #44]	; (8003180 <HAL_RCC_ClockConfig+0x240>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 030f 	and.w	r3, r3, #15
 8003158:	683a      	ldr	r2, [r7, #0]
 800315a:	429a      	cmp	r2, r3
 800315c:	d214      	bcs.n	8003188 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800315e:	4b08      	ldr	r3, [pc, #32]	; (8003180 <HAL_RCC_ClockConfig+0x240>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f023 020f 	bic.w	r2, r3, #15
 8003166:	4906      	ldr	r1, [pc, #24]	; (8003180 <HAL_RCC_ClockConfig+0x240>)
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	4313      	orrs	r3, r2
 800316c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800316e:	4b04      	ldr	r3, [pc, #16]	; (8003180 <HAL_RCC_ClockConfig+0x240>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 030f 	and.w	r3, r3, #15
 8003176:	683a      	ldr	r2, [r7, #0]
 8003178:	429a      	cmp	r2, r3
 800317a:	d005      	beq.n	8003188 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e086      	b.n	800328e <HAL_RCC_ClockConfig+0x34e>
 8003180:	52002000 	.word	0x52002000
 8003184:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0304 	and.w	r3, r3, #4
 8003190:	2b00      	cmp	r3, #0
 8003192:	d010      	beq.n	80031b6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	691a      	ldr	r2, [r3, #16]
 8003198:	4b3f      	ldr	r3, [pc, #252]	; (8003298 <HAL_RCC_ClockConfig+0x358>)
 800319a:	699b      	ldr	r3, [r3, #24]
 800319c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d208      	bcs.n	80031b6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80031a4:	4b3c      	ldr	r3, [pc, #240]	; (8003298 <HAL_RCC_ClockConfig+0x358>)
 80031a6:	699b      	ldr	r3, [r3, #24]
 80031a8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	691b      	ldr	r3, [r3, #16]
 80031b0:	4939      	ldr	r1, [pc, #228]	; (8003298 <HAL_RCC_ClockConfig+0x358>)
 80031b2:	4313      	orrs	r3, r2
 80031b4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0308 	and.w	r3, r3, #8
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d010      	beq.n	80031e4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	695a      	ldr	r2, [r3, #20]
 80031c6:	4b34      	ldr	r3, [pc, #208]	; (8003298 <HAL_RCC_ClockConfig+0x358>)
 80031c8:	69db      	ldr	r3, [r3, #28]
 80031ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d208      	bcs.n	80031e4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80031d2:	4b31      	ldr	r3, [pc, #196]	; (8003298 <HAL_RCC_ClockConfig+0x358>)
 80031d4:	69db      	ldr	r3, [r3, #28]
 80031d6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	695b      	ldr	r3, [r3, #20]
 80031de:	492e      	ldr	r1, [pc, #184]	; (8003298 <HAL_RCC_ClockConfig+0x358>)
 80031e0:	4313      	orrs	r3, r2
 80031e2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0310 	and.w	r3, r3, #16
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d010      	beq.n	8003212 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	699a      	ldr	r2, [r3, #24]
 80031f4:	4b28      	ldr	r3, [pc, #160]	; (8003298 <HAL_RCC_ClockConfig+0x358>)
 80031f6:	69db      	ldr	r3, [r3, #28]
 80031f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d208      	bcs.n	8003212 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003200:	4b25      	ldr	r3, [pc, #148]	; (8003298 <HAL_RCC_ClockConfig+0x358>)
 8003202:	69db      	ldr	r3, [r3, #28]
 8003204:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	699b      	ldr	r3, [r3, #24]
 800320c:	4922      	ldr	r1, [pc, #136]	; (8003298 <HAL_RCC_ClockConfig+0x358>)
 800320e:	4313      	orrs	r3, r2
 8003210:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0320 	and.w	r3, r3, #32
 800321a:	2b00      	cmp	r3, #0
 800321c:	d010      	beq.n	8003240 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	69da      	ldr	r2, [r3, #28]
 8003222:	4b1d      	ldr	r3, [pc, #116]	; (8003298 <HAL_RCC_ClockConfig+0x358>)
 8003224:	6a1b      	ldr	r3, [r3, #32]
 8003226:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800322a:	429a      	cmp	r2, r3
 800322c:	d208      	bcs.n	8003240 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800322e:	4b1a      	ldr	r3, [pc, #104]	; (8003298 <HAL_RCC_ClockConfig+0x358>)
 8003230:	6a1b      	ldr	r3, [r3, #32]
 8003232:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	69db      	ldr	r3, [r3, #28]
 800323a:	4917      	ldr	r1, [pc, #92]	; (8003298 <HAL_RCC_ClockConfig+0x358>)
 800323c:	4313      	orrs	r3, r2
 800323e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003240:	f000 f834 	bl	80032ac <HAL_RCC_GetSysClockFreq>
 8003244:	4602      	mov	r2, r0
 8003246:	4b14      	ldr	r3, [pc, #80]	; (8003298 <HAL_RCC_ClockConfig+0x358>)
 8003248:	699b      	ldr	r3, [r3, #24]
 800324a:	0a1b      	lsrs	r3, r3, #8
 800324c:	f003 030f 	and.w	r3, r3, #15
 8003250:	4912      	ldr	r1, [pc, #72]	; (800329c <HAL_RCC_ClockConfig+0x35c>)
 8003252:	5ccb      	ldrb	r3, [r1, r3]
 8003254:	f003 031f 	and.w	r3, r3, #31
 8003258:	fa22 f303 	lsr.w	r3, r2, r3
 800325c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800325e:	4b0e      	ldr	r3, [pc, #56]	; (8003298 <HAL_RCC_ClockConfig+0x358>)
 8003260:	699b      	ldr	r3, [r3, #24]
 8003262:	f003 030f 	and.w	r3, r3, #15
 8003266:	4a0d      	ldr	r2, [pc, #52]	; (800329c <HAL_RCC_ClockConfig+0x35c>)
 8003268:	5cd3      	ldrb	r3, [r2, r3]
 800326a:	f003 031f 	and.w	r3, r3, #31
 800326e:	693a      	ldr	r2, [r7, #16]
 8003270:	fa22 f303 	lsr.w	r3, r2, r3
 8003274:	4a0a      	ldr	r2, [pc, #40]	; (80032a0 <HAL_RCC_ClockConfig+0x360>)
 8003276:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003278:	4a0a      	ldr	r2, [pc, #40]	; (80032a4 <HAL_RCC_ClockConfig+0x364>)
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800327e:	4b0a      	ldr	r3, [pc, #40]	; (80032a8 <HAL_RCC_ClockConfig+0x368>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4618      	mov	r0, r3
 8003284:	f7fe ff2a 	bl	80020dc <HAL_InitTick>
 8003288:	4603      	mov	r3, r0
 800328a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800328c:	7bfb      	ldrb	r3, [r7, #15]
}
 800328e:	4618      	mov	r0, r3
 8003290:	3718      	adds	r7, #24
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	58024400 	.word	0x58024400
 800329c:	080095f0 	.word	0x080095f0
 80032a0:	24000010 	.word	0x24000010
 80032a4:	2400000c 	.word	0x2400000c
 80032a8:	24000014 	.word	0x24000014

080032ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b089      	sub	sp, #36	; 0x24
 80032b0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032b2:	4bb3      	ldr	r3, [pc, #716]	; (8003580 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80032ba:	2b18      	cmp	r3, #24
 80032bc:	f200 8155 	bhi.w	800356a <HAL_RCC_GetSysClockFreq+0x2be>
 80032c0:	a201      	add	r2, pc, #4	; (adr r2, 80032c8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80032c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032c6:	bf00      	nop
 80032c8:	0800332d 	.word	0x0800332d
 80032cc:	0800356b 	.word	0x0800356b
 80032d0:	0800356b 	.word	0x0800356b
 80032d4:	0800356b 	.word	0x0800356b
 80032d8:	0800356b 	.word	0x0800356b
 80032dc:	0800356b 	.word	0x0800356b
 80032e0:	0800356b 	.word	0x0800356b
 80032e4:	0800356b 	.word	0x0800356b
 80032e8:	08003353 	.word	0x08003353
 80032ec:	0800356b 	.word	0x0800356b
 80032f0:	0800356b 	.word	0x0800356b
 80032f4:	0800356b 	.word	0x0800356b
 80032f8:	0800356b 	.word	0x0800356b
 80032fc:	0800356b 	.word	0x0800356b
 8003300:	0800356b 	.word	0x0800356b
 8003304:	0800356b 	.word	0x0800356b
 8003308:	08003359 	.word	0x08003359
 800330c:	0800356b 	.word	0x0800356b
 8003310:	0800356b 	.word	0x0800356b
 8003314:	0800356b 	.word	0x0800356b
 8003318:	0800356b 	.word	0x0800356b
 800331c:	0800356b 	.word	0x0800356b
 8003320:	0800356b 	.word	0x0800356b
 8003324:	0800356b 	.word	0x0800356b
 8003328:	0800335f 	.word	0x0800335f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800332c:	4b94      	ldr	r3, [pc, #592]	; (8003580 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0320 	and.w	r3, r3, #32
 8003334:	2b00      	cmp	r3, #0
 8003336:	d009      	beq.n	800334c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003338:	4b91      	ldr	r3, [pc, #580]	; (8003580 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	08db      	lsrs	r3, r3, #3
 800333e:	f003 0303 	and.w	r3, r3, #3
 8003342:	4a90      	ldr	r2, [pc, #576]	; (8003584 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003344:	fa22 f303 	lsr.w	r3, r2, r3
 8003348:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800334a:	e111      	b.n	8003570 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800334c:	4b8d      	ldr	r3, [pc, #564]	; (8003584 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800334e:	61bb      	str	r3, [r7, #24]
    break;
 8003350:	e10e      	b.n	8003570 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003352:	4b8d      	ldr	r3, [pc, #564]	; (8003588 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003354:	61bb      	str	r3, [r7, #24]
    break;
 8003356:	e10b      	b.n	8003570 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003358:	4b8c      	ldr	r3, [pc, #560]	; (800358c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800335a:	61bb      	str	r3, [r7, #24]
    break;
 800335c:	e108      	b.n	8003570 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800335e:	4b88      	ldr	r3, [pc, #544]	; (8003580 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003362:	f003 0303 	and.w	r3, r3, #3
 8003366:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003368:	4b85      	ldr	r3, [pc, #532]	; (8003580 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800336a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800336c:	091b      	lsrs	r3, r3, #4
 800336e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003372:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003374:	4b82      	ldr	r3, [pc, #520]	; (8003580 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003378:	f003 0301 	and.w	r3, r3, #1
 800337c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800337e:	4b80      	ldr	r3, [pc, #512]	; (8003580 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003382:	08db      	lsrs	r3, r3, #3
 8003384:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003388:	68fa      	ldr	r2, [r7, #12]
 800338a:	fb02 f303 	mul.w	r3, r2, r3
 800338e:	ee07 3a90 	vmov	s15, r3
 8003392:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003396:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	2b00      	cmp	r3, #0
 800339e:	f000 80e1 	beq.w	8003564 <HAL_RCC_GetSysClockFreq+0x2b8>
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	f000 8083 	beq.w	80034b0 <HAL_RCC_GetSysClockFreq+0x204>
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	f200 80a1 	bhi.w	80034f4 <HAL_RCC_GetSysClockFreq+0x248>
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d003      	beq.n	80033c0 <HAL_RCC_GetSysClockFreq+0x114>
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d056      	beq.n	800346c <HAL_RCC_GetSysClockFreq+0x1c0>
 80033be:	e099      	b.n	80034f4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80033c0:	4b6f      	ldr	r3, [pc, #444]	; (8003580 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0320 	and.w	r3, r3, #32
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d02d      	beq.n	8003428 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80033cc:	4b6c      	ldr	r3, [pc, #432]	; (8003580 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	08db      	lsrs	r3, r3, #3
 80033d2:	f003 0303 	and.w	r3, r3, #3
 80033d6:	4a6b      	ldr	r2, [pc, #428]	; (8003584 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80033d8:	fa22 f303 	lsr.w	r3, r2, r3
 80033dc:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	ee07 3a90 	vmov	s15, r3
 80033e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	ee07 3a90 	vmov	s15, r3
 80033ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033f6:	4b62      	ldr	r3, [pc, #392]	; (8003580 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033fe:	ee07 3a90 	vmov	s15, r3
 8003402:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003406:	ed97 6a02 	vldr	s12, [r7, #8]
 800340a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003590 <HAL_RCC_GetSysClockFreq+0x2e4>
 800340e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003412:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003416:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800341a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800341e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003422:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003426:	e087      	b.n	8003538 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	ee07 3a90 	vmov	s15, r3
 800342e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003432:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003594 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003436:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800343a:	4b51      	ldr	r3, [pc, #324]	; (8003580 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800343c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003442:	ee07 3a90 	vmov	s15, r3
 8003446:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800344a:	ed97 6a02 	vldr	s12, [r7, #8]
 800344e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003590 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003452:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003456:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800345a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800345e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003462:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003466:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800346a:	e065      	b.n	8003538 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	ee07 3a90 	vmov	s15, r3
 8003472:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003476:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003598 <HAL_RCC_GetSysClockFreq+0x2ec>
 800347a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800347e:	4b40      	ldr	r3, [pc, #256]	; (8003580 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003482:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003486:	ee07 3a90 	vmov	s15, r3
 800348a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800348e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003492:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003590 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003496:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800349a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800349e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80034ae:	e043      	b.n	8003538 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	ee07 3a90 	vmov	s15, r3
 80034b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034ba:	eddf 6a38 	vldr	s13, [pc, #224]	; 800359c <HAL_RCC_GetSysClockFreq+0x2f0>
 80034be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034c2:	4b2f      	ldr	r3, [pc, #188]	; (8003580 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034ca:	ee07 3a90 	vmov	s15, r3
 80034ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80034d6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003590 <HAL_RCC_GetSysClockFreq+0x2e4>
 80034da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80034f2:	e021      	b.n	8003538 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	ee07 3a90 	vmov	s15, r3
 80034fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034fe:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003598 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003502:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003506:	4b1e      	ldr	r3, [pc, #120]	; (8003580 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800350e:	ee07 3a90 	vmov	s15, r3
 8003512:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003516:	ed97 6a02 	vldr	s12, [r7, #8]
 800351a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003590 <HAL_RCC_GetSysClockFreq+0x2e4>
 800351e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003522:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003526:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800352a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800352e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003532:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003536:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003538:	4b11      	ldr	r3, [pc, #68]	; (8003580 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800353a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353c:	0a5b      	lsrs	r3, r3, #9
 800353e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003542:	3301      	adds	r3, #1
 8003544:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	ee07 3a90 	vmov	s15, r3
 800354c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003550:	edd7 6a07 	vldr	s13, [r7, #28]
 8003554:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003558:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800355c:	ee17 3a90 	vmov	r3, s15
 8003560:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003562:	e005      	b.n	8003570 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003564:	2300      	movs	r3, #0
 8003566:	61bb      	str	r3, [r7, #24]
    break;
 8003568:	e002      	b.n	8003570 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800356a:	4b07      	ldr	r3, [pc, #28]	; (8003588 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800356c:	61bb      	str	r3, [r7, #24]
    break;
 800356e:	bf00      	nop
  }

  return sysclockfreq;
 8003570:	69bb      	ldr	r3, [r7, #24]
}
 8003572:	4618      	mov	r0, r3
 8003574:	3724      	adds	r7, #36	; 0x24
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr
 800357e:	bf00      	nop
 8003580:	58024400 	.word	0x58024400
 8003584:	03d09000 	.word	0x03d09000
 8003588:	003d0900 	.word	0x003d0900
 800358c:	007a1200 	.word	0x007a1200
 8003590:	46000000 	.word	0x46000000
 8003594:	4c742400 	.word	0x4c742400
 8003598:	4a742400 	.word	0x4a742400
 800359c:	4af42400 	.word	0x4af42400

080035a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80035a6:	f7ff fe81 	bl	80032ac <HAL_RCC_GetSysClockFreq>
 80035aa:	4602      	mov	r2, r0
 80035ac:	4b10      	ldr	r3, [pc, #64]	; (80035f0 <HAL_RCC_GetHCLKFreq+0x50>)
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	0a1b      	lsrs	r3, r3, #8
 80035b2:	f003 030f 	and.w	r3, r3, #15
 80035b6:	490f      	ldr	r1, [pc, #60]	; (80035f4 <HAL_RCC_GetHCLKFreq+0x54>)
 80035b8:	5ccb      	ldrb	r3, [r1, r3]
 80035ba:	f003 031f 	and.w	r3, r3, #31
 80035be:	fa22 f303 	lsr.w	r3, r2, r3
 80035c2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80035c4:	4b0a      	ldr	r3, [pc, #40]	; (80035f0 <HAL_RCC_GetHCLKFreq+0x50>)
 80035c6:	699b      	ldr	r3, [r3, #24]
 80035c8:	f003 030f 	and.w	r3, r3, #15
 80035cc:	4a09      	ldr	r2, [pc, #36]	; (80035f4 <HAL_RCC_GetHCLKFreq+0x54>)
 80035ce:	5cd3      	ldrb	r3, [r2, r3]
 80035d0:	f003 031f 	and.w	r3, r3, #31
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	fa22 f303 	lsr.w	r3, r2, r3
 80035da:	4a07      	ldr	r2, [pc, #28]	; (80035f8 <HAL_RCC_GetHCLKFreq+0x58>)
 80035dc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80035de:	4a07      	ldr	r2, [pc, #28]	; (80035fc <HAL_RCC_GetHCLKFreq+0x5c>)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80035e4:	4b04      	ldr	r3, [pc, #16]	; (80035f8 <HAL_RCC_GetHCLKFreq+0x58>)
 80035e6:	681b      	ldr	r3, [r3, #0]
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3708      	adds	r7, #8
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	58024400 	.word	0x58024400
 80035f4:	080095f0 	.word	0x080095f0
 80035f8:	24000010 	.word	0x24000010
 80035fc:	2400000c 	.word	0x2400000c

08003600 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003604:	f7ff ffcc 	bl	80035a0 <HAL_RCC_GetHCLKFreq>
 8003608:	4602      	mov	r2, r0
 800360a:	4b06      	ldr	r3, [pc, #24]	; (8003624 <HAL_RCC_GetPCLK1Freq+0x24>)
 800360c:	69db      	ldr	r3, [r3, #28]
 800360e:	091b      	lsrs	r3, r3, #4
 8003610:	f003 0307 	and.w	r3, r3, #7
 8003614:	4904      	ldr	r1, [pc, #16]	; (8003628 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003616:	5ccb      	ldrb	r3, [r1, r3]
 8003618:	f003 031f 	and.w	r3, r3, #31
 800361c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003620:	4618      	mov	r0, r3
 8003622:	bd80      	pop	{r7, pc}
 8003624:	58024400 	.word	0x58024400
 8003628:	080095f0 	.word	0x080095f0

0800362c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003630:	f7ff ffb6 	bl	80035a0 <HAL_RCC_GetHCLKFreq>
 8003634:	4602      	mov	r2, r0
 8003636:	4b06      	ldr	r3, [pc, #24]	; (8003650 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003638:	69db      	ldr	r3, [r3, #28]
 800363a:	0a1b      	lsrs	r3, r3, #8
 800363c:	f003 0307 	and.w	r3, r3, #7
 8003640:	4904      	ldr	r1, [pc, #16]	; (8003654 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003642:	5ccb      	ldrb	r3, [r1, r3]
 8003644:	f003 031f 	and.w	r3, r3, #31
 8003648:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800364c:	4618      	mov	r0, r3
 800364e:	bd80      	pop	{r7, pc}
 8003650:	58024400 	.word	0x58024400
 8003654:	080095f0 	.word	0x080095f0

08003658 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b086      	sub	sp, #24
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003660:	2300      	movs	r3, #0
 8003662:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003664:	2300      	movs	r3, #0
 8003666:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d03f      	beq.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003678:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800367c:	d02a      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800367e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003682:	d824      	bhi.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003684:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003688:	d018      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x64>
 800368a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800368e:	d81e      	bhi.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003690:	2b00      	cmp	r3, #0
 8003692:	d003      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003694:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003698:	d007      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x52>
 800369a:	e018      	b.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800369c:	4bab      	ldr	r3, [pc, #684]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800369e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a0:	4aaa      	ldr	r2, [pc, #680]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80036a8:	e015      	b.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	3304      	adds	r3, #4
 80036ae:	2102      	movs	r1, #2
 80036b0:	4618      	mov	r0, r3
 80036b2:	f001 f989 	bl	80049c8 <RCCEx_PLL2_Config>
 80036b6:	4603      	mov	r3, r0
 80036b8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80036ba:	e00c      	b.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	3324      	adds	r3, #36	; 0x24
 80036c0:	2102      	movs	r1, #2
 80036c2:	4618      	mov	r0, r3
 80036c4:	f001 fa32 	bl	8004b2c <RCCEx_PLL3_Config>
 80036c8:	4603      	mov	r3, r0
 80036ca:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80036cc:	e003      	b.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	75fb      	strb	r3, [r7, #23]
      break;
 80036d2:	e000      	b.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80036d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036d6:	7dfb      	ldrb	r3, [r7, #23]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d109      	bne.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80036dc:	4b9b      	ldr	r3, [pc, #620]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036e8:	4998      	ldr	r1, [pc, #608]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036ea:	4313      	orrs	r3, r2
 80036ec:	650b      	str	r3, [r1, #80]	; 0x50
 80036ee:	e001      	b.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036f0:	7dfb      	ldrb	r3, [r7, #23]
 80036f2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d03d      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003704:	2b04      	cmp	r3, #4
 8003706:	d826      	bhi.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003708:	a201      	add	r2, pc, #4	; (adr r2, 8003710 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800370a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800370e:	bf00      	nop
 8003710:	08003725 	.word	0x08003725
 8003714:	08003733 	.word	0x08003733
 8003718:	08003745 	.word	0x08003745
 800371c:	0800375d 	.word	0x0800375d
 8003720:	0800375d 	.word	0x0800375d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003724:	4b89      	ldr	r3, [pc, #548]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003728:	4a88      	ldr	r2, [pc, #544]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800372a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800372e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003730:	e015      	b.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	3304      	adds	r3, #4
 8003736:	2100      	movs	r1, #0
 8003738:	4618      	mov	r0, r3
 800373a:	f001 f945 	bl	80049c8 <RCCEx_PLL2_Config>
 800373e:	4603      	mov	r3, r0
 8003740:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003742:	e00c      	b.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	3324      	adds	r3, #36	; 0x24
 8003748:	2100      	movs	r1, #0
 800374a:	4618      	mov	r0, r3
 800374c:	f001 f9ee 	bl	8004b2c <RCCEx_PLL3_Config>
 8003750:	4603      	mov	r3, r0
 8003752:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003754:	e003      	b.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	75fb      	strb	r3, [r7, #23]
      break;
 800375a:	e000      	b.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800375c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800375e:	7dfb      	ldrb	r3, [r7, #23]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d109      	bne.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003764:	4b79      	ldr	r3, [pc, #484]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003766:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003768:	f023 0207 	bic.w	r2, r3, #7
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003770:	4976      	ldr	r1, [pc, #472]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003772:	4313      	orrs	r3, r2
 8003774:	650b      	str	r3, [r1, #80]	; 0x50
 8003776:	e001      	b.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003778:	7dfb      	ldrb	r3, [r7, #23]
 800377a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003784:	2b00      	cmp	r3, #0
 8003786:	d051      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800378e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8003792:	d036      	beq.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003794:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8003798:	d830      	bhi.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800379a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800379e:	d032      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 80037a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80037a4:	d82a      	bhi.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80037a6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80037aa:	d02e      	beq.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80037ac:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80037b0:	d824      	bhi.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80037b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037b6:	d018      	beq.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x192>
 80037b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037bc:	d81e      	bhi.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d003      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x172>
 80037c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80037c6:	d007      	beq.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80037c8:	e018      	b.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037ca:	4b60      	ldr	r3, [pc, #384]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80037cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ce:	4a5f      	ldr	r2, [pc, #380]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80037d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037d4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80037d6:	e019      	b.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	3304      	adds	r3, #4
 80037dc:	2100      	movs	r1, #0
 80037de:	4618      	mov	r0, r3
 80037e0:	f001 f8f2 	bl	80049c8 <RCCEx_PLL2_Config>
 80037e4:	4603      	mov	r3, r0
 80037e6:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80037e8:	e010      	b.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	3324      	adds	r3, #36	; 0x24
 80037ee:	2100      	movs	r1, #0
 80037f0:	4618      	mov	r0, r3
 80037f2:	f001 f99b 	bl	8004b2c <RCCEx_PLL3_Config>
 80037f6:	4603      	mov	r3, r0
 80037f8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80037fa:	e007      	b.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	75fb      	strb	r3, [r7, #23]
      break;
 8003800:	e004      	b.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8003802:	bf00      	nop
 8003804:	e002      	b.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8003806:	bf00      	nop
 8003808:	e000      	b.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800380a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800380c:	7dfb      	ldrb	r3, [r7, #23]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d10a      	bne.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003812:	4b4e      	ldr	r3, [pc, #312]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003816:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003820:	494a      	ldr	r1, [pc, #296]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003822:	4313      	orrs	r3, r2
 8003824:	658b      	str	r3, [r1, #88]	; 0x58
 8003826:	e001      	b.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003828:	7dfb      	ldrb	r3, [r7, #23]
 800382a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003834:	2b00      	cmp	r3, #0
 8003836:	d051      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800383e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003842:	d036      	beq.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8003844:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003848:	d830      	bhi.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x254>
 800384a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800384e:	d032      	beq.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8003850:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003854:	d82a      	bhi.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x254>
 8003856:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800385a:	d02e      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x262>
 800385c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003860:	d824      	bhi.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x254>
 8003862:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003866:	d018      	beq.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x242>
 8003868:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800386c:	d81e      	bhi.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x254>
 800386e:	2b00      	cmp	r3, #0
 8003870:	d003      	beq.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x222>
 8003872:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003876:	d007      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003878:	e018      	b.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800387a:	4b34      	ldr	r3, [pc, #208]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800387c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800387e:	4a33      	ldr	r2, [pc, #204]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003880:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003884:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003886:	e019      	b.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	3304      	adds	r3, #4
 800388c:	2100      	movs	r1, #0
 800388e:	4618      	mov	r0, r3
 8003890:	f001 f89a 	bl	80049c8 <RCCEx_PLL2_Config>
 8003894:	4603      	mov	r3, r0
 8003896:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003898:	e010      	b.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	3324      	adds	r3, #36	; 0x24
 800389e:	2100      	movs	r1, #0
 80038a0:	4618      	mov	r0, r3
 80038a2:	f001 f943 	bl	8004b2c <RCCEx_PLL3_Config>
 80038a6:	4603      	mov	r3, r0
 80038a8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80038aa:	e007      	b.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	75fb      	strb	r3, [r7, #23]
      break;
 80038b0:	e004      	b.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80038b2:	bf00      	nop
 80038b4:	e002      	b.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80038b6:	bf00      	nop
 80038b8:	e000      	b.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80038ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038bc:	7dfb      	ldrb	r3, [r7, #23]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d10a      	bne.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80038c2:	4b22      	ldr	r3, [pc, #136]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80038c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038c6:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80038d0:	491e      	ldr	r1, [pc, #120]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80038d2:	4313      	orrs	r3, r2
 80038d4:	658b      	str	r3, [r1, #88]	; 0x58
 80038d6:	e001      	b.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038d8:	7dfb      	ldrb	r3, [r7, #23]
 80038da:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d035      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038ec:	2b30      	cmp	r3, #48	; 0x30
 80038ee:	d01c      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80038f0:	2b30      	cmp	r3, #48	; 0x30
 80038f2:	d817      	bhi.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80038f4:	2b20      	cmp	r3, #32
 80038f6:	d00c      	beq.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80038f8:	2b20      	cmp	r3, #32
 80038fa:	d813      	bhi.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d016      	beq.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8003900:	2b10      	cmp	r3, #16
 8003902:	d10f      	bne.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003904:	4b11      	ldr	r3, [pc, #68]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003908:	4a10      	ldr	r2, [pc, #64]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800390a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800390e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8003910:	e00e      	b.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	3304      	adds	r3, #4
 8003916:	2102      	movs	r1, #2
 8003918:	4618      	mov	r0, r3
 800391a:	f001 f855 	bl	80049c8 <RCCEx_PLL2_Config>
 800391e:	4603      	mov	r3, r0
 8003920:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8003922:	e005      	b.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	75fb      	strb	r3, [r7, #23]
      break;
 8003928:	e002      	b.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 800392a:	bf00      	nop
 800392c:	e000      	b.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 800392e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003930:	7dfb      	ldrb	r3, [r7, #23]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d10c      	bne.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003936:	4b05      	ldr	r3, [pc, #20]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800393a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003942:	4902      	ldr	r1, [pc, #8]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003944:	4313      	orrs	r3, r2
 8003946:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003948:	e004      	b.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800394a:	bf00      	nop
 800394c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003950:	7dfb      	ldrb	r3, [r7, #23]
 8003952:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d047      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003964:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003968:	d030      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x374>
 800396a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800396e:	d82a      	bhi.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003970:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003974:	d02c      	beq.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8003976:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800397a:	d824      	bhi.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800397c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003980:	d018      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003982:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003986:	d81e      	bhi.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003988:	2b00      	cmp	r3, #0
 800398a:	d003      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800398c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003990:	d007      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003992:	e018      	b.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003994:	4bac      	ldr	r3, [pc, #688]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003998:	4aab      	ldr	r2, [pc, #684]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800399a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800399e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80039a0:	e017      	b.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	3304      	adds	r3, #4
 80039a6:	2100      	movs	r1, #0
 80039a8:	4618      	mov	r0, r3
 80039aa:	f001 f80d 	bl	80049c8 <RCCEx_PLL2_Config>
 80039ae:	4603      	mov	r3, r0
 80039b0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80039b2:	e00e      	b.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	3324      	adds	r3, #36	; 0x24
 80039b8:	2100      	movs	r1, #0
 80039ba:	4618      	mov	r0, r3
 80039bc:	f001 f8b6 	bl	8004b2c <RCCEx_PLL3_Config>
 80039c0:	4603      	mov	r3, r0
 80039c2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80039c4:	e005      	b.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	75fb      	strb	r3, [r7, #23]
      break;
 80039ca:	e002      	b.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80039cc:	bf00      	nop
 80039ce:	e000      	b.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80039d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039d2:	7dfb      	ldrb	r3, [r7, #23]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d109      	bne.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80039d8:	4b9b      	ldr	r3, [pc, #620]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80039da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039dc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039e4:	4998      	ldr	r1, [pc, #608]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80039e6:	4313      	orrs	r3, r2
 80039e8:	650b      	str	r3, [r1, #80]	; 0x50
 80039ea:	e001      	b.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039ec:	7dfb      	ldrb	r3, [r7, #23]
 80039ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d049      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a04:	d02e      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8003a06:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a0a:	d828      	bhi.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8003a0c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a10:	d02a      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8003a12:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a16:	d822      	bhi.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8003a18:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003a1c:	d026      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x414>
 8003a1e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003a22:	d81c      	bhi.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8003a24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a28:	d010      	beq.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8003a2a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a2e:	d816      	bhi.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d01d      	beq.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8003a34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a38:	d111      	bne.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	3304      	adds	r3, #4
 8003a3e:	2101      	movs	r1, #1
 8003a40:	4618      	mov	r0, r3
 8003a42:	f000 ffc1 	bl	80049c8 <RCCEx_PLL2_Config>
 8003a46:	4603      	mov	r3, r0
 8003a48:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003a4a:	e012      	b.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	3324      	adds	r3, #36	; 0x24
 8003a50:	2101      	movs	r1, #1
 8003a52:	4618      	mov	r0, r3
 8003a54:	f001 f86a 	bl	8004b2c <RCCEx_PLL3_Config>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003a5c:	e009      	b.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	75fb      	strb	r3, [r7, #23]
      break;
 8003a62:	e006      	b.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003a64:	bf00      	nop
 8003a66:	e004      	b.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003a68:	bf00      	nop
 8003a6a:	e002      	b.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003a6c:	bf00      	nop
 8003a6e:	e000      	b.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003a70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a72:	7dfb      	ldrb	r3, [r7, #23]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d109      	bne.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003a78:	4b73      	ldr	r3, [pc, #460]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003a7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a7c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a84:	4970      	ldr	r1, [pc, #448]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	650b      	str	r3, [r1, #80]	; 0x50
 8003a8a:	e001      	b.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a8c:	7dfb      	ldrb	r3, [r7, #23]
 8003a8e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d04b      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003aa2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003aa6:	d02e      	beq.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8003aa8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003aac:	d828      	bhi.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003aae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ab2:	d02a      	beq.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8003ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ab8:	d822      	bhi.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003aba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003abe:	d026      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8003ac0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003ac4:	d81c      	bhi.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003ac6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003aca:	d010      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x496>
 8003acc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ad0:	d816      	bhi.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d01d      	beq.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8003ad6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ada:	d111      	bne.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	3304      	adds	r3, #4
 8003ae0:	2101      	movs	r1, #1
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f000 ff70 	bl	80049c8 <RCCEx_PLL2_Config>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003aec:	e012      	b.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	3324      	adds	r3, #36	; 0x24
 8003af2:	2101      	movs	r1, #1
 8003af4:	4618      	mov	r0, r3
 8003af6:	f001 f819 	bl	8004b2c <RCCEx_PLL3_Config>
 8003afa:	4603      	mov	r3, r0
 8003afc:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003afe:	e009      	b.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	75fb      	strb	r3, [r7, #23]
      break;
 8003b04:	e006      	b.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8003b06:	bf00      	nop
 8003b08:	e004      	b.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8003b0a:	bf00      	nop
 8003b0c:	e002      	b.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8003b0e:	bf00      	nop
 8003b10:	e000      	b.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8003b12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b14:	7dfb      	ldrb	r3, [r7, #23]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d10a      	bne.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003b1a:	4b4b      	ldr	r3, [pc, #300]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b1e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003b28:	4947      	ldr	r1, [pc, #284]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	658b      	str	r3, [r1, #88]	; 0x58
 8003b2e:	e001      	b.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b30:	7dfb      	ldrb	r3, [r7, #23]
 8003b32:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d02f      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b48:	d00e      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8003b4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b4e:	d814      	bhi.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x522>
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d015      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8003b54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b58:	d10f      	bne.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b5a:	4b3b      	ldr	r3, [pc, #236]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b5e:	4a3a      	ldr	r2, [pc, #232]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003b60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b64:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003b66:	e00c      	b.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	3304      	adds	r3, #4
 8003b6c:	2101      	movs	r1, #1
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f000 ff2a 	bl	80049c8 <RCCEx_PLL2_Config>
 8003b74:	4603      	mov	r3, r0
 8003b76:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003b78:	e003      	b.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	75fb      	strb	r3, [r7, #23]
      break;
 8003b7e:	e000      	b.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8003b80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b82:	7dfb      	ldrb	r3, [r7, #23]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d109      	bne.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003b88:	4b2f      	ldr	r3, [pc, #188]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003b8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b8c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b94:	492c      	ldr	r1, [pc, #176]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003b96:	4313      	orrs	r3, r2
 8003b98:	650b      	str	r3, [r1, #80]	; 0x50
 8003b9a:	e001      	b.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b9c:	7dfb      	ldrb	r3, [r7, #23]
 8003b9e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d032      	beq.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bb0:	2b03      	cmp	r3, #3
 8003bb2:	d81b      	bhi.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x594>
 8003bb4:	a201      	add	r2, pc, #4	; (adr r2, 8003bbc <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8003bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bba:	bf00      	nop
 8003bbc:	08003bf3 	.word	0x08003bf3
 8003bc0:	08003bcd 	.word	0x08003bcd
 8003bc4:	08003bdb 	.word	0x08003bdb
 8003bc8:	08003bf3 	.word	0x08003bf3
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bcc:	4b1e      	ldr	r3, [pc, #120]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd0:	4a1d      	ldr	r2, [pc, #116]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003bd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bd6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003bd8:	e00c      	b.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	3304      	adds	r3, #4
 8003bde:	2102      	movs	r1, #2
 8003be0:	4618      	mov	r0, r3
 8003be2:	f000 fef1 	bl	80049c8 <RCCEx_PLL2_Config>
 8003be6:	4603      	mov	r3, r0
 8003be8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003bea:	e003      	b.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	75fb      	strb	r3, [r7, #23]
      break;
 8003bf0:	e000      	b.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8003bf2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bf4:	7dfb      	ldrb	r3, [r7, #23]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d109      	bne.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003bfa:	4b13      	ldr	r3, [pc, #76]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bfe:	f023 0203 	bic.w	r2, r3, #3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c06:	4910      	ldr	r1, [pc, #64]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003c0c:	e001      	b.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c0e:	7dfb      	ldrb	r3, [r7, #23]
 8003c10:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	f000 808a 	beq.w	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c20:	4b0a      	ldr	r3, [pc, #40]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a09      	ldr	r2, [pc, #36]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003c26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c2a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c2c:	f7fe faa0 	bl	8002170 <HAL_GetTick>
 8003c30:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c32:	e00d      	b.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c34:	f7fe fa9c 	bl	8002170 <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	2b64      	cmp	r3, #100	; 0x64
 8003c40:	d906      	bls.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	75fb      	strb	r3, [r7, #23]
        break;
 8003c46:	e009      	b.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x604>
 8003c48:	58024400 	.word	0x58024400
 8003c4c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c50:	4bb9      	ldr	r3, [pc, #740]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d0eb      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8003c5c:	7dfb      	ldrb	r3, [r7, #23]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d166      	bne.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003c62:	4bb6      	ldr	r3, [pc, #728]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003c64:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003c6c:	4053      	eors	r3, r2
 8003c6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d013      	beq.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c76:	4bb1      	ldr	r3, [pc, #708]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c7e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c80:	4bae      	ldr	r3, [pc, #696]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c84:	4aad      	ldr	r2, [pc, #692]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003c86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c8a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c8c:	4bab      	ldr	r3, [pc, #684]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c90:	4aaa      	ldr	r2, [pc, #680]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003c92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c96:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003c98:	4aa8      	ldr	r2, [pc, #672]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003ca4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ca8:	d115      	bne.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003caa:	f7fe fa61 	bl	8002170 <HAL_GetTick>
 8003cae:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003cb0:	e00b      	b.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cb2:	f7fe fa5d 	bl	8002170 <HAL_GetTick>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d902      	bls.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 8003cc4:	2303      	movs	r3, #3
 8003cc6:	75fb      	strb	r3, [r7, #23]
            break;
 8003cc8:	e005      	b.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003cca:	4b9c      	ldr	r3, [pc, #624]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cce:	f003 0302 	and.w	r3, r3, #2
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d0ed      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 8003cd6:	7dfb      	ldrb	r3, [r7, #23]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d126      	bne.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003ce2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ce6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cea:	d10d      	bne.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8003cec:	4b93      	ldr	r3, [pc, #588]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003cee:	691b      	ldr	r3, [r3, #16]
 8003cf0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003cfa:	0919      	lsrs	r1, r3, #4
 8003cfc:	4b90      	ldr	r3, [pc, #576]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003cfe:	400b      	ands	r3, r1
 8003d00:	498e      	ldr	r1, [pc, #568]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	610b      	str	r3, [r1, #16]
 8003d06:	e005      	b.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 8003d08:	4b8c      	ldr	r3, [pc, #560]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003d0a:	691b      	ldr	r3, [r3, #16]
 8003d0c:	4a8b      	ldr	r2, [pc, #556]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003d0e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003d12:	6113      	str	r3, [r2, #16]
 8003d14:	4b89      	ldr	r3, [pc, #548]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003d16:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003d1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d22:	4986      	ldr	r1, [pc, #536]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003d24:	4313      	orrs	r3, r2
 8003d26:	670b      	str	r3, [r1, #112]	; 0x70
 8003d28:	e004      	b.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d2a:	7dfb      	ldrb	r3, [r7, #23]
 8003d2c:	75bb      	strb	r3, [r7, #22]
 8003d2e:	e001      	b.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d30:	7dfb      	ldrb	r3, [r7, #23]
 8003d32:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0301 	and.w	r3, r3, #1
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d07e      	beq.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d44:	2b28      	cmp	r3, #40	; 0x28
 8003d46:	d867      	bhi.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8003d48:	a201      	add	r2, pc, #4	; (adr r2, 8003d50 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 8003d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d4e:	bf00      	nop
 8003d50:	08003e1f 	.word	0x08003e1f
 8003d54:	08003e19 	.word	0x08003e19
 8003d58:	08003e19 	.word	0x08003e19
 8003d5c:	08003e19 	.word	0x08003e19
 8003d60:	08003e19 	.word	0x08003e19
 8003d64:	08003e19 	.word	0x08003e19
 8003d68:	08003e19 	.word	0x08003e19
 8003d6c:	08003e19 	.word	0x08003e19
 8003d70:	08003df5 	.word	0x08003df5
 8003d74:	08003e19 	.word	0x08003e19
 8003d78:	08003e19 	.word	0x08003e19
 8003d7c:	08003e19 	.word	0x08003e19
 8003d80:	08003e19 	.word	0x08003e19
 8003d84:	08003e19 	.word	0x08003e19
 8003d88:	08003e19 	.word	0x08003e19
 8003d8c:	08003e19 	.word	0x08003e19
 8003d90:	08003e07 	.word	0x08003e07
 8003d94:	08003e19 	.word	0x08003e19
 8003d98:	08003e19 	.word	0x08003e19
 8003d9c:	08003e19 	.word	0x08003e19
 8003da0:	08003e19 	.word	0x08003e19
 8003da4:	08003e19 	.word	0x08003e19
 8003da8:	08003e19 	.word	0x08003e19
 8003dac:	08003e19 	.word	0x08003e19
 8003db0:	08003e1f 	.word	0x08003e1f
 8003db4:	08003e19 	.word	0x08003e19
 8003db8:	08003e19 	.word	0x08003e19
 8003dbc:	08003e19 	.word	0x08003e19
 8003dc0:	08003e19 	.word	0x08003e19
 8003dc4:	08003e19 	.word	0x08003e19
 8003dc8:	08003e19 	.word	0x08003e19
 8003dcc:	08003e19 	.word	0x08003e19
 8003dd0:	08003e1f 	.word	0x08003e1f
 8003dd4:	08003e19 	.word	0x08003e19
 8003dd8:	08003e19 	.word	0x08003e19
 8003ddc:	08003e19 	.word	0x08003e19
 8003de0:	08003e19 	.word	0x08003e19
 8003de4:	08003e19 	.word	0x08003e19
 8003de8:	08003e19 	.word	0x08003e19
 8003dec:	08003e19 	.word	0x08003e19
 8003df0:	08003e1f 	.word	0x08003e1f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	3304      	adds	r3, #4
 8003df8:	2101      	movs	r1, #1
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f000 fde4 	bl	80049c8 <RCCEx_PLL2_Config>
 8003e00:	4603      	mov	r3, r0
 8003e02:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003e04:	e00c      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	3324      	adds	r3, #36	; 0x24
 8003e0a:	2101      	movs	r1, #1
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f000 fe8d 	bl	8004b2c <RCCEx_PLL3_Config>
 8003e12:	4603      	mov	r3, r0
 8003e14:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003e16:	e003      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	75fb      	strb	r3, [r7, #23]
      break;
 8003e1c:	e000      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 8003e1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e20:	7dfb      	ldrb	r3, [r7, #23]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d109      	bne.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003e26:	4b45      	ldr	r3, [pc, #276]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003e28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e2a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e32:	4942      	ldr	r1, [pc, #264]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003e34:	4313      	orrs	r3, r2
 8003e36:	654b      	str	r3, [r1, #84]	; 0x54
 8003e38:	e001      	b.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e3a:	7dfb      	ldrb	r3, [r7, #23]
 8003e3c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0302 	and.w	r3, r3, #2
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d037      	beq.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e4e:	2b05      	cmp	r3, #5
 8003e50:	d820      	bhi.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8003e52:	a201      	add	r2, pc, #4	; (adr r2, 8003e58 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8003e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e58:	08003e9b 	.word	0x08003e9b
 8003e5c:	08003e71 	.word	0x08003e71
 8003e60:	08003e83 	.word	0x08003e83
 8003e64:	08003e9b 	.word	0x08003e9b
 8003e68:	08003e9b 	.word	0x08003e9b
 8003e6c:	08003e9b 	.word	0x08003e9b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	3304      	adds	r3, #4
 8003e74:	2101      	movs	r1, #1
 8003e76:	4618      	mov	r0, r3
 8003e78:	f000 fda6 	bl	80049c8 <RCCEx_PLL2_Config>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003e80:	e00c      	b.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	3324      	adds	r3, #36	; 0x24
 8003e86:	2101      	movs	r1, #1
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f000 fe4f 	bl	8004b2c <RCCEx_PLL3_Config>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003e92:	e003      	b.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	75fb      	strb	r3, [r7, #23]
      break;
 8003e98:	e000      	b.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8003e9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e9c:	7dfb      	ldrb	r3, [r7, #23]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d109      	bne.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003ea2:	4b26      	ldr	r3, [pc, #152]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ea6:	f023 0207 	bic.w	r2, r3, #7
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eae:	4923      	ldr	r1, [pc, #140]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	654b      	str	r3, [r1, #84]	; 0x54
 8003eb4:	e001      	b.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eb6:	7dfb      	ldrb	r3, [r7, #23]
 8003eb8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0304 	and.w	r3, r3, #4
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d040      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ecc:	2b05      	cmp	r3, #5
 8003ece:	d821      	bhi.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8003ed0:	a201      	add	r2, pc, #4	; (adr r2, 8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8003ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ed6:	bf00      	nop
 8003ed8:	08003f1b 	.word	0x08003f1b
 8003edc:	08003ef1 	.word	0x08003ef1
 8003ee0:	08003f03 	.word	0x08003f03
 8003ee4:	08003f1b 	.word	0x08003f1b
 8003ee8:	08003f1b 	.word	0x08003f1b
 8003eec:	08003f1b 	.word	0x08003f1b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	3304      	adds	r3, #4
 8003ef4:	2101      	movs	r1, #1
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f000 fd66 	bl	80049c8 <RCCEx_PLL2_Config>
 8003efc:	4603      	mov	r3, r0
 8003efe:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003f00:	e00c      	b.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	3324      	adds	r3, #36	; 0x24
 8003f06:	2101      	movs	r1, #1
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f000 fe0f 	bl	8004b2c <RCCEx_PLL3_Config>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003f12:	e003      	b.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	75fb      	strb	r3, [r7, #23]
      break;
 8003f18:	e000      	b.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8003f1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f1c:	7dfb      	ldrb	r3, [r7, #23]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d110      	bne.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f22:	4b06      	ldr	r3, [pc, #24]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f26:	f023 0207 	bic.w	r2, r3, #7
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f30:	4902      	ldr	r1, [pc, #8]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003f32:	4313      	orrs	r3, r2
 8003f34:	658b      	str	r3, [r1, #88]	; 0x58
 8003f36:	e007      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8003f38:	58024800 	.word	0x58024800
 8003f3c:	58024400 	.word	0x58024400
 8003f40:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f44:	7dfb      	ldrb	r3, [r7, #23]
 8003f46:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0320 	and.w	r3, r3, #32
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d04b      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f5e:	d02e      	beq.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x966>
 8003f60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f64:	d828      	bhi.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8003f66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f6a:	d02a      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8003f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f70:	d822      	bhi.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8003f72:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003f76:	d026      	beq.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003f78:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003f7c:	d81c      	bhi.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8003f7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f82:	d010      	beq.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8003f84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f88:	d816      	bhi.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d01d      	beq.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x972>
 8003f8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f92:	d111      	bne.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	3304      	adds	r3, #4
 8003f98:	2100      	movs	r1, #0
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f000 fd14 	bl	80049c8 <RCCEx_PLL2_Config>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003fa4:	e012      	b.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	3324      	adds	r3, #36	; 0x24
 8003faa:	2102      	movs	r1, #2
 8003fac:	4618      	mov	r0, r3
 8003fae:	f000 fdbd 	bl	8004b2c <RCCEx_PLL3_Config>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003fb6:	e009      	b.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	75fb      	strb	r3, [r7, #23]
      break;
 8003fbc:	e006      	b.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003fbe:	bf00      	nop
 8003fc0:	e004      	b.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003fc2:	bf00      	nop
 8003fc4:	e002      	b.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003fc6:	bf00      	nop
 8003fc8:	e000      	b.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003fca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fcc:	7dfb      	ldrb	r3, [r7, #23]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d10a      	bne.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fd2:	4bb2      	ldr	r3, [pc, #712]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fd6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fe0:	49ae      	ldr	r1, [pc, #696]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	654b      	str	r3, [r1, #84]	; 0x54
 8003fe6:	e001      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fe8:	7dfb      	ldrb	r3, [r7, #23]
 8003fea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d04b      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ffe:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004002:	d02e      	beq.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8004004:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004008:	d828      	bhi.n	800405c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800400a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800400e:	d02a      	beq.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8004010:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004014:	d822      	bhi.n	800405c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004016:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800401a:	d026      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800401c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004020:	d81c      	bhi.n	800405c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004022:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004026:	d010      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8004028:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800402c:	d816      	bhi.n	800405c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800402e:	2b00      	cmp	r3, #0
 8004030:	d01d      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8004032:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004036:	d111      	bne.n	800405c <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	3304      	adds	r3, #4
 800403c:	2100      	movs	r1, #0
 800403e:	4618      	mov	r0, r3
 8004040:	f000 fcc2 	bl	80049c8 <RCCEx_PLL2_Config>
 8004044:	4603      	mov	r3, r0
 8004046:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004048:	e012      	b.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	3324      	adds	r3, #36	; 0x24
 800404e:	2102      	movs	r1, #2
 8004050:	4618      	mov	r0, r3
 8004052:	f000 fd6b 	bl	8004b2c <RCCEx_PLL3_Config>
 8004056:	4603      	mov	r3, r0
 8004058:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800405a:	e009      	b.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	75fb      	strb	r3, [r7, #23]
      break;
 8004060:	e006      	b.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004062:	bf00      	nop
 8004064:	e004      	b.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004066:	bf00      	nop
 8004068:	e002      	b.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800406a:	bf00      	nop
 800406c:	e000      	b.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800406e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004070:	7dfb      	ldrb	r3, [r7, #23]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d10a      	bne.n	800408c <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004076:	4b89      	ldr	r3, [pc, #548]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800407a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004084:	4985      	ldr	r1, [pc, #532]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004086:	4313      	orrs	r3, r2
 8004088:	658b      	str	r3, [r1, #88]	; 0x58
 800408a:	e001      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800408c:	7dfb      	ldrb	r3, [r7, #23]
 800408e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004098:	2b00      	cmp	r3, #0
 800409a:	d04b      	beq.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80040a2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80040a6:	d02e      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 80040a8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80040ac:	d828      	bhi.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80040ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040b2:	d02a      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80040b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040b8:	d822      	bhi.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80040ba:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80040be:	d026      	beq.n	800410e <HAL_RCCEx_PeriphCLKConfig+0xab6>
 80040c0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80040c4:	d81c      	bhi.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80040c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040ca:	d010      	beq.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0xa96>
 80040cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040d0:	d816      	bhi.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d01d      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 80040d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040da:	d111      	bne.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	3304      	adds	r3, #4
 80040e0:	2100      	movs	r1, #0
 80040e2:	4618      	mov	r0, r3
 80040e4:	f000 fc70 	bl	80049c8 <RCCEx_PLL2_Config>
 80040e8:	4603      	mov	r3, r0
 80040ea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80040ec:	e012      	b.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	3324      	adds	r3, #36	; 0x24
 80040f2:	2102      	movs	r1, #2
 80040f4:	4618      	mov	r0, r3
 80040f6:	f000 fd19 	bl	8004b2c <RCCEx_PLL3_Config>
 80040fa:	4603      	mov	r3, r0
 80040fc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80040fe:	e009      	b.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	75fb      	strb	r3, [r7, #23]
      break;
 8004104:	e006      	b.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004106:	bf00      	nop
 8004108:	e004      	b.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800410a:	bf00      	nop
 800410c:	e002      	b.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800410e:	bf00      	nop
 8004110:	e000      	b.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004112:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004114:	7dfb      	ldrb	r3, [r7, #23]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d10a      	bne.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800411a:	4b60      	ldr	r3, [pc, #384]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800411c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800411e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004128:	495c      	ldr	r1, [pc, #368]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800412a:	4313      	orrs	r3, r2
 800412c:	658b      	str	r3, [r1, #88]	; 0x58
 800412e:	e001      	b.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004130:	7dfb      	ldrb	r3, [r7, #23]
 8004132:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0308 	and.w	r3, r3, #8
 800413c:	2b00      	cmp	r3, #0
 800413e:	d018      	beq.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004144:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004148:	d10a      	bne.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	3324      	adds	r3, #36	; 0x24
 800414e:	2102      	movs	r1, #2
 8004150:	4618      	mov	r0, r3
 8004152:	f000 fceb 	bl	8004b2c <RCCEx_PLL3_Config>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d001      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8004160:	4b4e      	ldr	r3, [pc, #312]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004164:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800416c:	494b      	ldr	r1, [pc, #300]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800416e:	4313      	orrs	r3, r2
 8004170:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0310 	and.w	r3, r3, #16
 800417a:	2b00      	cmp	r3, #0
 800417c:	d01a      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004184:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004188:	d10a      	bne.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	3324      	adds	r3, #36	; 0x24
 800418e:	2102      	movs	r1, #2
 8004190:	4618      	mov	r0, r3
 8004192:	f000 fccb 	bl	8004b2c <RCCEx_PLL3_Config>
 8004196:	4603      	mov	r3, r0
 8004198:	2b00      	cmp	r3, #0
 800419a:	d001      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80041a0:	4b3e      	ldr	r3, [pc, #248]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80041a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ae:	493b      	ldr	r1, [pc, #236]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d034      	beq.n	800422a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041ca:	d01d      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80041cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041d0:	d817      	bhi.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d003      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80041d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041da:	d009      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80041dc:	e011      	b.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	3304      	adds	r3, #4
 80041e2:	2100      	movs	r1, #0
 80041e4:	4618      	mov	r0, r3
 80041e6:	f000 fbef 	bl	80049c8 <RCCEx_PLL2_Config>
 80041ea:	4603      	mov	r3, r0
 80041ec:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80041ee:	e00c      	b.n	800420a <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	3324      	adds	r3, #36	; 0x24
 80041f4:	2102      	movs	r1, #2
 80041f6:	4618      	mov	r0, r3
 80041f8:	f000 fc98 	bl	8004b2c <RCCEx_PLL3_Config>
 80041fc:	4603      	mov	r3, r0
 80041fe:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004200:	e003      	b.n	800420a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	75fb      	strb	r3, [r7, #23]
      break;
 8004206:	e000      	b.n	800420a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8004208:	bf00      	nop
    }

    if(ret == HAL_OK)
 800420a:	7dfb      	ldrb	r3, [r7, #23]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d10a      	bne.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004210:	4b22      	ldr	r3, [pc, #136]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004214:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800421e:	491f      	ldr	r1, [pc, #124]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004220:	4313      	orrs	r3, r2
 8004222:	658b      	str	r3, [r1, #88]	; 0x58
 8004224:	e001      	b.n	800422a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004226:	7dfb      	ldrb	r3, [r7, #23]
 8004228:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d036      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800423c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004240:	d01c      	beq.n	800427c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8004242:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004246:	d816      	bhi.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004248:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800424c:	d003      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800424e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004252:	d007      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8004254:	e00f      	b.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004256:	4b11      	ldr	r3, [pc, #68]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800425a:	4a10      	ldr	r2, [pc, #64]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800425c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004260:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004262:	e00c      	b.n	800427e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	3324      	adds	r3, #36	; 0x24
 8004268:	2101      	movs	r1, #1
 800426a:	4618      	mov	r0, r3
 800426c:	f000 fc5e 	bl	8004b2c <RCCEx_PLL3_Config>
 8004270:	4603      	mov	r3, r0
 8004272:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004274:	e003      	b.n	800427e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	75fb      	strb	r3, [r7, #23]
      break;
 800427a:	e000      	b.n	800427e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 800427c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800427e:	7dfb      	ldrb	r3, [r7, #23]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d10d      	bne.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004284:	4b05      	ldr	r3, [pc, #20]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004288:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004292:	4902      	ldr	r1, [pc, #8]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004294:	4313      	orrs	r3, r2
 8004296:	654b      	str	r3, [r1, #84]	; 0x54
 8004298:	e004      	b.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 800429a:	bf00      	nop
 800429c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042a0:	7dfb      	ldrb	r3, [r7, #23]
 80042a2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d029      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d003      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80042b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042bc:	d007      	beq.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80042be:	e00f      	b.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042c0:	4b61      	ldr	r3, [pc, #388]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80042c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c4:	4a60      	ldr	r2, [pc, #384]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80042c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80042cc:	e00b      	b.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	3304      	adds	r3, #4
 80042d2:	2102      	movs	r1, #2
 80042d4:	4618      	mov	r0, r3
 80042d6:	f000 fb77 	bl	80049c8 <RCCEx_PLL2_Config>
 80042da:	4603      	mov	r3, r0
 80042dc:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80042de:	e002      	b.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	75fb      	strb	r3, [r7, #23]
      break;
 80042e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042e6:	7dfb      	ldrb	r3, [r7, #23]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d109      	bne.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80042ec:	4b56      	ldr	r3, [pc, #344]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80042ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042f8:	4953      	ldr	r1, [pc, #332]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80042fa:	4313      	orrs	r3, r2
 80042fc:	64cb      	str	r3, [r1, #76]	; 0x4c
 80042fe:	e001      	b.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004300:	7dfb      	ldrb	r3, [r7, #23]
 8004302:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800430c:	2b00      	cmp	r3, #0
 800430e:	d00a      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	3324      	adds	r3, #36	; 0x24
 8004314:	2102      	movs	r1, #2
 8004316:	4618      	mov	r0, r3
 8004318:	f000 fc08 	bl	8004b2c <RCCEx_PLL3_Config>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d001      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800432e:	2b00      	cmp	r3, #0
 8004330:	d030      	beq.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004336:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800433a:	d017      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800433c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004340:	d811      	bhi.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8004342:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004346:	d013      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8004348:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800434c:	d80b      	bhi.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800434e:	2b00      	cmp	r3, #0
 8004350:	d010      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8004352:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004356:	d106      	bne.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004358:	4b3b      	ldr	r3, [pc, #236]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800435a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800435c:	4a3a      	ldr	r2, [pc, #232]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800435e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004362:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004364:	e007      	b.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	75fb      	strb	r3, [r7, #23]
      break;
 800436a:	e004      	b.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800436c:	bf00      	nop
 800436e:	e002      	b.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004370:	bf00      	nop
 8004372:	e000      	b.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004374:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004376:	7dfb      	ldrb	r3, [r7, #23]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d109      	bne.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800437c:	4b32      	ldr	r3, [pc, #200]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800437e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004380:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004388:	492f      	ldr	r1, [pc, #188]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800438a:	4313      	orrs	r3, r2
 800438c:	654b      	str	r3, [r1, #84]	; 0x54
 800438e:	e001      	b.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004390:	7dfb      	ldrb	r3, [r7, #23]
 8004392:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d008      	beq.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80043a0:	4b29      	ldr	r3, [pc, #164]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80043a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043a4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043ac:	4926      	ldr	r1, [pc, #152]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80043ae:	4313      	orrs	r3, r2
 80043b0:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d008      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80043be:	4b22      	ldr	r3, [pc, #136]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80043c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043c2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043ca:	491f      	ldr	r1, [pc, #124]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80043cc:	4313      	orrs	r3, r2
 80043ce:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d00d      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80043dc:	4b1a      	ldr	r3, [pc, #104]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80043de:	691b      	ldr	r3, [r3, #16]
 80043e0:	4a19      	ldr	r2, [pc, #100]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80043e2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80043e6:	6113      	str	r3, [r2, #16]
 80043e8:	4b17      	ldr	r3, [pc, #92]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80043ea:	691a      	ldr	r2, [r3, #16]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80043f2:	4915      	ldr	r1, [pc, #84]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80043f4:	4313      	orrs	r3, r2
 80043f6:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	da08      	bge.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004400:	4b11      	ldr	r3, [pc, #68]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004402:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004404:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800440c:	490e      	ldr	r1, [pc, #56]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800440e:	4313      	orrs	r3, r2
 8004410:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800441a:	2b00      	cmp	r3, #0
 800441c:	d009      	beq.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800441e:	4b0a      	ldr	r3, [pc, #40]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004422:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800442c:	4906      	ldr	r1, [pc, #24]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800442e:	4313      	orrs	r3, r2
 8004430:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004432:	7dbb      	ldrb	r3, [r7, #22]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d101      	bne.n	800443c <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8004438:	2300      	movs	r3, #0
 800443a:	e000      	b.n	800443e <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
}
 800443e:	4618      	mov	r0, r3
 8004440:	3718      	adds	r7, #24
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	58024400 	.word	0x58024400

0800444c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004450:	f7ff f8a6 	bl	80035a0 <HAL_RCC_GetHCLKFreq>
 8004454:	4602      	mov	r2, r0
 8004456:	4b06      	ldr	r3, [pc, #24]	; (8004470 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004458:	6a1b      	ldr	r3, [r3, #32]
 800445a:	091b      	lsrs	r3, r3, #4
 800445c:	f003 0307 	and.w	r3, r3, #7
 8004460:	4904      	ldr	r1, [pc, #16]	; (8004474 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004462:	5ccb      	ldrb	r3, [r1, r3]
 8004464:	f003 031f 	and.w	r3, r3, #31
 8004468:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800446c:	4618      	mov	r0, r3
 800446e:	bd80      	pop	{r7, pc}
 8004470:	58024400 	.word	0x58024400
 8004474:	080095f0 	.word	0x080095f0

08004478 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004478:	b480      	push	{r7}
 800447a:	b089      	sub	sp, #36	; 0x24
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004480:	4ba1      	ldr	r3, [pc, #644]	; (8004708 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004484:	f003 0303 	and.w	r3, r3, #3
 8004488:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800448a:	4b9f      	ldr	r3, [pc, #636]	; (8004708 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800448c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800448e:	0b1b      	lsrs	r3, r3, #12
 8004490:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004494:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004496:	4b9c      	ldr	r3, [pc, #624]	; (8004708 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800449a:	091b      	lsrs	r3, r3, #4
 800449c:	f003 0301 	and.w	r3, r3, #1
 80044a0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80044a2:	4b99      	ldr	r3, [pc, #612]	; (8004708 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044a6:	08db      	lsrs	r3, r3, #3
 80044a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80044ac:	693a      	ldr	r2, [r7, #16]
 80044ae:	fb02 f303 	mul.w	r3, r2, r3
 80044b2:	ee07 3a90 	vmov	s15, r3
 80044b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044ba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	f000 8111 	beq.w	80046e8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	2b02      	cmp	r3, #2
 80044ca:	f000 8083 	beq.w	80045d4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	f200 80a1 	bhi.w	8004618 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d003      	beq.n	80044e4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d056      	beq.n	8004590 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80044e2:	e099      	b.n	8004618 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80044e4:	4b88      	ldr	r3, [pc, #544]	; (8004708 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0320 	and.w	r3, r3, #32
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d02d      	beq.n	800454c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80044f0:	4b85      	ldr	r3, [pc, #532]	; (8004708 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	08db      	lsrs	r3, r3, #3
 80044f6:	f003 0303 	and.w	r3, r3, #3
 80044fa:	4a84      	ldr	r2, [pc, #528]	; (800470c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80044fc:	fa22 f303 	lsr.w	r3, r2, r3
 8004500:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	ee07 3a90 	vmov	s15, r3
 8004508:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	ee07 3a90 	vmov	s15, r3
 8004512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004516:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800451a:	4b7b      	ldr	r3, [pc, #492]	; (8004708 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800451c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800451e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004522:	ee07 3a90 	vmov	s15, r3
 8004526:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800452a:	ed97 6a03 	vldr	s12, [r7, #12]
 800452e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004710 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004532:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004536:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800453a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800453e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004542:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004546:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800454a:	e087      	b.n	800465c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	ee07 3a90 	vmov	s15, r3
 8004552:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004556:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004714 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800455a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800455e:	4b6a      	ldr	r3, [pc, #424]	; (8004708 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004562:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004566:	ee07 3a90 	vmov	s15, r3
 800456a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800456e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004572:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004710 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004576:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800457a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800457e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004582:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004586:	ee67 7a27 	vmul.f32	s15, s14, s15
 800458a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800458e:	e065      	b.n	800465c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	ee07 3a90 	vmov	s15, r3
 8004596:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800459a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004718 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800459e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045a2:	4b59      	ldr	r3, [pc, #356]	; (8004708 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045aa:	ee07 3a90 	vmov	s15, r3
 80045ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80045b6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004710 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80045ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80045d2:	e043      	b.n	800465c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	ee07 3a90 	vmov	s15, r3
 80045da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045de:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800471c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80045e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045e6:	4b48      	ldr	r3, [pc, #288]	; (8004708 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045ee:	ee07 3a90 	vmov	s15, r3
 80045f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80045fa:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004710 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80045fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004602:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004606:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800460a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800460e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004612:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004616:	e021      	b.n	800465c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	ee07 3a90 	vmov	s15, r3
 800461e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004622:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004718 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004626:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800462a:	4b37      	ldr	r3, [pc, #220]	; (8004708 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800462c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800462e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004632:	ee07 3a90 	vmov	s15, r3
 8004636:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800463a:	ed97 6a03 	vldr	s12, [r7, #12]
 800463e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004710 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004642:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004646:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800464a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800464e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004652:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004656:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800465a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800465c:	4b2a      	ldr	r3, [pc, #168]	; (8004708 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800465e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004660:	0a5b      	lsrs	r3, r3, #9
 8004662:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004666:	ee07 3a90 	vmov	s15, r3
 800466a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800466e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004672:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004676:	edd7 6a07 	vldr	s13, [r7, #28]
 800467a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800467e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004682:	ee17 2a90 	vmov	r2, s15
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800468a:	4b1f      	ldr	r3, [pc, #124]	; (8004708 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800468c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800468e:	0c1b      	lsrs	r3, r3, #16
 8004690:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004694:	ee07 3a90 	vmov	s15, r3
 8004698:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800469c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80046a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80046a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80046a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046b0:	ee17 2a90 	vmov	r2, s15
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80046b8:	4b13      	ldr	r3, [pc, #76]	; (8004708 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046bc:	0e1b      	lsrs	r3, r3, #24
 80046be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046c2:	ee07 3a90 	vmov	s15, r3
 80046c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80046ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80046d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80046d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046de:	ee17 2a90 	vmov	r2, s15
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80046e6:	e008      	b.n	80046fa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2200      	movs	r2, #0
 80046f2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	609a      	str	r2, [r3, #8]
}
 80046fa:	bf00      	nop
 80046fc:	3724      	adds	r7, #36	; 0x24
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr
 8004706:	bf00      	nop
 8004708:	58024400 	.word	0x58024400
 800470c:	03d09000 	.word	0x03d09000
 8004710:	46000000 	.word	0x46000000
 8004714:	4c742400 	.word	0x4c742400
 8004718:	4a742400 	.word	0x4a742400
 800471c:	4af42400 	.word	0x4af42400

08004720 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004720:	b480      	push	{r7}
 8004722:	b089      	sub	sp, #36	; 0x24
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004728:	4ba1      	ldr	r3, [pc, #644]	; (80049b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800472a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800472c:	f003 0303 	and.w	r3, r3, #3
 8004730:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004732:	4b9f      	ldr	r3, [pc, #636]	; (80049b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004736:	0d1b      	lsrs	r3, r3, #20
 8004738:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800473c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800473e:	4b9c      	ldr	r3, [pc, #624]	; (80049b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004742:	0a1b      	lsrs	r3, r3, #8
 8004744:	f003 0301 	and.w	r3, r3, #1
 8004748:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800474a:	4b99      	ldr	r3, [pc, #612]	; (80049b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800474c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800474e:	08db      	lsrs	r3, r3, #3
 8004750:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004754:	693a      	ldr	r2, [r7, #16]
 8004756:	fb02 f303 	mul.w	r3, r2, r3
 800475a:	ee07 3a90 	vmov	s15, r3
 800475e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004762:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	2b00      	cmp	r3, #0
 800476a:	f000 8111 	beq.w	8004990 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800476e:	69bb      	ldr	r3, [r7, #24]
 8004770:	2b02      	cmp	r3, #2
 8004772:	f000 8083 	beq.w	800487c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	2b02      	cmp	r3, #2
 800477a:	f200 80a1 	bhi.w	80048c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d003      	beq.n	800478c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	2b01      	cmp	r3, #1
 8004788:	d056      	beq.n	8004838 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800478a:	e099      	b.n	80048c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800478c:	4b88      	ldr	r3, [pc, #544]	; (80049b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 0320 	and.w	r3, r3, #32
 8004794:	2b00      	cmp	r3, #0
 8004796:	d02d      	beq.n	80047f4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004798:	4b85      	ldr	r3, [pc, #532]	; (80049b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	08db      	lsrs	r3, r3, #3
 800479e:	f003 0303 	and.w	r3, r3, #3
 80047a2:	4a84      	ldr	r2, [pc, #528]	; (80049b4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80047a4:	fa22 f303 	lsr.w	r3, r2, r3
 80047a8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	ee07 3a90 	vmov	s15, r3
 80047b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	ee07 3a90 	vmov	s15, r3
 80047ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047c2:	4b7b      	ldr	r3, [pc, #492]	; (80049b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047ca:	ee07 3a90 	vmov	s15, r3
 80047ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80047d6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80049b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80047da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047ee:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80047f2:	e087      	b.n	8004904 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	ee07 3a90 	vmov	s15, r3
 80047fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047fe:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80049bc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004802:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004806:	4b6a      	ldr	r3, [pc, #424]	; (80049b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800480e:	ee07 3a90 	vmov	s15, r3
 8004812:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004816:	ed97 6a03 	vldr	s12, [r7, #12]
 800481a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80049b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800481e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004822:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004826:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800482a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800482e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004832:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004836:	e065      	b.n	8004904 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	ee07 3a90 	vmov	s15, r3
 800483e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004842:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80049c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004846:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800484a:	4b59      	ldr	r3, [pc, #356]	; (80049b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800484c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004852:	ee07 3a90 	vmov	s15, r3
 8004856:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800485a:	ed97 6a03 	vldr	s12, [r7, #12]
 800485e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80049b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004862:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004866:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800486a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800486e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004872:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004876:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800487a:	e043      	b.n	8004904 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	ee07 3a90 	vmov	s15, r3
 8004882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004886:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80049c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800488a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800488e:	4b48      	ldr	r3, [pc, #288]	; (80049b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004892:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004896:	ee07 3a90 	vmov	s15, r3
 800489a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800489e:	ed97 6a03 	vldr	s12, [r7, #12]
 80048a2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80049b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80048a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80048be:	e021      	b.n	8004904 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	ee07 3a90 	vmov	s15, r3
 80048c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048ca:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80049c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80048ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048d2:	4b37      	ldr	r3, [pc, #220]	; (80049b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048da:	ee07 3a90 	vmov	s15, r3
 80048de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80048e6:	eddf 5a34 	vldr	s11, [pc, #208]	; 80049b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80048ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004902:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004904:	4b2a      	ldr	r3, [pc, #168]	; (80049b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004908:	0a5b      	lsrs	r3, r3, #9
 800490a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800490e:	ee07 3a90 	vmov	s15, r3
 8004912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004916:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800491a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800491e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004922:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004926:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800492a:	ee17 2a90 	vmov	r2, s15
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004932:	4b1f      	ldr	r3, [pc, #124]	; (80049b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004936:	0c1b      	lsrs	r3, r3, #16
 8004938:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800493c:	ee07 3a90 	vmov	s15, r3
 8004940:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004944:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004948:	ee37 7a87 	vadd.f32	s14, s15, s14
 800494c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004950:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004954:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004958:	ee17 2a90 	vmov	r2, s15
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004960:	4b13      	ldr	r3, [pc, #76]	; (80049b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004964:	0e1b      	lsrs	r3, r3, #24
 8004966:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800496a:	ee07 3a90 	vmov	s15, r3
 800496e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004972:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004976:	ee37 7a87 	vadd.f32	s14, s15, s14
 800497a:	edd7 6a07 	vldr	s13, [r7, #28]
 800497e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004982:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004986:	ee17 2a90 	vmov	r2, s15
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800498e:	e008      	b.n	80049a2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	609a      	str	r2, [r3, #8]
}
 80049a2:	bf00      	nop
 80049a4:	3724      	adds	r7, #36	; 0x24
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr
 80049ae:	bf00      	nop
 80049b0:	58024400 	.word	0x58024400
 80049b4:	03d09000 	.word	0x03d09000
 80049b8:	46000000 	.word	0x46000000
 80049bc:	4c742400 	.word	0x4c742400
 80049c0:	4a742400 	.word	0x4a742400
 80049c4:	4af42400 	.word	0x4af42400

080049c8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b084      	sub	sp, #16
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80049d2:	2300      	movs	r3, #0
 80049d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80049d6:	4b53      	ldr	r3, [pc, #332]	; (8004b24 <RCCEx_PLL2_Config+0x15c>)
 80049d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049da:	f003 0303 	and.w	r3, r3, #3
 80049de:	2b03      	cmp	r3, #3
 80049e0:	d101      	bne.n	80049e6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e099      	b.n	8004b1a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80049e6:	4b4f      	ldr	r3, [pc, #316]	; (8004b24 <RCCEx_PLL2_Config+0x15c>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a4e      	ldr	r2, [pc, #312]	; (8004b24 <RCCEx_PLL2_Config+0x15c>)
 80049ec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80049f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049f2:	f7fd fbbd 	bl	8002170 <HAL_GetTick>
 80049f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80049f8:	e008      	b.n	8004a0c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80049fa:	f7fd fbb9 	bl	8002170 <HAL_GetTick>
 80049fe:	4602      	mov	r2, r0
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	1ad3      	subs	r3, r2, r3
 8004a04:	2b02      	cmp	r3, #2
 8004a06:	d901      	bls.n	8004a0c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004a08:	2303      	movs	r3, #3
 8004a0a:	e086      	b.n	8004b1a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004a0c:	4b45      	ldr	r3, [pc, #276]	; (8004b24 <RCCEx_PLL2_Config+0x15c>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d1f0      	bne.n	80049fa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004a18:	4b42      	ldr	r3, [pc, #264]	; (8004b24 <RCCEx_PLL2_Config+0x15c>)
 8004a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a1c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	031b      	lsls	r3, r3, #12
 8004a26:	493f      	ldr	r1, [pc, #252]	; (8004b24 <RCCEx_PLL2_Config+0x15c>)
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	628b      	str	r3, [r1, #40]	; 0x28
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	3b01      	subs	r3, #1
 8004a32:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	025b      	lsls	r3, r3, #9
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	431a      	orrs	r2, r3
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	3b01      	subs	r3, #1
 8004a48:	041b      	lsls	r3, r3, #16
 8004a4a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004a4e:	431a      	orrs	r2, r3
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	691b      	ldr	r3, [r3, #16]
 8004a54:	3b01      	subs	r3, #1
 8004a56:	061b      	lsls	r3, r3, #24
 8004a58:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004a5c:	4931      	ldr	r1, [pc, #196]	; (8004b24 <RCCEx_PLL2_Config+0x15c>)
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004a62:	4b30      	ldr	r3, [pc, #192]	; (8004b24 <RCCEx_PLL2_Config+0x15c>)
 8004a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a66:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	695b      	ldr	r3, [r3, #20]
 8004a6e:	492d      	ldr	r1, [pc, #180]	; (8004b24 <RCCEx_PLL2_Config+0x15c>)
 8004a70:	4313      	orrs	r3, r2
 8004a72:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004a74:	4b2b      	ldr	r3, [pc, #172]	; (8004b24 <RCCEx_PLL2_Config+0x15c>)
 8004a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a78:	f023 0220 	bic.w	r2, r3, #32
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	699b      	ldr	r3, [r3, #24]
 8004a80:	4928      	ldr	r1, [pc, #160]	; (8004b24 <RCCEx_PLL2_Config+0x15c>)
 8004a82:	4313      	orrs	r3, r2
 8004a84:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004a86:	4b27      	ldr	r3, [pc, #156]	; (8004b24 <RCCEx_PLL2_Config+0x15c>)
 8004a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a8a:	4a26      	ldr	r2, [pc, #152]	; (8004b24 <RCCEx_PLL2_Config+0x15c>)
 8004a8c:	f023 0310 	bic.w	r3, r3, #16
 8004a90:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004a92:	4b24      	ldr	r3, [pc, #144]	; (8004b24 <RCCEx_PLL2_Config+0x15c>)
 8004a94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a96:	4b24      	ldr	r3, [pc, #144]	; (8004b28 <RCCEx_PLL2_Config+0x160>)
 8004a98:	4013      	ands	r3, r2
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	69d2      	ldr	r2, [r2, #28]
 8004a9e:	00d2      	lsls	r2, r2, #3
 8004aa0:	4920      	ldr	r1, [pc, #128]	; (8004b24 <RCCEx_PLL2_Config+0x15c>)
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004aa6:	4b1f      	ldr	r3, [pc, #124]	; (8004b24 <RCCEx_PLL2_Config+0x15c>)
 8004aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aaa:	4a1e      	ldr	r2, [pc, #120]	; (8004b24 <RCCEx_PLL2_Config+0x15c>)
 8004aac:	f043 0310 	orr.w	r3, r3, #16
 8004ab0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d106      	bne.n	8004ac6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004ab8:	4b1a      	ldr	r3, [pc, #104]	; (8004b24 <RCCEx_PLL2_Config+0x15c>)
 8004aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004abc:	4a19      	ldr	r2, [pc, #100]	; (8004b24 <RCCEx_PLL2_Config+0x15c>)
 8004abe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ac2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004ac4:	e00f      	b.n	8004ae6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d106      	bne.n	8004ada <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004acc:	4b15      	ldr	r3, [pc, #84]	; (8004b24 <RCCEx_PLL2_Config+0x15c>)
 8004ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad0:	4a14      	ldr	r2, [pc, #80]	; (8004b24 <RCCEx_PLL2_Config+0x15c>)
 8004ad2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ad6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004ad8:	e005      	b.n	8004ae6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004ada:	4b12      	ldr	r3, [pc, #72]	; (8004b24 <RCCEx_PLL2_Config+0x15c>)
 8004adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ade:	4a11      	ldr	r2, [pc, #68]	; (8004b24 <RCCEx_PLL2_Config+0x15c>)
 8004ae0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004ae4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004ae6:	4b0f      	ldr	r3, [pc, #60]	; (8004b24 <RCCEx_PLL2_Config+0x15c>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a0e      	ldr	r2, [pc, #56]	; (8004b24 <RCCEx_PLL2_Config+0x15c>)
 8004aec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004af0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004af2:	f7fd fb3d 	bl	8002170 <HAL_GetTick>
 8004af6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004af8:	e008      	b.n	8004b0c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004afa:	f7fd fb39 	bl	8002170 <HAL_GetTick>
 8004afe:	4602      	mov	r2, r0
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	1ad3      	subs	r3, r2, r3
 8004b04:	2b02      	cmp	r3, #2
 8004b06:	d901      	bls.n	8004b0c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004b08:	2303      	movs	r3, #3
 8004b0a:	e006      	b.n	8004b1a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004b0c:	4b05      	ldr	r3, [pc, #20]	; (8004b24 <RCCEx_PLL2_Config+0x15c>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d0f0      	beq.n	8004afa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3710      	adds	r7, #16
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	58024400 	.word	0x58024400
 8004b28:	ffff0007 	.word	0xffff0007

08004b2c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b084      	sub	sp, #16
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b36:	2300      	movs	r3, #0
 8004b38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004b3a:	4b53      	ldr	r3, [pc, #332]	; (8004c88 <RCCEx_PLL3_Config+0x15c>)
 8004b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b3e:	f003 0303 	and.w	r3, r3, #3
 8004b42:	2b03      	cmp	r3, #3
 8004b44:	d101      	bne.n	8004b4a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e099      	b.n	8004c7e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004b4a:	4b4f      	ldr	r3, [pc, #316]	; (8004c88 <RCCEx_PLL3_Config+0x15c>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a4e      	ldr	r2, [pc, #312]	; (8004c88 <RCCEx_PLL3_Config+0x15c>)
 8004b50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b56:	f7fd fb0b 	bl	8002170 <HAL_GetTick>
 8004b5a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004b5c:	e008      	b.n	8004b70 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004b5e:	f7fd fb07 	bl	8002170 <HAL_GetTick>
 8004b62:	4602      	mov	r2, r0
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	1ad3      	subs	r3, r2, r3
 8004b68:	2b02      	cmp	r3, #2
 8004b6a:	d901      	bls.n	8004b70 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004b6c:	2303      	movs	r3, #3
 8004b6e:	e086      	b.n	8004c7e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004b70:	4b45      	ldr	r3, [pc, #276]	; (8004c88 <RCCEx_PLL3_Config+0x15c>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d1f0      	bne.n	8004b5e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004b7c:	4b42      	ldr	r3, [pc, #264]	; (8004c88 <RCCEx_PLL3_Config+0x15c>)
 8004b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b80:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	051b      	lsls	r3, r3, #20
 8004b8a:	493f      	ldr	r1, [pc, #252]	; (8004c88 <RCCEx_PLL3_Config+0x15c>)
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	628b      	str	r3, [r1, #40]	; 0x28
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	3b01      	subs	r3, #1
 8004b96:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	3b01      	subs	r3, #1
 8004ba0:	025b      	lsls	r3, r3, #9
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	431a      	orrs	r2, r3
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	3b01      	subs	r3, #1
 8004bac:	041b      	lsls	r3, r3, #16
 8004bae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004bb2:	431a      	orrs	r2, r3
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	691b      	ldr	r3, [r3, #16]
 8004bb8:	3b01      	subs	r3, #1
 8004bba:	061b      	lsls	r3, r3, #24
 8004bbc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004bc0:	4931      	ldr	r1, [pc, #196]	; (8004c88 <RCCEx_PLL3_Config+0x15c>)
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004bc6:	4b30      	ldr	r3, [pc, #192]	; (8004c88 <RCCEx_PLL3_Config+0x15c>)
 8004bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	695b      	ldr	r3, [r3, #20]
 8004bd2:	492d      	ldr	r1, [pc, #180]	; (8004c88 <RCCEx_PLL3_Config+0x15c>)
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004bd8:	4b2b      	ldr	r3, [pc, #172]	; (8004c88 <RCCEx_PLL3_Config+0x15c>)
 8004bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bdc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	699b      	ldr	r3, [r3, #24]
 8004be4:	4928      	ldr	r1, [pc, #160]	; (8004c88 <RCCEx_PLL3_Config+0x15c>)
 8004be6:	4313      	orrs	r3, r2
 8004be8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004bea:	4b27      	ldr	r3, [pc, #156]	; (8004c88 <RCCEx_PLL3_Config+0x15c>)
 8004bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bee:	4a26      	ldr	r2, [pc, #152]	; (8004c88 <RCCEx_PLL3_Config+0x15c>)
 8004bf0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bf4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004bf6:	4b24      	ldr	r3, [pc, #144]	; (8004c88 <RCCEx_PLL3_Config+0x15c>)
 8004bf8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bfa:	4b24      	ldr	r3, [pc, #144]	; (8004c8c <RCCEx_PLL3_Config+0x160>)
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	69d2      	ldr	r2, [r2, #28]
 8004c02:	00d2      	lsls	r2, r2, #3
 8004c04:	4920      	ldr	r1, [pc, #128]	; (8004c88 <RCCEx_PLL3_Config+0x15c>)
 8004c06:	4313      	orrs	r3, r2
 8004c08:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004c0a:	4b1f      	ldr	r3, [pc, #124]	; (8004c88 <RCCEx_PLL3_Config+0x15c>)
 8004c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c0e:	4a1e      	ldr	r2, [pc, #120]	; (8004c88 <RCCEx_PLL3_Config+0x15c>)
 8004c10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c14:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d106      	bne.n	8004c2a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004c1c:	4b1a      	ldr	r3, [pc, #104]	; (8004c88 <RCCEx_PLL3_Config+0x15c>)
 8004c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c20:	4a19      	ldr	r2, [pc, #100]	; (8004c88 <RCCEx_PLL3_Config+0x15c>)
 8004c22:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004c26:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004c28:	e00f      	b.n	8004c4a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d106      	bne.n	8004c3e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004c30:	4b15      	ldr	r3, [pc, #84]	; (8004c88 <RCCEx_PLL3_Config+0x15c>)
 8004c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c34:	4a14      	ldr	r2, [pc, #80]	; (8004c88 <RCCEx_PLL3_Config+0x15c>)
 8004c36:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004c3a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004c3c:	e005      	b.n	8004c4a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004c3e:	4b12      	ldr	r3, [pc, #72]	; (8004c88 <RCCEx_PLL3_Config+0x15c>)
 8004c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c42:	4a11      	ldr	r2, [pc, #68]	; (8004c88 <RCCEx_PLL3_Config+0x15c>)
 8004c44:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c48:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004c4a:	4b0f      	ldr	r3, [pc, #60]	; (8004c88 <RCCEx_PLL3_Config+0x15c>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a0e      	ldr	r2, [pc, #56]	; (8004c88 <RCCEx_PLL3_Config+0x15c>)
 8004c50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c56:	f7fd fa8b 	bl	8002170 <HAL_GetTick>
 8004c5a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004c5c:	e008      	b.n	8004c70 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004c5e:	f7fd fa87 	bl	8002170 <HAL_GetTick>
 8004c62:	4602      	mov	r2, r0
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	1ad3      	subs	r3, r2, r3
 8004c68:	2b02      	cmp	r3, #2
 8004c6a:	d901      	bls.n	8004c70 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004c6c:	2303      	movs	r3, #3
 8004c6e:	e006      	b.n	8004c7e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004c70:	4b05      	ldr	r3, [pc, #20]	; (8004c88 <RCCEx_PLL3_Config+0x15c>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d0f0      	beq.n	8004c5e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3710      	adds	r7, #16
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	58024400 	.word	0x58024400
 8004c8c:	ffff0007 	.word	0xffff0007

08004c90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b082      	sub	sp, #8
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d101      	bne.n	8004ca2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e049      	b.n	8004d36 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d106      	bne.n	8004cbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f7fc feec 	bl	8001a94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2202      	movs	r2, #2
 8004cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	3304      	adds	r3, #4
 8004ccc:	4619      	mov	r1, r3
 8004cce:	4610      	mov	r0, r2
 8004cd0:	f001 f8d2 	bl	8005e78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d34:	2300      	movs	r3, #0
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3708      	adds	r7, #8
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
	...

08004d40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b085      	sub	sp, #20
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d001      	beq.n	8004d58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e05e      	b.n	8004e16 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2202      	movs	r2, #2
 8004d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	68da      	ldr	r2, [r3, #12]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f042 0201 	orr.w	r2, r2, #1
 8004d6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a2b      	ldr	r2, [pc, #172]	; (8004e24 <HAL_TIM_Base_Start_IT+0xe4>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d02c      	beq.n	8004dd4 <HAL_TIM_Base_Start_IT+0x94>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d82:	d027      	beq.n	8004dd4 <HAL_TIM_Base_Start_IT+0x94>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a27      	ldr	r2, [pc, #156]	; (8004e28 <HAL_TIM_Base_Start_IT+0xe8>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d022      	beq.n	8004dd4 <HAL_TIM_Base_Start_IT+0x94>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a26      	ldr	r2, [pc, #152]	; (8004e2c <HAL_TIM_Base_Start_IT+0xec>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d01d      	beq.n	8004dd4 <HAL_TIM_Base_Start_IT+0x94>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a24      	ldr	r2, [pc, #144]	; (8004e30 <HAL_TIM_Base_Start_IT+0xf0>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d018      	beq.n	8004dd4 <HAL_TIM_Base_Start_IT+0x94>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a23      	ldr	r2, [pc, #140]	; (8004e34 <HAL_TIM_Base_Start_IT+0xf4>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d013      	beq.n	8004dd4 <HAL_TIM_Base_Start_IT+0x94>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a21      	ldr	r2, [pc, #132]	; (8004e38 <HAL_TIM_Base_Start_IT+0xf8>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d00e      	beq.n	8004dd4 <HAL_TIM_Base_Start_IT+0x94>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a20      	ldr	r2, [pc, #128]	; (8004e3c <HAL_TIM_Base_Start_IT+0xfc>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d009      	beq.n	8004dd4 <HAL_TIM_Base_Start_IT+0x94>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a1e      	ldr	r2, [pc, #120]	; (8004e40 <HAL_TIM_Base_Start_IT+0x100>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d004      	beq.n	8004dd4 <HAL_TIM_Base_Start_IT+0x94>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a1d      	ldr	r2, [pc, #116]	; (8004e44 <HAL_TIM_Base_Start_IT+0x104>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d115      	bne.n	8004e00 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	689a      	ldr	r2, [r3, #8]
 8004dda:	4b1b      	ldr	r3, [pc, #108]	; (8004e48 <HAL_TIM_Base_Start_IT+0x108>)
 8004ddc:	4013      	ands	r3, r2
 8004dde:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2b06      	cmp	r3, #6
 8004de4:	d015      	beq.n	8004e12 <HAL_TIM_Base_Start_IT+0xd2>
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dec:	d011      	beq.n	8004e12 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f042 0201 	orr.w	r2, r2, #1
 8004dfc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dfe:	e008      	b.n	8004e12 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f042 0201 	orr.w	r2, r2, #1
 8004e0e:	601a      	str	r2, [r3, #0]
 8004e10:	e000      	b.n	8004e14 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e12:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004e14:	2300      	movs	r3, #0
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3714      	adds	r7, #20
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr
 8004e22:	bf00      	nop
 8004e24:	40010000 	.word	0x40010000
 8004e28:	40000400 	.word	0x40000400
 8004e2c:	40000800 	.word	0x40000800
 8004e30:	40000c00 	.word	0x40000c00
 8004e34:	40010400 	.word	0x40010400
 8004e38:	40001800 	.word	0x40001800
 8004e3c:	40014000 	.word	0x40014000
 8004e40:	4000e000 	.word	0x4000e000
 8004e44:	4000e400 	.word	0x4000e400
 8004e48:	00010007 	.word	0x00010007

08004e4c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b082      	sub	sp, #8
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d101      	bne.n	8004e5e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e049      	b.n	8004ef2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d106      	bne.n	8004e78 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f000 f841 	bl	8004efa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2202      	movs	r2, #2
 8004e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	3304      	adds	r3, #4
 8004e88:	4619      	mov	r1, r3
 8004e8a:	4610      	mov	r0, r2
 8004e8c:	f000 fff4 	bl	8005e78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2201      	movs	r2, #1
 8004e94:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ef0:	2300      	movs	r3, #0
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3708      	adds	r7, #8
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}

08004efa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004efa:	b480      	push	{r7}
 8004efc:	b083      	sub	sp, #12
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004f02:	bf00      	nop
 8004f04:	370c      	adds	r7, #12
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr
	...

08004f10 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b084      	sub	sp, #16
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d109      	bne.n	8004f34 <HAL_TIM_PWM_Start+0x24>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	bf14      	ite	ne
 8004f2c:	2301      	movne	r3, #1
 8004f2e:	2300      	moveq	r3, #0
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	e03c      	b.n	8004fae <HAL_TIM_PWM_Start+0x9e>
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	2b04      	cmp	r3, #4
 8004f38:	d109      	bne.n	8004f4e <HAL_TIM_PWM_Start+0x3e>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	bf14      	ite	ne
 8004f46:	2301      	movne	r3, #1
 8004f48:	2300      	moveq	r3, #0
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	e02f      	b.n	8004fae <HAL_TIM_PWM_Start+0x9e>
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	2b08      	cmp	r3, #8
 8004f52:	d109      	bne.n	8004f68 <HAL_TIM_PWM_Start+0x58>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	bf14      	ite	ne
 8004f60:	2301      	movne	r3, #1
 8004f62:	2300      	moveq	r3, #0
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	e022      	b.n	8004fae <HAL_TIM_PWM_Start+0x9e>
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	2b0c      	cmp	r3, #12
 8004f6c:	d109      	bne.n	8004f82 <HAL_TIM_PWM_Start+0x72>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	bf14      	ite	ne
 8004f7a:	2301      	movne	r3, #1
 8004f7c:	2300      	moveq	r3, #0
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	e015      	b.n	8004fae <HAL_TIM_PWM_Start+0x9e>
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	2b10      	cmp	r3, #16
 8004f86:	d109      	bne.n	8004f9c <HAL_TIM_PWM_Start+0x8c>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	bf14      	ite	ne
 8004f94:	2301      	movne	r3, #1
 8004f96:	2300      	moveq	r3, #0
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	e008      	b.n	8004fae <HAL_TIM_PWM_Start+0x9e>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	bf14      	ite	ne
 8004fa8:	2301      	movne	r3, #1
 8004faa:	2300      	moveq	r3, #0
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d001      	beq.n	8004fb6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e0ab      	b.n	800510e <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d104      	bne.n	8004fc6 <HAL_TIM_PWM_Start+0xb6>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2202      	movs	r2, #2
 8004fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fc4:	e023      	b.n	800500e <HAL_TIM_PWM_Start+0xfe>
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	2b04      	cmp	r3, #4
 8004fca:	d104      	bne.n	8004fd6 <HAL_TIM_PWM_Start+0xc6>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2202      	movs	r2, #2
 8004fd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fd4:	e01b      	b.n	800500e <HAL_TIM_PWM_Start+0xfe>
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	2b08      	cmp	r3, #8
 8004fda:	d104      	bne.n	8004fe6 <HAL_TIM_PWM_Start+0xd6>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2202      	movs	r2, #2
 8004fe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fe4:	e013      	b.n	800500e <HAL_TIM_PWM_Start+0xfe>
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	2b0c      	cmp	r3, #12
 8004fea:	d104      	bne.n	8004ff6 <HAL_TIM_PWM_Start+0xe6>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2202      	movs	r2, #2
 8004ff0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ff4:	e00b      	b.n	800500e <HAL_TIM_PWM_Start+0xfe>
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	2b10      	cmp	r3, #16
 8004ffa:	d104      	bne.n	8005006 <HAL_TIM_PWM_Start+0xf6>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2202      	movs	r2, #2
 8005000:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005004:	e003      	b.n	800500e <HAL_TIM_PWM_Start+0xfe>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2202      	movs	r2, #2
 800500a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	2201      	movs	r2, #1
 8005014:	6839      	ldr	r1, [r7, #0]
 8005016:	4618      	mov	r0, r3
 8005018:	f001 fc7e 	bl	8006918 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a3d      	ldr	r2, [pc, #244]	; (8005118 <HAL_TIM_PWM_Start+0x208>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d013      	beq.n	800504e <HAL_TIM_PWM_Start+0x13e>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a3c      	ldr	r2, [pc, #240]	; (800511c <HAL_TIM_PWM_Start+0x20c>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d00e      	beq.n	800504e <HAL_TIM_PWM_Start+0x13e>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a3a      	ldr	r2, [pc, #232]	; (8005120 <HAL_TIM_PWM_Start+0x210>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d009      	beq.n	800504e <HAL_TIM_PWM_Start+0x13e>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a39      	ldr	r2, [pc, #228]	; (8005124 <HAL_TIM_PWM_Start+0x214>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d004      	beq.n	800504e <HAL_TIM_PWM_Start+0x13e>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a37      	ldr	r2, [pc, #220]	; (8005128 <HAL_TIM_PWM_Start+0x218>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d101      	bne.n	8005052 <HAL_TIM_PWM_Start+0x142>
 800504e:	2301      	movs	r3, #1
 8005050:	e000      	b.n	8005054 <HAL_TIM_PWM_Start+0x144>
 8005052:	2300      	movs	r3, #0
 8005054:	2b00      	cmp	r3, #0
 8005056:	d007      	beq.n	8005068 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005066:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a2a      	ldr	r2, [pc, #168]	; (8005118 <HAL_TIM_PWM_Start+0x208>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d02c      	beq.n	80050cc <HAL_TIM_PWM_Start+0x1bc>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800507a:	d027      	beq.n	80050cc <HAL_TIM_PWM_Start+0x1bc>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a2a      	ldr	r2, [pc, #168]	; (800512c <HAL_TIM_PWM_Start+0x21c>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d022      	beq.n	80050cc <HAL_TIM_PWM_Start+0x1bc>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a29      	ldr	r2, [pc, #164]	; (8005130 <HAL_TIM_PWM_Start+0x220>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d01d      	beq.n	80050cc <HAL_TIM_PWM_Start+0x1bc>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a27      	ldr	r2, [pc, #156]	; (8005134 <HAL_TIM_PWM_Start+0x224>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d018      	beq.n	80050cc <HAL_TIM_PWM_Start+0x1bc>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a1f      	ldr	r2, [pc, #124]	; (800511c <HAL_TIM_PWM_Start+0x20c>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d013      	beq.n	80050cc <HAL_TIM_PWM_Start+0x1bc>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a23      	ldr	r2, [pc, #140]	; (8005138 <HAL_TIM_PWM_Start+0x228>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d00e      	beq.n	80050cc <HAL_TIM_PWM_Start+0x1bc>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a1b      	ldr	r2, [pc, #108]	; (8005120 <HAL_TIM_PWM_Start+0x210>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d009      	beq.n	80050cc <HAL_TIM_PWM_Start+0x1bc>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a1f      	ldr	r2, [pc, #124]	; (800513c <HAL_TIM_PWM_Start+0x22c>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d004      	beq.n	80050cc <HAL_TIM_PWM_Start+0x1bc>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a1e      	ldr	r2, [pc, #120]	; (8005140 <HAL_TIM_PWM_Start+0x230>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d115      	bne.n	80050f8 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	689a      	ldr	r2, [r3, #8]
 80050d2:	4b1c      	ldr	r3, [pc, #112]	; (8005144 <HAL_TIM_PWM_Start+0x234>)
 80050d4:	4013      	ands	r3, r2
 80050d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2b06      	cmp	r3, #6
 80050dc:	d015      	beq.n	800510a <HAL_TIM_PWM_Start+0x1fa>
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050e4:	d011      	beq.n	800510a <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f042 0201 	orr.w	r2, r2, #1
 80050f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050f6:	e008      	b.n	800510a <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f042 0201 	orr.w	r2, r2, #1
 8005106:	601a      	str	r2, [r3, #0]
 8005108:	e000      	b.n	800510c <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800510a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800510c:	2300      	movs	r3, #0
}
 800510e:	4618      	mov	r0, r3
 8005110:	3710      	adds	r7, #16
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	40010000 	.word	0x40010000
 800511c:	40010400 	.word	0x40010400
 8005120:	40014000 	.word	0x40014000
 8005124:	40014400 	.word	0x40014400
 8005128:	40014800 	.word	0x40014800
 800512c:	40000400 	.word	0x40000400
 8005130:	40000800 	.word	0x40000800
 8005134:	40000c00 	.word	0x40000c00
 8005138:	40001800 	.word	0x40001800
 800513c:	4000e000 	.word	0x4000e000
 8005140:	4000e400 	.word	0x4000e400
 8005144:	00010007 	.word	0x00010007

08005148 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b082      	sub	sp, #8
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d101      	bne.n	800515a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	e049      	b.n	80051ee <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005160:	b2db      	uxtb	r3, r3
 8005162:	2b00      	cmp	r3, #0
 8005164:	d106      	bne.n	8005174 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f000 f841 	bl	80051f6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2202      	movs	r2, #2
 8005178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	3304      	adds	r3, #4
 8005184:	4619      	mov	r1, r3
 8005186:	4610      	mov	r0, r2
 8005188:	f000 fe76 	bl	8005e78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2201      	movs	r2, #1
 80051a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2201      	movs	r2, #1
 80051b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2201      	movs	r2, #1
 80051b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2201      	movs	r2, #1
 80051c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2201      	movs	r2, #1
 80051c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2201      	movs	r2, #1
 80051d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051ec:	2300      	movs	r3, #0
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3708      	adds	r7, #8
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}

080051f6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80051f6:	b480      	push	{r7}
 80051f8:	b083      	sub	sp, #12
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80051fe:	bf00      	nop
 8005200:	370c      	adds	r7, #12
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr
	...

0800520c <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d104      	bne.n	8005226 <HAL_TIM_IC_Start+0x1a>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005222:	b2db      	uxtb	r3, r3
 8005224:	e023      	b.n	800526e <HAL_TIM_IC_Start+0x62>
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	2b04      	cmp	r3, #4
 800522a:	d104      	bne.n	8005236 <HAL_TIM_IC_Start+0x2a>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005232:	b2db      	uxtb	r3, r3
 8005234:	e01b      	b.n	800526e <HAL_TIM_IC_Start+0x62>
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	2b08      	cmp	r3, #8
 800523a:	d104      	bne.n	8005246 <HAL_TIM_IC_Start+0x3a>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005242:	b2db      	uxtb	r3, r3
 8005244:	e013      	b.n	800526e <HAL_TIM_IC_Start+0x62>
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	2b0c      	cmp	r3, #12
 800524a:	d104      	bne.n	8005256 <HAL_TIM_IC_Start+0x4a>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005252:	b2db      	uxtb	r3, r3
 8005254:	e00b      	b.n	800526e <HAL_TIM_IC_Start+0x62>
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	2b10      	cmp	r3, #16
 800525a:	d104      	bne.n	8005266 <HAL_TIM_IC_Start+0x5a>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005262:	b2db      	uxtb	r3, r3
 8005264:	e003      	b.n	800526e <HAL_TIM_IC_Start+0x62>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800526c:	b2db      	uxtb	r3, r3
 800526e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d104      	bne.n	8005280 <HAL_TIM_IC_Start+0x74>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800527c:	b2db      	uxtb	r3, r3
 800527e:	e013      	b.n	80052a8 <HAL_TIM_IC_Start+0x9c>
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	2b04      	cmp	r3, #4
 8005284:	d104      	bne.n	8005290 <HAL_TIM_IC_Start+0x84>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800528c:	b2db      	uxtb	r3, r3
 800528e:	e00b      	b.n	80052a8 <HAL_TIM_IC_Start+0x9c>
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	2b08      	cmp	r3, #8
 8005294:	d104      	bne.n	80052a0 <HAL_TIM_IC_Start+0x94>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800529c:	b2db      	uxtb	r3, r3
 800529e:	e003      	b.n	80052a8 <HAL_TIM_IC_Start+0x9c>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80052a6:	b2db      	uxtb	r3, r3
 80052a8:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80052aa:	7bfb      	ldrb	r3, [r7, #15]
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d102      	bne.n	80052b6 <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80052b0:	7bbb      	ldrb	r3, [r7, #14]
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d001      	beq.n	80052ba <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	e0a1      	b.n	80053fe <HAL_TIM_IC_Start+0x1f2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d104      	bne.n	80052ca <HAL_TIM_IC_Start+0xbe>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2202      	movs	r2, #2
 80052c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052c8:	e023      	b.n	8005312 <HAL_TIM_IC_Start+0x106>
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	2b04      	cmp	r3, #4
 80052ce:	d104      	bne.n	80052da <HAL_TIM_IC_Start+0xce>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2202      	movs	r2, #2
 80052d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052d8:	e01b      	b.n	8005312 <HAL_TIM_IC_Start+0x106>
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	2b08      	cmp	r3, #8
 80052de:	d104      	bne.n	80052ea <HAL_TIM_IC_Start+0xde>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2202      	movs	r2, #2
 80052e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052e8:	e013      	b.n	8005312 <HAL_TIM_IC_Start+0x106>
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	2b0c      	cmp	r3, #12
 80052ee:	d104      	bne.n	80052fa <HAL_TIM_IC_Start+0xee>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2202      	movs	r2, #2
 80052f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80052f8:	e00b      	b.n	8005312 <HAL_TIM_IC_Start+0x106>
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	2b10      	cmp	r3, #16
 80052fe:	d104      	bne.n	800530a <HAL_TIM_IC_Start+0xfe>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2202      	movs	r2, #2
 8005304:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005308:	e003      	b.n	8005312 <HAL_TIM_IC_Start+0x106>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2202      	movs	r2, #2
 800530e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d104      	bne.n	8005322 <HAL_TIM_IC_Start+0x116>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2202      	movs	r2, #2
 800531c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005320:	e013      	b.n	800534a <HAL_TIM_IC_Start+0x13e>
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	2b04      	cmp	r3, #4
 8005326:	d104      	bne.n	8005332 <HAL_TIM_IC_Start+0x126>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2202      	movs	r2, #2
 800532c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005330:	e00b      	b.n	800534a <HAL_TIM_IC_Start+0x13e>
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	2b08      	cmp	r3, #8
 8005336:	d104      	bne.n	8005342 <HAL_TIM_IC_Start+0x136>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2202      	movs	r2, #2
 800533c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005340:	e003      	b.n	800534a <HAL_TIM_IC_Start+0x13e>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2202      	movs	r2, #2
 8005346:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	2201      	movs	r2, #1
 8005350:	6839      	ldr	r1, [r7, #0]
 8005352:	4618      	mov	r0, r3
 8005354:	f001 fae0 	bl	8006918 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a2a      	ldr	r2, [pc, #168]	; (8005408 <HAL_TIM_IC_Start+0x1fc>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d02c      	beq.n	80053bc <HAL_TIM_IC_Start+0x1b0>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800536a:	d027      	beq.n	80053bc <HAL_TIM_IC_Start+0x1b0>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a26      	ldr	r2, [pc, #152]	; (800540c <HAL_TIM_IC_Start+0x200>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d022      	beq.n	80053bc <HAL_TIM_IC_Start+0x1b0>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a25      	ldr	r2, [pc, #148]	; (8005410 <HAL_TIM_IC_Start+0x204>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d01d      	beq.n	80053bc <HAL_TIM_IC_Start+0x1b0>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a23      	ldr	r2, [pc, #140]	; (8005414 <HAL_TIM_IC_Start+0x208>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d018      	beq.n	80053bc <HAL_TIM_IC_Start+0x1b0>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a22      	ldr	r2, [pc, #136]	; (8005418 <HAL_TIM_IC_Start+0x20c>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d013      	beq.n	80053bc <HAL_TIM_IC_Start+0x1b0>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a20      	ldr	r2, [pc, #128]	; (800541c <HAL_TIM_IC_Start+0x210>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d00e      	beq.n	80053bc <HAL_TIM_IC_Start+0x1b0>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a1f      	ldr	r2, [pc, #124]	; (8005420 <HAL_TIM_IC_Start+0x214>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d009      	beq.n	80053bc <HAL_TIM_IC_Start+0x1b0>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a1d      	ldr	r2, [pc, #116]	; (8005424 <HAL_TIM_IC_Start+0x218>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d004      	beq.n	80053bc <HAL_TIM_IC_Start+0x1b0>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a1c      	ldr	r2, [pc, #112]	; (8005428 <HAL_TIM_IC_Start+0x21c>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d115      	bne.n	80053e8 <HAL_TIM_IC_Start+0x1dc>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	689a      	ldr	r2, [r3, #8]
 80053c2:	4b1a      	ldr	r3, [pc, #104]	; (800542c <HAL_TIM_IC_Start+0x220>)
 80053c4:	4013      	ands	r3, r2
 80053c6:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	2b06      	cmp	r3, #6
 80053cc:	d015      	beq.n	80053fa <HAL_TIM_IC_Start+0x1ee>
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053d4:	d011      	beq.n	80053fa <HAL_TIM_IC_Start+0x1ee>
    {
      __HAL_TIM_ENABLE(htim);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f042 0201 	orr.w	r2, r2, #1
 80053e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053e6:	e008      	b.n	80053fa <HAL_TIM_IC_Start+0x1ee>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f042 0201 	orr.w	r2, r2, #1
 80053f6:	601a      	str	r2, [r3, #0]
 80053f8:	e000      	b.n	80053fc <HAL_TIM_IC_Start+0x1f0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053fa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80053fc:	2300      	movs	r3, #0
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3710      	adds	r7, #16
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
 8005406:	bf00      	nop
 8005408:	40010000 	.word	0x40010000
 800540c:	40000400 	.word	0x40000400
 8005410:	40000800 	.word	0x40000800
 8005414:	40000c00 	.word	0x40000c00
 8005418:	40010400 	.word	0x40010400
 800541c:	40001800 	.word	0x40001800
 8005420:	40014000 	.word	0x40014000
 8005424:	4000e000 	.word	0x4000e000
 8005428:	4000e400 	.word	0x4000e400
 800542c:	00010007 	.word	0x00010007

08005430 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b086      	sub	sp, #24
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d101      	bne.n	8005444 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	e08f      	b.n	8005564 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800544a:	b2db      	uxtb	r3, r3
 800544c:	2b00      	cmp	r3, #0
 800544e:	d106      	bne.n	800545e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f7fc fbef 	bl	8001c3c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2202      	movs	r2, #2
 8005462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	6899      	ldr	r1, [r3, #8]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	4b3e      	ldr	r3, [pc, #248]	; (800556c <HAL_TIM_Encoder_Init+0x13c>)
 8005472:	400b      	ands	r3, r1
 8005474:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	3304      	adds	r3, #4
 800547e:	4619      	mov	r1, r3
 8005480:	4610      	mov	r0, r2
 8005482:	f000 fcf9 	bl	8005e78 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	699b      	ldr	r3, [r3, #24]
 8005494:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	6a1b      	ldr	r3, [r3, #32]
 800549c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	697a      	ldr	r2, [r7, #20]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80054a8:	693a      	ldr	r2, [r7, #16]
 80054aa:	4b31      	ldr	r3, [pc, #196]	; (8005570 <HAL_TIM_Encoder_Init+0x140>)
 80054ac:	4013      	ands	r3, r2
 80054ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	689a      	ldr	r2, [r3, #8]
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	699b      	ldr	r3, [r3, #24]
 80054b8:	021b      	lsls	r3, r3, #8
 80054ba:	4313      	orrs	r3, r2
 80054bc:	693a      	ldr	r2, [r7, #16]
 80054be:	4313      	orrs	r3, r2
 80054c0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80054c2:	693a      	ldr	r2, [r7, #16]
 80054c4:	4b2b      	ldr	r3, [pc, #172]	; (8005574 <HAL_TIM_Encoder_Init+0x144>)
 80054c6:	4013      	ands	r3, r2
 80054c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80054ca:	693a      	ldr	r2, [r7, #16]
 80054cc:	4b2a      	ldr	r3, [pc, #168]	; (8005578 <HAL_TIM_Encoder_Init+0x148>)
 80054ce:	4013      	ands	r3, r2
 80054d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	68da      	ldr	r2, [r3, #12]
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	69db      	ldr	r3, [r3, #28]
 80054da:	021b      	lsls	r3, r3, #8
 80054dc:	4313      	orrs	r3, r2
 80054de:	693a      	ldr	r2, [r7, #16]
 80054e0:	4313      	orrs	r3, r2
 80054e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	691b      	ldr	r3, [r3, #16]
 80054e8:	011a      	lsls	r2, r3, #4
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	6a1b      	ldr	r3, [r3, #32]
 80054ee:	031b      	lsls	r3, r3, #12
 80054f0:	4313      	orrs	r3, r2
 80054f2:	693a      	ldr	r2, [r7, #16]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80054fe:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005506:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	685a      	ldr	r2, [r3, #4]
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	695b      	ldr	r3, [r3, #20]
 8005510:	011b      	lsls	r3, r3, #4
 8005512:	4313      	orrs	r3, r2
 8005514:	68fa      	ldr	r2, [r7, #12]
 8005516:	4313      	orrs	r3, r2
 8005518:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	697a      	ldr	r2, [r7, #20]
 8005520:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	693a      	ldr	r2, [r7, #16]
 8005528:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	68fa      	ldr	r2, [r7, #12]
 8005530:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2201      	movs	r2, #1
 8005536:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2201      	movs	r2, #1
 800553e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2201      	movs	r2, #1
 8005546:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2201      	movs	r2, #1
 800554e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2201      	movs	r2, #1
 8005556:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2201      	movs	r2, #1
 800555e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005562:	2300      	movs	r3, #0
}
 8005564:	4618      	mov	r0, r3
 8005566:	3718      	adds	r7, #24
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}
 800556c:	fffebff8 	.word	0xfffebff8
 8005570:	fffffcfc 	.word	0xfffffcfc
 8005574:	fffff3f3 	.word	0xfffff3f3
 8005578:	ffff0f0f 	.word	0xffff0f0f

0800557c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b084      	sub	sp, #16
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800558c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005594:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800559c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80055a4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d110      	bne.n	80055ce <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80055ac:	7bfb      	ldrb	r3, [r7, #15]
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d102      	bne.n	80055b8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80055b2:	7b7b      	ldrb	r3, [r7, #13]
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d001      	beq.n	80055bc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	e069      	b.n	8005690 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2202      	movs	r2, #2
 80055c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2202      	movs	r2, #2
 80055c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055cc:	e031      	b.n	8005632 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	2b04      	cmp	r3, #4
 80055d2:	d110      	bne.n	80055f6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80055d4:	7bbb      	ldrb	r3, [r7, #14]
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d102      	bne.n	80055e0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80055da:	7b3b      	ldrb	r3, [r7, #12]
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d001      	beq.n	80055e4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	e055      	b.n	8005690 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2202      	movs	r2, #2
 80055e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2202      	movs	r2, #2
 80055f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80055f4:	e01d      	b.n	8005632 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80055f6:	7bfb      	ldrb	r3, [r7, #15]
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d108      	bne.n	800560e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80055fc:	7bbb      	ldrb	r3, [r7, #14]
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d105      	bne.n	800560e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005602:	7b7b      	ldrb	r3, [r7, #13]
 8005604:	2b01      	cmp	r3, #1
 8005606:	d102      	bne.n	800560e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005608:	7b3b      	ldrb	r3, [r7, #12]
 800560a:	2b01      	cmp	r3, #1
 800560c:	d001      	beq.n	8005612 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e03e      	b.n	8005690 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2202      	movs	r2, #2
 8005616:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2202      	movs	r2, #2
 800561e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2202      	movs	r2, #2
 8005626:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2202      	movs	r2, #2
 800562e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d003      	beq.n	8005640 <HAL_TIM_Encoder_Start+0xc4>
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	2b04      	cmp	r3, #4
 800563c:	d008      	beq.n	8005650 <HAL_TIM_Encoder_Start+0xd4>
 800563e:	e00f      	b.n	8005660 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	2201      	movs	r2, #1
 8005646:	2100      	movs	r1, #0
 8005648:	4618      	mov	r0, r3
 800564a:	f001 f965 	bl	8006918 <TIM_CCxChannelCmd>
      break;
 800564e:	e016      	b.n	800567e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	2201      	movs	r2, #1
 8005656:	2104      	movs	r1, #4
 8005658:	4618      	mov	r0, r3
 800565a:	f001 f95d 	bl	8006918 <TIM_CCxChannelCmd>
      break;
 800565e:	e00e      	b.n	800567e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	2201      	movs	r2, #1
 8005666:	2100      	movs	r1, #0
 8005668:	4618      	mov	r0, r3
 800566a:	f001 f955 	bl	8006918 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	2201      	movs	r2, #1
 8005674:	2104      	movs	r1, #4
 8005676:	4618      	mov	r0, r3
 8005678:	f001 f94e 	bl	8006918 <TIM_CCxChannelCmd>
      break;
 800567c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f042 0201 	orr.w	r2, r2, #1
 800568c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800568e:	2300      	movs	r3, #0
}
 8005690:	4618      	mov	r0, r3
 8005692:	3710      	adds	r7, #16
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}

08005698 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b082      	sub	sp, #8
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	691b      	ldr	r3, [r3, #16]
 80056a6:	f003 0302 	and.w	r3, r3, #2
 80056aa:	2b02      	cmp	r3, #2
 80056ac:	d122      	bne.n	80056f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	f003 0302 	and.w	r3, r3, #2
 80056b8:	2b02      	cmp	r3, #2
 80056ba:	d11b      	bne.n	80056f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f06f 0202 	mvn.w	r2, #2
 80056c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2201      	movs	r2, #1
 80056ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	699b      	ldr	r3, [r3, #24]
 80056d2:	f003 0303 	and.w	r3, r3, #3
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d003      	beq.n	80056e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 fbae 	bl	8005e3c <HAL_TIM_IC_CaptureCallback>
 80056e0:	e005      	b.n	80056ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f000 fba0 	bl	8005e28 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f000 fbb1 	bl	8005e50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2200      	movs	r2, #0
 80056f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	f003 0304 	and.w	r3, r3, #4
 80056fe:	2b04      	cmp	r3, #4
 8005700:	d122      	bne.n	8005748 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	f003 0304 	and.w	r3, r3, #4
 800570c:	2b04      	cmp	r3, #4
 800570e:	d11b      	bne.n	8005748 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f06f 0204 	mvn.w	r2, #4
 8005718:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2202      	movs	r2, #2
 800571e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	699b      	ldr	r3, [r3, #24]
 8005726:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800572a:	2b00      	cmp	r3, #0
 800572c:	d003      	beq.n	8005736 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f000 fb84 	bl	8005e3c <HAL_TIM_IC_CaptureCallback>
 8005734:	e005      	b.n	8005742 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f000 fb76 	bl	8005e28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f000 fb87 	bl	8005e50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	691b      	ldr	r3, [r3, #16]
 800574e:	f003 0308 	and.w	r3, r3, #8
 8005752:	2b08      	cmp	r3, #8
 8005754:	d122      	bne.n	800579c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	f003 0308 	and.w	r3, r3, #8
 8005760:	2b08      	cmp	r3, #8
 8005762:	d11b      	bne.n	800579c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f06f 0208 	mvn.w	r2, #8
 800576c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2204      	movs	r2, #4
 8005772:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	69db      	ldr	r3, [r3, #28]
 800577a:	f003 0303 	and.w	r3, r3, #3
 800577e:	2b00      	cmp	r3, #0
 8005780:	d003      	beq.n	800578a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f000 fb5a 	bl	8005e3c <HAL_TIM_IC_CaptureCallback>
 8005788:	e005      	b.n	8005796 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f000 fb4c 	bl	8005e28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f000 fb5d 	bl	8005e50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2200      	movs	r2, #0
 800579a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	691b      	ldr	r3, [r3, #16]
 80057a2:	f003 0310 	and.w	r3, r3, #16
 80057a6:	2b10      	cmp	r3, #16
 80057a8:	d122      	bne.n	80057f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	68db      	ldr	r3, [r3, #12]
 80057b0:	f003 0310 	and.w	r3, r3, #16
 80057b4:	2b10      	cmp	r3, #16
 80057b6:	d11b      	bne.n	80057f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f06f 0210 	mvn.w	r2, #16
 80057c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2208      	movs	r2, #8
 80057c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	69db      	ldr	r3, [r3, #28]
 80057ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d003      	beq.n	80057de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f000 fb30 	bl	8005e3c <HAL_TIM_IC_CaptureCallback>
 80057dc:	e005      	b.n	80057ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 fb22 	bl	8005e28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f000 fb33 	bl	8005e50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	f003 0301 	and.w	r3, r3, #1
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d10e      	bne.n	800581c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	f003 0301 	and.w	r3, r3, #1
 8005808:	2b01      	cmp	r3, #1
 800580a:	d107      	bne.n	800581c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f06f 0201 	mvn.w	r2, #1
 8005814:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f7fc f812 	bl	8001840 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	691b      	ldr	r3, [r3, #16]
 8005822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005826:	2b80      	cmp	r3, #128	; 0x80
 8005828:	d10e      	bne.n	8005848 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	68db      	ldr	r3, [r3, #12]
 8005830:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005834:	2b80      	cmp	r3, #128	; 0x80
 8005836:	d107      	bne.n	8005848 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005840:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f001 f934 	bl	8006ab0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	691b      	ldr	r3, [r3, #16]
 800584e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005852:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005856:	d10e      	bne.n	8005876 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	68db      	ldr	r3, [r3, #12]
 800585e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005862:	2b80      	cmp	r3, #128	; 0x80
 8005864:	d107      	bne.n	8005876 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800586e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f001 f927 	bl	8006ac4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	691b      	ldr	r3, [r3, #16]
 800587c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005880:	2b40      	cmp	r3, #64	; 0x40
 8005882:	d10e      	bne.n	80058a2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800588e:	2b40      	cmp	r3, #64	; 0x40
 8005890:	d107      	bne.n	80058a2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800589a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f000 fae1 	bl	8005e64 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	691b      	ldr	r3, [r3, #16]
 80058a8:	f003 0320 	and.w	r3, r3, #32
 80058ac:	2b20      	cmp	r3, #32
 80058ae:	d10e      	bne.n	80058ce <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	f003 0320 	and.w	r3, r3, #32
 80058ba:	2b20      	cmp	r3, #32
 80058bc:	d107      	bne.n	80058ce <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f06f 0220 	mvn.w	r2, #32
 80058c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f001 f8e7 	bl	8006a9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80058ce:	bf00      	nop
 80058d0:	3708      	adds	r7, #8
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}

080058d6 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80058d6:	b580      	push	{r7, lr}
 80058d8:	b086      	sub	sp, #24
 80058da:	af00      	add	r7, sp, #0
 80058dc:	60f8      	str	r0, [r7, #12]
 80058de:	60b9      	str	r1, [r7, #8]
 80058e0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058e2:	2300      	movs	r3, #0
 80058e4:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d101      	bne.n	80058f4 <HAL_TIM_IC_ConfigChannel+0x1e>
 80058f0:	2302      	movs	r3, #2
 80058f2:	e088      	b.n	8005a06 <HAL_TIM_IC_ConfigChannel+0x130>
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2201      	movs	r2, #1
 80058f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d11b      	bne.n	800593a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	6818      	ldr	r0, [r3, #0]
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	6819      	ldr	r1, [r3, #0]
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	685a      	ldr	r2, [r3, #4]
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	68db      	ldr	r3, [r3, #12]
 8005912:	f000 fe2d 	bl	8006570 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	699a      	ldr	r2, [r3, #24]
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f022 020c 	bic.w	r2, r2, #12
 8005924:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	6999      	ldr	r1, [r3, #24]
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	689a      	ldr	r2, [r3, #8]
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	430a      	orrs	r2, r1
 8005936:	619a      	str	r2, [r3, #24]
 8005938:	e060      	b.n	80059fc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2b04      	cmp	r3, #4
 800593e:	d11c      	bne.n	800597a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	6818      	ldr	r0, [r3, #0]
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	6819      	ldr	r1, [r3, #0]
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	685a      	ldr	r2, [r3, #4]
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	f000 febd 	bl	80066ce <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	699a      	ldr	r2, [r3, #24]
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005962:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	6999      	ldr	r1, [r3, #24]
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	021a      	lsls	r2, r3, #8
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	430a      	orrs	r2, r1
 8005976:	619a      	str	r2, [r3, #24]
 8005978:	e040      	b.n	80059fc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2b08      	cmp	r3, #8
 800597e:	d11b      	bne.n	80059b8 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	6818      	ldr	r0, [r3, #0]
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	6819      	ldr	r1, [r3, #0]
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	685a      	ldr	r2, [r3, #4]
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	68db      	ldr	r3, [r3, #12]
 8005990:	f000 ff0a 	bl	80067a8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	69da      	ldr	r2, [r3, #28]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f022 020c 	bic.w	r2, r2, #12
 80059a2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	69d9      	ldr	r1, [r3, #28]
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	689a      	ldr	r2, [r3, #8]
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	430a      	orrs	r2, r1
 80059b4:	61da      	str	r2, [r3, #28]
 80059b6:	e021      	b.n	80059fc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2b0c      	cmp	r3, #12
 80059bc:	d11c      	bne.n	80059f8 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	6818      	ldr	r0, [r3, #0]
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	6819      	ldr	r1, [r3, #0]
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	685a      	ldr	r2, [r3, #4]
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	68db      	ldr	r3, [r3, #12]
 80059ce:	f000 ff27 	bl	8006820 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	69da      	ldr	r2, [r3, #28]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80059e0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	69d9      	ldr	r1, [r3, #28]
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	021a      	lsls	r2, r3, #8
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	430a      	orrs	r2, r1
 80059f4:	61da      	str	r2, [r3, #28]
 80059f6:	e001      	b.n	80059fc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2200      	movs	r2, #0
 8005a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005a04:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3718      	adds	r7, #24
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
	...

08005a10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b086      	sub	sp, #24
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	60f8      	str	r0, [r7, #12]
 8005a18:	60b9      	str	r1, [r7, #8]
 8005a1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d101      	bne.n	8005a2e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005a2a:	2302      	movs	r3, #2
 8005a2c:	e0ff      	b.n	8005c2e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2201      	movs	r2, #1
 8005a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2b14      	cmp	r3, #20
 8005a3a:	f200 80f0 	bhi.w	8005c1e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005a3e:	a201      	add	r2, pc, #4	; (adr r2, 8005a44 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a44:	08005a99 	.word	0x08005a99
 8005a48:	08005c1f 	.word	0x08005c1f
 8005a4c:	08005c1f 	.word	0x08005c1f
 8005a50:	08005c1f 	.word	0x08005c1f
 8005a54:	08005ad9 	.word	0x08005ad9
 8005a58:	08005c1f 	.word	0x08005c1f
 8005a5c:	08005c1f 	.word	0x08005c1f
 8005a60:	08005c1f 	.word	0x08005c1f
 8005a64:	08005b1b 	.word	0x08005b1b
 8005a68:	08005c1f 	.word	0x08005c1f
 8005a6c:	08005c1f 	.word	0x08005c1f
 8005a70:	08005c1f 	.word	0x08005c1f
 8005a74:	08005b5b 	.word	0x08005b5b
 8005a78:	08005c1f 	.word	0x08005c1f
 8005a7c:	08005c1f 	.word	0x08005c1f
 8005a80:	08005c1f 	.word	0x08005c1f
 8005a84:	08005b9d 	.word	0x08005b9d
 8005a88:	08005c1f 	.word	0x08005c1f
 8005a8c:	08005c1f 	.word	0x08005c1f
 8005a90:	08005c1f 	.word	0x08005c1f
 8005a94:	08005bdd 	.word	0x08005bdd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	68b9      	ldr	r1, [r7, #8]
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f000 fa90 	bl	8005fc4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	699a      	ldr	r2, [r3, #24]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f042 0208 	orr.w	r2, r2, #8
 8005ab2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	699a      	ldr	r2, [r3, #24]
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f022 0204 	bic.w	r2, r2, #4
 8005ac2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	6999      	ldr	r1, [r3, #24]
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	691a      	ldr	r2, [r3, #16]
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	430a      	orrs	r2, r1
 8005ad4:	619a      	str	r2, [r3, #24]
      break;
 8005ad6:	e0a5      	b.n	8005c24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	68b9      	ldr	r1, [r7, #8]
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f000 fb00 	bl	80060e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	699a      	ldr	r2, [r3, #24]
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005af2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	699a      	ldr	r2, [r3, #24]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	6999      	ldr	r1, [r3, #24]
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	691b      	ldr	r3, [r3, #16]
 8005b0e:	021a      	lsls	r2, r3, #8
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	430a      	orrs	r2, r1
 8005b16:	619a      	str	r2, [r3, #24]
      break;
 8005b18:	e084      	b.n	8005c24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	68b9      	ldr	r1, [r7, #8]
 8005b20:	4618      	mov	r0, r3
 8005b22:	f000 fb69 	bl	80061f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	69da      	ldr	r2, [r3, #28]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f042 0208 	orr.w	r2, r2, #8
 8005b34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	69da      	ldr	r2, [r3, #28]
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f022 0204 	bic.w	r2, r2, #4
 8005b44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	69d9      	ldr	r1, [r3, #28]
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	691a      	ldr	r2, [r3, #16]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	430a      	orrs	r2, r1
 8005b56:	61da      	str	r2, [r3, #28]
      break;
 8005b58:	e064      	b.n	8005c24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	68b9      	ldr	r1, [r7, #8]
 8005b60:	4618      	mov	r0, r3
 8005b62:	f000 fbd1 	bl	8006308 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	69da      	ldr	r2, [r3, #28]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	69da      	ldr	r2, [r3, #28]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	69d9      	ldr	r1, [r3, #28]
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	691b      	ldr	r3, [r3, #16]
 8005b90:	021a      	lsls	r2, r3, #8
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	430a      	orrs	r2, r1
 8005b98:	61da      	str	r2, [r3, #28]
      break;
 8005b9a:	e043      	b.n	8005c24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	68b9      	ldr	r1, [r7, #8]
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f000 fc1a 	bl	80063dc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f042 0208 	orr.w	r2, r2, #8
 8005bb6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f022 0204 	bic.w	r2, r2, #4
 8005bc6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	691a      	ldr	r2, [r3, #16]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	430a      	orrs	r2, r1
 8005bd8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005bda:	e023      	b.n	8005c24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	68b9      	ldr	r1, [r7, #8]
 8005be2:	4618      	mov	r0, r3
 8005be4:	f000 fc5e 	bl	80064a4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005bf6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c06:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	691b      	ldr	r3, [r3, #16]
 8005c12:	021a      	lsls	r2, r3, #8
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	430a      	orrs	r2, r1
 8005c1a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005c1c:	e002      	b.n	8005c24 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	75fb      	strb	r3, [r7, #23]
      break;
 8005c22:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2200      	movs	r2, #0
 8005c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005c2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3718      	adds	r7, #24
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}
 8005c36:	bf00      	nop

08005c38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b084      	sub	sp, #16
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c42:	2300      	movs	r3, #0
 8005c44:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d101      	bne.n	8005c54 <HAL_TIM_ConfigClockSource+0x1c>
 8005c50:	2302      	movs	r3, #2
 8005c52:	e0dc      	b.n	8005e0e <HAL_TIM_ConfigClockSource+0x1d6>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2201      	movs	r2, #1
 8005c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2202      	movs	r2, #2
 8005c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c6c:	68ba      	ldr	r2, [r7, #8]
 8005c6e:	4b6a      	ldr	r3, [pc, #424]	; (8005e18 <HAL_TIM_ConfigClockSource+0x1e0>)
 8005c70:	4013      	ands	r3, r2
 8005c72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c7a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	68ba      	ldr	r2, [r7, #8]
 8005c82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a64      	ldr	r2, [pc, #400]	; (8005e1c <HAL_TIM_ConfigClockSource+0x1e4>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	f000 80a9 	beq.w	8005de2 <HAL_TIM_ConfigClockSource+0x1aa>
 8005c90:	4a62      	ldr	r2, [pc, #392]	; (8005e1c <HAL_TIM_ConfigClockSource+0x1e4>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	f200 80ae 	bhi.w	8005df4 <HAL_TIM_ConfigClockSource+0x1bc>
 8005c98:	4a61      	ldr	r2, [pc, #388]	; (8005e20 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	f000 80a1 	beq.w	8005de2 <HAL_TIM_ConfigClockSource+0x1aa>
 8005ca0:	4a5f      	ldr	r2, [pc, #380]	; (8005e20 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	f200 80a6 	bhi.w	8005df4 <HAL_TIM_ConfigClockSource+0x1bc>
 8005ca8:	4a5e      	ldr	r2, [pc, #376]	; (8005e24 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	f000 8099 	beq.w	8005de2 <HAL_TIM_ConfigClockSource+0x1aa>
 8005cb0:	4a5c      	ldr	r2, [pc, #368]	; (8005e24 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	f200 809e 	bhi.w	8005df4 <HAL_TIM_ConfigClockSource+0x1bc>
 8005cb8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005cbc:	f000 8091 	beq.w	8005de2 <HAL_TIM_ConfigClockSource+0x1aa>
 8005cc0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005cc4:	f200 8096 	bhi.w	8005df4 <HAL_TIM_ConfigClockSource+0x1bc>
 8005cc8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ccc:	f000 8089 	beq.w	8005de2 <HAL_TIM_ConfigClockSource+0x1aa>
 8005cd0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005cd4:	f200 808e 	bhi.w	8005df4 <HAL_TIM_ConfigClockSource+0x1bc>
 8005cd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cdc:	d03e      	beq.n	8005d5c <HAL_TIM_ConfigClockSource+0x124>
 8005cde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ce2:	f200 8087 	bhi.w	8005df4 <HAL_TIM_ConfigClockSource+0x1bc>
 8005ce6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cea:	f000 8086 	beq.w	8005dfa <HAL_TIM_ConfigClockSource+0x1c2>
 8005cee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cf2:	d87f      	bhi.n	8005df4 <HAL_TIM_ConfigClockSource+0x1bc>
 8005cf4:	2b70      	cmp	r3, #112	; 0x70
 8005cf6:	d01a      	beq.n	8005d2e <HAL_TIM_ConfigClockSource+0xf6>
 8005cf8:	2b70      	cmp	r3, #112	; 0x70
 8005cfa:	d87b      	bhi.n	8005df4 <HAL_TIM_ConfigClockSource+0x1bc>
 8005cfc:	2b60      	cmp	r3, #96	; 0x60
 8005cfe:	d050      	beq.n	8005da2 <HAL_TIM_ConfigClockSource+0x16a>
 8005d00:	2b60      	cmp	r3, #96	; 0x60
 8005d02:	d877      	bhi.n	8005df4 <HAL_TIM_ConfigClockSource+0x1bc>
 8005d04:	2b50      	cmp	r3, #80	; 0x50
 8005d06:	d03c      	beq.n	8005d82 <HAL_TIM_ConfigClockSource+0x14a>
 8005d08:	2b50      	cmp	r3, #80	; 0x50
 8005d0a:	d873      	bhi.n	8005df4 <HAL_TIM_ConfigClockSource+0x1bc>
 8005d0c:	2b40      	cmp	r3, #64	; 0x40
 8005d0e:	d058      	beq.n	8005dc2 <HAL_TIM_ConfigClockSource+0x18a>
 8005d10:	2b40      	cmp	r3, #64	; 0x40
 8005d12:	d86f      	bhi.n	8005df4 <HAL_TIM_ConfigClockSource+0x1bc>
 8005d14:	2b30      	cmp	r3, #48	; 0x30
 8005d16:	d064      	beq.n	8005de2 <HAL_TIM_ConfigClockSource+0x1aa>
 8005d18:	2b30      	cmp	r3, #48	; 0x30
 8005d1a:	d86b      	bhi.n	8005df4 <HAL_TIM_ConfigClockSource+0x1bc>
 8005d1c:	2b20      	cmp	r3, #32
 8005d1e:	d060      	beq.n	8005de2 <HAL_TIM_ConfigClockSource+0x1aa>
 8005d20:	2b20      	cmp	r3, #32
 8005d22:	d867      	bhi.n	8005df4 <HAL_TIM_ConfigClockSource+0x1bc>
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d05c      	beq.n	8005de2 <HAL_TIM_ConfigClockSource+0x1aa>
 8005d28:	2b10      	cmp	r3, #16
 8005d2a:	d05a      	beq.n	8005de2 <HAL_TIM_ConfigClockSource+0x1aa>
 8005d2c:	e062      	b.n	8005df4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6818      	ldr	r0, [r3, #0]
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	6899      	ldr	r1, [r3, #8]
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	685a      	ldr	r2, [r3, #4]
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	68db      	ldr	r3, [r3, #12]
 8005d3e:	f000 fdcb 	bl	80068d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005d50:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	68ba      	ldr	r2, [r7, #8]
 8005d58:	609a      	str	r2, [r3, #8]
      break;
 8005d5a:	e04f      	b.n	8005dfc <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6818      	ldr	r0, [r3, #0]
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	6899      	ldr	r1, [r3, #8]
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	685a      	ldr	r2, [r3, #4]
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	68db      	ldr	r3, [r3, #12]
 8005d6c:	f000 fdb4 	bl	80068d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	689a      	ldr	r2, [r3, #8]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d7e:	609a      	str	r2, [r3, #8]
      break;
 8005d80:	e03c      	b.n	8005dfc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6818      	ldr	r0, [r3, #0]
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	6859      	ldr	r1, [r3, #4]
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	68db      	ldr	r3, [r3, #12]
 8005d8e:	461a      	mov	r2, r3
 8005d90:	f000 fc6e 	bl	8006670 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	2150      	movs	r1, #80	; 0x50
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f000 fd7e 	bl	800689c <TIM_ITRx_SetConfig>
      break;
 8005da0:	e02c      	b.n	8005dfc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6818      	ldr	r0, [r3, #0]
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	6859      	ldr	r1, [r3, #4]
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	68db      	ldr	r3, [r3, #12]
 8005dae:	461a      	mov	r2, r3
 8005db0:	f000 fcca 	bl	8006748 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	2160      	movs	r1, #96	; 0x60
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f000 fd6e 	bl	800689c <TIM_ITRx_SetConfig>
      break;
 8005dc0:	e01c      	b.n	8005dfc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6818      	ldr	r0, [r3, #0]
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	6859      	ldr	r1, [r3, #4]
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	68db      	ldr	r3, [r3, #12]
 8005dce:	461a      	mov	r2, r3
 8005dd0:	f000 fc4e 	bl	8006670 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	2140      	movs	r1, #64	; 0x40
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f000 fd5e 	bl	800689c <TIM_ITRx_SetConfig>
      break;
 8005de0:	e00c      	b.n	8005dfc <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4619      	mov	r1, r3
 8005dec:	4610      	mov	r0, r2
 8005dee:	f000 fd55 	bl	800689c <TIM_ITRx_SetConfig>
      break;
 8005df2:	e003      	b.n	8005dfc <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	73fb      	strb	r3, [r7, #15]
      break;
 8005df8:	e000      	b.n	8005dfc <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8005dfa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2201      	movs	r2, #1
 8005e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2200      	movs	r2, #0
 8005e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3710      	adds	r7, #16
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}
 8005e16:	bf00      	nop
 8005e18:	ffceff88 	.word	0xffceff88
 8005e1c:	00100040 	.word	0x00100040
 8005e20:	00100030 	.word	0x00100030
 8005e24:	00100020 	.word	0x00100020

08005e28 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b083      	sub	sp, #12
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e30:	bf00      	nop
 8005e32:	370c      	adds	r7, #12
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr

08005e3c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b083      	sub	sp, #12
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e44:	bf00      	nop
 8005e46:	370c      	adds	r7, #12
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr

08005e50 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b083      	sub	sp, #12
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e58:	bf00      	nop
 8005e5a:	370c      	adds	r7, #12
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr

08005e64 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b083      	sub	sp, #12
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e6c:	bf00      	nop
 8005e6e:	370c      	adds	r7, #12
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr

08005e78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b085      	sub	sp, #20
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	4a44      	ldr	r2, [pc, #272]	; (8005f9c <TIM_Base_SetConfig+0x124>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d013      	beq.n	8005eb8 <TIM_Base_SetConfig+0x40>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e96:	d00f      	beq.n	8005eb8 <TIM_Base_SetConfig+0x40>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	4a41      	ldr	r2, [pc, #260]	; (8005fa0 <TIM_Base_SetConfig+0x128>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d00b      	beq.n	8005eb8 <TIM_Base_SetConfig+0x40>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	4a40      	ldr	r2, [pc, #256]	; (8005fa4 <TIM_Base_SetConfig+0x12c>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d007      	beq.n	8005eb8 <TIM_Base_SetConfig+0x40>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	4a3f      	ldr	r2, [pc, #252]	; (8005fa8 <TIM_Base_SetConfig+0x130>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d003      	beq.n	8005eb8 <TIM_Base_SetConfig+0x40>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	4a3e      	ldr	r2, [pc, #248]	; (8005fac <TIM_Base_SetConfig+0x134>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d108      	bne.n	8005eca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ebe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	68fa      	ldr	r2, [r7, #12]
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	4a33      	ldr	r2, [pc, #204]	; (8005f9c <TIM_Base_SetConfig+0x124>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d027      	beq.n	8005f22 <TIM_Base_SetConfig+0xaa>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ed8:	d023      	beq.n	8005f22 <TIM_Base_SetConfig+0xaa>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	4a30      	ldr	r2, [pc, #192]	; (8005fa0 <TIM_Base_SetConfig+0x128>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d01f      	beq.n	8005f22 <TIM_Base_SetConfig+0xaa>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	4a2f      	ldr	r2, [pc, #188]	; (8005fa4 <TIM_Base_SetConfig+0x12c>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d01b      	beq.n	8005f22 <TIM_Base_SetConfig+0xaa>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4a2e      	ldr	r2, [pc, #184]	; (8005fa8 <TIM_Base_SetConfig+0x130>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d017      	beq.n	8005f22 <TIM_Base_SetConfig+0xaa>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	4a2d      	ldr	r2, [pc, #180]	; (8005fac <TIM_Base_SetConfig+0x134>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d013      	beq.n	8005f22 <TIM_Base_SetConfig+0xaa>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	4a2c      	ldr	r2, [pc, #176]	; (8005fb0 <TIM_Base_SetConfig+0x138>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d00f      	beq.n	8005f22 <TIM_Base_SetConfig+0xaa>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	4a2b      	ldr	r2, [pc, #172]	; (8005fb4 <TIM_Base_SetConfig+0x13c>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d00b      	beq.n	8005f22 <TIM_Base_SetConfig+0xaa>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	4a2a      	ldr	r2, [pc, #168]	; (8005fb8 <TIM_Base_SetConfig+0x140>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d007      	beq.n	8005f22 <TIM_Base_SetConfig+0xaa>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	4a29      	ldr	r2, [pc, #164]	; (8005fbc <TIM_Base_SetConfig+0x144>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d003      	beq.n	8005f22 <TIM_Base_SetConfig+0xaa>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	4a28      	ldr	r2, [pc, #160]	; (8005fc0 <TIM_Base_SetConfig+0x148>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d108      	bne.n	8005f34 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	68db      	ldr	r3, [r3, #12]
 8005f2e:	68fa      	ldr	r2, [r7, #12]
 8005f30:	4313      	orrs	r3, r2
 8005f32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	695b      	ldr	r3, [r3, #20]
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	68fa      	ldr	r2, [r7, #12]
 8005f46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	689a      	ldr	r2, [r3, #8]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	681a      	ldr	r2, [r3, #0]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	4a10      	ldr	r2, [pc, #64]	; (8005f9c <TIM_Base_SetConfig+0x124>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d00f      	beq.n	8005f80 <TIM_Base_SetConfig+0x108>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	4a12      	ldr	r2, [pc, #72]	; (8005fac <TIM_Base_SetConfig+0x134>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d00b      	beq.n	8005f80 <TIM_Base_SetConfig+0x108>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	4a11      	ldr	r2, [pc, #68]	; (8005fb0 <TIM_Base_SetConfig+0x138>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d007      	beq.n	8005f80 <TIM_Base_SetConfig+0x108>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	4a10      	ldr	r2, [pc, #64]	; (8005fb4 <TIM_Base_SetConfig+0x13c>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d003      	beq.n	8005f80 <TIM_Base_SetConfig+0x108>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	4a0f      	ldr	r2, [pc, #60]	; (8005fb8 <TIM_Base_SetConfig+0x140>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d103      	bne.n	8005f88 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	691a      	ldr	r2, [r3, #16]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	615a      	str	r2, [r3, #20]
}
 8005f8e:	bf00      	nop
 8005f90:	3714      	adds	r7, #20
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr
 8005f9a:	bf00      	nop
 8005f9c:	40010000 	.word	0x40010000
 8005fa0:	40000400 	.word	0x40000400
 8005fa4:	40000800 	.word	0x40000800
 8005fa8:	40000c00 	.word	0x40000c00
 8005fac:	40010400 	.word	0x40010400
 8005fb0:	40014000 	.word	0x40014000
 8005fb4:	40014400 	.word	0x40014400
 8005fb8:	40014800 	.word	0x40014800
 8005fbc:	4000e000 	.word	0x4000e000
 8005fc0:	4000e400 	.word	0x4000e400

08005fc4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b087      	sub	sp, #28
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
 8005fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6a1b      	ldr	r3, [r3, #32]
 8005fd2:	f023 0201 	bic.w	r2, r3, #1
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6a1b      	ldr	r3, [r3, #32]
 8005fde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	699b      	ldr	r3, [r3, #24]
 8005fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005fec:	68fa      	ldr	r2, [r7, #12]
 8005fee:	4b37      	ldr	r3, [pc, #220]	; (80060cc <TIM_OC1_SetConfig+0x108>)
 8005ff0:	4013      	ands	r3, r2
 8005ff2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f023 0303 	bic.w	r3, r3, #3
 8005ffa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	68fa      	ldr	r2, [r7, #12]
 8006002:	4313      	orrs	r3, r2
 8006004:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	f023 0302 	bic.w	r3, r3, #2
 800600c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	697a      	ldr	r2, [r7, #20]
 8006014:	4313      	orrs	r3, r2
 8006016:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	4a2d      	ldr	r2, [pc, #180]	; (80060d0 <TIM_OC1_SetConfig+0x10c>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d00f      	beq.n	8006040 <TIM_OC1_SetConfig+0x7c>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	4a2c      	ldr	r2, [pc, #176]	; (80060d4 <TIM_OC1_SetConfig+0x110>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d00b      	beq.n	8006040 <TIM_OC1_SetConfig+0x7c>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	4a2b      	ldr	r2, [pc, #172]	; (80060d8 <TIM_OC1_SetConfig+0x114>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d007      	beq.n	8006040 <TIM_OC1_SetConfig+0x7c>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	4a2a      	ldr	r2, [pc, #168]	; (80060dc <TIM_OC1_SetConfig+0x118>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d003      	beq.n	8006040 <TIM_OC1_SetConfig+0x7c>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	4a29      	ldr	r2, [pc, #164]	; (80060e0 <TIM_OC1_SetConfig+0x11c>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d10c      	bne.n	800605a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	f023 0308 	bic.w	r3, r3, #8
 8006046:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	68db      	ldr	r3, [r3, #12]
 800604c:	697a      	ldr	r2, [r7, #20]
 800604e:	4313      	orrs	r3, r2
 8006050:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	f023 0304 	bic.w	r3, r3, #4
 8006058:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	4a1c      	ldr	r2, [pc, #112]	; (80060d0 <TIM_OC1_SetConfig+0x10c>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d00f      	beq.n	8006082 <TIM_OC1_SetConfig+0xbe>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	4a1b      	ldr	r2, [pc, #108]	; (80060d4 <TIM_OC1_SetConfig+0x110>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d00b      	beq.n	8006082 <TIM_OC1_SetConfig+0xbe>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	4a1a      	ldr	r2, [pc, #104]	; (80060d8 <TIM_OC1_SetConfig+0x114>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d007      	beq.n	8006082 <TIM_OC1_SetConfig+0xbe>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	4a19      	ldr	r2, [pc, #100]	; (80060dc <TIM_OC1_SetConfig+0x118>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d003      	beq.n	8006082 <TIM_OC1_SetConfig+0xbe>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	4a18      	ldr	r2, [pc, #96]	; (80060e0 <TIM_OC1_SetConfig+0x11c>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d111      	bne.n	80060a6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006088:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006090:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	695b      	ldr	r3, [r3, #20]
 8006096:	693a      	ldr	r2, [r7, #16]
 8006098:	4313      	orrs	r3, r2
 800609a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	699b      	ldr	r3, [r3, #24]
 80060a0:	693a      	ldr	r2, [r7, #16]
 80060a2:	4313      	orrs	r3, r2
 80060a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	693a      	ldr	r2, [r7, #16]
 80060aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	68fa      	ldr	r2, [r7, #12]
 80060b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	685a      	ldr	r2, [r3, #4]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	697a      	ldr	r2, [r7, #20]
 80060be:	621a      	str	r2, [r3, #32]
}
 80060c0:	bf00      	nop
 80060c2:	371c      	adds	r7, #28
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr
 80060cc:	fffeff8f 	.word	0xfffeff8f
 80060d0:	40010000 	.word	0x40010000
 80060d4:	40010400 	.word	0x40010400
 80060d8:	40014000 	.word	0x40014000
 80060dc:	40014400 	.word	0x40014400
 80060e0:	40014800 	.word	0x40014800

080060e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b087      	sub	sp, #28
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6a1b      	ldr	r3, [r3, #32]
 80060f2:	f023 0210 	bic.w	r2, r3, #16
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6a1b      	ldr	r3, [r3, #32]
 80060fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	699b      	ldr	r3, [r3, #24]
 800610a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800610c:	68fa      	ldr	r2, [r7, #12]
 800610e:	4b34      	ldr	r3, [pc, #208]	; (80061e0 <TIM_OC2_SetConfig+0xfc>)
 8006110:	4013      	ands	r3, r2
 8006112:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800611a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	021b      	lsls	r3, r3, #8
 8006122:	68fa      	ldr	r2, [r7, #12]
 8006124:	4313      	orrs	r3, r2
 8006126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	f023 0320 	bic.w	r3, r3, #32
 800612e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	011b      	lsls	r3, r3, #4
 8006136:	697a      	ldr	r2, [r7, #20]
 8006138:	4313      	orrs	r3, r2
 800613a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	4a29      	ldr	r2, [pc, #164]	; (80061e4 <TIM_OC2_SetConfig+0x100>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d003      	beq.n	800614c <TIM_OC2_SetConfig+0x68>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	4a28      	ldr	r2, [pc, #160]	; (80061e8 <TIM_OC2_SetConfig+0x104>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d10d      	bne.n	8006168 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006152:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	68db      	ldr	r3, [r3, #12]
 8006158:	011b      	lsls	r3, r3, #4
 800615a:	697a      	ldr	r2, [r7, #20]
 800615c:	4313      	orrs	r3, r2
 800615e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006166:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	4a1e      	ldr	r2, [pc, #120]	; (80061e4 <TIM_OC2_SetConfig+0x100>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d00f      	beq.n	8006190 <TIM_OC2_SetConfig+0xac>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	4a1d      	ldr	r2, [pc, #116]	; (80061e8 <TIM_OC2_SetConfig+0x104>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d00b      	beq.n	8006190 <TIM_OC2_SetConfig+0xac>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	4a1c      	ldr	r2, [pc, #112]	; (80061ec <TIM_OC2_SetConfig+0x108>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d007      	beq.n	8006190 <TIM_OC2_SetConfig+0xac>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	4a1b      	ldr	r2, [pc, #108]	; (80061f0 <TIM_OC2_SetConfig+0x10c>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d003      	beq.n	8006190 <TIM_OC2_SetConfig+0xac>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	4a1a      	ldr	r2, [pc, #104]	; (80061f4 <TIM_OC2_SetConfig+0x110>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d113      	bne.n	80061b8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006196:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800619e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	695b      	ldr	r3, [r3, #20]
 80061a4:	009b      	lsls	r3, r3, #2
 80061a6:	693a      	ldr	r2, [r7, #16]
 80061a8:	4313      	orrs	r3, r2
 80061aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	699b      	ldr	r3, [r3, #24]
 80061b0:	009b      	lsls	r3, r3, #2
 80061b2:	693a      	ldr	r2, [r7, #16]
 80061b4:	4313      	orrs	r3, r2
 80061b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	693a      	ldr	r2, [r7, #16]
 80061bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	68fa      	ldr	r2, [r7, #12]
 80061c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	685a      	ldr	r2, [r3, #4]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	697a      	ldr	r2, [r7, #20]
 80061d0:	621a      	str	r2, [r3, #32]
}
 80061d2:	bf00      	nop
 80061d4:	371c      	adds	r7, #28
 80061d6:	46bd      	mov	sp, r7
 80061d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061dc:	4770      	bx	lr
 80061de:	bf00      	nop
 80061e0:	feff8fff 	.word	0xfeff8fff
 80061e4:	40010000 	.word	0x40010000
 80061e8:	40010400 	.word	0x40010400
 80061ec:	40014000 	.word	0x40014000
 80061f0:	40014400 	.word	0x40014400
 80061f4:	40014800 	.word	0x40014800

080061f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b087      	sub	sp, #28
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
 8006200:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6a1b      	ldr	r3, [r3, #32]
 8006206:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6a1b      	ldr	r3, [r3, #32]
 8006212:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	69db      	ldr	r3, [r3, #28]
 800621e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006220:	68fa      	ldr	r2, [r7, #12]
 8006222:	4b33      	ldr	r3, [pc, #204]	; (80062f0 <TIM_OC3_SetConfig+0xf8>)
 8006224:	4013      	ands	r3, r2
 8006226:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f023 0303 	bic.w	r3, r3, #3
 800622e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	68fa      	ldr	r2, [r7, #12]
 8006236:	4313      	orrs	r3, r2
 8006238:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006240:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	021b      	lsls	r3, r3, #8
 8006248:	697a      	ldr	r2, [r7, #20]
 800624a:	4313      	orrs	r3, r2
 800624c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	4a28      	ldr	r2, [pc, #160]	; (80062f4 <TIM_OC3_SetConfig+0xfc>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d003      	beq.n	800625e <TIM_OC3_SetConfig+0x66>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	4a27      	ldr	r2, [pc, #156]	; (80062f8 <TIM_OC3_SetConfig+0x100>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d10d      	bne.n	800627a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006264:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	68db      	ldr	r3, [r3, #12]
 800626a:	021b      	lsls	r3, r3, #8
 800626c:	697a      	ldr	r2, [r7, #20]
 800626e:	4313      	orrs	r3, r2
 8006270:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006278:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4a1d      	ldr	r2, [pc, #116]	; (80062f4 <TIM_OC3_SetConfig+0xfc>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d00f      	beq.n	80062a2 <TIM_OC3_SetConfig+0xaa>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	4a1c      	ldr	r2, [pc, #112]	; (80062f8 <TIM_OC3_SetConfig+0x100>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d00b      	beq.n	80062a2 <TIM_OC3_SetConfig+0xaa>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	4a1b      	ldr	r2, [pc, #108]	; (80062fc <TIM_OC3_SetConfig+0x104>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d007      	beq.n	80062a2 <TIM_OC3_SetConfig+0xaa>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4a1a      	ldr	r2, [pc, #104]	; (8006300 <TIM_OC3_SetConfig+0x108>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d003      	beq.n	80062a2 <TIM_OC3_SetConfig+0xaa>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	4a19      	ldr	r2, [pc, #100]	; (8006304 <TIM_OC3_SetConfig+0x10c>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d113      	bne.n	80062ca <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80062a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80062b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	695b      	ldr	r3, [r3, #20]
 80062b6:	011b      	lsls	r3, r3, #4
 80062b8:	693a      	ldr	r2, [r7, #16]
 80062ba:	4313      	orrs	r3, r2
 80062bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	699b      	ldr	r3, [r3, #24]
 80062c2:	011b      	lsls	r3, r3, #4
 80062c4:	693a      	ldr	r2, [r7, #16]
 80062c6:	4313      	orrs	r3, r2
 80062c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	693a      	ldr	r2, [r7, #16]
 80062ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	68fa      	ldr	r2, [r7, #12]
 80062d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	685a      	ldr	r2, [r3, #4]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	697a      	ldr	r2, [r7, #20]
 80062e2:	621a      	str	r2, [r3, #32]
}
 80062e4:	bf00      	nop
 80062e6:	371c      	adds	r7, #28
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr
 80062f0:	fffeff8f 	.word	0xfffeff8f
 80062f4:	40010000 	.word	0x40010000
 80062f8:	40010400 	.word	0x40010400
 80062fc:	40014000 	.word	0x40014000
 8006300:	40014400 	.word	0x40014400
 8006304:	40014800 	.word	0x40014800

08006308 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006308:	b480      	push	{r7}
 800630a:	b087      	sub	sp, #28
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6a1b      	ldr	r3, [r3, #32]
 8006316:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6a1b      	ldr	r3, [r3, #32]
 8006322:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	69db      	ldr	r3, [r3, #28]
 800632e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006330:	68fa      	ldr	r2, [r7, #12]
 8006332:	4b24      	ldr	r3, [pc, #144]	; (80063c4 <TIM_OC4_SetConfig+0xbc>)
 8006334:	4013      	ands	r3, r2
 8006336:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800633e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	021b      	lsls	r3, r3, #8
 8006346:	68fa      	ldr	r2, [r7, #12]
 8006348:	4313      	orrs	r3, r2
 800634a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006352:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	031b      	lsls	r3, r3, #12
 800635a:	693a      	ldr	r2, [r7, #16]
 800635c:	4313      	orrs	r3, r2
 800635e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	4a19      	ldr	r2, [pc, #100]	; (80063c8 <TIM_OC4_SetConfig+0xc0>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d00f      	beq.n	8006388 <TIM_OC4_SetConfig+0x80>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	4a18      	ldr	r2, [pc, #96]	; (80063cc <TIM_OC4_SetConfig+0xc4>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d00b      	beq.n	8006388 <TIM_OC4_SetConfig+0x80>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	4a17      	ldr	r2, [pc, #92]	; (80063d0 <TIM_OC4_SetConfig+0xc8>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d007      	beq.n	8006388 <TIM_OC4_SetConfig+0x80>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	4a16      	ldr	r2, [pc, #88]	; (80063d4 <TIM_OC4_SetConfig+0xcc>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d003      	beq.n	8006388 <TIM_OC4_SetConfig+0x80>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	4a15      	ldr	r2, [pc, #84]	; (80063d8 <TIM_OC4_SetConfig+0xd0>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d109      	bne.n	800639c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800638e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	695b      	ldr	r3, [r3, #20]
 8006394:	019b      	lsls	r3, r3, #6
 8006396:	697a      	ldr	r2, [r7, #20]
 8006398:	4313      	orrs	r3, r2
 800639a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	697a      	ldr	r2, [r7, #20]
 80063a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	68fa      	ldr	r2, [r7, #12]
 80063a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	685a      	ldr	r2, [r3, #4]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	693a      	ldr	r2, [r7, #16]
 80063b4:	621a      	str	r2, [r3, #32]
}
 80063b6:	bf00      	nop
 80063b8:	371c      	adds	r7, #28
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr
 80063c2:	bf00      	nop
 80063c4:	feff8fff 	.word	0xfeff8fff
 80063c8:	40010000 	.word	0x40010000
 80063cc:	40010400 	.word	0x40010400
 80063d0:	40014000 	.word	0x40014000
 80063d4:	40014400 	.word	0x40014400
 80063d8:	40014800 	.word	0x40014800

080063dc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80063dc:	b480      	push	{r7}
 80063de:	b087      	sub	sp, #28
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
 80063e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6a1b      	ldr	r3, [r3, #32]
 80063ea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6a1b      	ldr	r3, [r3, #32]
 80063f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006404:	68fa      	ldr	r2, [r7, #12]
 8006406:	4b21      	ldr	r3, [pc, #132]	; (800648c <TIM_OC5_SetConfig+0xb0>)
 8006408:	4013      	ands	r3, r2
 800640a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	68fa      	ldr	r2, [r7, #12]
 8006412:	4313      	orrs	r3, r2
 8006414:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800641c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	041b      	lsls	r3, r3, #16
 8006424:	693a      	ldr	r2, [r7, #16]
 8006426:	4313      	orrs	r3, r2
 8006428:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	4a18      	ldr	r2, [pc, #96]	; (8006490 <TIM_OC5_SetConfig+0xb4>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d00f      	beq.n	8006452 <TIM_OC5_SetConfig+0x76>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	4a17      	ldr	r2, [pc, #92]	; (8006494 <TIM_OC5_SetConfig+0xb8>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d00b      	beq.n	8006452 <TIM_OC5_SetConfig+0x76>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	4a16      	ldr	r2, [pc, #88]	; (8006498 <TIM_OC5_SetConfig+0xbc>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d007      	beq.n	8006452 <TIM_OC5_SetConfig+0x76>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	4a15      	ldr	r2, [pc, #84]	; (800649c <TIM_OC5_SetConfig+0xc0>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d003      	beq.n	8006452 <TIM_OC5_SetConfig+0x76>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	4a14      	ldr	r2, [pc, #80]	; (80064a0 <TIM_OC5_SetConfig+0xc4>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d109      	bne.n	8006466 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006458:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	695b      	ldr	r3, [r3, #20]
 800645e:	021b      	lsls	r3, r3, #8
 8006460:	697a      	ldr	r2, [r7, #20]
 8006462:	4313      	orrs	r3, r2
 8006464:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	697a      	ldr	r2, [r7, #20]
 800646a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	68fa      	ldr	r2, [r7, #12]
 8006470:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	685a      	ldr	r2, [r3, #4]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	693a      	ldr	r2, [r7, #16]
 800647e:	621a      	str	r2, [r3, #32]
}
 8006480:	bf00      	nop
 8006482:	371c      	adds	r7, #28
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr
 800648c:	fffeff8f 	.word	0xfffeff8f
 8006490:	40010000 	.word	0x40010000
 8006494:	40010400 	.word	0x40010400
 8006498:	40014000 	.word	0x40014000
 800649c:	40014400 	.word	0x40014400
 80064a0:	40014800 	.word	0x40014800

080064a4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b087      	sub	sp, #28
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
 80064ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6a1b      	ldr	r3, [r3, #32]
 80064b2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6a1b      	ldr	r3, [r3, #32]
 80064be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80064cc:	68fa      	ldr	r2, [r7, #12]
 80064ce:	4b22      	ldr	r3, [pc, #136]	; (8006558 <TIM_OC6_SetConfig+0xb4>)
 80064d0:	4013      	ands	r3, r2
 80064d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	021b      	lsls	r3, r3, #8
 80064da:	68fa      	ldr	r2, [r7, #12]
 80064dc:	4313      	orrs	r3, r2
 80064de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80064e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	689b      	ldr	r3, [r3, #8]
 80064ec:	051b      	lsls	r3, r3, #20
 80064ee:	693a      	ldr	r2, [r7, #16]
 80064f0:	4313      	orrs	r3, r2
 80064f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	4a19      	ldr	r2, [pc, #100]	; (800655c <TIM_OC6_SetConfig+0xb8>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d00f      	beq.n	800651c <TIM_OC6_SetConfig+0x78>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	4a18      	ldr	r2, [pc, #96]	; (8006560 <TIM_OC6_SetConfig+0xbc>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d00b      	beq.n	800651c <TIM_OC6_SetConfig+0x78>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4a17      	ldr	r2, [pc, #92]	; (8006564 <TIM_OC6_SetConfig+0xc0>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d007      	beq.n	800651c <TIM_OC6_SetConfig+0x78>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	4a16      	ldr	r2, [pc, #88]	; (8006568 <TIM_OC6_SetConfig+0xc4>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d003      	beq.n	800651c <TIM_OC6_SetConfig+0x78>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	4a15      	ldr	r2, [pc, #84]	; (800656c <TIM_OC6_SetConfig+0xc8>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d109      	bne.n	8006530 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006522:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	695b      	ldr	r3, [r3, #20]
 8006528:	029b      	lsls	r3, r3, #10
 800652a:	697a      	ldr	r2, [r7, #20]
 800652c:	4313      	orrs	r3, r2
 800652e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	697a      	ldr	r2, [r7, #20]
 8006534:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	68fa      	ldr	r2, [r7, #12]
 800653a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	685a      	ldr	r2, [r3, #4]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	693a      	ldr	r2, [r7, #16]
 8006548:	621a      	str	r2, [r3, #32]
}
 800654a:	bf00      	nop
 800654c:	371c      	adds	r7, #28
 800654e:	46bd      	mov	sp, r7
 8006550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006554:	4770      	bx	lr
 8006556:	bf00      	nop
 8006558:	feff8fff 	.word	0xfeff8fff
 800655c:	40010000 	.word	0x40010000
 8006560:	40010400 	.word	0x40010400
 8006564:	40014000 	.word	0x40014000
 8006568:	40014400 	.word	0x40014400
 800656c:	40014800 	.word	0x40014800

08006570 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006570:	b480      	push	{r7}
 8006572:	b087      	sub	sp, #28
 8006574:	af00      	add	r7, sp, #0
 8006576:	60f8      	str	r0, [r7, #12]
 8006578:	60b9      	str	r1, [r7, #8]
 800657a:	607a      	str	r2, [r7, #4]
 800657c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	6a1b      	ldr	r3, [r3, #32]
 8006582:	f023 0201 	bic.w	r2, r3, #1
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	699b      	ldr	r3, [r3, #24]
 800658e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	6a1b      	ldr	r3, [r3, #32]
 8006594:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	4a2c      	ldr	r2, [pc, #176]	; (800664c <TIM_TI1_SetConfig+0xdc>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d023      	beq.n	80065e6 <TIM_TI1_SetConfig+0x76>
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065a4:	d01f      	beq.n	80065e6 <TIM_TI1_SetConfig+0x76>
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	4a29      	ldr	r2, [pc, #164]	; (8006650 <TIM_TI1_SetConfig+0xe0>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d01b      	beq.n	80065e6 <TIM_TI1_SetConfig+0x76>
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	4a28      	ldr	r2, [pc, #160]	; (8006654 <TIM_TI1_SetConfig+0xe4>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d017      	beq.n	80065e6 <TIM_TI1_SetConfig+0x76>
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	4a27      	ldr	r2, [pc, #156]	; (8006658 <TIM_TI1_SetConfig+0xe8>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d013      	beq.n	80065e6 <TIM_TI1_SetConfig+0x76>
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	4a26      	ldr	r2, [pc, #152]	; (800665c <TIM_TI1_SetConfig+0xec>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d00f      	beq.n	80065e6 <TIM_TI1_SetConfig+0x76>
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	4a25      	ldr	r2, [pc, #148]	; (8006660 <TIM_TI1_SetConfig+0xf0>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d00b      	beq.n	80065e6 <TIM_TI1_SetConfig+0x76>
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	4a24      	ldr	r2, [pc, #144]	; (8006664 <TIM_TI1_SetConfig+0xf4>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d007      	beq.n	80065e6 <TIM_TI1_SetConfig+0x76>
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	4a23      	ldr	r2, [pc, #140]	; (8006668 <TIM_TI1_SetConfig+0xf8>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d003      	beq.n	80065e6 <TIM_TI1_SetConfig+0x76>
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	4a22      	ldr	r2, [pc, #136]	; (800666c <TIM_TI1_SetConfig+0xfc>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d101      	bne.n	80065ea <TIM_TI1_SetConfig+0x7a>
 80065e6:	2301      	movs	r3, #1
 80065e8:	e000      	b.n	80065ec <TIM_TI1_SetConfig+0x7c>
 80065ea:	2300      	movs	r3, #0
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d008      	beq.n	8006602 <TIM_TI1_SetConfig+0x92>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	f023 0303 	bic.w	r3, r3, #3
 80065f6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80065f8:	697a      	ldr	r2, [r7, #20]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	4313      	orrs	r3, r2
 80065fe:	617b      	str	r3, [r7, #20]
 8006600:	e003      	b.n	800660a <TIM_TI1_SetConfig+0x9a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	f043 0301 	orr.w	r3, r3, #1
 8006608:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006610:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	011b      	lsls	r3, r3, #4
 8006616:	b2db      	uxtb	r3, r3
 8006618:	697a      	ldr	r2, [r7, #20]
 800661a:	4313      	orrs	r3, r2
 800661c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	f023 030a 	bic.w	r3, r3, #10
 8006624:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	f003 030a 	and.w	r3, r3, #10
 800662c:	693a      	ldr	r2, [r7, #16]
 800662e:	4313      	orrs	r3, r2
 8006630:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	697a      	ldr	r2, [r7, #20]
 8006636:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	693a      	ldr	r2, [r7, #16]
 800663c:	621a      	str	r2, [r3, #32]
}
 800663e:	bf00      	nop
 8006640:	371c      	adds	r7, #28
 8006642:	46bd      	mov	sp, r7
 8006644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006648:	4770      	bx	lr
 800664a:	bf00      	nop
 800664c:	40010000 	.word	0x40010000
 8006650:	40000400 	.word	0x40000400
 8006654:	40000800 	.word	0x40000800
 8006658:	40000c00 	.word	0x40000c00
 800665c:	40010400 	.word	0x40010400
 8006660:	40001800 	.word	0x40001800
 8006664:	40014000 	.word	0x40014000
 8006668:	4000e000 	.word	0x4000e000
 800666c:	4000e400 	.word	0x4000e400

08006670 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006670:	b480      	push	{r7}
 8006672:	b087      	sub	sp, #28
 8006674:	af00      	add	r7, sp, #0
 8006676:	60f8      	str	r0, [r7, #12]
 8006678:	60b9      	str	r1, [r7, #8]
 800667a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	6a1b      	ldr	r3, [r3, #32]
 8006680:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	6a1b      	ldr	r3, [r3, #32]
 8006686:	f023 0201 	bic.w	r2, r3, #1
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	699b      	ldr	r3, [r3, #24]
 8006692:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800669a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	011b      	lsls	r3, r3, #4
 80066a0:	693a      	ldr	r2, [r7, #16]
 80066a2:	4313      	orrs	r3, r2
 80066a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	f023 030a 	bic.w	r3, r3, #10
 80066ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80066ae:	697a      	ldr	r2, [r7, #20]
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	4313      	orrs	r3, r2
 80066b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	693a      	ldr	r2, [r7, #16]
 80066ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	697a      	ldr	r2, [r7, #20]
 80066c0:	621a      	str	r2, [r3, #32]
}
 80066c2:	bf00      	nop
 80066c4:	371c      	adds	r7, #28
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr

080066ce <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80066ce:	b480      	push	{r7}
 80066d0:	b087      	sub	sp, #28
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	60f8      	str	r0, [r7, #12]
 80066d6:	60b9      	str	r1, [r7, #8]
 80066d8:	607a      	str	r2, [r7, #4]
 80066da:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	6a1b      	ldr	r3, [r3, #32]
 80066e0:	f023 0210 	bic.w	r2, r3, #16
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	699b      	ldr	r3, [r3, #24]
 80066ec:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	6a1b      	ldr	r3, [r3, #32]
 80066f2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066fa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	021b      	lsls	r3, r3, #8
 8006700:	697a      	ldr	r2, [r7, #20]
 8006702:	4313      	orrs	r3, r2
 8006704:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800670c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	031b      	lsls	r3, r3, #12
 8006712:	b29b      	uxth	r3, r3
 8006714:	697a      	ldr	r2, [r7, #20]
 8006716:	4313      	orrs	r3, r2
 8006718:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006720:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	011b      	lsls	r3, r3, #4
 8006726:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800672a:	693a      	ldr	r2, [r7, #16]
 800672c:	4313      	orrs	r3, r2
 800672e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	697a      	ldr	r2, [r7, #20]
 8006734:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	693a      	ldr	r2, [r7, #16]
 800673a:	621a      	str	r2, [r3, #32]
}
 800673c:	bf00      	nop
 800673e:	371c      	adds	r7, #28
 8006740:	46bd      	mov	sp, r7
 8006742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006746:	4770      	bx	lr

08006748 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006748:	b480      	push	{r7}
 800674a:	b087      	sub	sp, #28
 800674c:	af00      	add	r7, sp, #0
 800674e:	60f8      	str	r0, [r7, #12]
 8006750:	60b9      	str	r1, [r7, #8]
 8006752:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	6a1b      	ldr	r3, [r3, #32]
 8006758:	f023 0210 	bic.w	r2, r3, #16
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	699b      	ldr	r3, [r3, #24]
 8006764:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	6a1b      	ldr	r3, [r3, #32]
 800676a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006772:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	031b      	lsls	r3, r3, #12
 8006778:	697a      	ldr	r2, [r7, #20]
 800677a:	4313      	orrs	r3, r2
 800677c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006784:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	011b      	lsls	r3, r3, #4
 800678a:	693a      	ldr	r2, [r7, #16]
 800678c:	4313      	orrs	r3, r2
 800678e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	697a      	ldr	r2, [r7, #20]
 8006794:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	693a      	ldr	r2, [r7, #16]
 800679a:	621a      	str	r2, [r3, #32]
}
 800679c:	bf00      	nop
 800679e:	371c      	adds	r7, #28
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr

080067a8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b087      	sub	sp, #28
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	60f8      	str	r0, [r7, #12]
 80067b0:	60b9      	str	r1, [r7, #8]
 80067b2:	607a      	str	r2, [r7, #4]
 80067b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	6a1b      	ldr	r3, [r3, #32]
 80067ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	69db      	ldr	r3, [r3, #28]
 80067c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	6a1b      	ldr	r3, [r3, #32]
 80067cc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	f023 0303 	bic.w	r3, r3, #3
 80067d4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80067d6:	697a      	ldr	r2, [r7, #20]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	4313      	orrs	r3, r2
 80067dc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80067e4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	011b      	lsls	r3, r3, #4
 80067ea:	b2db      	uxtb	r3, r3
 80067ec:	697a      	ldr	r2, [r7, #20]
 80067ee:	4313      	orrs	r3, r2
 80067f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80067f8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	021b      	lsls	r3, r3, #8
 80067fe:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006802:	693a      	ldr	r2, [r7, #16]
 8006804:	4313      	orrs	r3, r2
 8006806:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	697a      	ldr	r2, [r7, #20]
 800680c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	693a      	ldr	r2, [r7, #16]
 8006812:	621a      	str	r2, [r3, #32]
}
 8006814:	bf00      	nop
 8006816:	371c      	adds	r7, #28
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr

08006820 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006820:	b480      	push	{r7}
 8006822:	b087      	sub	sp, #28
 8006824:	af00      	add	r7, sp, #0
 8006826:	60f8      	str	r0, [r7, #12]
 8006828:	60b9      	str	r1, [r7, #8]
 800682a:	607a      	str	r2, [r7, #4]
 800682c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	6a1b      	ldr	r3, [r3, #32]
 8006832:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	69db      	ldr	r3, [r3, #28]
 800683e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	6a1b      	ldr	r3, [r3, #32]
 8006844:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800684c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	021b      	lsls	r3, r3, #8
 8006852:	697a      	ldr	r2, [r7, #20]
 8006854:	4313      	orrs	r3, r2
 8006856:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800685e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	031b      	lsls	r3, r3, #12
 8006864:	b29b      	uxth	r3, r3
 8006866:	697a      	ldr	r2, [r7, #20]
 8006868:	4313      	orrs	r3, r2
 800686a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006872:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	031b      	lsls	r3, r3, #12
 8006878:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800687c:	693a      	ldr	r2, [r7, #16]
 800687e:	4313      	orrs	r3, r2
 8006880:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	697a      	ldr	r2, [r7, #20]
 8006886:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	693a      	ldr	r2, [r7, #16]
 800688c:	621a      	str	r2, [r3, #32]
}
 800688e:	bf00      	nop
 8006890:	371c      	adds	r7, #28
 8006892:	46bd      	mov	sp, r7
 8006894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006898:	4770      	bx	lr
	...

0800689c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800689c:	b480      	push	{r7}
 800689e:	b085      	sub	sp, #20
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
 80068a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	689b      	ldr	r3, [r3, #8]
 80068aa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80068ac:	68fa      	ldr	r2, [r7, #12]
 80068ae:	4b09      	ldr	r3, [pc, #36]	; (80068d4 <TIM_ITRx_SetConfig+0x38>)
 80068b0:	4013      	ands	r3, r2
 80068b2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80068b4:	683a      	ldr	r2, [r7, #0]
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	4313      	orrs	r3, r2
 80068ba:	f043 0307 	orr.w	r3, r3, #7
 80068be:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	68fa      	ldr	r2, [r7, #12]
 80068c4:	609a      	str	r2, [r3, #8]
}
 80068c6:	bf00      	nop
 80068c8:	3714      	adds	r7, #20
 80068ca:	46bd      	mov	sp, r7
 80068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d0:	4770      	bx	lr
 80068d2:	bf00      	nop
 80068d4:	ffcfff8f 	.word	0xffcfff8f

080068d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80068d8:	b480      	push	{r7}
 80068da:	b087      	sub	sp, #28
 80068dc:	af00      	add	r7, sp, #0
 80068de:	60f8      	str	r0, [r7, #12]
 80068e0:	60b9      	str	r1, [r7, #8]
 80068e2:	607a      	str	r2, [r7, #4]
 80068e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80068f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	021a      	lsls	r2, r3, #8
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	431a      	orrs	r2, r3
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	4313      	orrs	r3, r2
 8006900:	697a      	ldr	r2, [r7, #20]
 8006902:	4313      	orrs	r3, r2
 8006904:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	697a      	ldr	r2, [r7, #20]
 800690a:	609a      	str	r2, [r3, #8]
}
 800690c:	bf00      	nop
 800690e:	371c      	adds	r7, #28
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr

08006918 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006918:	b480      	push	{r7}
 800691a:	b087      	sub	sp, #28
 800691c:	af00      	add	r7, sp, #0
 800691e:	60f8      	str	r0, [r7, #12]
 8006920:	60b9      	str	r1, [r7, #8]
 8006922:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	f003 031f 	and.w	r3, r3, #31
 800692a:	2201      	movs	r2, #1
 800692c:	fa02 f303 	lsl.w	r3, r2, r3
 8006930:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	6a1a      	ldr	r2, [r3, #32]
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	43db      	mvns	r3, r3
 800693a:	401a      	ands	r2, r3
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	6a1a      	ldr	r2, [r3, #32]
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	f003 031f 	and.w	r3, r3, #31
 800694a:	6879      	ldr	r1, [r7, #4]
 800694c:	fa01 f303 	lsl.w	r3, r1, r3
 8006950:	431a      	orrs	r2, r3
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	621a      	str	r2, [r3, #32]
}
 8006956:	bf00      	nop
 8006958:	371c      	adds	r7, #28
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr
	...

08006964 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006964:	b480      	push	{r7}
 8006966:	b085      	sub	sp, #20
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
 800696c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006974:	2b01      	cmp	r3, #1
 8006976:	d101      	bne.n	800697c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006978:	2302      	movs	r3, #2
 800697a:	e077      	b.n	8006a6c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2201      	movs	r2, #1
 8006980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2202      	movs	r2, #2
 8006988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a35      	ldr	r2, [pc, #212]	; (8006a78 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d004      	beq.n	80069b0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a34      	ldr	r2, [pc, #208]	; (8006a7c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d108      	bne.n	80069c2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80069b6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	68fa      	ldr	r2, [r7, #12]
 80069be:	4313      	orrs	r3, r2
 80069c0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069c8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	68fa      	ldr	r2, [r7, #12]
 80069d0:	4313      	orrs	r3, r2
 80069d2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	68fa      	ldr	r2, [r7, #12]
 80069da:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a25      	ldr	r2, [pc, #148]	; (8006a78 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d02c      	beq.n	8006a40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069ee:	d027      	beq.n	8006a40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a22      	ldr	r2, [pc, #136]	; (8006a80 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d022      	beq.n	8006a40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a21      	ldr	r2, [pc, #132]	; (8006a84 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d01d      	beq.n	8006a40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a1f      	ldr	r2, [pc, #124]	; (8006a88 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d018      	beq.n	8006a40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a1a      	ldr	r2, [pc, #104]	; (8006a7c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d013      	beq.n	8006a40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a1b      	ldr	r2, [pc, #108]	; (8006a8c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d00e      	beq.n	8006a40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a1a      	ldr	r2, [pc, #104]	; (8006a90 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d009      	beq.n	8006a40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a18      	ldr	r2, [pc, #96]	; (8006a94 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d004      	beq.n	8006a40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a17      	ldr	r2, [pc, #92]	; (8006a98 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d10c      	bne.n	8006a5a <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a46:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	68ba      	ldr	r2, [r7, #8]
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	68ba      	ldr	r2, [r7, #8]
 8006a58:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2200      	movs	r2, #0
 8006a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a6a:	2300      	movs	r3, #0
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3714      	adds	r7, #20
 8006a70:	46bd      	mov	sp, r7
 8006a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a76:	4770      	bx	lr
 8006a78:	40010000 	.word	0x40010000
 8006a7c:	40010400 	.word	0x40010400
 8006a80:	40000400 	.word	0x40000400
 8006a84:	40000800 	.word	0x40000800
 8006a88:	40000c00 	.word	0x40000c00
 8006a8c:	40001800 	.word	0x40001800
 8006a90:	40014000 	.word	0x40014000
 8006a94:	4000e000 	.word	0x4000e000
 8006a98:	4000e400 	.word	0x4000e400

08006a9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b083      	sub	sp, #12
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006aa4:	bf00      	nop
 8006aa6:	370c      	adds	r7, #12
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aae:	4770      	bx	lr

08006ab0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b083      	sub	sp, #12
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ab8:	bf00      	nop
 8006aba:	370c      	adds	r7, #12
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr

08006ac4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b083      	sub	sp, #12
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006acc:	bf00      	nop
 8006ace:	370c      	adds	r7, #12
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr

08006ad8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b082      	sub	sp, #8
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d101      	bne.n	8006aea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	e042      	b.n	8006b70 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d106      	bne.n	8006b02 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2200      	movs	r2, #0
 8006af8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f7fb f923 	bl	8001d48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2224      	movs	r2, #36	; 0x24
 8006b06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	681a      	ldr	r2, [r3, #0]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f022 0201 	bic.w	r2, r2, #1
 8006b18:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f000 f82c 	bl	8006b78 <UART_SetConfig>
 8006b20:	4603      	mov	r3, r0
 8006b22:	2b01      	cmp	r3, #1
 8006b24:	d101      	bne.n	8006b2a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006b26:	2301      	movs	r3, #1
 8006b28:	e022      	b.n	8006b70 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d002      	beq.n	8006b38 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f000 fe7e 	bl	8007834 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	685a      	ldr	r2, [r3, #4]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006b46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	689a      	ldr	r2, [r3, #8]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006b56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	681a      	ldr	r2, [r3, #0]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f042 0201 	orr.w	r2, r2, #1
 8006b66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f000 ff05 	bl	8007978 <UART_CheckIdleState>
 8006b6e:	4603      	mov	r3, r0
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3708      	adds	r7, #8
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}

08006b78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b78:	b5b0      	push	{r4, r5, r7, lr}
 8006b7a:	b08e      	sub	sp, #56	; 0x38
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006b80:	2300      	movs	r3, #0
 8006b82:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	689a      	ldr	r2, [r3, #8]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	691b      	ldr	r3, [r3, #16]
 8006b8e:	431a      	orrs	r2, r3
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	695b      	ldr	r3, [r3, #20]
 8006b94:	431a      	orrs	r2, r3
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	69db      	ldr	r3, [r3, #28]
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	4bbf      	ldr	r3, [pc, #764]	; (8006ea4 <UART_SetConfig+0x32c>)
 8006ba6:	4013      	ands	r3, r2
 8006ba8:	687a      	ldr	r2, [r7, #4]
 8006baa:	6812      	ldr	r2, [r2, #0]
 8006bac:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006bae:	430b      	orrs	r3, r1
 8006bb0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	68da      	ldr	r2, [r3, #12]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	430a      	orrs	r2, r1
 8006bc6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	699b      	ldr	r3, [r3, #24]
 8006bcc:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4ab5      	ldr	r2, [pc, #724]	; (8006ea8 <UART_SetConfig+0x330>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d004      	beq.n	8006be2 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6a1b      	ldr	r3, [r3, #32]
 8006bdc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006bde:	4313      	orrs	r3, r2
 8006be0:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	689a      	ldr	r2, [r3, #8]
 8006be8:	4bb0      	ldr	r3, [pc, #704]	; (8006eac <UART_SetConfig+0x334>)
 8006bea:	4013      	ands	r3, r2
 8006bec:	687a      	ldr	r2, [r7, #4]
 8006bee:	6812      	ldr	r2, [r2, #0]
 8006bf0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006bf2:	430b      	orrs	r3, r1
 8006bf4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bfc:	f023 010f 	bic.w	r1, r3, #15
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	430a      	orrs	r2, r1
 8006c0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4aa7      	ldr	r2, [pc, #668]	; (8006eb0 <UART_SetConfig+0x338>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d176      	bne.n	8006d04 <UART_SetConfig+0x18c>
 8006c16:	4ba7      	ldr	r3, [pc, #668]	; (8006eb4 <UART_SetConfig+0x33c>)
 8006c18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006c1e:	2b28      	cmp	r3, #40	; 0x28
 8006c20:	d86c      	bhi.n	8006cfc <UART_SetConfig+0x184>
 8006c22:	a201      	add	r2, pc, #4	; (adr r2, 8006c28 <UART_SetConfig+0xb0>)
 8006c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c28:	08006ccd 	.word	0x08006ccd
 8006c2c:	08006cfd 	.word	0x08006cfd
 8006c30:	08006cfd 	.word	0x08006cfd
 8006c34:	08006cfd 	.word	0x08006cfd
 8006c38:	08006cfd 	.word	0x08006cfd
 8006c3c:	08006cfd 	.word	0x08006cfd
 8006c40:	08006cfd 	.word	0x08006cfd
 8006c44:	08006cfd 	.word	0x08006cfd
 8006c48:	08006cd5 	.word	0x08006cd5
 8006c4c:	08006cfd 	.word	0x08006cfd
 8006c50:	08006cfd 	.word	0x08006cfd
 8006c54:	08006cfd 	.word	0x08006cfd
 8006c58:	08006cfd 	.word	0x08006cfd
 8006c5c:	08006cfd 	.word	0x08006cfd
 8006c60:	08006cfd 	.word	0x08006cfd
 8006c64:	08006cfd 	.word	0x08006cfd
 8006c68:	08006cdd 	.word	0x08006cdd
 8006c6c:	08006cfd 	.word	0x08006cfd
 8006c70:	08006cfd 	.word	0x08006cfd
 8006c74:	08006cfd 	.word	0x08006cfd
 8006c78:	08006cfd 	.word	0x08006cfd
 8006c7c:	08006cfd 	.word	0x08006cfd
 8006c80:	08006cfd 	.word	0x08006cfd
 8006c84:	08006cfd 	.word	0x08006cfd
 8006c88:	08006ce5 	.word	0x08006ce5
 8006c8c:	08006cfd 	.word	0x08006cfd
 8006c90:	08006cfd 	.word	0x08006cfd
 8006c94:	08006cfd 	.word	0x08006cfd
 8006c98:	08006cfd 	.word	0x08006cfd
 8006c9c:	08006cfd 	.word	0x08006cfd
 8006ca0:	08006cfd 	.word	0x08006cfd
 8006ca4:	08006cfd 	.word	0x08006cfd
 8006ca8:	08006ced 	.word	0x08006ced
 8006cac:	08006cfd 	.word	0x08006cfd
 8006cb0:	08006cfd 	.word	0x08006cfd
 8006cb4:	08006cfd 	.word	0x08006cfd
 8006cb8:	08006cfd 	.word	0x08006cfd
 8006cbc:	08006cfd 	.word	0x08006cfd
 8006cc0:	08006cfd 	.word	0x08006cfd
 8006cc4:	08006cfd 	.word	0x08006cfd
 8006cc8:	08006cf5 	.word	0x08006cf5
 8006ccc:	2301      	movs	r3, #1
 8006cce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006cd2:	e326      	b.n	8007322 <UART_SetConfig+0x7aa>
 8006cd4:	2304      	movs	r3, #4
 8006cd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006cda:	e322      	b.n	8007322 <UART_SetConfig+0x7aa>
 8006cdc:	2308      	movs	r3, #8
 8006cde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ce2:	e31e      	b.n	8007322 <UART_SetConfig+0x7aa>
 8006ce4:	2310      	movs	r3, #16
 8006ce6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006cea:	e31a      	b.n	8007322 <UART_SetConfig+0x7aa>
 8006cec:	2320      	movs	r3, #32
 8006cee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006cf2:	e316      	b.n	8007322 <UART_SetConfig+0x7aa>
 8006cf4:	2340      	movs	r3, #64	; 0x40
 8006cf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006cfa:	e312      	b.n	8007322 <UART_SetConfig+0x7aa>
 8006cfc:	2380      	movs	r3, #128	; 0x80
 8006cfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d02:	e30e      	b.n	8007322 <UART_SetConfig+0x7aa>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a6b      	ldr	r2, [pc, #428]	; (8006eb8 <UART_SetConfig+0x340>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d130      	bne.n	8006d70 <UART_SetConfig+0x1f8>
 8006d0e:	4b69      	ldr	r3, [pc, #420]	; (8006eb4 <UART_SetConfig+0x33c>)
 8006d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d12:	f003 0307 	and.w	r3, r3, #7
 8006d16:	2b05      	cmp	r3, #5
 8006d18:	d826      	bhi.n	8006d68 <UART_SetConfig+0x1f0>
 8006d1a:	a201      	add	r2, pc, #4	; (adr r2, 8006d20 <UART_SetConfig+0x1a8>)
 8006d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d20:	08006d39 	.word	0x08006d39
 8006d24:	08006d41 	.word	0x08006d41
 8006d28:	08006d49 	.word	0x08006d49
 8006d2c:	08006d51 	.word	0x08006d51
 8006d30:	08006d59 	.word	0x08006d59
 8006d34:	08006d61 	.word	0x08006d61
 8006d38:	2300      	movs	r3, #0
 8006d3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d3e:	e2f0      	b.n	8007322 <UART_SetConfig+0x7aa>
 8006d40:	2304      	movs	r3, #4
 8006d42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d46:	e2ec      	b.n	8007322 <UART_SetConfig+0x7aa>
 8006d48:	2308      	movs	r3, #8
 8006d4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d4e:	e2e8      	b.n	8007322 <UART_SetConfig+0x7aa>
 8006d50:	2310      	movs	r3, #16
 8006d52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d56:	e2e4      	b.n	8007322 <UART_SetConfig+0x7aa>
 8006d58:	2320      	movs	r3, #32
 8006d5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d5e:	e2e0      	b.n	8007322 <UART_SetConfig+0x7aa>
 8006d60:	2340      	movs	r3, #64	; 0x40
 8006d62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d66:	e2dc      	b.n	8007322 <UART_SetConfig+0x7aa>
 8006d68:	2380      	movs	r3, #128	; 0x80
 8006d6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d6e:	e2d8      	b.n	8007322 <UART_SetConfig+0x7aa>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a51      	ldr	r2, [pc, #324]	; (8006ebc <UART_SetConfig+0x344>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d130      	bne.n	8006ddc <UART_SetConfig+0x264>
 8006d7a:	4b4e      	ldr	r3, [pc, #312]	; (8006eb4 <UART_SetConfig+0x33c>)
 8006d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d7e:	f003 0307 	and.w	r3, r3, #7
 8006d82:	2b05      	cmp	r3, #5
 8006d84:	d826      	bhi.n	8006dd4 <UART_SetConfig+0x25c>
 8006d86:	a201      	add	r2, pc, #4	; (adr r2, 8006d8c <UART_SetConfig+0x214>)
 8006d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d8c:	08006da5 	.word	0x08006da5
 8006d90:	08006dad 	.word	0x08006dad
 8006d94:	08006db5 	.word	0x08006db5
 8006d98:	08006dbd 	.word	0x08006dbd
 8006d9c:	08006dc5 	.word	0x08006dc5
 8006da0:	08006dcd 	.word	0x08006dcd
 8006da4:	2300      	movs	r3, #0
 8006da6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006daa:	e2ba      	b.n	8007322 <UART_SetConfig+0x7aa>
 8006dac:	2304      	movs	r3, #4
 8006dae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006db2:	e2b6      	b.n	8007322 <UART_SetConfig+0x7aa>
 8006db4:	2308      	movs	r3, #8
 8006db6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006dba:	e2b2      	b.n	8007322 <UART_SetConfig+0x7aa>
 8006dbc:	2310      	movs	r3, #16
 8006dbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006dc2:	e2ae      	b.n	8007322 <UART_SetConfig+0x7aa>
 8006dc4:	2320      	movs	r3, #32
 8006dc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006dca:	e2aa      	b.n	8007322 <UART_SetConfig+0x7aa>
 8006dcc:	2340      	movs	r3, #64	; 0x40
 8006dce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006dd2:	e2a6      	b.n	8007322 <UART_SetConfig+0x7aa>
 8006dd4:	2380      	movs	r3, #128	; 0x80
 8006dd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006dda:	e2a2      	b.n	8007322 <UART_SetConfig+0x7aa>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a37      	ldr	r2, [pc, #220]	; (8006ec0 <UART_SetConfig+0x348>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d130      	bne.n	8006e48 <UART_SetConfig+0x2d0>
 8006de6:	4b33      	ldr	r3, [pc, #204]	; (8006eb4 <UART_SetConfig+0x33c>)
 8006de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dea:	f003 0307 	and.w	r3, r3, #7
 8006dee:	2b05      	cmp	r3, #5
 8006df0:	d826      	bhi.n	8006e40 <UART_SetConfig+0x2c8>
 8006df2:	a201      	add	r2, pc, #4	; (adr r2, 8006df8 <UART_SetConfig+0x280>)
 8006df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006df8:	08006e11 	.word	0x08006e11
 8006dfc:	08006e19 	.word	0x08006e19
 8006e00:	08006e21 	.word	0x08006e21
 8006e04:	08006e29 	.word	0x08006e29
 8006e08:	08006e31 	.word	0x08006e31
 8006e0c:	08006e39 	.word	0x08006e39
 8006e10:	2300      	movs	r3, #0
 8006e12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e16:	e284      	b.n	8007322 <UART_SetConfig+0x7aa>
 8006e18:	2304      	movs	r3, #4
 8006e1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e1e:	e280      	b.n	8007322 <UART_SetConfig+0x7aa>
 8006e20:	2308      	movs	r3, #8
 8006e22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e26:	e27c      	b.n	8007322 <UART_SetConfig+0x7aa>
 8006e28:	2310      	movs	r3, #16
 8006e2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e2e:	e278      	b.n	8007322 <UART_SetConfig+0x7aa>
 8006e30:	2320      	movs	r3, #32
 8006e32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e36:	e274      	b.n	8007322 <UART_SetConfig+0x7aa>
 8006e38:	2340      	movs	r3, #64	; 0x40
 8006e3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e3e:	e270      	b.n	8007322 <UART_SetConfig+0x7aa>
 8006e40:	2380      	movs	r3, #128	; 0x80
 8006e42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e46:	e26c      	b.n	8007322 <UART_SetConfig+0x7aa>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a1d      	ldr	r2, [pc, #116]	; (8006ec4 <UART_SetConfig+0x34c>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d142      	bne.n	8006ed8 <UART_SetConfig+0x360>
 8006e52:	4b18      	ldr	r3, [pc, #96]	; (8006eb4 <UART_SetConfig+0x33c>)
 8006e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e56:	f003 0307 	and.w	r3, r3, #7
 8006e5a:	2b05      	cmp	r3, #5
 8006e5c:	d838      	bhi.n	8006ed0 <UART_SetConfig+0x358>
 8006e5e:	a201      	add	r2, pc, #4	; (adr r2, 8006e64 <UART_SetConfig+0x2ec>)
 8006e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e64:	08006e7d 	.word	0x08006e7d
 8006e68:	08006e85 	.word	0x08006e85
 8006e6c:	08006e8d 	.word	0x08006e8d
 8006e70:	08006e95 	.word	0x08006e95
 8006e74:	08006e9d 	.word	0x08006e9d
 8006e78:	08006ec9 	.word	0x08006ec9
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e82:	e24e      	b.n	8007322 <UART_SetConfig+0x7aa>
 8006e84:	2304      	movs	r3, #4
 8006e86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e8a:	e24a      	b.n	8007322 <UART_SetConfig+0x7aa>
 8006e8c:	2308      	movs	r3, #8
 8006e8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e92:	e246      	b.n	8007322 <UART_SetConfig+0x7aa>
 8006e94:	2310      	movs	r3, #16
 8006e96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e9a:	e242      	b.n	8007322 <UART_SetConfig+0x7aa>
 8006e9c:	2320      	movs	r3, #32
 8006e9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ea2:	e23e      	b.n	8007322 <UART_SetConfig+0x7aa>
 8006ea4:	cfff69f3 	.word	0xcfff69f3
 8006ea8:	58000c00 	.word	0x58000c00
 8006eac:	11fff4ff 	.word	0x11fff4ff
 8006eb0:	40011000 	.word	0x40011000
 8006eb4:	58024400 	.word	0x58024400
 8006eb8:	40004400 	.word	0x40004400
 8006ebc:	40004800 	.word	0x40004800
 8006ec0:	40004c00 	.word	0x40004c00
 8006ec4:	40005000 	.word	0x40005000
 8006ec8:	2340      	movs	r3, #64	; 0x40
 8006eca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ece:	e228      	b.n	8007322 <UART_SetConfig+0x7aa>
 8006ed0:	2380      	movs	r3, #128	; 0x80
 8006ed2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ed6:	e224      	b.n	8007322 <UART_SetConfig+0x7aa>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4ab1      	ldr	r2, [pc, #708]	; (80071a4 <UART_SetConfig+0x62c>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d176      	bne.n	8006fd0 <UART_SetConfig+0x458>
 8006ee2:	4bb1      	ldr	r3, [pc, #708]	; (80071a8 <UART_SetConfig+0x630>)
 8006ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ee6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006eea:	2b28      	cmp	r3, #40	; 0x28
 8006eec:	d86c      	bhi.n	8006fc8 <UART_SetConfig+0x450>
 8006eee:	a201      	add	r2, pc, #4	; (adr r2, 8006ef4 <UART_SetConfig+0x37c>)
 8006ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ef4:	08006f99 	.word	0x08006f99
 8006ef8:	08006fc9 	.word	0x08006fc9
 8006efc:	08006fc9 	.word	0x08006fc9
 8006f00:	08006fc9 	.word	0x08006fc9
 8006f04:	08006fc9 	.word	0x08006fc9
 8006f08:	08006fc9 	.word	0x08006fc9
 8006f0c:	08006fc9 	.word	0x08006fc9
 8006f10:	08006fc9 	.word	0x08006fc9
 8006f14:	08006fa1 	.word	0x08006fa1
 8006f18:	08006fc9 	.word	0x08006fc9
 8006f1c:	08006fc9 	.word	0x08006fc9
 8006f20:	08006fc9 	.word	0x08006fc9
 8006f24:	08006fc9 	.word	0x08006fc9
 8006f28:	08006fc9 	.word	0x08006fc9
 8006f2c:	08006fc9 	.word	0x08006fc9
 8006f30:	08006fc9 	.word	0x08006fc9
 8006f34:	08006fa9 	.word	0x08006fa9
 8006f38:	08006fc9 	.word	0x08006fc9
 8006f3c:	08006fc9 	.word	0x08006fc9
 8006f40:	08006fc9 	.word	0x08006fc9
 8006f44:	08006fc9 	.word	0x08006fc9
 8006f48:	08006fc9 	.word	0x08006fc9
 8006f4c:	08006fc9 	.word	0x08006fc9
 8006f50:	08006fc9 	.word	0x08006fc9
 8006f54:	08006fb1 	.word	0x08006fb1
 8006f58:	08006fc9 	.word	0x08006fc9
 8006f5c:	08006fc9 	.word	0x08006fc9
 8006f60:	08006fc9 	.word	0x08006fc9
 8006f64:	08006fc9 	.word	0x08006fc9
 8006f68:	08006fc9 	.word	0x08006fc9
 8006f6c:	08006fc9 	.word	0x08006fc9
 8006f70:	08006fc9 	.word	0x08006fc9
 8006f74:	08006fb9 	.word	0x08006fb9
 8006f78:	08006fc9 	.word	0x08006fc9
 8006f7c:	08006fc9 	.word	0x08006fc9
 8006f80:	08006fc9 	.word	0x08006fc9
 8006f84:	08006fc9 	.word	0x08006fc9
 8006f88:	08006fc9 	.word	0x08006fc9
 8006f8c:	08006fc9 	.word	0x08006fc9
 8006f90:	08006fc9 	.word	0x08006fc9
 8006f94:	08006fc1 	.word	0x08006fc1
 8006f98:	2301      	movs	r3, #1
 8006f9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f9e:	e1c0      	b.n	8007322 <UART_SetConfig+0x7aa>
 8006fa0:	2304      	movs	r3, #4
 8006fa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006fa6:	e1bc      	b.n	8007322 <UART_SetConfig+0x7aa>
 8006fa8:	2308      	movs	r3, #8
 8006faa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006fae:	e1b8      	b.n	8007322 <UART_SetConfig+0x7aa>
 8006fb0:	2310      	movs	r3, #16
 8006fb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006fb6:	e1b4      	b.n	8007322 <UART_SetConfig+0x7aa>
 8006fb8:	2320      	movs	r3, #32
 8006fba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006fbe:	e1b0      	b.n	8007322 <UART_SetConfig+0x7aa>
 8006fc0:	2340      	movs	r3, #64	; 0x40
 8006fc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006fc6:	e1ac      	b.n	8007322 <UART_SetConfig+0x7aa>
 8006fc8:	2380      	movs	r3, #128	; 0x80
 8006fca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006fce:	e1a8      	b.n	8007322 <UART_SetConfig+0x7aa>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a75      	ldr	r2, [pc, #468]	; (80071ac <UART_SetConfig+0x634>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d130      	bne.n	800703c <UART_SetConfig+0x4c4>
 8006fda:	4b73      	ldr	r3, [pc, #460]	; (80071a8 <UART_SetConfig+0x630>)
 8006fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fde:	f003 0307 	and.w	r3, r3, #7
 8006fe2:	2b05      	cmp	r3, #5
 8006fe4:	d826      	bhi.n	8007034 <UART_SetConfig+0x4bc>
 8006fe6:	a201      	add	r2, pc, #4	; (adr r2, 8006fec <UART_SetConfig+0x474>)
 8006fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fec:	08007005 	.word	0x08007005
 8006ff0:	0800700d 	.word	0x0800700d
 8006ff4:	08007015 	.word	0x08007015
 8006ff8:	0800701d 	.word	0x0800701d
 8006ffc:	08007025 	.word	0x08007025
 8007000:	0800702d 	.word	0x0800702d
 8007004:	2300      	movs	r3, #0
 8007006:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800700a:	e18a      	b.n	8007322 <UART_SetConfig+0x7aa>
 800700c:	2304      	movs	r3, #4
 800700e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007012:	e186      	b.n	8007322 <UART_SetConfig+0x7aa>
 8007014:	2308      	movs	r3, #8
 8007016:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800701a:	e182      	b.n	8007322 <UART_SetConfig+0x7aa>
 800701c:	2310      	movs	r3, #16
 800701e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007022:	e17e      	b.n	8007322 <UART_SetConfig+0x7aa>
 8007024:	2320      	movs	r3, #32
 8007026:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800702a:	e17a      	b.n	8007322 <UART_SetConfig+0x7aa>
 800702c:	2340      	movs	r3, #64	; 0x40
 800702e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007032:	e176      	b.n	8007322 <UART_SetConfig+0x7aa>
 8007034:	2380      	movs	r3, #128	; 0x80
 8007036:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800703a:	e172      	b.n	8007322 <UART_SetConfig+0x7aa>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a5b      	ldr	r2, [pc, #364]	; (80071b0 <UART_SetConfig+0x638>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d130      	bne.n	80070a8 <UART_SetConfig+0x530>
 8007046:	4b58      	ldr	r3, [pc, #352]	; (80071a8 <UART_SetConfig+0x630>)
 8007048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800704a:	f003 0307 	and.w	r3, r3, #7
 800704e:	2b05      	cmp	r3, #5
 8007050:	d826      	bhi.n	80070a0 <UART_SetConfig+0x528>
 8007052:	a201      	add	r2, pc, #4	; (adr r2, 8007058 <UART_SetConfig+0x4e0>)
 8007054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007058:	08007071 	.word	0x08007071
 800705c:	08007079 	.word	0x08007079
 8007060:	08007081 	.word	0x08007081
 8007064:	08007089 	.word	0x08007089
 8007068:	08007091 	.word	0x08007091
 800706c:	08007099 	.word	0x08007099
 8007070:	2300      	movs	r3, #0
 8007072:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007076:	e154      	b.n	8007322 <UART_SetConfig+0x7aa>
 8007078:	2304      	movs	r3, #4
 800707a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800707e:	e150      	b.n	8007322 <UART_SetConfig+0x7aa>
 8007080:	2308      	movs	r3, #8
 8007082:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007086:	e14c      	b.n	8007322 <UART_SetConfig+0x7aa>
 8007088:	2310      	movs	r3, #16
 800708a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800708e:	e148      	b.n	8007322 <UART_SetConfig+0x7aa>
 8007090:	2320      	movs	r3, #32
 8007092:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007096:	e144      	b.n	8007322 <UART_SetConfig+0x7aa>
 8007098:	2340      	movs	r3, #64	; 0x40
 800709a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800709e:	e140      	b.n	8007322 <UART_SetConfig+0x7aa>
 80070a0:	2380      	movs	r3, #128	; 0x80
 80070a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80070a6:	e13c      	b.n	8007322 <UART_SetConfig+0x7aa>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a41      	ldr	r2, [pc, #260]	; (80071b4 <UART_SetConfig+0x63c>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	f040 8082 	bne.w	80071b8 <UART_SetConfig+0x640>
 80070b4:	4b3c      	ldr	r3, [pc, #240]	; (80071a8 <UART_SetConfig+0x630>)
 80070b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80070bc:	2b28      	cmp	r3, #40	; 0x28
 80070be:	d86d      	bhi.n	800719c <UART_SetConfig+0x624>
 80070c0:	a201      	add	r2, pc, #4	; (adr r2, 80070c8 <UART_SetConfig+0x550>)
 80070c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070c6:	bf00      	nop
 80070c8:	0800716d 	.word	0x0800716d
 80070cc:	0800719d 	.word	0x0800719d
 80070d0:	0800719d 	.word	0x0800719d
 80070d4:	0800719d 	.word	0x0800719d
 80070d8:	0800719d 	.word	0x0800719d
 80070dc:	0800719d 	.word	0x0800719d
 80070e0:	0800719d 	.word	0x0800719d
 80070e4:	0800719d 	.word	0x0800719d
 80070e8:	08007175 	.word	0x08007175
 80070ec:	0800719d 	.word	0x0800719d
 80070f0:	0800719d 	.word	0x0800719d
 80070f4:	0800719d 	.word	0x0800719d
 80070f8:	0800719d 	.word	0x0800719d
 80070fc:	0800719d 	.word	0x0800719d
 8007100:	0800719d 	.word	0x0800719d
 8007104:	0800719d 	.word	0x0800719d
 8007108:	0800717d 	.word	0x0800717d
 800710c:	0800719d 	.word	0x0800719d
 8007110:	0800719d 	.word	0x0800719d
 8007114:	0800719d 	.word	0x0800719d
 8007118:	0800719d 	.word	0x0800719d
 800711c:	0800719d 	.word	0x0800719d
 8007120:	0800719d 	.word	0x0800719d
 8007124:	0800719d 	.word	0x0800719d
 8007128:	08007185 	.word	0x08007185
 800712c:	0800719d 	.word	0x0800719d
 8007130:	0800719d 	.word	0x0800719d
 8007134:	0800719d 	.word	0x0800719d
 8007138:	0800719d 	.word	0x0800719d
 800713c:	0800719d 	.word	0x0800719d
 8007140:	0800719d 	.word	0x0800719d
 8007144:	0800719d 	.word	0x0800719d
 8007148:	0800718d 	.word	0x0800718d
 800714c:	0800719d 	.word	0x0800719d
 8007150:	0800719d 	.word	0x0800719d
 8007154:	0800719d 	.word	0x0800719d
 8007158:	0800719d 	.word	0x0800719d
 800715c:	0800719d 	.word	0x0800719d
 8007160:	0800719d 	.word	0x0800719d
 8007164:	0800719d 	.word	0x0800719d
 8007168:	08007195 	.word	0x08007195
 800716c:	2301      	movs	r3, #1
 800716e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007172:	e0d6      	b.n	8007322 <UART_SetConfig+0x7aa>
 8007174:	2304      	movs	r3, #4
 8007176:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800717a:	e0d2      	b.n	8007322 <UART_SetConfig+0x7aa>
 800717c:	2308      	movs	r3, #8
 800717e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007182:	e0ce      	b.n	8007322 <UART_SetConfig+0x7aa>
 8007184:	2310      	movs	r3, #16
 8007186:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800718a:	e0ca      	b.n	8007322 <UART_SetConfig+0x7aa>
 800718c:	2320      	movs	r3, #32
 800718e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007192:	e0c6      	b.n	8007322 <UART_SetConfig+0x7aa>
 8007194:	2340      	movs	r3, #64	; 0x40
 8007196:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800719a:	e0c2      	b.n	8007322 <UART_SetConfig+0x7aa>
 800719c:	2380      	movs	r3, #128	; 0x80
 800719e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071a2:	e0be      	b.n	8007322 <UART_SetConfig+0x7aa>
 80071a4:	40011400 	.word	0x40011400
 80071a8:	58024400 	.word	0x58024400
 80071ac:	40007800 	.word	0x40007800
 80071b0:	40007c00 	.word	0x40007c00
 80071b4:	40011800 	.word	0x40011800
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4aad      	ldr	r2, [pc, #692]	; (8007474 <UART_SetConfig+0x8fc>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d176      	bne.n	80072b0 <UART_SetConfig+0x738>
 80071c2:	4bad      	ldr	r3, [pc, #692]	; (8007478 <UART_SetConfig+0x900>)
 80071c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80071ca:	2b28      	cmp	r3, #40	; 0x28
 80071cc:	d86c      	bhi.n	80072a8 <UART_SetConfig+0x730>
 80071ce:	a201      	add	r2, pc, #4	; (adr r2, 80071d4 <UART_SetConfig+0x65c>)
 80071d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071d4:	08007279 	.word	0x08007279
 80071d8:	080072a9 	.word	0x080072a9
 80071dc:	080072a9 	.word	0x080072a9
 80071e0:	080072a9 	.word	0x080072a9
 80071e4:	080072a9 	.word	0x080072a9
 80071e8:	080072a9 	.word	0x080072a9
 80071ec:	080072a9 	.word	0x080072a9
 80071f0:	080072a9 	.word	0x080072a9
 80071f4:	08007281 	.word	0x08007281
 80071f8:	080072a9 	.word	0x080072a9
 80071fc:	080072a9 	.word	0x080072a9
 8007200:	080072a9 	.word	0x080072a9
 8007204:	080072a9 	.word	0x080072a9
 8007208:	080072a9 	.word	0x080072a9
 800720c:	080072a9 	.word	0x080072a9
 8007210:	080072a9 	.word	0x080072a9
 8007214:	08007289 	.word	0x08007289
 8007218:	080072a9 	.word	0x080072a9
 800721c:	080072a9 	.word	0x080072a9
 8007220:	080072a9 	.word	0x080072a9
 8007224:	080072a9 	.word	0x080072a9
 8007228:	080072a9 	.word	0x080072a9
 800722c:	080072a9 	.word	0x080072a9
 8007230:	080072a9 	.word	0x080072a9
 8007234:	08007291 	.word	0x08007291
 8007238:	080072a9 	.word	0x080072a9
 800723c:	080072a9 	.word	0x080072a9
 8007240:	080072a9 	.word	0x080072a9
 8007244:	080072a9 	.word	0x080072a9
 8007248:	080072a9 	.word	0x080072a9
 800724c:	080072a9 	.word	0x080072a9
 8007250:	080072a9 	.word	0x080072a9
 8007254:	08007299 	.word	0x08007299
 8007258:	080072a9 	.word	0x080072a9
 800725c:	080072a9 	.word	0x080072a9
 8007260:	080072a9 	.word	0x080072a9
 8007264:	080072a9 	.word	0x080072a9
 8007268:	080072a9 	.word	0x080072a9
 800726c:	080072a9 	.word	0x080072a9
 8007270:	080072a9 	.word	0x080072a9
 8007274:	080072a1 	.word	0x080072a1
 8007278:	2301      	movs	r3, #1
 800727a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800727e:	e050      	b.n	8007322 <UART_SetConfig+0x7aa>
 8007280:	2304      	movs	r3, #4
 8007282:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007286:	e04c      	b.n	8007322 <UART_SetConfig+0x7aa>
 8007288:	2308      	movs	r3, #8
 800728a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800728e:	e048      	b.n	8007322 <UART_SetConfig+0x7aa>
 8007290:	2310      	movs	r3, #16
 8007292:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007296:	e044      	b.n	8007322 <UART_SetConfig+0x7aa>
 8007298:	2320      	movs	r3, #32
 800729a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800729e:	e040      	b.n	8007322 <UART_SetConfig+0x7aa>
 80072a0:	2340      	movs	r3, #64	; 0x40
 80072a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80072a6:	e03c      	b.n	8007322 <UART_SetConfig+0x7aa>
 80072a8:	2380      	movs	r3, #128	; 0x80
 80072aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80072ae:	e038      	b.n	8007322 <UART_SetConfig+0x7aa>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a71      	ldr	r2, [pc, #452]	; (800747c <UART_SetConfig+0x904>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d130      	bne.n	800731c <UART_SetConfig+0x7a4>
 80072ba:	4b6f      	ldr	r3, [pc, #444]	; (8007478 <UART_SetConfig+0x900>)
 80072bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072be:	f003 0307 	and.w	r3, r3, #7
 80072c2:	2b05      	cmp	r3, #5
 80072c4:	d826      	bhi.n	8007314 <UART_SetConfig+0x79c>
 80072c6:	a201      	add	r2, pc, #4	; (adr r2, 80072cc <UART_SetConfig+0x754>)
 80072c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072cc:	080072e5 	.word	0x080072e5
 80072d0:	080072ed 	.word	0x080072ed
 80072d4:	080072f5 	.word	0x080072f5
 80072d8:	080072fd 	.word	0x080072fd
 80072dc:	08007305 	.word	0x08007305
 80072e0:	0800730d 	.word	0x0800730d
 80072e4:	2302      	movs	r3, #2
 80072e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80072ea:	e01a      	b.n	8007322 <UART_SetConfig+0x7aa>
 80072ec:	2304      	movs	r3, #4
 80072ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80072f2:	e016      	b.n	8007322 <UART_SetConfig+0x7aa>
 80072f4:	2308      	movs	r3, #8
 80072f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80072fa:	e012      	b.n	8007322 <UART_SetConfig+0x7aa>
 80072fc:	2310      	movs	r3, #16
 80072fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007302:	e00e      	b.n	8007322 <UART_SetConfig+0x7aa>
 8007304:	2320      	movs	r3, #32
 8007306:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800730a:	e00a      	b.n	8007322 <UART_SetConfig+0x7aa>
 800730c:	2340      	movs	r3, #64	; 0x40
 800730e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007312:	e006      	b.n	8007322 <UART_SetConfig+0x7aa>
 8007314:	2380      	movs	r3, #128	; 0x80
 8007316:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800731a:	e002      	b.n	8007322 <UART_SetConfig+0x7aa>
 800731c:	2380      	movs	r3, #128	; 0x80
 800731e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a55      	ldr	r2, [pc, #340]	; (800747c <UART_SetConfig+0x904>)
 8007328:	4293      	cmp	r3, r2
 800732a:	f040 80f0 	bne.w	800750e <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800732e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007332:	2b20      	cmp	r3, #32
 8007334:	dc46      	bgt.n	80073c4 <UART_SetConfig+0x84c>
 8007336:	2b02      	cmp	r3, #2
 8007338:	db75      	blt.n	8007426 <UART_SetConfig+0x8ae>
 800733a:	3b02      	subs	r3, #2
 800733c:	2b1e      	cmp	r3, #30
 800733e:	d872      	bhi.n	8007426 <UART_SetConfig+0x8ae>
 8007340:	a201      	add	r2, pc, #4	; (adr r2, 8007348 <UART_SetConfig+0x7d0>)
 8007342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007346:	bf00      	nop
 8007348:	080073cb 	.word	0x080073cb
 800734c:	08007427 	.word	0x08007427
 8007350:	080073d3 	.word	0x080073d3
 8007354:	08007427 	.word	0x08007427
 8007358:	08007427 	.word	0x08007427
 800735c:	08007427 	.word	0x08007427
 8007360:	080073e3 	.word	0x080073e3
 8007364:	08007427 	.word	0x08007427
 8007368:	08007427 	.word	0x08007427
 800736c:	08007427 	.word	0x08007427
 8007370:	08007427 	.word	0x08007427
 8007374:	08007427 	.word	0x08007427
 8007378:	08007427 	.word	0x08007427
 800737c:	08007427 	.word	0x08007427
 8007380:	080073f3 	.word	0x080073f3
 8007384:	08007427 	.word	0x08007427
 8007388:	08007427 	.word	0x08007427
 800738c:	08007427 	.word	0x08007427
 8007390:	08007427 	.word	0x08007427
 8007394:	08007427 	.word	0x08007427
 8007398:	08007427 	.word	0x08007427
 800739c:	08007427 	.word	0x08007427
 80073a0:	08007427 	.word	0x08007427
 80073a4:	08007427 	.word	0x08007427
 80073a8:	08007427 	.word	0x08007427
 80073ac:	08007427 	.word	0x08007427
 80073b0:	08007427 	.word	0x08007427
 80073b4:	08007427 	.word	0x08007427
 80073b8:	08007427 	.word	0x08007427
 80073bc:	08007427 	.word	0x08007427
 80073c0:	08007419 	.word	0x08007419
 80073c4:	2b40      	cmp	r3, #64	; 0x40
 80073c6:	d02a      	beq.n	800741e <UART_SetConfig+0x8a6>
 80073c8:	e02d      	b.n	8007426 <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80073ca:	f7fd f83f 	bl	800444c <HAL_RCCEx_GetD3PCLK1Freq>
 80073ce:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80073d0:	e02f      	b.n	8007432 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80073d2:	f107 0314 	add.w	r3, r7, #20
 80073d6:	4618      	mov	r0, r3
 80073d8:	f7fd f84e 	bl	8004478 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80073dc:	69bb      	ldr	r3, [r7, #24]
 80073de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80073e0:	e027      	b.n	8007432 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80073e2:	f107 0308 	add.w	r3, r7, #8
 80073e6:	4618      	mov	r0, r3
 80073e8:	f7fd f99a 	bl	8004720 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80073f0:	e01f      	b.n	8007432 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80073f2:	4b21      	ldr	r3, [pc, #132]	; (8007478 <UART_SetConfig+0x900>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f003 0320 	and.w	r3, r3, #32
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d009      	beq.n	8007412 <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80073fe:	4b1e      	ldr	r3, [pc, #120]	; (8007478 <UART_SetConfig+0x900>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	08db      	lsrs	r3, r3, #3
 8007404:	f003 0303 	and.w	r3, r3, #3
 8007408:	4a1d      	ldr	r2, [pc, #116]	; (8007480 <UART_SetConfig+0x908>)
 800740a:	fa22 f303 	lsr.w	r3, r2, r3
 800740e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007410:	e00f      	b.n	8007432 <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 8007412:	4b1b      	ldr	r3, [pc, #108]	; (8007480 <UART_SetConfig+0x908>)
 8007414:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007416:	e00c      	b.n	8007432 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007418:	4b1a      	ldr	r3, [pc, #104]	; (8007484 <UART_SetConfig+0x90c>)
 800741a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800741c:	e009      	b.n	8007432 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800741e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007422:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007424:	e005      	b.n	8007432 <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 8007426:	2300      	movs	r3, #0
 8007428:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800742a:	2301      	movs	r3, #1
 800742c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007430:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007434:	2b00      	cmp	r3, #0
 8007436:	f000 81e6 	beq.w	8007806 <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800743e:	4a12      	ldr	r2, [pc, #72]	; (8007488 <UART_SetConfig+0x910>)
 8007440:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007444:	461a      	mov	r2, r3
 8007446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007448:	fbb3 f3f2 	udiv	r3, r3, r2
 800744c:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	685a      	ldr	r2, [r3, #4]
 8007452:	4613      	mov	r3, r2
 8007454:	005b      	lsls	r3, r3, #1
 8007456:	4413      	add	r3, r2
 8007458:	6a3a      	ldr	r2, [r7, #32]
 800745a:	429a      	cmp	r2, r3
 800745c:	d305      	bcc.n	800746a <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007464:	6a3a      	ldr	r2, [r7, #32]
 8007466:	429a      	cmp	r2, r3
 8007468:	d910      	bls.n	800748c <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 800746a:	2301      	movs	r3, #1
 800746c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007470:	e1c9      	b.n	8007806 <UART_SetConfig+0xc8e>
 8007472:	bf00      	nop
 8007474:	40011c00 	.word	0x40011c00
 8007478:	58024400 	.word	0x58024400
 800747c:	58000c00 	.word	0x58000c00
 8007480:	03d09000 	.word	0x03d09000
 8007484:	003d0900 	.word	0x003d0900
 8007488:	08009600 	.word	0x08009600
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800748c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800748e:	4618      	mov	r0, r3
 8007490:	f04f 0100 	mov.w	r1, #0
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007498:	4ac1      	ldr	r2, [pc, #772]	; (80077a0 <UART_SetConfig+0xc28>)
 800749a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800749e:	b29a      	uxth	r2, r3
 80074a0:	f04f 0300 	mov.w	r3, #0
 80074a4:	f7f8 ff34 	bl	8000310 <__aeabi_uldivmod>
 80074a8:	4602      	mov	r2, r0
 80074aa:	460b      	mov	r3, r1
 80074ac:	4610      	mov	r0, r2
 80074ae:	4619      	mov	r1, r3
 80074b0:	f04f 0200 	mov.w	r2, #0
 80074b4:	f04f 0300 	mov.w	r3, #0
 80074b8:	020b      	lsls	r3, r1, #8
 80074ba:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80074be:	0202      	lsls	r2, r0, #8
 80074c0:	6879      	ldr	r1, [r7, #4]
 80074c2:	6849      	ldr	r1, [r1, #4]
 80074c4:	0849      	lsrs	r1, r1, #1
 80074c6:	4608      	mov	r0, r1
 80074c8:	f04f 0100 	mov.w	r1, #0
 80074cc:	1814      	adds	r4, r2, r0
 80074ce:	eb43 0501 	adc.w	r5, r3, r1
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	461a      	mov	r2, r3
 80074d8:	f04f 0300 	mov.w	r3, #0
 80074dc:	4620      	mov	r0, r4
 80074de:	4629      	mov	r1, r5
 80074e0:	f7f8 ff16 	bl	8000310 <__aeabi_uldivmod>
 80074e4:	4602      	mov	r2, r0
 80074e6:	460b      	mov	r3, r1
 80074e8:	4613      	mov	r3, r2
 80074ea:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80074ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80074f2:	d308      	bcc.n	8007506 <UART_SetConfig+0x98e>
 80074f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074fa:	d204      	bcs.n	8007506 <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007502:	60da      	str	r2, [r3, #12]
 8007504:	e17f      	b.n	8007806 <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 8007506:	2301      	movs	r3, #1
 8007508:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800750c:	e17b      	b.n	8007806 <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	69db      	ldr	r3, [r3, #28]
 8007512:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007516:	f040 80bd 	bne.w	8007694 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 800751a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800751e:	2b20      	cmp	r3, #32
 8007520:	dc48      	bgt.n	80075b4 <UART_SetConfig+0xa3c>
 8007522:	2b00      	cmp	r3, #0
 8007524:	db7b      	blt.n	800761e <UART_SetConfig+0xaa6>
 8007526:	2b20      	cmp	r3, #32
 8007528:	d879      	bhi.n	800761e <UART_SetConfig+0xaa6>
 800752a:	a201      	add	r2, pc, #4	; (adr r2, 8007530 <UART_SetConfig+0x9b8>)
 800752c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007530:	080075bb 	.word	0x080075bb
 8007534:	080075c3 	.word	0x080075c3
 8007538:	0800761f 	.word	0x0800761f
 800753c:	0800761f 	.word	0x0800761f
 8007540:	080075cb 	.word	0x080075cb
 8007544:	0800761f 	.word	0x0800761f
 8007548:	0800761f 	.word	0x0800761f
 800754c:	0800761f 	.word	0x0800761f
 8007550:	080075db 	.word	0x080075db
 8007554:	0800761f 	.word	0x0800761f
 8007558:	0800761f 	.word	0x0800761f
 800755c:	0800761f 	.word	0x0800761f
 8007560:	0800761f 	.word	0x0800761f
 8007564:	0800761f 	.word	0x0800761f
 8007568:	0800761f 	.word	0x0800761f
 800756c:	0800761f 	.word	0x0800761f
 8007570:	080075eb 	.word	0x080075eb
 8007574:	0800761f 	.word	0x0800761f
 8007578:	0800761f 	.word	0x0800761f
 800757c:	0800761f 	.word	0x0800761f
 8007580:	0800761f 	.word	0x0800761f
 8007584:	0800761f 	.word	0x0800761f
 8007588:	0800761f 	.word	0x0800761f
 800758c:	0800761f 	.word	0x0800761f
 8007590:	0800761f 	.word	0x0800761f
 8007594:	0800761f 	.word	0x0800761f
 8007598:	0800761f 	.word	0x0800761f
 800759c:	0800761f 	.word	0x0800761f
 80075a0:	0800761f 	.word	0x0800761f
 80075a4:	0800761f 	.word	0x0800761f
 80075a8:	0800761f 	.word	0x0800761f
 80075ac:	0800761f 	.word	0x0800761f
 80075b0:	08007611 	.word	0x08007611
 80075b4:	2b40      	cmp	r3, #64	; 0x40
 80075b6:	d02e      	beq.n	8007616 <UART_SetConfig+0xa9e>
 80075b8:	e031      	b.n	800761e <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80075ba:	f7fc f821 	bl	8003600 <HAL_RCC_GetPCLK1Freq>
 80075be:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80075c0:	e033      	b.n	800762a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80075c2:	f7fc f833 	bl	800362c <HAL_RCC_GetPCLK2Freq>
 80075c6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80075c8:	e02f      	b.n	800762a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80075ca:	f107 0314 	add.w	r3, r7, #20
 80075ce:	4618      	mov	r0, r3
 80075d0:	f7fc ff52 	bl	8004478 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80075d4:	69bb      	ldr	r3, [r7, #24]
 80075d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80075d8:	e027      	b.n	800762a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80075da:	f107 0308 	add.w	r3, r7, #8
 80075de:	4618      	mov	r0, r3
 80075e0:	f7fd f89e 	bl	8004720 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80075e8:	e01f      	b.n	800762a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80075ea:	4b6e      	ldr	r3, [pc, #440]	; (80077a4 <UART_SetConfig+0xc2c>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f003 0320 	and.w	r3, r3, #32
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d009      	beq.n	800760a <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80075f6:	4b6b      	ldr	r3, [pc, #428]	; (80077a4 <UART_SetConfig+0xc2c>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	08db      	lsrs	r3, r3, #3
 80075fc:	f003 0303 	and.w	r3, r3, #3
 8007600:	4a69      	ldr	r2, [pc, #420]	; (80077a8 <UART_SetConfig+0xc30>)
 8007602:	fa22 f303 	lsr.w	r3, r2, r3
 8007606:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007608:	e00f      	b.n	800762a <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 800760a:	4b67      	ldr	r3, [pc, #412]	; (80077a8 <UART_SetConfig+0xc30>)
 800760c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800760e:	e00c      	b.n	800762a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007610:	4b66      	ldr	r3, [pc, #408]	; (80077ac <UART_SetConfig+0xc34>)
 8007612:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007614:	e009      	b.n	800762a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007616:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800761a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800761c:	e005      	b.n	800762a <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 800761e:	2300      	movs	r3, #0
 8007620:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007622:	2301      	movs	r3, #1
 8007624:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007628:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800762a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800762c:	2b00      	cmp	r3, #0
 800762e:	f000 80ea 	beq.w	8007806 <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007636:	4a5a      	ldr	r2, [pc, #360]	; (80077a0 <UART_SetConfig+0xc28>)
 8007638:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800763c:	461a      	mov	r2, r3
 800763e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007640:	fbb3 f3f2 	udiv	r3, r3, r2
 8007644:	005a      	lsls	r2, r3, #1
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	085b      	lsrs	r3, r3, #1
 800764c:	441a      	add	r2, r3
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	685b      	ldr	r3, [r3, #4]
 8007652:	fbb2 f3f3 	udiv	r3, r2, r3
 8007656:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800765a:	2b0f      	cmp	r3, #15
 800765c:	d916      	bls.n	800768c <UART_SetConfig+0xb14>
 800765e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007660:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007664:	d212      	bcs.n	800768c <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007668:	b29b      	uxth	r3, r3
 800766a:	f023 030f 	bic.w	r3, r3, #15
 800766e:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007672:	085b      	lsrs	r3, r3, #1
 8007674:	b29b      	uxth	r3, r3
 8007676:	f003 0307 	and.w	r3, r3, #7
 800767a:	b29a      	uxth	r2, r3
 800767c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800767e:	4313      	orrs	r3, r2
 8007680:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007688:	60da      	str	r2, [r3, #12]
 800768a:	e0bc      	b.n	8007806 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800768c:	2301      	movs	r3, #1
 800768e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007692:	e0b8      	b.n	8007806 <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007694:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007698:	2b20      	cmp	r3, #32
 800769a:	dc4b      	bgt.n	8007734 <UART_SetConfig+0xbbc>
 800769c:	2b00      	cmp	r3, #0
 800769e:	f2c0 8087 	blt.w	80077b0 <UART_SetConfig+0xc38>
 80076a2:	2b20      	cmp	r3, #32
 80076a4:	f200 8084 	bhi.w	80077b0 <UART_SetConfig+0xc38>
 80076a8:	a201      	add	r2, pc, #4	; (adr r2, 80076b0 <UART_SetConfig+0xb38>)
 80076aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ae:	bf00      	nop
 80076b0:	0800773b 	.word	0x0800773b
 80076b4:	08007743 	.word	0x08007743
 80076b8:	080077b1 	.word	0x080077b1
 80076bc:	080077b1 	.word	0x080077b1
 80076c0:	0800774b 	.word	0x0800774b
 80076c4:	080077b1 	.word	0x080077b1
 80076c8:	080077b1 	.word	0x080077b1
 80076cc:	080077b1 	.word	0x080077b1
 80076d0:	0800775b 	.word	0x0800775b
 80076d4:	080077b1 	.word	0x080077b1
 80076d8:	080077b1 	.word	0x080077b1
 80076dc:	080077b1 	.word	0x080077b1
 80076e0:	080077b1 	.word	0x080077b1
 80076e4:	080077b1 	.word	0x080077b1
 80076e8:	080077b1 	.word	0x080077b1
 80076ec:	080077b1 	.word	0x080077b1
 80076f0:	0800776b 	.word	0x0800776b
 80076f4:	080077b1 	.word	0x080077b1
 80076f8:	080077b1 	.word	0x080077b1
 80076fc:	080077b1 	.word	0x080077b1
 8007700:	080077b1 	.word	0x080077b1
 8007704:	080077b1 	.word	0x080077b1
 8007708:	080077b1 	.word	0x080077b1
 800770c:	080077b1 	.word	0x080077b1
 8007710:	080077b1 	.word	0x080077b1
 8007714:	080077b1 	.word	0x080077b1
 8007718:	080077b1 	.word	0x080077b1
 800771c:	080077b1 	.word	0x080077b1
 8007720:	080077b1 	.word	0x080077b1
 8007724:	080077b1 	.word	0x080077b1
 8007728:	080077b1 	.word	0x080077b1
 800772c:	080077b1 	.word	0x080077b1
 8007730:	08007791 	.word	0x08007791
 8007734:	2b40      	cmp	r3, #64	; 0x40
 8007736:	d02e      	beq.n	8007796 <UART_SetConfig+0xc1e>
 8007738:	e03a      	b.n	80077b0 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800773a:	f7fb ff61 	bl	8003600 <HAL_RCC_GetPCLK1Freq>
 800773e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007740:	e03c      	b.n	80077bc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007742:	f7fb ff73 	bl	800362c <HAL_RCC_GetPCLK2Freq>
 8007746:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007748:	e038      	b.n	80077bc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800774a:	f107 0314 	add.w	r3, r7, #20
 800774e:	4618      	mov	r0, r3
 8007750:	f7fc fe92 	bl	8004478 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007754:	69bb      	ldr	r3, [r7, #24]
 8007756:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007758:	e030      	b.n	80077bc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800775a:	f107 0308 	add.w	r3, r7, #8
 800775e:	4618      	mov	r0, r3
 8007760:	f7fc ffde 	bl	8004720 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007768:	e028      	b.n	80077bc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800776a:	4b0e      	ldr	r3, [pc, #56]	; (80077a4 <UART_SetConfig+0xc2c>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f003 0320 	and.w	r3, r3, #32
 8007772:	2b00      	cmp	r3, #0
 8007774:	d009      	beq.n	800778a <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007776:	4b0b      	ldr	r3, [pc, #44]	; (80077a4 <UART_SetConfig+0xc2c>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	08db      	lsrs	r3, r3, #3
 800777c:	f003 0303 	and.w	r3, r3, #3
 8007780:	4a09      	ldr	r2, [pc, #36]	; (80077a8 <UART_SetConfig+0xc30>)
 8007782:	fa22 f303 	lsr.w	r3, r2, r3
 8007786:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007788:	e018      	b.n	80077bc <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 800778a:	4b07      	ldr	r3, [pc, #28]	; (80077a8 <UART_SetConfig+0xc30>)
 800778c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800778e:	e015      	b.n	80077bc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007790:	4b06      	ldr	r3, [pc, #24]	; (80077ac <UART_SetConfig+0xc34>)
 8007792:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007794:	e012      	b.n	80077bc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007796:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800779a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800779c:	e00e      	b.n	80077bc <UART_SetConfig+0xc44>
 800779e:	bf00      	nop
 80077a0:	08009600 	.word	0x08009600
 80077a4:	58024400 	.word	0x58024400
 80077a8:	03d09000 	.word	0x03d09000
 80077ac:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 80077b0:	2300      	movs	r3, #0
 80077b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80077b4:	2301      	movs	r3, #1
 80077b6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80077ba:	bf00      	nop
    }

    if (pclk != 0U)
 80077bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d021      	beq.n	8007806 <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c6:	4a1a      	ldr	r2, [pc, #104]	; (8007830 <UART_SetConfig+0xcb8>)
 80077c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80077cc:	461a      	mov	r2, r3
 80077ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077d0:	fbb3 f2f2 	udiv	r2, r3, r2
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	085b      	lsrs	r3, r3, #1
 80077da:	441a      	add	r2, r3
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80077e4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80077e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077e8:	2b0f      	cmp	r3, #15
 80077ea:	d909      	bls.n	8007800 <UART_SetConfig+0xc88>
 80077ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077f2:	d205      	bcs.n	8007800 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80077f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077f6:	b29a      	uxth	r2, r3
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	60da      	str	r2, [r3, #12]
 80077fe:	e002      	b.n	8007806 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8007800:	2301      	movs	r3, #1
 8007802:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2201      	movs	r2, #1
 800780a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2201      	movs	r2, #1
 8007812:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2200      	movs	r2, #0
 800781a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2200      	movs	r2, #0
 8007820:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007822:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8007826:	4618      	mov	r0, r3
 8007828:	3738      	adds	r7, #56	; 0x38
 800782a:	46bd      	mov	sp, r7
 800782c:	bdb0      	pop	{r4, r5, r7, pc}
 800782e:	bf00      	nop
 8007830:	08009600 	.word	0x08009600

08007834 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007834:	b480      	push	{r7}
 8007836:	b083      	sub	sp, #12
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007840:	f003 0301 	and.w	r3, r3, #1
 8007844:	2b00      	cmp	r3, #0
 8007846:	d00a      	beq.n	800785e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	685b      	ldr	r3, [r3, #4]
 800784e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	430a      	orrs	r2, r1
 800785c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007862:	f003 0302 	and.w	r3, r3, #2
 8007866:	2b00      	cmp	r3, #0
 8007868:	d00a      	beq.n	8007880 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	685b      	ldr	r3, [r3, #4]
 8007870:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	430a      	orrs	r2, r1
 800787e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007884:	f003 0304 	and.w	r3, r3, #4
 8007888:	2b00      	cmp	r3, #0
 800788a:	d00a      	beq.n	80078a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	685b      	ldr	r3, [r3, #4]
 8007892:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	430a      	orrs	r2, r1
 80078a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078a6:	f003 0308 	and.w	r3, r3, #8
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d00a      	beq.n	80078c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	685b      	ldr	r3, [r3, #4]
 80078b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	430a      	orrs	r2, r1
 80078c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078c8:	f003 0310 	and.w	r3, r3, #16
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d00a      	beq.n	80078e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	689b      	ldr	r3, [r3, #8]
 80078d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	430a      	orrs	r2, r1
 80078e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078ea:	f003 0320 	and.w	r3, r3, #32
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d00a      	beq.n	8007908 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	689b      	ldr	r3, [r3, #8]
 80078f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	430a      	orrs	r2, r1
 8007906:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800790c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007910:	2b00      	cmp	r3, #0
 8007912:	d01a      	beq.n	800794a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	685b      	ldr	r3, [r3, #4]
 800791a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	430a      	orrs	r2, r1
 8007928:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800792e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007932:	d10a      	bne.n	800794a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	685b      	ldr	r3, [r3, #4]
 800793a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	430a      	orrs	r2, r1
 8007948:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800794e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007952:	2b00      	cmp	r3, #0
 8007954:	d00a      	beq.n	800796c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	685b      	ldr	r3, [r3, #4]
 800795c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	430a      	orrs	r2, r1
 800796a:	605a      	str	r2, [r3, #4]
  }
}
 800796c:	bf00      	nop
 800796e:	370c      	adds	r7, #12
 8007970:	46bd      	mov	sp, r7
 8007972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007976:	4770      	bx	lr

08007978 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b086      	sub	sp, #24
 800797c:	af02      	add	r7, sp, #8
 800797e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2200      	movs	r2, #0
 8007984:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007988:	f7fa fbf2 	bl	8002170 <HAL_GetTick>
 800798c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f003 0308 	and.w	r3, r3, #8
 8007998:	2b08      	cmp	r3, #8
 800799a:	d10e      	bne.n	80079ba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800799c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80079a0:	9300      	str	r3, [sp, #0]
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	2200      	movs	r2, #0
 80079a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f000 f82f 	bl	8007a0e <UART_WaitOnFlagUntilTimeout>
 80079b0:	4603      	mov	r3, r0
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d001      	beq.n	80079ba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80079b6:	2303      	movs	r3, #3
 80079b8:	e025      	b.n	8007a06 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f003 0304 	and.w	r3, r3, #4
 80079c4:	2b04      	cmp	r3, #4
 80079c6:	d10e      	bne.n	80079e6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80079c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80079cc:	9300      	str	r3, [sp, #0]
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2200      	movs	r2, #0
 80079d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f000 f819 	bl	8007a0e <UART_WaitOnFlagUntilTimeout>
 80079dc:	4603      	mov	r3, r0
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d001      	beq.n	80079e6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80079e2:	2303      	movs	r3, #3
 80079e4:	e00f      	b.n	8007a06 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2220      	movs	r2, #32
 80079ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2220      	movs	r2, #32
 80079f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2200      	movs	r2, #0
 80079fa:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2200      	movs	r2, #0
 8007a00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007a04:	2300      	movs	r3, #0
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	3710      	adds	r7, #16
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}

08007a0e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007a0e:	b580      	push	{r7, lr}
 8007a10:	b09c      	sub	sp, #112	; 0x70
 8007a12:	af00      	add	r7, sp, #0
 8007a14:	60f8      	str	r0, [r7, #12]
 8007a16:	60b9      	str	r1, [r7, #8]
 8007a18:	603b      	str	r3, [r7, #0]
 8007a1a:	4613      	mov	r3, r2
 8007a1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a1e:	e0a9      	b.n	8007b74 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a26:	f000 80a5 	beq.w	8007b74 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a2a:	f7fa fba1 	bl	8002170 <HAL_GetTick>
 8007a2e:	4602      	mov	r2, r0
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	1ad3      	subs	r3, r2, r3
 8007a34:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007a36:	429a      	cmp	r2, r3
 8007a38:	d302      	bcc.n	8007a40 <UART_WaitOnFlagUntilTimeout+0x32>
 8007a3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d140      	bne.n	8007ac2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a48:	e853 3f00 	ldrex	r3, [r3]
 8007a4c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007a4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a50:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007a54:	667b      	str	r3, [r7, #100]	; 0x64
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	461a      	mov	r2, r3
 8007a5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007a60:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a62:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007a64:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007a66:	e841 2300 	strex	r3, r2, [r1]
 8007a6a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007a6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d1e6      	bne.n	8007a40 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	3308      	adds	r3, #8
 8007a78:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a7c:	e853 3f00 	ldrex	r3, [r3]
 8007a80:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a84:	f023 0301 	bic.w	r3, r3, #1
 8007a88:	663b      	str	r3, [r7, #96]	; 0x60
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	3308      	adds	r3, #8
 8007a90:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007a92:	64ba      	str	r2, [r7, #72]	; 0x48
 8007a94:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a96:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007a98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a9a:	e841 2300 	strex	r3, r2, [r1]
 8007a9e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007aa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d1e5      	bne.n	8007a72 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	2220      	movs	r2, #32
 8007aaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	2220      	movs	r2, #32
 8007ab2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007abe:	2303      	movs	r3, #3
 8007ac0:	e069      	b.n	8007b96 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f003 0304 	and.w	r3, r3, #4
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d051      	beq.n	8007b74 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	69db      	ldr	r3, [r3, #28]
 8007ad6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ada:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ade:	d149      	bne.n	8007b74 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007ae8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007af2:	e853 3f00 	ldrex	r3, [r3]
 8007af6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007afa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007afe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	461a      	mov	r2, r3
 8007b06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b08:	637b      	str	r3, [r7, #52]	; 0x34
 8007b0a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007b0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b10:	e841 2300 	strex	r3, r2, [r1]
 8007b14:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d1e6      	bne.n	8007aea <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	3308      	adds	r3, #8
 8007b22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b24:	697b      	ldr	r3, [r7, #20]
 8007b26:	e853 3f00 	ldrex	r3, [r3]
 8007b2a:	613b      	str	r3, [r7, #16]
   return(result);
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	f023 0301 	bic.w	r3, r3, #1
 8007b32:	66bb      	str	r3, [r7, #104]	; 0x68
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	3308      	adds	r3, #8
 8007b3a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007b3c:	623a      	str	r2, [r7, #32]
 8007b3e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b40:	69f9      	ldr	r1, [r7, #28]
 8007b42:	6a3a      	ldr	r2, [r7, #32]
 8007b44:	e841 2300 	strex	r3, r2, [r1]
 8007b48:	61bb      	str	r3, [r7, #24]
   return(result);
 8007b4a:	69bb      	ldr	r3, [r7, #24]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d1e5      	bne.n	8007b1c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	2220      	movs	r2, #32
 8007b54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	2220      	movs	r2, #32
 8007b5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	2220      	movs	r2, #32
 8007b64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007b70:	2303      	movs	r3, #3
 8007b72:	e010      	b.n	8007b96 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	69da      	ldr	r2, [r3, #28]
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	4013      	ands	r3, r2
 8007b7e:	68ba      	ldr	r2, [r7, #8]
 8007b80:	429a      	cmp	r2, r3
 8007b82:	bf0c      	ite	eq
 8007b84:	2301      	moveq	r3, #1
 8007b86:	2300      	movne	r3, #0
 8007b88:	b2db      	uxtb	r3, r3
 8007b8a:	461a      	mov	r2, r3
 8007b8c:	79fb      	ldrb	r3, [r7, #7]
 8007b8e:	429a      	cmp	r2, r3
 8007b90:	f43f af46 	beq.w	8007a20 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007b94:	2300      	movs	r3, #0
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	3770      	adds	r7, #112	; 0x70
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}

08007b9e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007b9e:	b480      	push	{r7}
 8007ba0:	b085      	sub	sp, #20
 8007ba2:	af00      	add	r7, sp, #0
 8007ba4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007bac:	2b01      	cmp	r3, #1
 8007bae:	d101      	bne.n	8007bb4 <HAL_UARTEx_DisableFifoMode+0x16>
 8007bb0:	2302      	movs	r3, #2
 8007bb2:	e027      	b.n	8007c04 <HAL_UARTEx_DisableFifoMode+0x66>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2201      	movs	r2, #1
 8007bb8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2224      	movs	r2, #36	; 0x24
 8007bc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	681a      	ldr	r2, [r3, #0]
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f022 0201 	bic.w	r2, r2, #1
 8007bda:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007be2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2200      	movs	r2, #0
 8007be8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	68fa      	ldr	r2, [r7, #12]
 8007bf0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2220      	movs	r2, #32
 8007bf6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007c02:	2300      	movs	r3, #0
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	3714      	adds	r7, #20
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0e:	4770      	bx	lr

08007c10 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b084      	sub	sp, #16
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
 8007c18:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007c20:	2b01      	cmp	r3, #1
 8007c22:	d101      	bne.n	8007c28 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007c24:	2302      	movs	r3, #2
 8007c26:	e02d      	b.n	8007c84 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2224      	movs	r2, #36	; 0x24
 8007c34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	681a      	ldr	r2, [r3, #0]
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f022 0201 	bic.w	r2, r2, #1
 8007c4e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	689b      	ldr	r3, [r3, #8]
 8007c56:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	683a      	ldr	r2, [r7, #0]
 8007c60:	430a      	orrs	r2, r1
 8007c62:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f000 f84f 	bl	8007d08 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	68fa      	ldr	r2, [r7, #12]
 8007c70:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2220      	movs	r2, #32
 8007c76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007c82:	2300      	movs	r3, #0
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	3710      	adds	r7, #16
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}

08007c8c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b084      	sub	sp, #16
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
 8007c94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007c9c:	2b01      	cmp	r3, #1
 8007c9e:	d101      	bne.n	8007ca4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007ca0:	2302      	movs	r3, #2
 8007ca2:	e02d      	b.n	8007d00 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2224      	movs	r2, #36	; 0x24
 8007cb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	681a      	ldr	r2, [r3, #0]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f022 0201 	bic.w	r2, r2, #1
 8007cca:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	689b      	ldr	r3, [r3, #8]
 8007cd2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	683a      	ldr	r2, [r7, #0]
 8007cdc:	430a      	orrs	r2, r1
 8007cde:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f000 f811 	bl	8007d08 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	68fa      	ldr	r2, [r7, #12]
 8007cec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2220      	movs	r2, #32
 8007cf2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007cfe:	2300      	movs	r3, #0
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	3710      	adds	r7, #16
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}

08007d08 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b085      	sub	sp, #20
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d108      	bne.n	8007d2a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2201      	movs	r2, #1
 8007d24:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007d28:	e031      	b.n	8007d8e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007d2a:	2310      	movs	r3, #16
 8007d2c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007d2e:	2310      	movs	r3, #16
 8007d30:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	689b      	ldr	r3, [r3, #8]
 8007d38:	0e5b      	lsrs	r3, r3, #25
 8007d3a:	b2db      	uxtb	r3, r3
 8007d3c:	f003 0307 	and.w	r3, r3, #7
 8007d40:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	689b      	ldr	r3, [r3, #8]
 8007d48:	0f5b      	lsrs	r3, r3, #29
 8007d4a:	b2db      	uxtb	r3, r3
 8007d4c:	f003 0307 	and.w	r3, r3, #7
 8007d50:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007d52:	7bbb      	ldrb	r3, [r7, #14]
 8007d54:	7b3a      	ldrb	r2, [r7, #12]
 8007d56:	4911      	ldr	r1, [pc, #68]	; (8007d9c <UARTEx_SetNbDataToProcess+0x94>)
 8007d58:	5c8a      	ldrb	r2, [r1, r2]
 8007d5a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007d5e:	7b3a      	ldrb	r2, [r7, #12]
 8007d60:	490f      	ldr	r1, [pc, #60]	; (8007da0 <UARTEx_SetNbDataToProcess+0x98>)
 8007d62:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007d64:	fb93 f3f2 	sdiv	r3, r3, r2
 8007d68:	b29a      	uxth	r2, r3
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007d70:	7bfb      	ldrb	r3, [r7, #15]
 8007d72:	7b7a      	ldrb	r2, [r7, #13]
 8007d74:	4909      	ldr	r1, [pc, #36]	; (8007d9c <UARTEx_SetNbDataToProcess+0x94>)
 8007d76:	5c8a      	ldrb	r2, [r1, r2]
 8007d78:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007d7c:	7b7a      	ldrb	r2, [r7, #13]
 8007d7e:	4908      	ldr	r1, [pc, #32]	; (8007da0 <UARTEx_SetNbDataToProcess+0x98>)
 8007d80:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007d82:	fb93 f3f2 	sdiv	r3, r3, r2
 8007d86:	b29a      	uxth	r2, r3
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007d8e:	bf00      	nop
 8007d90:	3714      	adds	r7, #20
 8007d92:	46bd      	mov	sp, r7
 8007d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d98:	4770      	bx	lr
 8007d9a:	bf00      	nop
 8007d9c:	08009618 	.word	0x08009618
 8007da0:	08009620 	.word	0x08009620

08007da4 <arm_mat_trans_f32>:
 8007da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007da8:	8802      	ldrh	r2, [r0, #0]
 8007daa:	b085      	sub	sp, #20
 8007dac:	884b      	ldrh	r3, [r1, #2]
 8007dae:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8007db2:	4293      	cmp	r3, r2
 8007db4:	8844      	ldrh	r4, [r0, #2]
 8007db6:	6848      	ldr	r0, [r1, #4]
 8007db8:	d14e      	bne.n	8007e58 <arm_mat_trans_f32+0xb4>
 8007dba:	f8b1 8000 	ldrh.w	r8, [r1]
 8007dbe:	45a0      	cmp	r8, r4
 8007dc0:	d14a      	bne.n	8007e58 <arm_mat_trans_f32+0xb4>
 8007dc2:	ea4f 0998 	mov.w	r9, r8, lsr #2
 8007dc6:	f008 0803 	and.w	r8, r8, #3
 8007dca:	009c      	lsls	r4, r3, #2
 8007dcc:	4684      	mov	ip, r0
 8007dce:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8007dd2:	fb09 f204 	mul.w	r2, r9, r4
 8007dd6:	011d      	lsls	r5, r3, #4
 8007dd8:	ea4f 1b09 	mov.w	fp, r9, lsl #4
 8007ddc:	eb00 0a04 	add.w	sl, r0, r4
 8007de0:	0092      	lsls	r2, r2, #2
 8007de2:	9103      	str	r1, [sp, #12]
 8007de4:	00db      	lsls	r3, r3, #3
 8007de6:	9202      	str	r2, [sp, #8]
 8007de8:	9301      	str	r3, [sp, #4]
 8007dea:	4663      	mov	r3, ip
 8007dec:	f1b9 0f00 	cmp.w	r9, #0
 8007df0:	d01d      	beq.n	8007e2e <arm_mat_trans_f32+0x8a>
 8007df2:	9901      	ldr	r1, [sp, #4]
 8007df4:	f10e 0210 	add.w	r2, lr, #16
 8007df8:	4648      	mov	r0, r9
 8007dfa:	4461      	add	r1, ip
 8007dfc:	ed52 7a04 	vldr	s15, [r2, #-16]
 8007e00:	191f      	adds	r7, r3, r4
 8007e02:	190e      	adds	r6, r1, r4
 8007e04:	3801      	subs	r0, #1
 8007e06:	edc3 7a00 	vstr	s15, [r3]
 8007e0a:	f102 0210 	add.w	r2, r2, #16
 8007e0e:	ed52 7a07 	vldr	s15, [r2, #-28]	; 0xffffffe4
 8007e12:	442b      	add	r3, r5
 8007e14:	edc7 7a00 	vstr	s15, [r7]
 8007e18:	f852 7c18 	ldr.w	r7, [r2, #-24]
 8007e1c:	600f      	str	r7, [r1, #0]
 8007e1e:	4429      	add	r1, r5
 8007e20:	f852 7c14 	ldr.w	r7, [r2, #-20]
 8007e24:	6037      	str	r7, [r6, #0]
 8007e26:	d1e9      	bne.n	8007dfc <arm_mat_trans_f32+0x58>
 8007e28:	9b02      	ldr	r3, [sp, #8]
 8007e2a:	44de      	add	lr, fp
 8007e2c:	4463      	add	r3, ip
 8007e2e:	f1b8 0f00 	cmp.w	r8, #0
 8007e32:	d009      	beq.n	8007e48 <arm_mat_trans_f32+0xa4>
 8007e34:	4642      	mov	r2, r8
 8007e36:	4671      	mov	r1, lr
 8007e38:	f851 0b04 	ldr.w	r0, [r1], #4
 8007e3c:	3a01      	subs	r2, #1
 8007e3e:	6018      	str	r0, [r3, #0]
 8007e40:	4423      	add	r3, r4
 8007e42:	d1f9      	bne.n	8007e38 <arm_mat_trans_f32+0x94>
 8007e44:	9b03      	ldr	r3, [sp, #12]
 8007e46:	449e      	add	lr, r3
 8007e48:	f10c 0c04 	add.w	ip, ip, #4
 8007e4c:	45d4      	cmp	ip, sl
 8007e4e:	d1cc      	bne.n	8007dea <arm_mat_trans_f32+0x46>
 8007e50:	2000      	movs	r0, #0
 8007e52:	b005      	add	sp, #20
 8007e54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e58:	f06f 0002 	mvn.w	r0, #2
 8007e5c:	e7f9      	b.n	8007e52 <arm_mat_trans_f32+0xae>
 8007e5e:	bf00      	nop

08007e60 <arm_mat_sub_f32>:
 8007e60:	b4f0      	push	{r4, r5, r6, r7}
 8007e62:	6803      	ldr	r3, [r0, #0]
 8007e64:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8007e68:	6856      	ldr	r6, [r2, #4]
 8007e6a:	e9d1 4700 	ldrd	r4, r7, [r1]
 8007e6e:	42a3      	cmp	r3, r4
 8007e70:	d15d      	bne.n	8007f2e <arm_mat_sub_f32+0xce>
 8007e72:	6812      	ldr	r2, [r2, #0]
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d15a      	bne.n	8007f2e <arm_mat_sub_f32+0xce>
 8007e78:	8803      	ldrh	r3, [r0, #0]
 8007e7a:	8844      	ldrh	r4, [r0, #2]
 8007e7c:	fb04 f403 	mul.w	r4, r4, r3
 8007e80:	08a5      	lsrs	r5, r4, #2
 8007e82:	d032      	beq.n	8007eea <arm_mat_sub_f32+0x8a>
 8007e84:	f10c 0110 	add.w	r1, ip, #16
 8007e88:	f107 0210 	add.w	r2, r7, #16
 8007e8c:	f106 0310 	add.w	r3, r6, #16
 8007e90:	4628      	mov	r0, r5
 8007e92:	ed12 7a04 	vldr	s14, [r2, #-16]
 8007e96:	3801      	subs	r0, #1
 8007e98:	ed51 7a04 	vldr	s15, [r1, #-16]
 8007e9c:	f102 0210 	add.w	r2, r2, #16
 8007ea0:	f101 0110 	add.w	r1, r1, #16
 8007ea4:	f103 0310 	add.w	r3, r3, #16
 8007ea8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007eac:	ed43 7a08 	vstr	s15, [r3, #-32]	; 0xffffffe0
 8007eb0:	ed12 7a07 	vldr	s14, [r2, #-28]	; 0xffffffe4
 8007eb4:	ed51 7a07 	vldr	s15, [r1, #-28]	; 0xffffffe4
 8007eb8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007ebc:	ed43 7a07 	vstr	s15, [r3, #-28]	; 0xffffffe4
 8007ec0:	ed12 7a06 	vldr	s14, [r2, #-24]	; 0xffffffe8
 8007ec4:	ed51 7a06 	vldr	s15, [r1, #-24]	; 0xffffffe8
 8007ec8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007ecc:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 8007ed0:	ed51 7a05 	vldr	s15, [r1, #-20]	; 0xffffffec
 8007ed4:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 8007ed8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007edc:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 8007ee0:	d1d7      	bne.n	8007e92 <arm_mat_sub_f32+0x32>
 8007ee2:	012b      	lsls	r3, r5, #4
 8007ee4:	449c      	add	ip, r3
 8007ee6:	441f      	add	r7, r3
 8007ee8:	441e      	add	r6, r3
 8007eea:	f014 0403 	ands.w	r4, r4, #3
 8007eee:	d01b      	beq.n	8007f28 <arm_mat_sub_f32+0xc8>
 8007ef0:	eddc 7a00 	vldr	s15, [ip]
 8007ef4:	3c01      	subs	r4, #1
 8007ef6:	ed97 7a00 	vldr	s14, [r7]
 8007efa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007efe:	edc6 7a00 	vstr	s15, [r6]
 8007f02:	d011      	beq.n	8007f28 <arm_mat_sub_f32+0xc8>
 8007f04:	eddc 7a01 	vldr	s15, [ip, #4]
 8007f08:	2c01      	cmp	r4, #1
 8007f0a:	ed97 7a01 	vldr	s14, [r7, #4]
 8007f0e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007f12:	edc6 7a01 	vstr	s15, [r6, #4]
 8007f16:	d007      	beq.n	8007f28 <arm_mat_sub_f32+0xc8>
 8007f18:	eddc 7a02 	vldr	s15, [ip, #8]
 8007f1c:	ed97 7a02 	vldr	s14, [r7, #8]
 8007f20:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007f24:	edc6 7a02 	vstr	s15, [r6, #8]
 8007f28:	2000      	movs	r0, #0
 8007f2a:	bcf0      	pop	{r4, r5, r6, r7}
 8007f2c:	4770      	bx	lr
 8007f2e:	f06f 0002 	mvn.w	r0, #2
 8007f32:	e7fa      	b.n	8007f2a <arm_mat_sub_f32+0xca>

08007f34 <arm_mat_mult_f32>:
 8007f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f38:	8845      	ldrh	r5, [r0, #2]
 8007f3a:	b08b      	sub	sp, #44	; 0x2c
 8007f3c:	880b      	ldrh	r3, [r1, #0]
 8007f3e:	8806      	ldrh	r6, [r0, #0]
 8007f40:	42ab      	cmp	r3, r5
 8007f42:	9109      	str	r1, [sp, #36]	; 0x24
 8007f44:	6847      	ldr	r7, [r0, #4]
 8007f46:	9604      	str	r6, [sp, #16]
 8007f48:	6848      	ldr	r0, [r1, #4]
 8007f4a:	6854      	ldr	r4, [r2, #4]
 8007f4c:	8849      	ldrh	r1, [r1, #2]
 8007f4e:	f040 808d 	bne.w	800806c <arm_mat_mult_f32+0x138>
 8007f52:	8815      	ldrh	r5, [r2, #0]
 8007f54:	42b5      	cmp	r5, r6
 8007f56:	f040 8089 	bne.w	800806c <arm_mat_mult_f32+0x138>
 8007f5a:	8852      	ldrh	r2, [r2, #2]
 8007f5c:	428a      	cmp	r2, r1
 8007f5e:	f040 8085 	bne.w	800806c <arm_mat_mult_f32+0x138>
 8007f62:	ea4f 0893 	mov.w	r8, r3, lsr #2
 8007f66:	1d01      	adds	r1, r0, #4
 8007f68:	0116      	lsls	r6, r2, #4
 8007f6a:	f003 0903 	and.w	r9, r3, #3
 8007f6e:	9108      	str	r1, [sp, #32]
 8007f70:	0095      	lsls	r5, r2, #2
 8007f72:	fb06 f108 	mul.w	r1, r6, r8
 8007f76:	ebc2 7c82 	rsb	ip, r2, r2, lsl #30
 8007f7a:	009b      	lsls	r3, r3, #2
 8007f7c:	f107 0b10 	add.w	fp, r7, #16
 8007f80:	9103      	str	r1, [sp, #12]
 8007f82:	eb07 1108 	add.w	r1, r7, r8, lsl #4
 8007f86:	00d2      	lsls	r2, r2, #3
 8007f88:	eb04 0a05 	add.w	sl, r4, r5
 8007f8c:	9101      	str	r1, [sp, #4]
 8007f8e:	ea4f 018c 	mov.w	r1, ip, lsl #2
 8007f92:	9202      	str	r2, [sp, #8]
 8007f94:	9107      	str	r1, [sp, #28]
 8007f96:	9306      	str	r3, [sp, #24]
 8007f98:	f1ab 0310 	sub.w	r3, fp, #16
 8007f9c:	f8dd e020 	ldr.w	lr, [sp, #32]
 8007fa0:	9305      	str	r3, [sp, #20]
 8007fa2:	9b07      	ldr	r3, [sp, #28]
 8007fa4:	eb03 0c0a 	add.w	ip, r3, sl
 8007fa8:	f1b8 0f00 	cmp.w	r8, #0
 8007fac:	d056      	beq.n	800805c <arm_mat_mult_f32+0x128>
 8007fae:	9b02      	ldr	r3, [sp, #8]
 8007fb0:	4644      	mov	r4, r8
 8007fb2:	4602      	mov	r2, r0
 8007fb4:	eddf 7a30 	vldr	s15, [pc, #192]	; 8008078 <arm_mat_mult_f32+0x144>
 8007fb8:	18c1      	adds	r1, r0, r3
 8007fba:	465b      	mov	r3, fp
 8007fbc:	edd2 6a00 	vldr	s13, [r2]
 8007fc0:	1957      	adds	r7, r2, r5
 8007fc2:	ed13 7a04 	vldr	s14, [r3, #-16]
 8007fc6:	3c01      	subs	r4, #1
 8007fc8:	ed53 5a03 	vldr	s11, [r3, #-12]
 8007fcc:	4432      	add	r2, r6
 8007fce:	ee27 7a26 	vmul.f32	s14, s14, s13
 8007fd2:	ed97 6a00 	vldr	s12, [r7]
 8007fd6:	ed53 6a02 	vldr	s13, [r3, #-8]
 8007fda:	eb01 0705 	add.w	r7, r1, r5
 8007fde:	ee26 6a25 	vmul.f32	s12, s12, s11
 8007fe2:	ed91 5a00 	vldr	s10, [r1]
 8007fe6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007fea:	edd7 5a00 	vldr	s11, [r7]
 8007fee:	ee26 7a85 	vmul.f32	s14, s13, s10
 8007ff2:	ed53 6a01 	vldr	s13, [r3, #-4]
 8007ff6:	4431      	add	r1, r6
 8007ff8:	f103 0310 	add.w	r3, r3, #16
 8007ffc:	ee76 7a27 	vadd.f32	s15, s12, s15
 8008000:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8008004:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008008:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800800c:	d1d6      	bne.n	8007fbc <arm_mat_mult_f32+0x88>
 800800e:	9b03      	ldr	r3, [sp, #12]
 8008010:	9a01      	ldr	r2, [sp, #4]
 8008012:	4418      	add	r0, r3
 8008014:	f1b9 0f00 	cmp.w	r9, #0
 8008018:	d00b      	beq.n	8008032 <arm_mat_mult_f32+0xfe>
 800801a:	464b      	mov	r3, r9
 800801c:	edd0 6a00 	vldr	s13, [r0]
 8008020:	3b01      	subs	r3, #1
 8008022:	ecb2 7a01 	vldmia	r2!, {s14}
 8008026:	4428      	add	r0, r5
 8008028:	ee27 7a26 	vmul.f32	s14, s14, s13
 800802c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008030:	d1f4      	bne.n	800801c <arm_mat_mult_f32+0xe8>
 8008032:	ecec 7a01 	vstmia	ip!, {s15}
 8008036:	45d4      	cmp	ip, sl
 8008038:	4670      	mov	r0, lr
 800803a:	f10e 0e04 	add.w	lr, lr, #4
 800803e:	d1b3      	bne.n	8007fa8 <arm_mat_mult_f32+0x74>
 8008040:	9a01      	ldr	r2, [sp, #4]
 8008042:	44aa      	add	sl, r5
 8008044:	9b06      	ldr	r3, [sp, #24]
 8008046:	4611      	mov	r1, r2
 8008048:	449b      	add	fp, r3
 800804a:	4419      	add	r1, r3
 800804c:	9b04      	ldr	r3, [sp, #16]
 800804e:	3b01      	subs	r3, #1
 8008050:	9101      	str	r1, [sp, #4]
 8008052:	9304      	str	r3, [sp, #16]
 8008054:	d006      	beq.n	8008064 <arm_mat_mult_f32+0x130>
 8008056:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008058:	6858      	ldr	r0, [r3, #4]
 800805a:	e79d      	b.n	8007f98 <arm_mat_mult_f32+0x64>
 800805c:	9a05      	ldr	r2, [sp, #20]
 800805e:	eddf 7a06 	vldr	s15, [pc, #24]	; 8008078 <arm_mat_mult_f32+0x144>
 8008062:	e7d7      	b.n	8008014 <arm_mat_mult_f32+0xe0>
 8008064:	4618      	mov	r0, r3
 8008066:	b00b      	add	sp, #44	; 0x2c
 8008068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800806c:	f06f 0002 	mvn.w	r0, #2
 8008070:	b00b      	add	sp, #44	; 0x2c
 8008072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008076:	bf00      	nop
 8008078:	00000000 	.word	0x00000000

0800807c <arm_mat_init_f32>:
 800807c:	8001      	strh	r1, [r0, #0]
 800807e:	8042      	strh	r2, [r0, #2]
 8008080:	6043      	str	r3, [r0, #4]
 8008082:	4770      	bx	lr

08008084 <arm_mat_add_f32>:
 8008084:	b4f0      	push	{r4, r5, r6, r7}
 8008086:	6803      	ldr	r3, [r0, #0]
 8008088:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800808c:	6856      	ldr	r6, [r2, #4]
 800808e:	e9d1 4700 	ldrd	r4, r7, [r1]
 8008092:	42a3      	cmp	r3, r4
 8008094:	d15d      	bne.n	8008152 <arm_mat_add_f32+0xce>
 8008096:	6812      	ldr	r2, [r2, #0]
 8008098:	4293      	cmp	r3, r2
 800809a:	d15a      	bne.n	8008152 <arm_mat_add_f32+0xce>
 800809c:	8803      	ldrh	r3, [r0, #0]
 800809e:	8844      	ldrh	r4, [r0, #2]
 80080a0:	fb04 f403 	mul.w	r4, r4, r3
 80080a4:	08a5      	lsrs	r5, r4, #2
 80080a6:	d032      	beq.n	800810e <arm_mat_add_f32+0x8a>
 80080a8:	f10c 0110 	add.w	r1, ip, #16
 80080ac:	f107 0210 	add.w	r2, r7, #16
 80080b0:	f106 0310 	add.w	r3, r6, #16
 80080b4:	4628      	mov	r0, r5
 80080b6:	ed12 7a04 	vldr	s14, [r2, #-16]
 80080ba:	3801      	subs	r0, #1
 80080bc:	ed51 7a04 	vldr	s15, [r1, #-16]
 80080c0:	f102 0210 	add.w	r2, r2, #16
 80080c4:	f101 0110 	add.w	r1, r1, #16
 80080c8:	f103 0310 	add.w	r3, r3, #16
 80080cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80080d0:	ed43 7a08 	vstr	s15, [r3, #-32]	; 0xffffffe0
 80080d4:	ed12 7a07 	vldr	s14, [r2, #-28]	; 0xffffffe4
 80080d8:	ed51 7a07 	vldr	s15, [r1, #-28]	; 0xffffffe4
 80080dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80080e0:	ed43 7a07 	vstr	s15, [r3, #-28]	; 0xffffffe4
 80080e4:	ed12 7a06 	vldr	s14, [r2, #-24]	; 0xffffffe8
 80080e8:	ed51 7a06 	vldr	s15, [r1, #-24]	; 0xffffffe8
 80080ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 80080f0:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 80080f4:	ed51 7a05 	vldr	s15, [r1, #-20]	; 0xffffffec
 80080f8:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 80080fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008100:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 8008104:	d1d7      	bne.n	80080b6 <arm_mat_add_f32+0x32>
 8008106:	012b      	lsls	r3, r5, #4
 8008108:	449c      	add	ip, r3
 800810a:	441f      	add	r7, r3
 800810c:	441e      	add	r6, r3
 800810e:	f014 0403 	ands.w	r4, r4, #3
 8008112:	d01b      	beq.n	800814c <arm_mat_add_f32+0xc8>
 8008114:	edd7 7a00 	vldr	s15, [r7]
 8008118:	3c01      	subs	r4, #1
 800811a:	ed9c 7a00 	vldr	s14, [ip]
 800811e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008122:	edc6 7a00 	vstr	s15, [r6]
 8008126:	d011      	beq.n	800814c <arm_mat_add_f32+0xc8>
 8008128:	eddc 7a01 	vldr	s15, [ip, #4]
 800812c:	2c01      	cmp	r4, #1
 800812e:	ed97 7a01 	vldr	s14, [r7, #4]
 8008132:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008136:	edc6 7a01 	vstr	s15, [r6, #4]
 800813a:	d007      	beq.n	800814c <arm_mat_add_f32+0xc8>
 800813c:	eddc 7a02 	vldr	s15, [ip, #8]
 8008140:	ed97 7a02 	vldr	s14, [r7, #8]
 8008144:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008148:	edc6 7a02 	vstr	s15, [r6, #8]
 800814c:	2000      	movs	r0, #0
 800814e:	bcf0      	pop	{r4, r5, r6, r7}
 8008150:	4770      	bx	lr
 8008152:	f06f 0002 	mvn.w	r0, #2
 8008156:	e7fa      	b.n	800814e <arm_mat_add_f32+0xca>

08008158 <__errno>:
 8008158:	4b01      	ldr	r3, [pc, #4]	; (8008160 <__errno+0x8>)
 800815a:	6818      	ldr	r0, [r3, #0]
 800815c:	4770      	bx	lr
 800815e:	bf00      	nop
 8008160:	2400001c 	.word	0x2400001c

08008164 <__libc_init_array>:
 8008164:	b570      	push	{r4, r5, r6, lr}
 8008166:	4d0d      	ldr	r5, [pc, #52]	; (800819c <__libc_init_array+0x38>)
 8008168:	4c0d      	ldr	r4, [pc, #52]	; (80081a0 <__libc_init_array+0x3c>)
 800816a:	1b64      	subs	r4, r4, r5
 800816c:	10a4      	asrs	r4, r4, #2
 800816e:	2600      	movs	r6, #0
 8008170:	42a6      	cmp	r6, r4
 8008172:	d109      	bne.n	8008188 <__libc_init_array+0x24>
 8008174:	4d0b      	ldr	r5, [pc, #44]	; (80081a4 <__libc_init_array+0x40>)
 8008176:	4c0c      	ldr	r4, [pc, #48]	; (80081a8 <__libc_init_array+0x44>)
 8008178:	f001 fa2c 	bl	80095d4 <_init>
 800817c:	1b64      	subs	r4, r4, r5
 800817e:	10a4      	asrs	r4, r4, #2
 8008180:	2600      	movs	r6, #0
 8008182:	42a6      	cmp	r6, r4
 8008184:	d105      	bne.n	8008192 <__libc_init_array+0x2e>
 8008186:	bd70      	pop	{r4, r5, r6, pc}
 8008188:	f855 3b04 	ldr.w	r3, [r5], #4
 800818c:	4798      	blx	r3
 800818e:	3601      	adds	r6, #1
 8008190:	e7ee      	b.n	8008170 <__libc_init_array+0xc>
 8008192:	f855 3b04 	ldr.w	r3, [r5], #4
 8008196:	4798      	blx	r3
 8008198:	3601      	adds	r6, #1
 800819a:	e7f2      	b.n	8008182 <__libc_init_array+0x1e>
 800819c:	0800b0c0 	.word	0x0800b0c0
 80081a0:	0800b0c0 	.word	0x0800b0c0
 80081a4:	0800b0c0 	.word	0x0800b0c0
 80081a8:	0800b0c4 	.word	0x0800b0c4

080081ac <malloc>:
 80081ac:	4b02      	ldr	r3, [pc, #8]	; (80081b8 <malloc+0xc>)
 80081ae:	4601      	mov	r1, r0
 80081b0:	6818      	ldr	r0, [r3, #0]
 80081b2:	f000 b80b 	b.w	80081cc <_malloc_r>
 80081b6:	bf00      	nop
 80081b8:	2400001c 	.word	0x2400001c

080081bc <memset>:
 80081bc:	4402      	add	r2, r0
 80081be:	4603      	mov	r3, r0
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d100      	bne.n	80081c6 <memset+0xa>
 80081c4:	4770      	bx	lr
 80081c6:	f803 1b01 	strb.w	r1, [r3], #1
 80081ca:	e7f9      	b.n	80081c0 <memset+0x4>

080081cc <_malloc_r>:
 80081cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081ce:	1ccd      	adds	r5, r1, #3
 80081d0:	f025 0503 	bic.w	r5, r5, #3
 80081d4:	3508      	adds	r5, #8
 80081d6:	2d0c      	cmp	r5, #12
 80081d8:	bf38      	it	cc
 80081da:	250c      	movcc	r5, #12
 80081dc:	2d00      	cmp	r5, #0
 80081de:	4606      	mov	r6, r0
 80081e0:	db01      	blt.n	80081e6 <_malloc_r+0x1a>
 80081e2:	42a9      	cmp	r1, r5
 80081e4:	d903      	bls.n	80081ee <_malloc_r+0x22>
 80081e6:	230c      	movs	r3, #12
 80081e8:	6033      	str	r3, [r6, #0]
 80081ea:	2000      	movs	r0, #0
 80081ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081ee:	f000 f857 	bl	80082a0 <__malloc_lock>
 80081f2:	4921      	ldr	r1, [pc, #132]	; (8008278 <_malloc_r+0xac>)
 80081f4:	680a      	ldr	r2, [r1, #0]
 80081f6:	4614      	mov	r4, r2
 80081f8:	b99c      	cbnz	r4, 8008222 <_malloc_r+0x56>
 80081fa:	4f20      	ldr	r7, [pc, #128]	; (800827c <_malloc_r+0xb0>)
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	b923      	cbnz	r3, 800820a <_malloc_r+0x3e>
 8008200:	4621      	mov	r1, r4
 8008202:	4630      	mov	r0, r6
 8008204:	f000 f83c 	bl	8008280 <_sbrk_r>
 8008208:	6038      	str	r0, [r7, #0]
 800820a:	4629      	mov	r1, r5
 800820c:	4630      	mov	r0, r6
 800820e:	f000 f837 	bl	8008280 <_sbrk_r>
 8008212:	1c43      	adds	r3, r0, #1
 8008214:	d123      	bne.n	800825e <_malloc_r+0x92>
 8008216:	230c      	movs	r3, #12
 8008218:	6033      	str	r3, [r6, #0]
 800821a:	4630      	mov	r0, r6
 800821c:	f000 f846 	bl	80082ac <__malloc_unlock>
 8008220:	e7e3      	b.n	80081ea <_malloc_r+0x1e>
 8008222:	6823      	ldr	r3, [r4, #0]
 8008224:	1b5b      	subs	r3, r3, r5
 8008226:	d417      	bmi.n	8008258 <_malloc_r+0x8c>
 8008228:	2b0b      	cmp	r3, #11
 800822a:	d903      	bls.n	8008234 <_malloc_r+0x68>
 800822c:	6023      	str	r3, [r4, #0]
 800822e:	441c      	add	r4, r3
 8008230:	6025      	str	r5, [r4, #0]
 8008232:	e004      	b.n	800823e <_malloc_r+0x72>
 8008234:	6863      	ldr	r3, [r4, #4]
 8008236:	42a2      	cmp	r2, r4
 8008238:	bf0c      	ite	eq
 800823a:	600b      	streq	r3, [r1, #0]
 800823c:	6053      	strne	r3, [r2, #4]
 800823e:	4630      	mov	r0, r6
 8008240:	f000 f834 	bl	80082ac <__malloc_unlock>
 8008244:	f104 000b 	add.w	r0, r4, #11
 8008248:	1d23      	adds	r3, r4, #4
 800824a:	f020 0007 	bic.w	r0, r0, #7
 800824e:	1ac2      	subs	r2, r0, r3
 8008250:	d0cc      	beq.n	80081ec <_malloc_r+0x20>
 8008252:	1a1b      	subs	r3, r3, r0
 8008254:	50a3      	str	r3, [r4, r2]
 8008256:	e7c9      	b.n	80081ec <_malloc_r+0x20>
 8008258:	4622      	mov	r2, r4
 800825a:	6864      	ldr	r4, [r4, #4]
 800825c:	e7cc      	b.n	80081f8 <_malloc_r+0x2c>
 800825e:	1cc4      	adds	r4, r0, #3
 8008260:	f024 0403 	bic.w	r4, r4, #3
 8008264:	42a0      	cmp	r0, r4
 8008266:	d0e3      	beq.n	8008230 <_malloc_r+0x64>
 8008268:	1a21      	subs	r1, r4, r0
 800826a:	4630      	mov	r0, r6
 800826c:	f000 f808 	bl	8008280 <_sbrk_r>
 8008270:	3001      	adds	r0, #1
 8008272:	d1dd      	bne.n	8008230 <_malloc_r+0x64>
 8008274:	e7cf      	b.n	8008216 <_malloc_r+0x4a>
 8008276:	bf00      	nop
 8008278:	240000c4 	.word	0x240000c4
 800827c:	240000c8 	.word	0x240000c8

08008280 <_sbrk_r>:
 8008280:	b538      	push	{r3, r4, r5, lr}
 8008282:	4d06      	ldr	r5, [pc, #24]	; (800829c <_sbrk_r+0x1c>)
 8008284:	2300      	movs	r3, #0
 8008286:	4604      	mov	r4, r0
 8008288:	4608      	mov	r0, r1
 800828a:	602b      	str	r3, [r5, #0]
 800828c:	f7f9 fe12 	bl	8001eb4 <_sbrk>
 8008290:	1c43      	adds	r3, r0, #1
 8008292:	d102      	bne.n	800829a <_sbrk_r+0x1a>
 8008294:	682b      	ldr	r3, [r5, #0]
 8008296:	b103      	cbz	r3, 800829a <_sbrk_r+0x1a>
 8008298:	6023      	str	r3, [r4, #0]
 800829a:	bd38      	pop	{r3, r4, r5, pc}
 800829c:	240003e0 	.word	0x240003e0

080082a0 <__malloc_lock>:
 80082a0:	4801      	ldr	r0, [pc, #4]	; (80082a8 <__malloc_lock+0x8>)
 80082a2:	f000 b809 	b.w	80082b8 <__retarget_lock_acquire_recursive>
 80082a6:	bf00      	nop
 80082a8:	240003e8 	.word	0x240003e8

080082ac <__malloc_unlock>:
 80082ac:	4801      	ldr	r0, [pc, #4]	; (80082b4 <__malloc_unlock+0x8>)
 80082ae:	f000 b804 	b.w	80082ba <__retarget_lock_release_recursive>
 80082b2:	bf00      	nop
 80082b4:	240003e8 	.word	0x240003e8

080082b8 <__retarget_lock_acquire_recursive>:
 80082b8:	4770      	bx	lr

080082ba <__retarget_lock_release_recursive>:
 80082ba:	4770      	bx	lr

080082bc <checkint>:
 80082bc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80082c0:	f240 33fe 	movw	r3, #1022	; 0x3fe
 80082c4:	429a      	cmp	r2, r3
 80082c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082c8:	dd2b      	ble.n	8008322 <checkint+0x66>
 80082ca:	f240 4333 	movw	r3, #1075	; 0x433
 80082ce:	429a      	cmp	r2, r3
 80082d0:	dc25      	bgt.n	800831e <checkint+0x62>
 80082d2:	1a9b      	subs	r3, r3, r2
 80082d4:	f1a3 0620 	sub.w	r6, r3, #32
 80082d8:	f04f 32ff 	mov.w	r2, #4294967295
 80082dc:	fa02 f606 	lsl.w	r6, r2, r6
 80082e0:	fa02 f403 	lsl.w	r4, r2, r3
 80082e4:	f1c3 0520 	rsb	r5, r3, #32
 80082e8:	4334      	orrs	r4, r6
 80082ea:	fa22 f505 	lsr.w	r5, r2, r5
 80082ee:	432c      	orrs	r4, r5
 80082f0:	409a      	lsls	r2, r3
 80082f2:	ea20 0602 	bic.w	r6, r0, r2
 80082f6:	ea21 0704 	bic.w	r7, r1, r4
 80082fa:	ea56 0207 	orrs.w	r2, r6, r7
 80082fe:	f1a3 0420 	sub.w	r4, r3, #32
 8008302:	f1c3 0220 	rsb	r2, r3, #32
 8008306:	d10c      	bne.n	8008322 <checkint+0x66>
 8008308:	40d8      	lsrs	r0, r3
 800830a:	fa01 f302 	lsl.w	r3, r1, r2
 800830e:	4318      	orrs	r0, r3
 8008310:	40e1      	lsrs	r1, r4
 8008312:	4308      	orrs	r0, r1
 8008314:	f000 0301 	and.w	r3, r0, #1
 8008318:	f1c3 0002 	rsb	r0, r3, #2
 800831c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800831e:	2002      	movs	r0, #2
 8008320:	e7fc      	b.n	800831c <checkint+0x60>
 8008322:	2000      	movs	r0, #0
 8008324:	e7fa      	b.n	800831c <checkint+0x60>
	...

08008328 <pow>:
 8008328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800832c:	ed2d 8b0a 	vpush	{d8-d12}
 8008330:	b09b      	sub	sp, #108	; 0x6c
 8008332:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008336:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800833a:	ed8d 1b00 	vstr	d1, [sp]
 800833e:	ea4f 5915 	mov.w	r9, r5, lsr #20
 8008342:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008346:	f109 30ff 	add.w	r0, r9, #4294967295
 800834a:	f240 71fd 	movw	r1, #2045	; 0x7fd
 800834e:	4288      	cmp	r0, r1
 8008350:	46cc      	mov	ip, r9
 8008352:	ea4f 5817 	mov.w	r8, r7, lsr #20
 8008356:	d806      	bhi.n	8008366 <pow+0x3e>
 8008358:	f3c8 010a 	ubfx	r1, r8, #0, #11
 800835c:	f2a1 31be 	subw	r1, r1, #958	; 0x3be
 8008360:	297f      	cmp	r1, #127	; 0x7f
 8008362:	f240 81ab 	bls.w	80086bc <pow+0x394>
 8008366:	19b1      	adds	r1, r6, r6
 8008368:	9104      	str	r1, [sp, #16]
 800836a:	eb47 0107 	adc.w	r1, r7, r7
 800836e:	9105      	str	r1, [sp, #20]
 8008370:	9904      	ldr	r1, [sp, #16]
 8008372:	f111 31ff 	adds.w	r1, r1, #4294967295
 8008376:	460a      	mov	r2, r1
 8008378:	9905      	ldr	r1, [sp, #20]
 800837a:	f141 31ff 	adc.w	r1, r1, #4294967295
 800837e:	460b      	mov	r3, r1
 8008380:	f46f 1100 	mvn.w	r1, #2097152	; 0x200000
 8008384:	f06f 0001 	mvn.w	r0, #1
 8008388:	4299      	cmp	r1, r3
 800838a:	bf08      	it	eq
 800838c:	4290      	cmpeq	r0, r2
 800838e:	d260      	bcs.n	8008452 <pow+0x12a>
 8008390:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008394:	4313      	orrs	r3, r2
 8008396:	d11a      	bne.n	80083ce <pow+0xa6>
 8008398:	f485 2200 	eor.w	r2, r5, #524288	; 0x80000
 800839c:	1923      	adds	r3, r4, r4
 800839e:	930c      	str	r3, [sp, #48]	; 0x30
 80083a0:	eb42 0302 	adc.w	r3, r2, r2
 80083a4:	930d      	str	r3, [sp, #52]	; 0x34
 80083a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80083aa:	4bcf      	ldr	r3, [pc, #828]	; (80086e8 <pow+0x3c0>)
 80083ac:	2200      	movs	r2, #0
 80083ae:	428b      	cmp	r3, r1
 80083b0:	bf08      	it	eq
 80083b2:	4282      	cmpeq	r2, r0
 80083b4:	f080 8265 	bcs.w	8008882 <pow+0x55a>
 80083b8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80083bc:	ed9d 6b00 	vldr	d6, [sp]
 80083c0:	ee37 0b06 	vadd.f64	d0, d7, d6
 80083c4:	b01b      	add	sp, #108	; 0x6c
 80083c6:	ecbd 8b0a 	vpop	{d8-d12}
 80083ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083ce:	49c7      	ldr	r1, [pc, #796]	; (80086ec <pow+0x3c4>)
 80083d0:	2000      	movs	r0, #0
 80083d2:	428d      	cmp	r5, r1
 80083d4:	bf08      	it	eq
 80083d6:	4284      	cmpeq	r4, r0
 80083d8:	d10b      	bne.n	80083f2 <pow+0xca>
 80083da:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80083de:	19b3      	adds	r3, r6, r6
 80083e0:	930e      	str	r3, [sp, #56]	; 0x38
 80083e2:	eb42 0302 	adc.w	r3, r2, r2
 80083e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80083e8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80083ec:	4bbe      	ldr	r3, [pc, #760]	; (80086e8 <pow+0x3c0>)
 80083ee:	2200      	movs	r2, #0
 80083f0:	e7dd      	b.n	80083ae <pow+0x86>
 80083f2:	1921      	adds	r1, r4, r4
 80083f4:	9106      	str	r1, [sp, #24]
 80083f6:	eb45 0105 	adc.w	r1, r5, r5
 80083fa:	9107      	str	r1, [sp, #28]
 80083fc:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8008400:	49bb      	ldr	r1, [pc, #748]	; (80086f0 <pow+0x3c8>)
 8008402:	2000      	movs	r0, #0
 8008404:	42a1      	cmp	r1, r4
 8008406:	bf08      	it	eq
 8008408:	4298      	cmpeq	r0, r3
 800840a:	d3d5      	bcc.n	80083b8 <pow+0x90>
 800840c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008410:	428c      	cmp	r4, r1
 8008412:	bf08      	it	eq
 8008414:	4283      	cmpeq	r3, r0
 8008416:	d1cf      	bne.n	80083b8 <pow+0x90>
 8008418:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800841c:	49b5      	ldr	r1, [pc, #724]	; (80086f4 <pow+0x3cc>)
 800841e:	2000      	movs	r0, #0
 8008420:	428c      	cmp	r4, r1
 8008422:	bf08      	it	eq
 8008424:	4283      	cmpeq	r3, r0
 8008426:	f000 822c 	beq.w	8008882 <pow+0x55a>
 800842a:	49b3      	ldr	r1, [pc, #716]	; (80086f8 <pow+0x3d0>)
 800842c:	f04f 30ff 	mov.w	r0, #4294967295
 8008430:	42a1      	cmp	r1, r4
 8008432:	bf08      	it	eq
 8008434:	4298      	cmpeq	r0, r3
 8008436:	ea6f 0307 	mvn.w	r3, r7
 800843a:	bf34      	ite	cc
 800843c:	2201      	movcc	r2, #1
 800843e:	2200      	movcs	r2, #0
 8008440:	0fdb      	lsrs	r3, r3, #31
 8008442:	429a      	cmp	r2, r3
 8008444:	f040 821a 	bne.w	800887c <pow+0x554>
 8008448:	ed9d 7b00 	vldr	d7, [sp]
 800844c:	ee27 0b07 	vmul.f64	d0, d7, d7
 8008450:	e7b8      	b.n	80083c4 <pow+0x9c>
 8008452:	1923      	adds	r3, r4, r4
 8008454:	9308      	str	r3, [sp, #32]
 8008456:	eb45 0305 	adc.w	r3, r5, r5
 800845a:	9309      	str	r3, [sp, #36]	; 0x24
 800845c:	9b08      	ldr	r3, [sp, #32]
 800845e:	f113 33ff 	adds.w	r3, r3, #4294967295
 8008462:	9310      	str	r3, [sp, #64]	; 0x40
 8008464:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008466:	f143 33ff 	adc.w	r3, r3, #4294967295
 800846a:	9311      	str	r3, [sp, #68]	; 0x44
 800846c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008470:	4299      	cmp	r1, r3
 8008472:	bf08      	it	eq
 8008474:	4290      	cmpeq	r0, r2
 8008476:	d22d      	bcs.n	80084d4 <pow+0x1ac>
 8008478:	ed9d 7b02 	vldr	d7, [sp, #8]
 800847c:	2c00      	cmp	r4, #0
 800847e:	f175 0300 	sbcs.w	r3, r5, #0
 8008482:	ee27 0b07 	vmul.f64	d0, d7, d7
 8008486:	da16      	bge.n	80084b6 <pow+0x18e>
 8008488:	4630      	mov	r0, r6
 800848a:	4639      	mov	r1, r7
 800848c:	f7ff ff16 	bl	80082bc <checkint>
 8008490:	2801      	cmp	r0, #1
 8008492:	d110      	bne.n	80084b6 <pow+0x18e>
 8008494:	eeb1 0b40 	vneg.f64	d0, d0
 8008498:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 800849c:	4323      	orrs	r3, r4
 800849e:	d10c      	bne.n	80084ba <pow+0x192>
 80084a0:	2e00      	cmp	r6, #0
 80084a2:	f177 0300 	sbcs.w	r3, r7, #0
 80084a6:	da8d      	bge.n	80083c4 <pow+0x9c>
 80084a8:	b01b      	add	sp, #108	; 0x6c
 80084aa:	ecbd 8b0a 	vpop	{d8-d12}
 80084ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084b2:	f000 bf39 	b.w	8009328 <__math_divzero>
 80084b6:	2000      	movs	r0, #0
 80084b8:	e7ee      	b.n	8008498 <pow+0x170>
 80084ba:	2e00      	cmp	r6, #0
 80084bc:	f177 0300 	sbcs.w	r3, r7, #0
 80084c0:	da80      	bge.n	80083c4 <pow+0x9c>
 80084c2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80084c6:	ee86 7b00 	vdiv.f64	d7, d6, d0
 80084ca:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 80084ce:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 80084d2:	e777      	b.n	80083c4 <pow+0x9c>
 80084d4:	2c00      	cmp	r4, #0
 80084d6:	f175 0300 	sbcs.w	r3, r5, #0
 80084da:	da35      	bge.n	8008548 <pow+0x220>
 80084dc:	4630      	mov	r0, r6
 80084de:	4639      	mov	r1, r7
 80084e0:	f7ff feec 	bl	80082bc <checkint>
 80084e4:	b940      	cbnz	r0, 80084f8 <pow+0x1d0>
 80084e6:	ed9d 0b02 	vldr	d0, [sp, #8]
 80084ea:	b01b      	add	sp, #108	; 0x6c
 80084ec:	ecbd 8b0a 	vpop	{d8-d12}
 80084f0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084f4:	f000 bf30 	b.w	8009358 <__math_invalid>
 80084f8:	2801      	cmp	r0, #1
 80084fa:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80084fe:	bf14      	ite	ne
 8008500:	2000      	movne	r0, #0
 8008502:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 8008506:	461d      	mov	r5, r3
 8008508:	f3c9 0c0a 	ubfx	ip, r9, #0, #11
 800850c:	f3c8 030a 	ubfx	r3, r8, #0, #11
 8008510:	f2a3 32be 	subw	r2, r3, #958	; 0x3be
 8008514:	2a7f      	cmp	r2, #127	; 0x7f
 8008516:	d933      	bls.n	8008580 <pow+0x258>
 8008518:	4974      	ldr	r1, [pc, #464]	; (80086ec <pow+0x3c4>)
 800851a:	2000      	movs	r0, #0
 800851c:	428d      	cmp	r5, r1
 800851e:	bf08      	it	eq
 8008520:	4284      	cmpeq	r4, r0
 8008522:	f000 81ae 	beq.w	8008882 <pow+0x55a>
 8008526:	f240 32bd 	movw	r2, #957	; 0x3bd
 800852a:	4293      	cmp	r3, r2
 800852c:	d80e      	bhi.n	800854c <pow+0x224>
 800852e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8008532:	ed9d 7b00 	vldr	d7, [sp]
 8008536:	42a9      	cmp	r1, r5
 8008538:	bf08      	it	eq
 800853a:	42a0      	cmpeq	r0, r4
 800853c:	bf34      	ite	cc
 800853e:	ee37 0b00 	vaddcc.f64	d0, d7, d0
 8008542:	ee30 0b47 	vsubcs.f64	d0, d0, d7
 8008546:	e73d      	b.n	80083c4 <pow+0x9c>
 8008548:	2000      	movs	r0, #0
 800854a:	e7df      	b.n	800850c <pow+0x1e4>
 800854c:	42a9      	cmp	r1, r5
 800854e:	bf08      	it	eq
 8008550:	42a0      	cmpeq	r0, r4
 8008552:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8008556:	bf2c      	ite	cs
 8008558:	2301      	movcs	r3, #1
 800855a:	2300      	movcc	r3, #0
 800855c:	4590      	cmp	r8, r2
 800855e:	bf8c      	ite	hi
 8008560:	f04f 0800 	movhi.w	r8, #0
 8008564:	f04f 0801 	movls.w	r8, #1
 8008568:	4543      	cmp	r3, r8
 800856a:	f04f 0000 	mov.w	r0, #0
 800856e:	f000 80af 	beq.w	80086d0 <pow+0x3a8>
 8008572:	b01b      	add	sp, #108	; 0x6c
 8008574:	ecbd 8b0a 	vpop	{d8-d12}
 8008578:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800857c:	f000 becc 	b.w	8009318 <__math_oflow>
 8008580:	f1bc 0f00 	cmp.w	ip, #0
 8008584:	d10e      	bne.n	80085a4 <pow+0x27c>
 8008586:	ed9f 7b56 	vldr	d7, [pc, #344]	; 80086e0 <pow+0x3b8>
 800858a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800858e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008592:	ec57 6b17 	vmov	r6, r7, d7
 8008596:	4b59      	ldr	r3, [pc, #356]	; (80086fc <pow+0x3d4>)
 8008598:	2100      	movs	r1, #0
 800859a:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800859e:	1874      	adds	r4, r6, r1
 80085a0:	eb42 0503 	adc.w	r5, r2, r3
 80085a4:	2300      	movs	r3, #0
 80085a6:	18e3      	adds	r3, r4, r3
 80085a8:	4b55      	ldr	r3, [pc, #340]	; (8008700 <pow+0x3d8>)
 80085aa:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 80085ae:	eb45 0303 	adc.w	r3, r5, r3
 80085b2:	1519      	asrs	r1, r3, #20
 80085b4:	ee03 1a10 	vmov	s6, r1
 80085b8:	0d1e      	lsrs	r6, r3, #20
 80085ba:	2100      	movs	r1, #0
 80085bc:	f3c3 3246 	ubfx	r2, r3, #13, #7
 80085c0:	0536      	lsls	r6, r6, #20
 80085c2:	1a63      	subs	r3, r4, r1
 80085c4:	9312      	str	r3, [sp, #72]	; 0x48
 80085c6:	eb65 0306 	sbc.w	r3, r5, r6
 80085ca:	9313      	str	r3, [sp, #76]	; 0x4c
 80085cc:	4b4d      	ldr	r3, [pc, #308]	; (8008704 <pow+0x3dc>)
 80085ce:	eb03 1442 	add.w	r4, r3, r2, lsl #5
 80085d2:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80085d6:	ed9d 5b12 	vldr	d5, [sp, #72]	; 0x48
 80085da:	eea5 6b07 	vfma.f64	d6, d5, d7
 80085de:	ed93 7b00 	vldr	d7, [r3]
 80085e2:	ed94 5b16 	vldr	d5, [r4, #88]	; 0x58
 80085e6:	ed93 4b02 	vldr	d4, [r3, #8]
 80085ea:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 80085ee:	eea3 5b07 	vfma.f64	d5, d3, d7
 80085f2:	ed94 7b18 	vldr	d7, [r4, #96]	; 0x60
 80085f6:	ee36 9b05 	vadd.f64	d9, d6, d5
 80085fa:	ee35 5b49 	vsub.f64	d5, d5, d9
 80085fe:	eea3 7b04 	vfma.f64	d7, d3, d4
 8008602:	ed93 4b04 	vldr	d4, [r3, #16]
 8008606:	ee35 5b06 	vadd.f64	d5, d5, d6
 800860a:	ee37 7b05 	vadd.f64	d7, d7, d5
 800860e:	ee26 4b04 	vmul.f64	d4, d6, d4
 8008612:	ed93 3b08 	vldr	d3, [r3, #32]
 8008616:	ee26 0b04 	vmul.f64	d0, d6, d4
 800861a:	eeb0 8b40 	vmov.f64	d8, d0
 800861e:	ee94 8b06 	vfnms.f64	d8, d4, d6
 8008622:	ed93 4b06 	vldr	d4, [r3, #24]
 8008626:	ee26 ab00 	vmul.f64	d10, d6, d0
 800862a:	ee39 1b00 	vadd.f64	d1, d9, d0
 800862e:	ed93 2b0c 	vldr	d2, [r3, #48]	; 0x30
 8008632:	eea6 4b03 	vfma.f64	d4, d6, d3
 8008636:	ee39 9b41 	vsub.f64	d9, d9, d1
 800863a:	ed93 3b0a 	vldr	d3, [r3, #40]	; 0x28
 800863e:	ee37 8b08 	vadd.f64	d8, d7, d8
 8008642:	ee39 9b00 	vadd.f64	d9, d9, d0
 8008646:	eea6 3b02 	vfma.f64	d3, d6, d2
 800864a:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 800864e:	ee38 9b09 	vadd.f64	d9, d8, d9
 8008652:	ed93 2b0e 	vldr	d2, [r3, #56]	; 0x38
 8008656:	eea6 2b0c 	vfma.f64	d2, d6, d12
 800865a:	ed9d 6b00 	vldr	d6, [sp]
 800865e:	eea0 3b02 	vfma.f64	d3, d0, d2
 8008662:	eea0 4b03 	vfma.f64	d4, d0, d3
 8008666:	eeaa 9b04 	vfma.f64	d9, d10, d4
 800866a:	ee31 7b09 	vadd.f64	d7, d1, d9
 800866e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8008672:	ed8d 6b02 	vstr	d6, [sp, #8]
 8008676:	eeb0 3b46 	vmov.f64	d3, d6
 800867a:	ee31 1b47 	vsub.f64	d1, d1, d7
 800867e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008682:	ee31 9b09 	vadd.f64	d9, d1, d9
 8008686:	ed9d 6b00 	vldr	d6, [sp]
 800868a:	f3c3 570a 	ubfx	r7, r3, #20, #11
 800868e:	f46f 7472 	mvn.w	r4, #968	; 0x3c8
 8008692:	193c      	adds	r4, r7, r4
 8008694:	2c3e      	cmp	r4, #62	; 0x3e
 8008696:	ee96 3b07 	vfnms.f64	d3, d6, d7
 800869a:	eea6 3b09 	vfma.f64	d3, d6, d9
 800869e:	d934      	bls.n	800870a <pow+0x3e2>
 80086a0:	428c      	cmp	r4, r1
 80086a2:	da0d      	bge.n	80086c0 <pow+0x398>
 80086a4:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80086a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80086ac:	ee37 0b00 	vadd.f64	d0, d7, d0
 80086b0:	2800      	cmp	r0, #0
 80086b2:	f43f ae87 	beq.w	80083c4 <pow+0x9c>
 80086b6:	eeb1 0b40 	vneg.f64	d0, d0
 80086ba:	e683      	b.n	80083c4 <pow+0x9c>
 80086bc:	2000      	movs	r0, #0
 80086be:	e771      	b.n	80085a4 <pow+0x27c>
 80086c0:	f5b7 6f81 	cmp.w	r7, #1032	; 0x408
 80086c4:	d920      	bls.n	8008708 <pow+0x3e0>
 80086c6:	2a00      	cmp	r2, #0
 80086c8:	f173 0300 	sbcs.w	r3, r3, #0
 80086cc:	f6bf af51 	bge.w	8008572 <pow+0x24a>
 80086d0:	b01b      	add	sp, #108	; 0x6c
 80086d2:	ecbd 8b0a 	vpop	{d8-d12}
 80086d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086da:	f000 be15 	b.w	8009308 <__math_uflow>
 80086de:	bf00      	nop
 80086e0:	00000000 	.word	0x00000000
 80086e4:	43300000 	.word	0x43300000
 80086e8:	fff00000 	.word	0xfff00000
 80086ec:	3ff00000 	.word	0x3ff00000
 80086f0:	ffe00000 	.word	0xffe00000
 80086f4:	7fe00000 	.word	0x7fe00000
 80086f8:	7fdfffff 	.word	0x7fdfffff
 80086fc:	fcc00000 	.word	0xfcc00000
 8008700:	c0196aab 	.word	0xc0196aab
 8008704:	08009628 	.word	0x08009628
 8008708:	460f      	mov	r7, r1
 800870a:	4e65      	ldr	r6, [pc, #404]	; (80088a0 <pow+0x578>)
 800870c:	ed9d 4b02 	vldr	d4, [sp, #8]
 8008710:	ed96 6b02 	vldr	d6, [r6, #8]
 8008714:	ed96 7b00 	vldr	d7, [r6]
 8008718:	eeb0 5b46 	vmov.f64	d5, d6
 800871c:	eea4 5b07 	vfma.f64	d5, d4, d7
 8008720:	ed8d 5b00 	vstr	d5, [sp]
 8008724:	ee35 6b46 	vsub.f64	d6, d5, d6
 8008728:	eeb0 5b44 	vmov.f64	d5, d4
 800872c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008730:	ed96 7b04 	vldr	d7, [r6, #16]
 8008734:	f002 017f 	and.w	r1, r2, #127	; 0x7f
 8008738:	eea6 5b07 	vfma.f64	d5, d6, d7
 800873c:	eeb0 7b45 	vmov.f64	d7, d5
 8008740:	ed96 5b06 	vldr	d5, [r6, #24]
 8008744:	1849      	adds	r1, r1, r1
 8008746:	eb06 0cc1 	add.w	ip, r6, r1, lsl #3
 800874a:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
 800874e:	eea6 7b05 	vfma.f64	d7, d6, d5
 8008752:	ed96 4b0a 	vldr	d4, [r6, #40]	; 0x28
 8008756:	ee33 3b07 	vadd.f64	d3, d3, d7
 800875a:	ee23 6b03 	vmul.f64	d6, d3, d3
 800875e:	ed91 7b1c 	vldr	d7, [r1, #112]	; 0x70
 8008762:	ed96 5b08 	vldr	d5, [r6, #32]
 8008766:	ee33 7b07 	vadd.f64	d7, d3, d7
 800876a:	1814      	adds	r4, r2, r0
 800876c:	0365      	lsls	r5, r4, #13
 800876e:	e9dc 4c1e 	ldrd	r4, ip, [ip, #120]	; 0x78
 8008772:	eea3 5b04 	vfma.f64	d5, d3, d4
 8008776:	eea6 7b05 	vfma.f64	d7, d6, d5
 800877a:	ed96 4b0e 	vldr	d4, [r6, #56]	; 0x38
 800877e:	ee26 6b06 	vmul.f64	d6, d6, d6
 8008782:	ed96 5b0c 	vldr	d5, [r6, #48]	; 0x30
 8008786:	2000      	movs	r0, #0
 8008788:	eb10 0a04 	adds.w	sl, r0, r4
 800878c:	eea3 5b04 	vfma.f64	d5, d3, d4
 8008790:	eb45 0b0c 	adc.w	fp, r5, ip
 8008794:	eea6 7b05 	vfma.f64	d7, d6, d5
 8008798:	2f00      	cmp	r7, #0
 800879a:	d16a      	bne.n	8008872 <pow+0x54a>
 800879c:	f002 4000 	and.w	r0, r2, #2147483648	; 0x80000000
 80087a0:	4639      	mov	r1, r7
 80087a2:	ea50 0301 	orrs.w	r3, r0, r1
 80087a6:	f04f 0300 	mov.w	r3, #0
 80087aa:	d115      	bne.n	80087d8 <pow+0x4b0>
 80087ac:	eb1a 0303 	adds.w	r3, sl, r3
 80087b0:	ee0b 3a10 	vmov	s22, r3
 80087b4:	4b3b      	ldr	r3, [pc, #236]	; (80088a4 <pow+0x57c>)
 80087b6:	ed9f 0b34 	vldr	d0, [pc, #208]	; 8008888 <pow+0x560>
 80087ba:	eb4b 0303 	adc.w	r3, fp, r3
 80087be:	ee0b 3a90 	vmov	s23, r3
 80087c2:	eea7 bb0b 	vfma.f64	d11, d7, d11
 80087c6:	ee2b 0b00 	vmul.f64	d0, d11, d0
 80087ca:	b01b      	add	sp, #108	; 0x6c
 80087cc:	ecbd 8b0a 	vpop	{d8-d12}
 80087d0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087d4:	f000 bdd8 	b.w	8009388 <__math_check_oflow>
 80087d8:	eb1a 0303 	adds.w	r3, sl, r3
 80087dc:	930a      	str	r3, [sp, #40]	; 0x28
 80087de:	4b32      	ldr	r3, [pc, #200]	; (80088a8 <pow+0x580>)
 80087e0:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 80087e4:	eb4b 0303 	adc.w	r3, fp, r3
 80087e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80087ea:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 80087ee:	ee27 6b05 	vmul.f64	d6, d7, d5
 80087f2:	ee35 7b06 	vadd.f64	d7, d5, d6
 80087f6:	eeb0 3bc7 	vabs.f64	d3, d7
 80087fa:	eeb4 3bc4 	vcmpe.f64	d3, d4
 80087fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008802:	ed9f 0b23 	vldr	d0, [pc, #140]	; 8008890 <pow+0x568>
 8008806:	d52b      	bpl.n	8008860 <pow+0x538>
 8008808:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800880c:	ee35 5b47 	vsub.f64	d5, d5, d7
 8008810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008814:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 8008818:	ee35 6b06 	vadd.f64	d6, d5, d6
 800881c:	bf48      	it	mi
 800881e:	eeb0 4b43 	vmovmi.f64	d4, d3
 8008822:	ee37 3b04 	vadd.f64	d3, d7, d4
 8008826:	ee34 5b43 	vsub.f64	d5, d4, d3
 800882a:	ee35 7b07 	vadd.f64	d7, d5, d7
 800882e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008832:	ee37 7b03 	vadd.f64	d7, d7, d3
 8008836:	ee37 7b44 	vsub.f64	d7, d7, d4
 800883a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800883e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008842:	d105      	bne.n	8008850 <pow+0x528>
 8008844:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008846:	463a      	mov	r2, r7
 8008848:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800884c:	ec43 2b17 	vmov	d7, r2, r3
 8008850:	ed8d 0b16 	vstr	d0, [sp, #88]	; 0x58
 8008854:	ed9d 6b16 	vldr	d6, [sp, #88]	; 0x58
 8008858:	ee26 6b00 	vmul.f64	d6, d6, d0
 800885c:	ed8d 6b18 	vstr	d6, [sp, #96]	; 0x60
 8008860:	ee27 0b00 	vmul.f64	d0, d7, d0
 8008864:	b01b      	add	sp, #108	; 0x6c
 8008866:	ecbd 8b0a 	vpop	{d8-d12}
 800886a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800886e:	f000 bd82 	b.w	8009376 <__math_check_uflow>
 8008872:	ec4b ab10 	vmov	d0, sl, fp
 8008876:	eea7 0b00 	vfma.f64	d0, d7, d0
 800887a:	e5a3      	b.n	80083c4 <pow+0x9c>
 800887c:	ed9f 0b06 	vldr	d0, [pc, #24]	; 8008898 <pow+0x570>
 8008880:	e5a0      	b.n	80083c4 <pow+0x9c>
 8008882:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8008886:	e59d      	b.n	80083c4 <pow+0x9c>
 8008888:	00000000 	.word	0x00000000
 800888c:	7f000000 	.word	0x7f000000
 8008890:	00000000 	.word	0x00000000
 8008894:	00100000 	.word	0x00100000
	...
 80088a0:	0800a7f8 	.word	0x0800a7f8
 80088a4:	c0f00000 	.word	0xc0f00000
 80088a8:	3fe00000 	.word	0x3fe00000

080088ac <round>:
 80088ac:	ee10 1a90 	vmov	r1, s1
 80088b0:	f3c1 500a 	ubfx	r0, r1, #20, #11
 80088b4:	f2a0 32ff 	subw	r2, r0, #1023	; 0x3ff
 80088b8:	2a13      	cmp	r2, #19
 80088ba:	b510      	push	{r4, lr}
 80088bc:	ee10 3a10 	vmov	r3, s0
 80088c0:	dc19      	bgt.n	80088f6 <round+0x4a>
 80088c2:	2a00      	cmp	r2, #0
 80088c4:	da09      	bge.n	80088da <round+0x2e>
 80088c6:	3201      	adds	r2, #1
 80088c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80088cc:	d103      	bne.n	80088d6 <round+0x2a>
 80088ce:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 80088d2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80088d6:	2000      	movs	r0, #0
 80088d8:	e027      	b.n	800892a <round+0x7e>
 80088da:	4816      	ldr	r0, [pc, #88]	; (8008934 <round+0x88>)
 80088dc:	4110      	asrs	r0, r2
 80088de:	ea01 0400 	and.w	r4, r1, r0
 80088e2:	4323      	orrs	r3, r4
 80088e4:	d00e      	beq.n	8008904 <round+0x58>
 80088e6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80088ea:	fa43 f202 	asr.w	r2, r3, r2
 80088ee:	4411      	add	r1, r2
 80088f0:	ea21 0100 	bic.w	r1, r1, r0
 80088f4:	e7ef      	b.n	80088d6 <round+0x2a>
 80088f6:	2a33      	cmp	r2, #51	; 0x33
 80088f8:	dd05      	ble.n	8008906 <round+0x5a>
 80088fa:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80088fe:	d101      	bne.n	8008904 <round+0x58>
 8008900:	ee30 0b00 	vadd.f64	d0, d0, d0
 8008904:	bd10      	pop	{r4, pc}
 8008906:	f2a0 4413 	subw	r4, r0, #1043	; 0x413
 800890a:	f04f 30ff 	mov.w	r0, #4294967295
 800890e:	fa20 f404 	lsr.w	r4, r0, r4
 8008912:	4223      	tst	r3, r4
 8008914:	d0f6      	beq.n	8008904 <round+0x58>
 8008916:	2001      	movs	r0, #1
 8008918:	f1c2 0233 	rsb	r2, r2, #51	; 0x33
 800891c:	fa00 f202 	lsl.w	r2, r0, r2
 8008920:	189b      	adds	r3, r3, r2
 8008922:	bf28      	it	cs
 8008924:	1809      	addcs	r1, r1, r0
 8008926:	ea23 0004 	bic.w	r0, r3, r4
 800892a:	460b      	mov	r3, r1
 800892c:	4602      	mov	r2, r0
 800892e:	ec43 2b10 	vmov	d0, r2, r3
 8008932:	e7e7      	b.n	8008904 <round+0x58>
 8008934:	000fffff 	.word	0x000fffff

08008938 <sin>:
 8008938:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800893a:	eeb0 7b40 	vmov.f64	d7, d0
 800893e:	ee17 3a90 	vmov	r3, s15
 8008942:	4a1f      	ldr	r2, [pc, #124]	; (80089c0 <sin+0x88>)
 8008944:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008948:	4293      	cmp	r3, r2
 800894a:	dc05      	bgt.n	8008958 <sin+0x20>
 800894c:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 80089b8 <sin+0x80>
 8008950:	2000      	movs	r0, #0
 8008952:	f000 fc65 	bl	8009220 <__kernel_sin>
 8008956:	e004      	b.n	8008962 <sin+0x2a>
 8008958:	4a1a      	ldr	r2, [pc, #104]	; (80089c4 <sin+0x8c>)
 800895a:	4293      	cmp	r3, r2
 800895c:	dd04      	ble.n	8008968 <sin+0x30>
 800895e:	ee30 0b40 	vsub.f64	d0, d0, d0
 8008962:	b005      	add	sp, #20
 8008964:	f85d fb04 	ldr.w	pc, [sp], #4
 8008968:	4668      	mov	r0, sp
 800896a:	f000 f82d 	bl	80089c8 <__ieee754_rem_pio2>
 800896e:	f000 0003 	and.w	r0, r0, #3
 8008972:	2801      	cmp	r0, #1
 8008974:	d008      	beq.n	8008988 <sin+0x50>
 8008976:	2802      	cmp	r0, #2
 8008978:	d00d      	beq.n	8008996 <sin+0x5e>
 800897a:	b9b0      	cbnz	r0, 80089aa <sin+0x72>
 800897c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008980:	ed9d 0b00 	vldr	d0, [sp]
 8008984:	2001      	movs	r0, #1
 8008986:	e7e4      	b.n	8008952 <sin+0x1a>
 8008988:	ed9d 1b02 	vldr	d1, [sp, #8]
 800898c:	ed9d 0b00 	vldr	d0, [sp]
 8008990:	f000 f95a 	bl	8008c48 <__kernel_cos>
 8008994:	e7e5      	b.n	8008962 <sin+0x2a>
 8008996:	ed9d 1b02 	vldr	d1, [sp, #8]
 800899a:	ed9d 0b00 	vldr	d0, [sp]
 800899e:	2001      	movs	r0, #1
 80089a0:	f000 fc3e 	bl	8009220 <__kernel_sin>
 80089a4:	eeb1 0b40 	vneg.f64	d0, d0
 80089a8:	e7db      	b.n	8008962 <sin+0x2a>
 80089aa:	ed9d 1b02 	vldr	d1, [sp, #8]
 80089ae:	ed9d 0b00 	vldr	d0, [sp]
 80089b2:	f000 f949 	bl	8008c48 <__kernel_cos>
 80089b6:	e7f5      	b.n	80089a4 <sin+0x6c>
	...
 80089c0:	3fe921fb 	.word	0x3fe921fb
 80089c4:	7fefffff 	.word	0x7fefffff

080089c8 <__ieee754_rem_pio2>:
 80089c8:	b570      	push	{r4, r5, r6, lr}
 80089ca:	eeb0 7b40 	vmov.f64	d7, d0
 80089ce:	ee17 5a90 	vmov	r5, s15
 80089d2:	4b97      	ldr	r3, [pc, #604]	; (8008c30 <__ieee754_rem_pio2+0x268>)
 80089d4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80089d8:	429e      	cmp	r6, r3
 80089da:	b088      	sub	sp, #32
 80089dc:	4604      	mov	r4, r0
 80089de:	dc07      	bgt.n	80089f0 <__ieee754_rem_pio2+0x28>
 80089e0:	2200      	movs	r2, #0
 80089e2:	2300      	movs	r3, #0
 80089e4:	ed84 0b00 	vstr	d0, [r4]
 80089e8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80089ec:	2000      	movs	r0, #0
 80089ee:	e01b      	b.n	8008a28 <__ieee754_rem_pio2+0x60>
 80089f0:	4b90      	ldr	r3, [pc, #576]	; (8008c34 <__ieee754_rem_pio2+0x26c>)
 80089f2:	429e      	cmp	r6, r3
 80089f4:	dc3b      	bgt.n	8008a6e <__ieee754_rem_pio2+0xa6>
 80089f6:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 80089fa:	2d00      	cmp	r5, #0
 80089fc:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8008bf0 <__ieee754_rem_pio2+0x228>
 8008a00:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 8008a04:	dd19      	ble.n	8008a3a <__ieee754_rem_pio2+0x72>
 8008a06:	ee30 7b46 	vsub.f64	d7, d0, d6
 8008a0a:	429e      	cmp	r6, r3
 8008a0c:	d00e      	beq.n	8008a2c <__ieee754_rem_pio2+0x64>
 8008a0e:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8008bf8 <__ieee754_rem_pio2+0x230>
 8008a12:	ee37 5b46 	vsub.f64	d5, d7, d6
 8008a16:	ee37 7b45 	vsub.f64	d7, d7, d5
 8008a1a:	ed84 5b00 	vstr	d5, [r4]
 8008a1e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008a22:	ed84 7b02 	vstr	d7, [r4, #8]
 8008a26:	2001      	movs	r0, #1
 8008a28:	b008      	add	sp, #32
 8008a2a:	bd70      	pop	{r4, r5, r6, pc}
 8008a2c:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8008c00 <__ieee754_rem_pio2+0x238>
 8008a30:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008a34:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8008c08 <__ieee754_rem_pio2+0x240>
 8008a38:	e7eb      	b.n	8008a12 <__ieee754_rem_pio2+0x4a>
 8008a3a:	429e      	cmp	r6, r3
 8008a3c:	ee30 7b06 	vadd.f64	d7, d0, d6
 8008a40:	d00e      	beq.n	8008a60 <__ieee754_rem_pio2+0x98>
 8008a42:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 8008bf8 <__ieee754_rem_pio2+0x230>
 8008a46:	ee37 5b06 	vadd.f64	d5, d7, d6
 8008a4a:	ee37 7b45 	vsub.f64	d7, d7, d5
 8008a4e:	ed84 5b00 	vstr	d5, [r4]
 8008a52:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008a56:	f04f 30ff 	mov.w	r0, #4294967295
 8008a5a:	ed84 7b02 	vstr	d7, [r4, #8]
 8008a5e:	e7e3      	b.n	8008a28 <__ieee754_rem_pio2+0x60>
 8008a60:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8008c00 <__ieee754_rem_pio2+0x238>
 8008a64:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008a68:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8008c08 <__ieee754_rem_pio2+0x240>
 8008a6c:	e7eb      	b.n	8008a46 <__ieee754_rem_pio2+0x7e>
 8008a6e:	4b72      	ldr	r3, [pc, #456]	; (8008c38 <__ieee754_rem_pio2+0x270>)
 8008a70:	429e      	cmp	r6, r3
 8008a72:	dc6e      	bgt.n	8008b52 <__ieee754_rem_pio2+0x18a>
 8008a74:	f000 fc9c 	bl	80093b0 <fabs>
 8008a78:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8008a7c:	ed9f 6b64 	vldr	d6, [pc, #400]	; 8008c10 <__ieee754_rem_pio2+0x248>
 8008a80:	eea0 7b06 	vfma.f64	d7, d0, d6
 8008a84:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8008a88:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8008a8c:	ee17 0a90 	vmov	r0, s15
 8008a90:	eeb1 4b45 	vneg.f64	d4, d5
 8008a94:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8008bf0 <__ieee754_rem_pio2+0x228>
 8008a98:	eea5 0b47 	vfms.f64	d0, d5, d7
 8008a9c:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8008bf8 <__ieee754_rem_pio2+0x230>
 8008aa0:	281f      	cmp	r0, #31
 8008aa2:	ee25 7b07 	vmul.f64	d7, d5, d7
 8008aa6:	ee30 6b47 	vsub.f64	d6, d0, d7
 8008aaa:	dc08      	bgt.n	8008abe <__ieee754_rem_pio2+0xf6>
 8008aac:	4b63      	ldr	r3, [pc, #396]	; (8008c3c <__ieee754_rem_pio2+0x274>)
 8008aae:	1e42      	subs	r2, r0, #1
 8008ab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ab4:	42b3      	cmp	r3, r6
 8008ab6:	d002      	beq.n	8008abe <__ieee754_rem_pio2+0xf6>
 8008ab8:	ed84 6b00 	vstr	d6, [r4]
 8008abc:	e024      	b.n	8008b08 <__ieee754_rem_pio2+0x140>
 8008abe:	ee16 3a90 	vmov	r3, s13
 8008ac2:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8008ac6:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8008aca:	2b10      	cmp	r3, #16
 8008acc:	ea4f 5226 	mov.w	r2, r6, asr #20
 8008ad0:	ddf2      	ble.n	8008ab8 <__ieee754_rem_pio2+0xf0>
 8008ad2:	eeb0 6b40 	vmov.f64	d6, d0
 8008ad6:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 8008c00 <__ieee754_rem_pio2+0x238>
 8008ada:	eea4 6b03 	vfma.f64	d6, d4, d3
 8008ade:	ee30 7b46 	vsub.f64	d7, d0, d6
 8008ae2:	eea4 7b03 	vfma.f64	d7, d4, d3
 8008ae6:	ed9f 3b48 	vldr	d3, [pc, #288]	; 8008c08 <__ieee754_rem_pio2+0x240>
 8008aea:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8008aee:	ee36 3b47 	vsub.f64	d3, d6, d7
 8008af2:	ee13 3a90 	vmov	r3, s7
 8008af6:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8008afa:	1ad3      	subs	r3, r2, r3
 8008afc:	2b31      	cmp	r3, #49	; 0x31
 8008afe:	dc17      	bgt.n	8008b30 <__ieee754_rem_pio2+0x168>
 8008b00:	eeb0 0b46 	vmov.f64	d0, d6
 8008b04:	ed84 3b00 	vstr	d3, [r4]
 8008b08:	ed94 6b00 	vldr	d6, [r4]
 8008b0c:	2d00      	cmp	r5, #0
 8008b0e:	ee30 0b46 	vsub.f64	d0, d0, d6
 8008b12:	ee30 7b47 	vsub.f64	d7, d0, d7
 8008b16:	ed84 7b02 	vstr	d7, [r4, #8]
 8008b1a:	da85      	bge.n	8008a28 <__ieee754_rem_pio2+0x60>
 8008b1c:	eeb1 6b46 	vneg.f64	d6, d6
 8008b20:	ed84 6b00 	vstr	d6, [r4]
 8008b24:	eeb1 7b47 	vneg.f64	d7, d7
 8008b28:	4240      	negs	r0, r0
 8008b2a:	ed84 7b02 	vstr	d7, [r4, #8]
 8008b2e:	e77b      	b.n	8008a28 <__ieee754_rem_pio2+0x60>
 8008b30:	ed9f 3b39 	vldr	d3, [pc, #228]	; 8008c18 <__ieee754_rem_pio2+0x250>
 8008b34:	eeb0 0b46 	vmov.f64	d0, d6
 8008b38:	eea4 0b03 	vfma.f64	d0, d4, d3
 8008b3c:	ee36 7b40 	vsub.f64	d7, d6, d0
 8008b40:	ed9f 6b37 	vldr	d6, [pc, #220]	; 8008c20 <__ieee754_rem_pio2+0x258>
 8008b44:	eea4 7b03 	vfma.f64	d7, d4, d3
 8008b48:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8008b4c:	ee30 6b47 	vsub.f64	d6, d0, d7
 8008b50:	e7b2      	b.n	8008ab8 <__ieee754_rem_pio2+0xf0>
 8008b52:	4b3b      	ldr	r3, [pc, #236]	; (8008c40 <__ieee754_rem_pio2+0x278>)
 8008b54:	429e      	cmp	r6, r3
 8008b56:	dd06      	ble.n	8008b66 <__ieee754_rem_pio2+0x19e>
 8008b58:	ee30 7b40 	vsub.f64	d7, d0, d0
 8008b5c:	ed80 7b02 	vstr	d7, [r0, #8]
 8008b60:	ed80 7b00 	vstr	d7, [r0]
 8008b64:	e742      	b.n	80089ec <__ieee754_rem_pio2+0x24>
 8008b66:	1532      	asrs	r2, r6, #20
 8008b68:	ee10 0a10 	vmov	r0, s0
 8008b6c:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8008b70:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8008b74:	ec41 0b17 	vmov	d7, r0, r1
 8008b78:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8008b7c:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8008c28 <__ieee754_rem_pio2+0x260>
 8008b80:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8008b84:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008b88:	ed8d 6b02 	vstr	d6, [sp, #8]
 8008b8c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8008b90:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8008b94:	a902      	add	r1, sp, #8
 8008b96:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8008b9a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008b9e:	ed8d 6b04 	vstr	d6, [sp, #16]
 8008ba2:	ee27 7b05 	vmul.f64	d7, d7, d5
 8008ba6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008baa:	2603      	movs	r6, #3
 8008bac:	4608      	mov	r0, r1
 8008bae:	ed91 7b04 	vldr	d7, [r1, #16]
 8008bb2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bba:	4633      	mov	r3, r6
 8008bbc:	f1a1 0108 	sub.w	r1, r1, #8
 8008bc0:	f106 36ff 	add.w	r6, r6, #4294967295
 8008bc4:	d0f3      	beq.n	8008bae <__ieee754_rem_pio2+0x1e6>
 8008bc6:	491f      	ldr	r1, [pc, #124]	; (8008c44 <__ieee754_rem_pio2+0x27c>)
 8008bc8:	9101      	str	r1, [sp, #4]
 8008bca:	2102      	movs	r1, #2
 8008bcc:	9100      	str	r1, [sp, #0]
 8008bce:	4621      	mov	r1, r4
 8008bd0:	f000 f8a6 	bl	8008d20 <__kernel_rem_pio2>
 8008bd4:	2d00      	cmp	r5, #0
 8008bd6:	f6bf af27 	bge.w	8008a28 <__ieee754_rem_pio2+0x60>
 8008bda:	ed94 7b00 	vldr	d7, [r4]
 8008bde:	eeb1 7b47 	vneg.f64	d7, d7
 8008be2:	ed84 7b00 	vstr	d7, [r4]
 8008be6:	ed94 7b02 	vldr	d7, [r4, #8]
 8008bea:	e79b      	b.n	8008b24 <__ieee754_rem_pio2+0x15c>
 8008bec:	f3af 8000 	nop.w
 8008bf0:	54400000 	.word	0x54400000
 8008bf4:	3ff921fb 	.word	0x3ff921fb
 8008bf8:	1a626331 	.word	0x1a626331
 8008bfc:	3dd0b461 	.word	0x3dd0b461
 8008c00:	1a600000 	.word	0x1a600000
 8008c04:	3dd0b461 	.word	0x3dd0b461
 8008c08:	2e037073 	.word	0x2e037073
 8008c0c:	3ba3198a 	.word	0x3ba3198a
 8008c10:	6dc9c883 	.word	0x6dc9c883
 8008c14:	3fe45f30 	.word	0x3fe45f30
 8008c18:	2e000000 	.word	0x2e000000
 8008c1c:	3ba3198a 	.word	0x3ba3198a
 8008c20:	252049c1 	.word	0x252049c1
 8008c24:	397b839a 	.word	0x397b839a
 8008c28:	00000000 	.word	0x00000000
 8008c2c:	41700000 	.word	0x41700000
 8008c30:	3fe921fb 	.word	0x3fe921fb
 8008c34:	4002d97b 	.word	0x4002d97b
 8008c38:	413921fb 	.word	0x413921fb
 8008c3c:	0800a670 	.word	0x0800a670
 8008c40:	7fefffff 	.word	0x7fefffff
 8008c44:	0800a6f0 	.word	0x0800a6f0

08008c48 <__kernel_cos>:
 8008c48:	ee10 1a90 	vmov	r1, s1
 8008c4c:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8008c50:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008c54:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8008c58:	da05      	bge.n	8008c66 <__kernel_cos+0x1e>
 8008c5a:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8008c5e:	ee17 3a90 	vmov	r3, s15
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d03d      	beq.n	8008ce2 <__kernel_cos+0x9a>
 8008c66:	ee20 3b00 	vmul.f64	d3, d0, d0
 8008c6a:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8008ce8 <__kernel_cos+0xa0>
 8008c6e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8008cf0 <__kernel_cos+0xa8>
 8008c72:	eea3 6b07 	vfma.f64	d6, d3, d7
 8008c76:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8008cf8 <__kernel_cos+0xb0>
 8008c7a:	eea6 7b03 	vfma.f64	d7, d6, d3
 8008c7e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8008d00 <__kernel_cos+0xb8>
 8008c82:	eea7 6b03 	vfma.f64	d6, d7, d3
 8008c86:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8008d08 <__kernel_cos+0xc0>
 8008c8a:	4b23      	ldr	r3, [pc, #140]	; (8008d18 <__kernel_cos+0xd0>)
 8008c8c:	eea6 7b03 	vfma.f64	d7, d6, d3
 8008c90:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8008d10 <__kernel_cos+0xc8>
 8008c94:	4299      	cmp	r1, r3
 8008c96:	eea7 6b03 	vfma.f64	d6, d7, d3
 8008c9a:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8008c9e:	ee26 5b03 	vmul.f64	d5, d6, d3
 8008ca2:	ee23 7b07 	vmul.f64	d7, d3, d7
 8008ca6:	ee21 6b40 	vnmul.f64	d6, d1, d0
 8008caa:	eea3 6b05 	vfma.f64	d6, d3, d5
 8008cae:	dc04      	bgt.n	8008cba <__kernel_cos+0x72>
 8008cb0:	ee37 6b46 	vsub.f64	d6, d7, d6
 8008cb4:	ee34 0b46 	vsub.f64	d0, d4, d6
 8008cb8:	4770      	bx	lr
 8008cba:	4b18      	ldr	r3, [pc, #96]	; (8008d1c <__kernel_cos+0xd4>)
 8008cbc:	4299      	cmp	r1, r3
 8008cbe:	dc0d      	bgt.n	8008cdc <__kernel_cos+0x94>
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 8008cc6:	ec43 2b15 	vmov	d5, r2, r3
 8008cca:	ee34 0b45 	vsub.f64	d0, d4, d5
 8008cce:	ee37 7b45 	vsub.f64	d7, d7, d5
 8008cd2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008cd6:	ee30 0b47 	vsub.f64	d0, d0, d7
 8008cda:	4770      	bx	lr
 8008cdc:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8008ce0:	e7f3      	b.n	8008cca <__kernel_cos+0x82>
 8008ce2:	eeb0 0b44 	vmov.f64	d0, d4
 8008ce6:	4770      	bx	lr
 8008ce8:	be8838d4 	.word	0xbe8838d4
 8008cec:	bda8fae9 	.word	0xbda8fae9
 8008cf0:	bdb4b1c4 	.word	0xbdb4b1c4
 8008cf4:	3e21ee9e 	.word	0x3e21ee9e
 8008cf8:	809c52ad 	.word	0x809c52ad
 8008cfc:	be927e4f 	.word	0xbe927e4f
 8008d00:	19cb1590 	.word	0x19cb1590
 8008d04:	3efa01a0 	.word	0x3efa01a0
 8008d08:	16c15177 	.word	0x16c15177
 8008d0c:	bf56c16c 	.word	0xbf56c16c
 8008d10:	5555554c 	.word	0x5555554c
 8008d14:	3fa55555 	.word	0x3fa55555
 8008d18:	3fd33332 	.word	0x3fd33332
 8008d1c:	3fe90000 	.word	0x3fe90000

08008d20 <__kernel_rem_pio2>:
 8008d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d24:	ed2d 8b06 	vpush	{d8-d10}
 8008d28:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 8008d2c:	469b      	mov	fp, r3
 8008d2e:	460f      	mov	r7, r1
 8008d30:	4bcf      	ldr	r3, [pc, #828]	; (8009070 <__kernel_rem_pio2+0x350>)
 8008d32:	99a0      	ldr	r1, [sp, #640]	; 0x280
 8008d34:	f8dd c284 	ldr.w	ip, [sp, #644]	; 0x284
 8008d38:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8008d3c:	9000      	str	r0, [sp, #0]
 8008d3e:	f112 0f14 	cmn.w	r2, #20
 8008d42:	bfa8      	it	ge
 8008d44:	2318      	movge	r3, #24
 8008d46:	f10b 31ff 	add.w	r1, fp, #4294967295
 8008d4a:	bfb8      	it	lt
 8008d4c:	2300      	movlt	r3, #0
 8008d4e:	f06f 0417 	mvn.w	r4, #23
 8008d52:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 8009058 <__kernel_rem_pio2+0x338>
 8008d56:	bfa4      	itt	ge
 8008d58:	f1a2 0a03 	subge.w	sl, r2, #3
 8008d5c:	fb9a f3f3 	sdivge	r3, sl, r3
 8008d60:	fb03 4404 	mla	r4, r3, r4, r4
 8008d64:	1a5d      	subs	r5, r3, r1
 8008d66:	4414      	add	r4, r2
 8008d68:	eb09 0601 	add.w	r6, r9, r1
 8008d6c:	f10d 0860 	add.w	r8, sp, #96	; 0x60
 8008d70:	eb0c 0e85 	add.w	lr, ip, r5, lsl #2
 8008d74:	2200      	movs	r2, #0
 8008d76:	42b2      	cmp	r2, r6
 8008d78:	dd12      	ble.n	8008da0 <__kernel_rem_pio2+0x80>
 8008d7a:	aa18      	add	r2, sp, #96	; 0x60
 8008d7c:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 8008d80:	460e      	mov	r6, r1
 8008d82:	f50d 78d0 	add.w	r8, sp, #416	; 0x1a0
 8008d86:	f1cb 0a01 	rsb	sl, fp, #1
 8008d8a:	eb0a 0006 	add.w	r0, sl, r6
 8008d8e:	4581      	cmp	r9, r0
 8008d90:	db25      	blt.n	8008dde <__kernel_rem_pio2+0xbe>
 8008d92:	ed9f 7bb1 	vldr	d7, [pc, #708]	; 8009058 <__kernel_rem_pio2+0x338>
 8008d96:	f8dd e000 	ldr.w	lr, [sp]
 8008d9a:	4615      	mov	r5, r2
 8008d9c:	2000      	movs	r0, #0
 8008d9e:	e015      	b.n	8008dcc <__kernel_rem_pio2+0xac>
 8008da0:	42d5      	cmn	r5, r2
 8008da2:	d409      	bmi.n	8008db8 <__kernel_rem_pio2+0x98>
 8008da4:	f85e 0022 	ldr.w	r0, [lr, r2, lsl #2]
 8008da8:	ee07 0a90 	vmov	s15, r0
 8008dac:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008db0:	eca8 7b02 	vstmia	r8!, {d7}
 8008db4:	3201      	adds	r2, #1
 8008db6:	e7de      	b.n	8008d76 <__kernel_rem_pio2+0x56>
 8008db8:	eeb0 7b46 	vmov.f64	d7, d6
 8008dbc:	e7f8      	b.n	8008db0 <__kernel_rem_pio2+0x90>
 8008dbe:	ecbe 5b02 	vldmia	lr!, {d5}
 8008dc2:	ed95 6b00 	vldr	d6, [r5]
 8008dc6:	3001      	adds	r0, #1
 8008dc8:	eea5 7b06 	vfma.f64	d7, d5, d6
 8008dcc:	4288      	cmp	r0, r1
 8008dce:	f1a5 0508 	sub.w	r5, r5, #8
 8008dd2:	ddf4      	ble.n	8008dbe <__kernel_rem_pio2+0x9e>
 8008dd4:	eca8 7b02 	vstmia	r8!, {d7}
 8008dd8:	3208      	adds	r2, #8
 8008dda:	3601      	adds	r6, #1
 8008ddc:	e7d5      	b.n	8008d8a <__kernel_rem_pio2+0x6a>
 8008dde:	aa04      	add	r2, sp, #16
 8008de0:	ed9f 9b9f 	vldr	d9, [pc, #636]	; 8009060 <__kernel_rem_pio2+0x340>
 8008de4:	ed9f aba0 	vldr	d10, [pc, #640]	; 8009068 <__kernel_rem_pio2+0x348>
 8008de8:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 8008dec:	9201      	str	r2, [sp, #4]
 8008dee:	eb0c 0a83 	add.w	sl, ip, r3, lsl #2
 8008df2:	464e      	mov	r6, r9
 8008df4:	ab90      	add	r3, sp, #576	; 0x240
 8008df6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008dfa:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 8008dfe:	ab04      	add	r3, sp, #16
 8008e00:	4618      	mov	r0, r3
 8008e02:	4632      	mov	r2, r6
 8008e04:	2a00      	cmp	r2, #0
 8008e06:	dc4e      	bgt.n	8008ea6 <__kernel_rem_pio2+0x186>
 8008e08:	4620      	mov	r0, r4
 8008e0a:	e9cd 1302 	strd	r1, r3, [sp, #8]
 8008e0e:	f000 fb4f 	bl	80094b0 <scalbn>
 8008e12:	eeb0 8b40 	vmov.f64	d8, d0
 8008e16:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 8008e1a:	ee28 0b00 	vmul.f64	d0, d8, d0
 8008e1e:	f000 fad3 	bl	80093c8 <floor>
 8008e22:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8008e26:	eea0 8b47 	vfms.f64	d8, d0, d7
 8008e2a:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8008e2e:	2c00      	cmp	r4, #0
 8008e30:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 8008e34:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 8008e38:	ee38 8b40 	vsub.f64	d8, d8, d0
 8008e3c:	ee17 8a90 	vmov	r8, s15
 8008e40:	dd46      	ble.n	8008ed0 <__kernel_rem_pio2+0x1b0>
 8008e42:	1e70      	subs	r0, r6, #1
 8008e44:	aa04      	add	r2, sp, #16
 8008e46:	f1c4 0c18 	rsb	ip, r4, #24
 8008e4a:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
 8008e4e:	fa45 f20c 	asr.w	r2, r5, ip
 8008e52:	4490      	add	r8, r2
 8008e54:	fa02 f20c 	lsl.w	r2, r2, ip
 8008e58:	1aad      	subs	r5, r5, r2
 8008e5a:	aa04      	add	r2, sp, #16
 8008e5c:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
 8008e60:	f1c4 0217 	rsb	r2, r4, #23
 8008e64:	4115      	asrs	r5, r2
 8008e66:	2d00      	cmp	r5, #0
 8008e68:	dd41      	ble.n	8008eee <__kernel_rem_pio2+0x1ce>
 8008e6a:	f04f 0c00 	mov.w	ip, #0
 8008e6e:	f108 0801 	add.w	r8, r8, #1
 8008e72:	4660      	mov	r0, ip
 8008e74:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 8008e78:	4566      	cmp	r6, ip
 8008e7a:	dc69      	bgt.n	8008f50 <__kernel_rem_pio2+0x230>
 8008e7c:	2c00      	cmp	r4, #0
 8008e7e:	dd03      	ble.n	8008e88 <__kernel_rem_pio2+0x168>
 8008e80:	2c01      	cmp	r4, #1
 8008e82:	d076      	beq.n	8008f72 <__kernel_rem_pio2+0x252>
 8008e84:	2c02      	cmp	r4, #2
 8008e86:	d07f      	beq.n	8008f88 <__kernel_rem_pio2+0x268>
 8008e88:	2d02      	cmp	r5, #2
 8008e8a:	d130      	bne.n	8008eee <__kernel_rem_pio2+0x1ce>
 8008e8c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8008e90:	ee30 8b48 	vsub.f64	d8, d0, d8
 8008e94:	b358      	cbz	r0, 8008eee <__kernel_rem_pio2+0x1ce>
 8008e96:	4620      	mov	r0, r4
 8008e98:	9102      	str	r1, [sp, #8]
 8008e9a:	f000 fb09 	bl	80094b0 <scalbn>
 8008e9e:	9902      	ldr	r1, [sp, #8]
 8008ea0:	ee38 8b40 	vsub.f64	d8, d8, d0
 8008ea4:	e023      	b.n	8008eee <__kernel_rem_pio2+0x1ce>
 8008ea6:	ee20 7b09 	vmul.f64	d7, d0, d9
 8008eaa:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8008eae:	3a01      	subs	r2, #1
 8008eb0:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8008eb4:	ad68      	add	r5, sp, #416	; 0x1a0
 8008eb6:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8008eba:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8008ebe:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 8008ec2:	eca0 0a01 	vstmia	r0!, {s0}
 8008ec6:	ed95 0b00 	vldr	d0, [r5]
 8008eca:	ee37 0b00 	vadd.f64	d0, d7, d0
 8008ece:	e799      	b.n	8008e04 <__kernel_rem_pio2+0xe4>
 8008ed0:	d105      	bne.n	8008ede <__kernel_rem_pio2+0x1be>
 8008ed2:	1e72      	subs	r2, r6, #1
 8008ed4:	a804      	add	r0, sp, #16
 8008ed6:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 8008eda:	15ed      	asrs	r5, r5, #23
 8008edc:	e7c3      	b.n	8008e66 <__kernel_rem_pio2+0x146>
 8008ede:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8008ee2:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8008ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008eea:	da2f      	bge.n	8008f4c <__kernel_rem_pio2+0x22c>
 8008eec:	2500      	movs	r5, #0
 8008eee:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008ef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ef6:	f040 8087 	bne.w	8009008 <__kernel_rem_pio2+0x2e8>
 8008efa:	1e73      	subs	r3, r6, #1
 8008efc:	4618      	mov	r0, r3
 8008efe:	f04f 0c00 	mov.w	ip, #0
 8008f02:	4548      	cmp	r0, r9
 8008f04:	da47      	bge.n	8008f96 <__kernel_rem_pio2+0x276>
 8008f06:	f1bc 0f00 	cmp.w	ip, #0
 8008f0a:	d070      	beq.n	8008fee <__kernel_rem_pio2+0x2ce>
 8008f0c:	aa04      	add	r2, sp, #16
 8008f0e:	3c18      	subs	r4, #24
 8008f10:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008f14:	2a00      	cmp	r2, #0
 8008f16:	d075      	beq.n	8009004 <__kernel_rem_pio2+0x2e4>
 8008f18:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8008f1c:	4620      	mov	r0, r4
 8008f1e:	9300      	str	r3, [sp, #0]
 8008f20:	f000 fac6 	bl	80094b0 <scalbn>
 8008f24:	9b00      	ldr	r3, [sp, #0]
 8008f26:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8009060 <__kernel_rem_pio2+0x340>
 8008f2a:	461a      	mov	r2, r3
 8008f2c:	2a00      	cmp	r2, #0
 8008f2e:	f280 80ac 	bge.w	800908a <__kernel_rem_pio2+0x36a>
 8008f32:	4619      	mov	r1, r3
 8008f34:	2000      	movs	r0, #0
 8008f36:	2900      	cmp	r1, #0
 8008f38:	f2c0 80cd 	blt.w	80090d6 <__kernel_rem_pio2+0x3b6>
 8008f3c:	aa68      	add	r2, sp, #416	; 0x1a0
 8008f3e:	eb02 04c1 	add.w	r4, r2, r1, lsl #3
 8008f42:	ed9f 7b45 	vldr	d7, [pc, #276]	; 8009058 <__kernel_rem_pio2+0x338>
 8008f46:	4e4b      	ldr	r6, [pc, #300]	; (8009074 <__kernel_rem_pio2+0x354>)
 8008f48:	2200      	movs	r2, #0
 8008f4a:	e0b8      	b.n	80090be <__kernel_rem_pio2+0x39e>
 8008f4c:	2502      	movs	r5, #2
 8008f4e:	e78c      	b.n	8008e6a <__kernel_rem_pio2+0x14a>
 8008f50:	681a      	ldr	r2, [r3, #0]
 8008f52:	b948      	cbnz	r0, 8008f68 <__kernel_rem_pio2+0x248>
 8008f54:	b11a      	cbz	r2, 8008f5e <__kernel_rem_pio2+0x23e>
 8008f56:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 8008f5a:	601a      	str	r2, [r3, #0]
 8008f5c:	2201      	movs	r2, #1
 8008f5e:	f10c 0c01 	add.w	ip, ip, #1
 8008f62:	3304      	adds	r3, #4
 8008f64:	4610      	mov	r0, r2
 8008f66:	e787      	b.n	8008e78 <__kernel_rem_pio2+0x158>
 8008f68:	ebae 0202 	sub.w	r2, lr, r2
 8008f6c:	601a      	str	r2, [r3, #0]
 8008f6e:	4602      	mov	r2, r0
 8008f70:	e7f5      	b.n	8008f5e <__kernel_rem_pio2+0x23e>
 8008f72:	1e72      	subs	r2, r6, #1
 8008f74:	ab04      	add	r3, sp, #16
 8008f76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f7a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008f7e:	f10d 0c10 	add.w	ip, sp, #16
 8008f82:	f84c 3022 	str.w	r3, [ip, r2, lsl #2]
 8008f86:	e77f      	b.n	8008e88 <__kernel_rem_pio2+0x168>
 8008f88:	1e72      	subs	r2, r6, #1
 8008f8a:	ab04      	add	r3, sp, #16
 8008f8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f90:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008f94:	e7f3      	b.n	8008f7e <__kernel_rem_pio2+0x25e>
 8008f96:	aa04      	add	r2, sp, #16
 8008f98:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 8008f9c:	3801      	subs	r0, #1
 8008f9e:	ea4c 0c02 	orr.w	ip, ip, r2
 8008fa2:	e7ae      	b.n	8008f02 <__kernel_rem_pio2+0x1e2>
 8008fa4:	3001      	adds	r0, #1
 8008fa6:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008faa:	2a00      	cmp	r2, #0
 8008fac:	d0fa      	beq.n	8008fa4 <__kernel_rem_pio2+0x284>
 8008fae:	eb06 020b 	add.w	r2, r6, fp
 8008fb2:	ad18      	add	r5, sp, #96	; 0x60
 8008fb4:	1c73      	adds	r3, r6, #1
 8008fb6:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8008fba:	4406      	add	r6, r0
 8008fbc:	429e      	cmp	r6, r3
 8008fbe:	f6ff af19 	blt.w	8008df4 <__kernel_rem_pio2+0xd4>
 8008fc2:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 8008fc6:	9d00      	ldr	r5, [sp, #0]
 8008fc8:	ee07 0a90 	vmov	s15, r0
 8008fcc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008fd0:	2000      	movs	r0, #0
 8008fd2:	eca2 7b02 	vstmia	r2!, {d7}
 8008fd6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8009058 <__kernel_rem_pio2+0x338>
 8008fda:	4694      	mov	ip, r2
 8008fdc:	4288      	cmp	r0, r1
 8008fde:	dd09      	ble.n	8008ff4 <__kernel_rem_pio2+0x2d4>
 8008fe0:	a868      	add	r0, sp, #416	; 0x1a0
 8008fe2:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 8008fe6:	ed80 7b00 	vstr	d7, [r0]
 8008fea:	3301      	adds	r3, #1
 8008fec:	e7e6      	b.n	8008fbc <__kernel_rem_pio2+0x29c>
 8008fee:	9b01      	ldr	r3, [sp, #4]
 8008ff0:	2001      	movs	r0, #1
 8008ff2:	e7d8      	b.n	8008fa6 <__kernel_rem_pio2+0x286>
 8008ff4:	ecb5 5b02 	vldmia	r5!, {d5}
 8008ff8:	ed3c 6b02 	vldmdb	ip!, {d6}
 8008ffc:	3001      	adds	r0, #1
 8008ffe:	eea5 7b06 	vfma.f64	d7, d5, d6
 8009002:	e7eb      	b.n	8008fdc <__kernel_rem_pio2+0x2bc>
 8009004:	3b01      	subs	r3, #1
 8009006:	e781      	b.n	8008f0c <__kernel_rem_pio2+0x1ec>
 8009008:	4260      	negs	r0, r4
 800900a:	eeb0 0b48 	vmov.f64	d0, d8
 800900e:	f000 fa4f 	bl	80094b0 <scalbn>
 8009012:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8009068 <__kernel_rem_pio2+0x348>
 8009016:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800901a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800901e:	db2b      	blt.n	8009078 <__kernel_rem_pio2+0x358>
 8009020:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8009060 <__kernel_rem_pio2+0x340>
 8009024:	ee20 7b07 	vmul.f64	d7, d0, d7
 8009028:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800902c:	aa04      	add	r2, sp, #16
 800902e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8009032:	eea5 0b46 	vfms.f64	d0, d5, d6
 8009036:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800903a:	a904      	add	r1, sp, #16
 800903c:	ee10 3a10 	vmov	r3, s0
 8009040:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8009044:	ee17 2a10 	vmov	r2, s14
 8009048:	1c73      	adds	r3, r6, #1
 800904a:	3418      	adds	r4, #24
 800904c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009050:	e762      	b.n	8008f18 <__kernel_rem_pio2+0x1f8>
 8009052:	bf00      	nop
 8009054:	f3af 8000 	nop.w
	...
 8009064:	3e700000 	.word	0x3e700000
 8009068:	00000000 	.word	0x00000000
 800906c:	41700000 	.word	0x41700000
 8009070:	0800b0a8 	.word	0x0800b0a8
 8009074:	0800b068 	.word	0x0800b068
 8009078:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800907c:	aa04      	add	r2, sp, #16
 800907e:	ee10 3a10 	vmov	r3, s0
 8009082:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8009086:	4633      	mov	r3, r6
 8009088:	e746      	b.n	8008f18 <__kernel_rem_pio2+0x1f8>
 800908a:	a804      	add	r0, sp, #16
 800908c:	a968      	add	r1, sp, #416	; 0x1a0
 800908e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8009092:	9000      	str	r0, [sp, #0]
 8009094:	ee07 0a90 	vmov	s15, r0
 8009098:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800909c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80090a0:	3a01      	subs	r2, #1
 80090a2:	ee27 7b00 	vmul.f64	d7, d7, d0
 80090a6:	ee20 0b06 	vmul.f64	d0, d0, d6
 80090aa:	ed81 7b00 	vstr	d7, [r1]
 80090ae:	e73d      	b.n	8008f2c <__kernel_rem_pio2+0x20c>
 80090b0:	ecb6 5b02 	vldmia	r6!, {d5}
 80090b4:	ecb4 6b02 	vldmia	r4!, {d6}
 80090b8:	3201      	adds	r2, #1
 80090ba:	eea5 7b06 	vfma.f64	d7, d5, d6
 80090be:	454a      	cmp	r2, r9
 80090c0:	dc01      	bgt.n	80090c6 <__kernel_rem_pio2+0x3a6>
 80090c2:	4290      	cmp	r0, r2
 80090c4:	daf4      	bge.n	80090b0 <__kernel_rem_pio2+0x390>
 80090c6:	aa40      	add	r2, sp, #256	; 0x100
 80090c8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80090cc:	ed82 7b00 	vstr	d7, [r2]
 80090d0:	3901      	subs	r1, #1
 80090d2:	3001      	adds	r0, #1
 80090d4:	e72f      	b.n	8008f36 <__kernel_rem_pio2+0x216>
 80090d6:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 80090d8:	2a02      	cmp	r2, #2
 80090da:	dc0a      	bgt.n	80090f2 <__kernel_rem_pio2+0x3d2>
 80090dc:	2a00      	cmp	r2, #0
 80090de:	dc5a      	bgt.n	8009196 <__kernel_rem_pio2+0x476>
 80090e0:	d039      	beq.n	8009156 <__kernel_rem_pio2+0x436>
 80090e2:	f008 0007 	and.w	r0, r8, #7
 80090e6:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 80090ea:	ecbd 8b06 	vpop	{d8-d10}
 80090ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090f2:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 80090f4:	2a03      	cmp	r2, #3
 80090f6:	d1f4      	bne.n	80090e2 <__kernel_rem_pio2+0x3c2>
 80090f8:	aa40      	add	r2, sp, #256	; 0x100
 80090fa:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80090fe:	4611      	mov	r1, r2
 8009100:	4618      	mov	r0, r3
 8009102:	2800      	cmp	r0, #0
 8009104:	f1a1 0108 	sub.w	r1, r1, #8
 8009108:	dc52      	bgt.n	80091b0 <__kernel_rem_pio2+0x490>
 800910a:	4619      	mov	r1, r3
 800910c:	2901      	cmp	r1, #1
 800910e:	f1a2 0208 	sub.w	r2, r2, #8
 8009112:	dc5d      	bgt.n	80091d0 <__kernel_rem_pio2+0x4b0>
 8009114:	ed9f 7b40 	vldr	d7, [pc, #256]	; 8009218 <__kernel_rem_pio2+0x4f8>
 8009118:	2b01      	cmp	r3, #1
 800911a:	dc69      	bgt.n	80091f0 <__kernel_rem_pio2+0x4d0>
 800911c:	ed9d 5b40 	vldr	d5, [sp, #256]	; 0x100
 8009120:	ed9d 6b42 	vldr	d6, [sp, #264]	; 0x108
 8009124:	2d00      	cmp	r5, #0
 8009126:	d16c      	bne.n	8009202 <__kernel_rem_pio2+0x4e2>
 8009128:	ed87 5b00 	vstr	d5, [r7]
 800912c:	ed87 6b02 	vstr	d6, [r7, #8]
 8009130:	ed87 7b04 	vstr	d7, [r7, #16]
 8009134:	e7d5      	b.n	80090e2 <__kernel_rem_pio2+0x3c2>
 8009136:	aa40      	add	r2, sp, #256	; 0x100
 8009138:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800913c:	ed92 6b00 	vldr	d6, [r2]
 8009140:	3b01      	subs	r3, #1
 8009142:	ee37 7b06 	vadd.f64	d7, d7, d6
 8009146:	2b00      	cmp	r3, #0
 8009148:	daf5      	bge.n	8009136 <__kernel_rem_pio2+0x416>
 800914a:	b10d      	cbz	r5, 8009150 <__kernel_rem_pio2+0x430>
 800914c:	eeb1 7b47 	vneg.f64	d7, d7
 8009150:	ed87 7b00 	vstr	d7, [r7]
 8009154:	e7c5      	b.n	80090e2 <__kernel_rem_pio2+0x3c2>
 8009156:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8009218 <__kernel_rem_pio2+0x4f8>
 800915a:	e7f4      	b.n	8009146 <__kernel_rem_pio2+0x426>
 800915c:	a940      	add	r1, sp, #256	; 0x100
 800915e:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8009162:	ed91 7b00 	vldr	d7, [r1]
 8009166:	3a01      	subs	r2, #1
 8009168:	ee36 6b07 	vadd.f64	d6, d6, d7
 800916c:	2a00      	cmp	r2, #0
 800916e:	daf5      	bge.n	800915c <__kernel_rem_pio2+0x43c>
 8009170:	b1ad      	cbz	r5, 800919e <__kernel_rem_pio2+0x47e>
 8009172:	eeb1 7b46 	vneg.f64	d7, d6
 8009176:	ed87 7b00 	vstr	d7, [r7]
 800917a:	ed9d 7b40 	vldr	d7, [sp, #256]	; 0x100
 800917e:	a942      	add	r1, sp, #264	; 0x108
 8009180:	2201      	movs	r2, #1
 8009182:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009186:	4293      	cmp	r3, r2
 8009188:	da0c      	bge.n	80091a4 <__kernel_rem_pio2+0x484>
 800918a:	b10d      	cbz	r5, 8009190 <__kernel_rem_pio2+0x470>
 800918c:	eeb1 7b47 	vneg.f64	d7, d7
 8009190:	ed87 7b02 	vstr	d7, [r7, #8]
 8009194:	e7a5      	b.n	80090e2 <__kernel_rem_pio2+0x3c2>
 8009196:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8009218 <__kernel_rem_pio2+0x4f8>
 800919a:	461a      	mov	r2, r3
 800919c:	e7e6      	b.n	800916c <__kernel_rem_pio2+0x44c>
 800919e:	eeb0 7b46 	vmov.f64	d7, d6
 80091a2:	e7e8      	b.n	8009176 <__kernel_rem_pio2+0x456>
 80091a4:	ecb1 6b02 	vldmia	r1!, {d6}
 80091a8:	3201      	adds	r2, #1
 80091aa:	ee37 7b06 	vadd.f64	d7, d7, d6
 80091ae:	e7ea      	b.n	8009186 <__kernel_rem_pio2+0x466>
 80091b0:	ed91 7b00 	vldr	d7, [r1]
 80091b4:	ed91 5b02 	vldr	d5, [r1, #8]
 80091b8:	3801      	subs	r0, #1
 80091ba:	ee37 6b05 	vadd.f64	d6, d7, d5
 80091be:	ee37 7b46 	vsub.f64	d7, d7, d6
 80091c2:	ed81 6b00 	vstr	d6, [r1]
 80091c6:	ee37 7b05 	vadd.f64	d7, d7, d5
 80091ca:	ed81 7b02 	vstr	d7, [r1, #8]
 80091ce:	e798      	b.n	8009102 <__kernel_rem_pio2+0x3e2>
 80091d0:	ed92 7b00 	vldr	d7, [r2]
 80091d4:	ed92 5b02 	vldr	d5, [r2, #8]
 80091d8:	3901      	subs	r1, #1
 80091da:	ee37 6b05 	vadd.f64	d6, d7, d5
 80091de:	ee37 7b46 	vsub.f64	d7, d7, d6
 80091e2:	ed82 6b00 	vstr	d6, [r2]
 80091e6:	ee37 7b05 	vadd.f64	d7, d7, d5
 80091ea:	ed82 7b02 	vstr	d7, [r2, #8]
 80091ee:	e78d      	b.n	800910c <__kernel_rem_pio2+0x3ec>
 80091f0:	aa40      	add	r2, sp, #256	; 0x100
 80091f2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80091f6:	ed92 6b00 	vldr	d6, [r2]
 80091fa:	3b01      	subs	r3, #1
 80091fc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8009200:	e78a      	b.n	8009118 <__kernel_rem_pio2+0x3f8>
 8009202:	eeb1 5b45 	vneg.f64	d5, d5
 8009206:	eeb1 6b46 	vneg.f64	d6, d6
 800920a:	ed87 5b00 	vstr	d5, [r7]
 800920e:	eeb1 7b47 	vneg.f64	d7, d7
 8009212:	ed87 6b02 	vstr	d6, [r7, #8]
 8009216:	e78b      	b.n	8009130 <__kernel_rem_pio2+0x410>
	...

08009220 <__kernel_sin>:
 8009220:	ee10 3a90 	vmov	r3, s1
 8009224:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009228:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800922c:	da04      	bge.n	8009238 <__kernel_sin+0x18>
 800922e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8009232:	ee17 3a90 	vmov	r3, s15
 8009236:	b35b      	cbz	r3, 8009290 <__kernel_sin+0x70>
 8009238:	ee20 6b00 	vmul.f64	d6, d0, d0
 800923c:	ee20 5b06 	vmul.f64	d5, d0, d6
 8009240:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8009298 <__kernel_sin+0x78>
 8009244:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80092a0 <__kernel_sin+0x80>
 8009248:	eea6 4b07 	vfma.f64	d4, d6, d7
 800924c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 80092a8 <__kernel_sin+0x88>
 8009250:	eea4 7b06 	vfma.f64	d7, d4, d6
 8009254:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80092b0 <__kernel_sin+0x90>
 8009258:	eea7 4b06 	vfma.f64	d4, d7, d6
 800925c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 80092b8 <__kernel_sin+0x98>
 8009260:	eea4 7b06 	vfma.f64	d7, d4, d6
 8009264:	b930      	cbnz	r0, 8009274 <__kernel_sin+0x54>
 8009266:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80092c0 <__kernel_sin+0xa0>
 800926a:	eea6 4b07 	vfma.f64	d4, d6, d7
 800926e:	eea4 0b05 	vfma.f64	d0, d4, d5
 8009272:	4770      	bx	lr
 8009274:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8009278:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800927c:	eea1 7b04 	vfma.f64	d7, d1, d4
 8009280:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8009284:	ed9f 7b10 	vldr	d7, [pc, #64]	; 80092c8 <__kernel_sin+0xa8>
 8009288:	eea5 1b07 	vfma.f64	d1, d5, d7
 800928c:	ee30 0b41 	vsub.f64	d0, d0, d1
 8009290:	4770      	bx	lr
 8009292:	bf00      	nop
 8009294:	f3af 8000 	nop.w
 8009298:	5acfd57c 	.word	0x5acfd57c
 800929c:	3de5d93a 	.word	0x3de5d93a
 80092a0:	8a2b9ceb 	.word	0x8a2b9ceb
 80092a4:	be5ae5e6 	.word	0xbe5ae5e6
 80092a8:	57b1fe7d 	.word	0x57b1fe7d
 80092ac:	3ec71de3 	.word	0x3ec71de3
 80092b0:	19c161d5 	.word	0x19c161d5
 80092b4:	bf2a01a0 	.word	0xbf2a01a0
 80092b8:	1110f8a6 	.word	0x1110f8a6
 80092bc:	3f811111 	.word	0x3f811111
 80092c0:	55555549 	.word	0x55555549
 80092c4:	bfc55555 	.word	0xbfc55555
 80092c8:	55555549 	.word	0x55555549
 80092cc:	3fc55555 	.word	0x3fc55555

080092d0 <with_errno>:
 80092d0:	b513      	push	{r0, r1, r4, lr}
 80092d2:	4604      	mov	r4, r0
 80092d4:	ed8d 0b00 	vstr	d0, [sp]
 80092d8:	f7fe ff3e 	bl	8008158 <__errno>
 80092dc:	ed9d 0b00 	vldr	d0, [sp]
 80092e0:	6004      	str	r4, [r0, #0]
 80092e2:	b002      	add	sp, #8
 80092e4:	bd10      	pop	{r4, pc}

080092e6 <xflow>:
 80092e6:	b082      	sub	sp, #8
 80092e8:	b158      	cbz	r0, 8009302 <xflow+0x1c>
 80092ea:	eeb1 7b40 	vneg.f64	d7, d0
 80092ee:	ed8d 7b00 	vstr	d7, [sp]
 80092f2:	ed9d 7b00 	vldr	d7, [sp]
 80092f6:	2022      	movs	r0, #34	; 0x22
 80092f8:	ee20 0b07 	vmul.f64	d0, d0, d7
 80092fc:	b002      	add	sp, #8
 80092fe:	f7ff bfe7 	b.w	80092d0 <with_errno>
 8009302:	eeb0 7b40 	vmov.f64	d7, d0
 8009306:	e7f2      	b.n	80092ee <xflow+0x8>

08009308 <__math_uflow>:
 8009308:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009310 <__math_uflow+0x8>
 800930c:	f7ff bfeb 	b.w	80092e6 <xflow>
 8009310:	00000000 	.word	0x00000000
 8009314:	10000000 	.word	0x10000000

08009318 <__math_oflow>:
 8009318:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009320 <__math_oflow+0x8>
 800931c:	f7ff bfe3 	b.w	80092e6 <xflow>
 8009320:	00000000 	.word	0x00000000
 8009324:	70000000 	.word	0x70000000

08009328 <__math_divzero>:
 8009328:	b082      	sub	sp, #8
 800932a:	2800      	cmp	r0, #0
 800932c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8009330:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 8009334:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8009338:	ed8d 7b00 	vstr	d7, [sp]
 800933c:	ed9d 0b00 	vldr	d0, [sp]
 8009340:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8009350 <__math_divzero+0x28>
 8009344:	2022      	movs	r0, #34	; 0x22
 8009346:	ee80 0b07 	vdiv.f64	d0, d0, d7
 800934a:	b002      	add	sp, #8
 800934c:	f7ff bfc0 	b.w	80092d0 <with_errno>
	...

08009358 <__math_invalid>:
 8009358:	eeb0 7b40 	vmov.f64	d7, d0
 800935c:	eeb4 7b47 	vcmp.f64	d7, d7
 8009360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009364:	ee30 6b40 	vsub.f64	d6, d0, d0
 8009368:	ee86 0b06 	vdiv.f64	d0, d6, d6
 800936c:	d602      	bvs.n	8009374 <__math_invalid+0x1c>
 800936e:	2021      	movs	r0, #33	; 0x21
 8009370:	f7ff bfae 	b.w	80092d0 <with_errno>
 8009374:	4770      	bx	lr

08009376 <__math_check_uflow>:
 8009376:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800937a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800937e:	d102      	bne.n	8009386 <__math_check_uflow+0x10>
 8009380:	2022      	movs	r0, #34	; 0x22
 8009382:	f7ff bfa5 	b.w	80092d0 <with_errno>
 8009386:	4770      	bx	lr

08009388 <__math_check_oflow>:
 8009388:	ed9f 6b07 	vldr	d6, [pc, #28]	; 80093a8 <__math_check_oflow+0x20>
 800938c:	eeb0 7bc0 	vabs.f64	d7, d0
 8009390:	eeb4 7b46 	vcmp.f64	d7, d6
 8009394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009398:	dd02      	ble.n	80093a0 <__math_check_oflow+0x18>
 800939a:	2022      	movs	r0, #34	; 0x22
 800939c:	f7ff bf98 	b.w	80092d0 <with_errno>
 80093a0:	4770      	bx	lr
 80093a2:	bf00      	nop
 80093a4:	f3af 8000 	nop.w
 80093a8:	ffffffff 	.word	0xffffffff
 80093ac:	7fefffff 	.word	0x7fefffff

080093b0 <fabs>:
 80093b0:	ec51 0b10 	vmov	r0, r1, d0
 80093b4:	ee10 2a10 	vmov	r2, s0
 80093b8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80093bc:	ec43 2b10 	vmov	d0, r2, r3
 80093c0:	4770      	bx	lr
 80093c2:	0000      	movs	r0, r0
 80093c4:	0000      	movs	r0, r0
	...

080093c8 <floor>:
 80093c8:	ee10 1a90 	vmov	r1, s1
 80093cc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80093d0:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 80093d4:	2b13      	cmp	r3, #19
 80093d6:	b530      	push	{r4, r5, lr}
 80093d8:	ee10 0a10 	vmov	r0, s0
 80093dc:	ee10 5a10 	vmov	r5, s0
 80093e0:	dc31      	bgt.n	8009446 <floor+0x7e>
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	da15      	bge.n	8009412 <floor+0x4a>
 80093e6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80094a0 <floor+0xd8>
 80093ea:	ee30 0b07 	vadd.f64	d0, d0, d7
 80093ee:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80093f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093f6:	dd07      	ble.n	8009408 <floor+0x40>
 80093f8:	2900      	cmp	r1, #0
 80093fa:	da4e      	bge.n	800949a <floor+0xd2>
 80093fc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009400:	4318      	orrs	r0, r3
 8009402:	d001      	beq.n	8009408 <floor+0x40>
 8009404:	4928      	ldr	r1, [pc, #160]	; (80094a8 <floor+0xe0>)
 8009406:	2000      	movs	r0, #0
 8009408:	460b      	mov	r3, r1
 800940a:	4602      	mov	r2, r0
 800940c:	ec43 2b10 	vmov	d0, r2, r3
 8009410:	e020      	b.n	8009454 <floor+0x8c>
 8009412:	4a26      	ldr	r2, [pc, #152]	; (80094ac <floor+0xe4>)
 8009414:	411a      	asrs	r2, r3
 8009416:	ea01 0402 	and.w	r4, r1, r2
 800941a:	4304      	orrs	r4, r0
 800941c:	d01a      	beq.n	8009454 <floor+0x8c>
 800941e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80094a0 <floor+0xd8>
 8009422:	ee30 0b07 	vadd.f64	d0, d0, d7
 8009426:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800942a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800942e:	ddeb      	ble.n	8009408 <floor+0x40>
 8009430:	2900      	cmp	r1, #0
 8009432:	bfbe      	ittt	lt
 8009434:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8009438:	fa40 f303 	asrlt.w	r3, r0, r3
 800943c:	18c9      	addlt	r1, r1, r3
 800943e:	ea21 0102 	bic.w	r1, r1, r2
 8009442:	2000      	movs	r0, #0
 8009444:	e7e0      	b.n	8009408 <floor+0x40>
 8009446:	2b33      	cmp	r3, #51	; 0x33
 8009448:	dd05      	ble.n	8009456 <floor+0x8e>
 800944a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800944e:	d101      	bne.n	8009454 <floor+0x8c>
 8009450:	ee30 0b00 	vadd.f64	d0, d0, d0
 8009454:	bd30      	pop	{r4, r5, pc}
 8009456:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800945a:	f04f 32ff 	mov.w	r2, #4294967295
 800945e:	40e2      	lsrs	r2, r4
 8009460:	4202      	tst	r2, r0
 8009462:	d0f7      	beq.n	8009454 <floor+0x8c>
 8009464:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 80094a0 <floor+0xd8>
 8009468:	ee30 0b07 	vadd.f64	d0, d0, d7
 800946c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8009470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009474:	ddc8      	ble.n	8009408 <floor+0x40>
 8009476:	2900      	cmp	r1, #0
 8009478:	da02      	bge.n	8009480 <floor+0xb8>
 800947a:	2b14      	cmp	r3, #20
 800947c:	d103      	bne.n	8009486 <floor+0xbe>
 800947e:	3101      	adds	r1, #1
 8009480:	ea20 0002 	bic.w	r0, r0, r2
 8009484:	e7c0      	b.n	8009408 <floor+0x40>
 8009486:	2401      	movs	r4, #1
 8009488:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800948c:	fa04 f303 	lsl.w	r3, r4, r3
 8009490:	4418      	add	r0, r3
 8009492:	42a8      	cmp	r0, r5
 8009494:	bf38      	it	cc
 8009496:	1909      	addcc	r1, r1, r4
 8009498:	e7f2      	b.n	8009480 <floor+0xb8>
 800949a:	2000      	movs	r0, #0
 800949c:	4601      	mov	r1, r0
 800949e:	e7b3      	b.n	8009408 <floor+0x40>
 80094a0:	8800759c 	.word	0x8800759c
 80094a4:	7e37e43c 	.word	0x7e37e43c
 80094a8:	bff00000 	.word	0xbff00000
 80094ac:	000fffff 	.word	0x000fffff

080094b0 <scalbn>:
 80094b0:	b082      	sub	sp, #8
 80094b2:	ed8d 0b00 	vstr	d0, [sp]
 80094b6:	9b01      	ldr	r3, [sp, #4]
 80094b8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80094bc:	b9a2      	cbnz	r2, 80094e8 <scalbn+0x38>
 80094be:	9a00      	ldr	r2, [sp, #0]
 80094c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80094c4:	4313      	orrs	r3, r2
 80094c6:	d03a      	beq.n	800953e <scalbn+0x8e>
 80094c8:	ed9f 7b35 	vldr	d7, [pc, #212]	; 80095a0 <scalbn+0xf0>
 80094cc:	4b40      	ldr	r3, [pc, #256]	; (80095d0 <scalbn+0x120>)
 80094ce:	ee20 7b07 	vmul.f64	d7, d0, d7
 80094d2:	4298      	cmp	r0, r3
 80094d4:	ed8d 7b00 	vstr	d7, [sp]
 80094d8:	da11      	bge.n	80094fe <scalbn+0x4e>
 80094da:	ed9f 7b33 	vldr	d7, [pc, #204]	; 80095a8 <scalbn+0xf8>
 80094de:	ed9d 6b00 	vldr	d6, [sp]
 80094e2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80094e6:	e007      	b.n	80094f8 <scalbn+0x48>
 80094e8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80094ec:	428a      	cmp	r2, r1
 80094ee:	d10a      	bne.n	8009506 <scalbn+0x56>
 80094f0:	ed9d 7b00 	vldr	d7, [sp]
 80094f4:	ee37 7b07 	vadd.f64	d7, d7, d7
 80094f8:	ed8d 7b00 	vstr	d7, [sp]
 80094fc:	e01f      	b.n	800953e <scalbn+0x8e>
 80094fe:	9b01      	ldr	r3, [sp, #4]
 8009500:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8009504:	3a36      	subs	r2, #54	; 0x36
 8009506:	4402      	add	r2, r0
 8009508:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800950c:	428a      	cmp	r2, r1
 800950e:	dd0a      	ble.n	8009526 <scalbn+0x76>
 8009510:	ed9f 7b27 	vldr	d7, [pc, #156]	; 80095b0 <scalbn+0x100>
 8009514:	ed9f 5b28 	vldr	d5, [pc, #160]	; 80095b8 <scalbn+0x108>
 8009518:	eeb0 6b47 	vmov.f64	d6, d7
 800951c:	9b01      	ldr	r3, [sp, #4]
 800951e:	2b00      	cmp	r3, #0
 8009520:	fe27 7b05 	vselge.f64	d7, d7, d5
 8009524:	e7dd      	b.n	80094e2 <scalbn+0x32>
 8009526:	2a00      	cmp	r2, #0
 8009528:	dd0d      	ble.n	8009546 <scalbn+0x96>
 800952a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800952e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009532:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009536:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800953a:	e9cd 0100 	strd	r0, r1, [sp]
 800953e:	ed9d 0b00 	vldr	d0, [sp]
 8009542:	b002      	add	sp, #8
 8009544:	4770      	bx	lr
 8009546:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800954a:	da18      	bge.n	800957e <scalbn+0xce>
 800954c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009550:	4298      	cmp	r0, r3
 8009552:	9b01      	ldr	r3, [sp, #4]
 8009554:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009558:	dd09      	ble.n	800956e <scalbn+0xbe>
 800955a:	ed9f 7b15 	vldr	d7, [pc, #84]	; 80095b0 <scalbn+0x100>
 800955e:	ed9f 5b16 	vldr	d5, [pc, #88]	; 80095b8 <scalbn+0x108>
 8009562:	eeb0 6b47 	vmov.f64	d6, d7
 8009566:	2b00      	cmp	r3, #0
 8009568:	fe07 7b05 	vseleq.f64	d7, d7, d5
 800956c:	e7b9      	b.n	80094e2 <scalbn+0x32>
 800956e:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 80095a8 <scalbn+0xf8>
 8009572:	ed9f 5b13 	vldr	d5, [pc, #76]	; 80095c0 <scalbn+0x110>
 8009576:	eeb0 6b47 	vmov.f64	d6, d7
 800957a:	2b00      	cmp	r3, #0
 800957c:	e7f4      	b.n	8009568 <scalbn+0xb8>
 800957e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009582:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009586:	3236      	adds	r2, #54	; 0x36
 8009588:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800958c:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8009590:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 80095c8 <scalbn+0x118>
 8009594:	ec41 0b17 	vmov	d7, r0, r1
 8009598:	e7a3      	b.n	80094e2 <scalbn+0x32>
 800959a:	bf00      	nop
 800959c:	f3af 8000 	nop.w
 80095a0:	00000000 	.word	0x00000000
 80095a4:	43500000 	.word	0x43500000
 80095a8:	c2f8f359 	.word	0xc2f8f359
 80095ac:	01a56e1f 	.word	0x01a56e1f
 80095b0:	8800759c 	.word	0x8800759c
 80095b4:	7e37e43c 	.word	0x7e37e43c
 80095b8:	8800759c 	.word	0x8800759c
 80095bc:	fe37e43c 	.word	0xfe37e43c
 80095c0:	c2f8f359 	.word	0xc2f8f359
 80095c4:	81a56e1f 	.word	0x81a56e1f
 80095c8:	00000000 	.word	0x00000000
 80095cc:	3c900000 	.word	0x3c900000
 80095d0:	ffff3cb0 	.word	0xffff3cb0

080095d4 <_init>:
 80095d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095d6:	bf00      	nop
 80095d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095da:	bc08      	pop	{r3}
 80095dc:	469e      	mov	lr, r3
 80095de:	4770      	bx	lr

080095e0 <_fini>:
 80095e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095e2:	bf00      	nop
 80095e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095e6:	bc08      	pop	{r3}
 80095e8:	469e      	mov	lr, r3
 80095ea:	4770      	bx	lr
