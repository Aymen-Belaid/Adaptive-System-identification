
RLS_DC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092b4  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ac8  08009588  08009588  00019588  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b050  0800b050  0001b050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b058  0800b058  0001b058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800b05c  0800b05c  0001b05c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000080  24000000  0800b060  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000036c  24000080  0800b0e0  00020080  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  240003ec  0800b0e0  000203ec  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 10 .debug_info   00019c5c  00000000  00000000  000200ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002f3f  00000000  00000000  00039d0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001120  00000000  00000000  0003cc50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000ff8  00000000  00000000  0003dd70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00032bdf  00000000  00000000  0003ed68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00015b6b  00000000  00000000  00071947  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014c732  00000000  00000000  000874b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      000000c5  00000000  00000000  001d3be4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004d00  00000000  00000000  001d3cac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loc    00000e50  00000000  00000000  001d89ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000080 	.word	0x24000080
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800956c 	.word	0x0800956c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000084 	.word	0x24000084
 800030c:	0800956c 	.word	0x0800956c

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b974 	b.w	8000610 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468e      	mov	lr, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14d      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034e:	428a      	cmp	r2, r1
 8000350:	4694      	mov	ip, r2
 8000352:	d969      	bls.n	8000428 <__udivmoddi4+0xe8>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b152      	cbz	r2, 8000370 <__udivmoddi4+0x30>
 800035a:	fa01 f302 	lsl.w	r3, r1, r2
 800035e:	f1c2 0120 	rsb	r1, r2, #32
 8000362:	fa20 f101 	lsr.w	r1, r0, r1
 8000366:	fa0c fc02 	lsl.w	ip, ip, r2
 800036a:	ea41 0e03 	orr.w	lr, r1, r3
 800036e:	4094      	lsls	r4, r2
 8000370:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000374:	0c21      	lsrs	r1, r4, #16
 8000376:	fbbe f6f8 	udiv	r6, lr, r8
 800037a:	fa1f f78c 	uxth.w	r7, ip
 800037e:	fb08 e316 	mls	r3, r8, r6, lr
 8000382:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000386:	fb06 f107 	mul.w	r1, r6, r7
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f106 30ff 	add.w	r0, r6, #4294967295
 8000396:	f080 811f 	bcs.w	80005d8 <__udivmoddi4+0x298>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 811c 	bls.w	80005d8 <__udivmoddi4+0x298>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ac:	fb08 3310 	mls	r3, r8, r0, r3
 80003b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b4:	fb00 f707 	mul.w	r7, r0, r7
 80003b8:	42a7      	cmp	r7, r4
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x92>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c4:	f080 810a 	bcs.w	80005dc <__udivmoddi4+0x29c>
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	f240 8107 	bls.w	80005dc <__udivmoddi4+0x29c>
 80003ce:	4464      	add	r4, ip
 80003d0:	3802      	subs	r0, #2
 80003d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d6:	1be4      	subs	r4, r4, r7
 80003d8:	2600      	movs	r6, #0
 80003da:	b11d      	cbz	r5, 80003e4 <__udivmoddi4+0xa4>
 80003dc:	40d4      	lsrs	r4, r2
 80003de:	2300      	movs	r3, #0
 80003e0:	e9c5 4300 	strd	r4, r3, [r5]
 80003e4:	4631      	mov	r1, r6
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d909      	bls.n	8000402 <__udivmoddi4+0xc2>
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	f000 80ef 	beq.w	80005d2 <__udivmoddi4+0x292>
 80003f4:	2600      	movs	r6, #0
 80003f6:	e9c5 0100 	strd	r0, r1, [r5]
 80003fa:	4630      	mov	r0, r6
 80003fc:	4631      	mov	r1, r6
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	fab3 f683 	clz	r6, r3
 8000406:	2e00      	cmp	r6, #0
 8000408:	d14a      	bne.n	80004a0 <__udivmoddi4+0x160>
 800040a:	428b      	cmp	r3, r1
 800040c:	d302      	bcc.n	8000414 <__udivmoddi4+0xd4>
 800040e:	4282      	cmp	r2, r0
 8000410:	f200 80f9 	bhi.w	8000606 <__udivmoddi4+0x2c6>
 8000414:	1a84      	subs	r4, r0, r2
 8000416:	eb61 0303 	sbc.w	r3, r1, r3
 800041a:	2001      	movs	r0, #1
 800041c:	469e      	mov	lr, r3
 800041e:	2d00      	cmp	r5, #0
 8000420:	d0e0      	beq.n	80003e4 <__udivmoddi4+0xa4>
 8000422:	e9c5 4e00 	strd	r4, lr, [r5]
 8000426:	e7dd      	b.n	80003e4 <__udivmoddi4+0xa4>
 8000428:	b902      	cbnz	r2, 800042c <__udivmoddi4+0xec>
 800042a:	deff      	udf	#255	; 0xff
 800042c:	fab2 f282 	clz	r2, r2
 8000430:	2a00      	cmp	r2, #0
 8000432:	f040 8092 	bne.w	800055a <__udivmoddi4+0x21a>
 8000436:	eba1 010c 	sub.w	r1, r1, ip
 800043a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043e:	fa1f fe8c 	uxth.w	lr, ip
 8000442:	2601      	movs	r6, #1
 8000444:	0c20      	lsrs	r0, r4, #16
 8000446:	fbb1 f3f7 	udiv	r3, r1, r7
 800044a:	fb07 1113 	mls	r1, r7, r3, r1
 800044e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000452:	fb0e f003 	mul.w	r0, lr, r3
 8000456:	4288      	cmp	r0, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x12c>
 800045a:	eb1c 0101 	adds.w	r1, ip, r1
 800045e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x12a>
 8000464:	4288      	cmp	r0, r1
 8000466:	f200 80cb 	bhi.w	8000600 <__udivmoddi4+0x2c0>
 800046a:	4643      	mov	r3, r8
 800046c:	1a09      	subs	r1, r1, r0
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb1 f0f7 	udiv	r0, r1, r7
 8000474:	fb07 1110 	mls	r1, r7, r0, r1
 8000478:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800047c:	fb0e fe00 	mul.w	lr, lr, r0
 8000480:	45a6      	cmp	lr, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x156>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f100 31ff 	add.w	r1, r0, #4294967295
 800048c:	d202      	bcs.n	8000494 <__udivmoddi4+0x154>
 800048e:	45a6      	cmp	lr, r4
 8000490:	f200 80bb 	bhi.w	800060a <__udivmoddi4+0x2ca>
 8000494:	4608      	mov	r0, r1
 8000496:	eba4 040e 	sub.w	r4, r4, lr
 800049a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800049e:	e79c      	b.n	80003da <__udivmoddi4+0x9a>
 80004a0:	f1c6 0720 	rsb	r7, r6, #32
 80004a4:	40b3      	lsls	r3, r6
 80004a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ae:	fa20 f407 	lsr.w	r4, r0, r7
 80004b2:	fa01 f306 	lsl.w	r3, r1, r6
 80004b6:	431c      	orrs	r4, r3
 80004b8:	40f9      	lsrs	r1, r7
 80004ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004be:	fa00 f306 	lsl.w	r3, r0, r6
 80004c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004c6:	0c20      	lsrs	r0, r4, #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fb09 1118 	mls	r1, r9, r8, r1
 80004d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d4:	fb08 f00e 	mul.w	r0, r8, lr
 80004d8:	4288      	cmp	r0, r1
 80004da:	fa02 f206 	lsl.w	r2, r2, r6
 80004de:	d90b      	bls.n	80004f8 <__udivmoddi4+0x1b8>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004e8:	f080 8088 	bcs.w	80005fc <__udivmoddi4+0x2bc>
 80004ec:	4288      	cmp	r0, r1
 80004ee:	f240 8085 	bls.w	80005fc <__udivmoddi4+0x2bc>
 80004f2:	f1a8 0802 	sub.w	r8, r8, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1a09      	subs	r1, r1, r0
 80004fa:	b2a4      	uxth	r4, r4
 80004fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000500:	fb09 1110 	mls	r1, r9, r0, r1
 8000504:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000508:	fb00 fe0e 	mul.w	lr, r0, lr
 800050c:	458e      	cmp	lr, r1
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x1e2>
 8000510:	eb1c 0101 	adds.w	r1, ip, r1
 8000514:	f100 34ff 	add.w	r4, r0, #4294967295
 8000518:	d26c      	bcs.n	80005f4 <__udivmoddi4+0x2b4>
 800051a:	458e      	cmp	lr, r1
 800051c:	d96a      	bls.n	80005f4 <__udivmoddi4+0x2b4>
 800051e:	3802      	subs	r0, #2
 8000520:	4461      	add	r1, ip
 8000522:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000526:	fba0 9402 	umull	r9, r4, r0, r2
 800052a:	eba1 010e 	sub.w	r1, r1, lr
 800052e:	42a1      	cmp	r1, r4
 8000530:	46c8      	mov	r8, r9
 8000532:	46a6      	mov	lr, r4
 8000534:	d356      	bcc.n	80005e4 <__udivmoddi4+0x2a4>
 8000536:	d053      	beq.n	80005e0 <__udivmoddi4+0x2a0>
 8000538:	b15d      	cbz	r5, 8000552 <__udivmoddi4+0x212>
 800053a:	ebb3 0208 	subs.w	r2, r3, r8
 800053e:	eb61 010e 	sbc.w	r1, r1, lr
 8000542:	fa01 f707 	lsl.w	r7, r1, r7
 8000546:	fa22 f306 	lsr.w	r3, r2, r6
 800054a:	40f1      	lsrs	r1, r6
 800054c:	431f      	orrs	r7, r3
 800054e:	e9c5 7100 	strd	r7, r1, [r5]
 8000552:	2600      	movs	r6, #0
 8000554:	4631      	mov	r1, r6
 8000556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	40d8      	lsrs	r0, r3
 8000560:	fa0c fc02 	lsl.w	ip, ip, r2
 8000564:	fa21 f303 	lsr.w	r3, r1, r3
 8000568:	4091      	lsls	r1, r2
 800056a:	4301      	orrs	r1, r0
 800056c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000570:	fa1f fe8c 	uxth.w	lr, ip
 8000574:	fbb3 f0f7 	udiv	r0, r3, r7
 8000578:	fb07 3610 	mls	r6, r7, r0, r3
 800057c:	0c0b      	lsrs	r3, r1, #16
 800057e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000582:	fb00 f60e 	mul.w	r6, r0, lr
 8000586:	429e      	cmp	r6, r3
 8000588:	fa04 f402 	lsl.w	r4, r4, r2
 800058c:	d908      	bls.n	80005a0 <__udivmoddi4+0x260>
 800058e:	eb1c 0303 	adds.w	r3, ip, r3
 8000592:	f100 38ff 	add.w	r8, r0, #4294967295
 8000596:	d22f      	bcs.n	80005f8 <__udivmoddi4+0x2b8>
 8000598:	429e      	cmp	r6, r3
 800059a:	d92d      	bls.n	80005f8 <__udivmoddi4+0x2b8>
 800059c:	3802      	subs	r0, #2
 800059e:	4463      	add	r3, ip
 80005a0:	1b9b      	subs	r3, r3, r6
 80005a2:	b289      	uxth	r1, r1
 80005a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005a8:	fb07 3316 	mls	r3, r7, r6, r3
 80005ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005b0:	fb06 f30e 	mul.w	r3, r6, lr
 80005b4:	428b      	cmp	r3, r1
 80005b6:	d908      	bls.n	80005ca <__udivmoddi4+0x28a>
 80005b8:	eb1c 0101 	adds.w	r1, ip, r1
 80005bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005c0:	d216      	bcs.n	80005f0 <__udivmoddi4+0x2b0>
 80005c2:	428b      	cmp	r3, r1
 80005c4:	d914      	bls.n	80005f0 <__udivmoddi4+0x2b0>
 80005c6:	3e02      	subs	r6, #2
 80005c8:	4461      	add	r1, ip
 80005ca:	1ac9      	subs	r1, r1, r3
 80005cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005d0:	e738      	b.n	8000444 <__udivmoddi4+0x104>
 80005d2:	462e      	mov	r6, r5
 80005d4:	4628      	mov	r0, r5
 80005d6:	e705      	b.n	80003e4 <__udivmoddi4+0xa4>
 80005d8:	4606      	mov	r6, r0
 80005da:	e6e3      	b.n	80003a4 <__udivmoddi4+0x64>
 80005dc:	4618      	mov	r0, r3
 80005de:	e6f8      	b.n	80003d2 <__udivmoddi4+0x92>
 80005e0:	454b      	cmp	r3, r9
 80005e2:	d2a9      	bcs.n	8000538 <__udivmoddi4+0x1f8>
 80005e4:	ebb9 0802 	subs.w	r8, r9, r2
 80005e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ec:	3801      	subs	r0, #1
 80005ee:	e7a3      	b.n	8000538 <__udivmoddi4+0x1f8>
 80005f0:	4646      	mov	r6, r8
 80005f2:	e7ea      	b.n	80005ca <__udivmoddi4+0x28a>
 80005f4:	4620      	mov	r0, r4
 80005f6:	e794      	b.n	8000522 <__udivmoddi4+0x1e2>
 80005f8:	4640      	mov	r0, r8
 80005fa:	e7d1      	b.n	80005a0 <__udivmoddi4+0x260>
 80005fc:	46d0      	mov	r8, sl
 80005fe:	e77b      	b.n	80004f8 <__udivmoddi4+0x1b8>
 8000600:	3b02      	subs	r3, #2
 8000602:	4461      	add	r1, ip
 8000604:	e732      	b.n	800046c <__udivmoddi4+0x12c>
 8000606:	4630      	mov	r0, r6
 8000608:	e709      	b.n	800041e <__udivmoddi4+0xde>
 800060a:	4464      	add	r4, ip
 800060c:	3802      	subs	r0, #2
 800060e:	e742      	b.n	8000496 <__udivmoddi4+0x156>

08000610 <__aeabi_idiv0>:
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop

08000614 <init_rls>:
arm_matrix_instance_f32 teta;
arm_matrix_instance_f32 Xk;
arm_matrix_instance_f32 Pn;

void init_rls (int sysorder)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	ed2d 8b02 	vpush	{d8}
 800061a:	b08a      	sub	sp, #40	; 0x28
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]

	// init teta
	float32_t  * data_t = (float32_t *) malloc ((2*sysorder)*sizeof(float32_t));
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	00db      	lsls	r3, r3, #3
 8000624:	4618      	mov	r0, r3
 8000626:	f007 fdab 	bl	8008180 <malloc>
 800062a:	4603      	mov	r3, r0
 800062c:	617b      	str	r3, [r7, #20]
	for (int i = 0 ; i < (2*sysorder) ; i++)
 800062e:	2300      	movs	r3, #0
 8000630:	627b      	str	r3, [r7, #36]	; 0x24
 8000632:	e009      	b.n	8000648 <init_rls+0x34>
	{
		data_t [i] = 0;
 8000634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000636:	009b      	lsls	r3, r3, #2
 8000638:	697a      	ldr	r2, [r7, #20]
 800063a:	4413      	add	r3, r2
 800063c:	f04f 0200 	mov.w	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
	for (int i = 0 ; i < (2*sysorder) ; i++)
 8000642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000644:	3301      	adds	r3, #1
 8000646:	627b      	str	r3, [r7, #36]	; 0x24
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	005b      	lsls	r3, r3, #1
 800064c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800064e:	429a      	cmp	r2, r3
 8000650:	dbf0      	blt.n	8000634 <init_rls+0x20>
	}
	arm_mat_init_f32 ( &teta , 2*sysorder, 1 , data_t);
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	b29b      	uxth	r3, r3
 8000656:	005b      	lsls	r3, r3, #1
 8000658:	b299      	uxth	r1, r3
 800065a:	697b      	ldr	r3, [r7, #20]
 800065c:	2201      	movs	r2, #1
 800065e:	4846      	ldr	r0, [pc, #280]	; (8000778 <init_rls+0x164>)
 8000660:	f007 fcf6 	bl	8008050 <arm_mat_init_f32>


	//Init Xk
	float32_t  * data_xk = (float32_t *) malloc ((2*sysorder)*sizeof(float32_t));
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	00db      	lsls	r3, r3, #3
 8000668:	4618      	mov	r0, r3
 800066a:	f007 fd89 	bl	8008180 <malloc>
 800066e:	4603      	mov	r3, r0
 8000670:	613b      	str	r3, [r7, #16]
		for (int i = 0 ; i < (2*sysorder) ; i++)
 8000672:	2300      	movs	r3, #0
 8000674:	623b      	str	r3, [r7, #32]
 8000676:	e009      	b.n	800068c <init_rls+0x78>
		{
			data_xk [i] = 0;
 8000678:	6a3b      	ldr	r3, [r7, #32]
 800067a:	009b      	lsls	r3, r3, #2
 800067c:	693a      	ldr	r2, [r7, #16]
 800067e:	4413      	add	r3, r2
 8000680:	f04f 0200 	mov.w	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
		for (int i = 0 ; i < (2*sysorder) ; i++)
 8000686:	6a3b      	ldr	r3, [r7, #32]
 8000688:	3301      	adds	r3, #1
 800068a:	623b      	str	r3, [r7, #32]
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	005b      	lsls	r3, r3, #1
 8000690:	6a3a      	ldr	r2, [r7, #32]
 8000692:	429a      	cmp	r2, r3
 8000694:	dbf0      	blt.n	8000678 <init_rls+0x64>
		}
	arm_mat_init_f32 ( &Xk , 1 , 2*sysorder , data_xk);
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	b29b      	uxth	r3, r3
 800069a:	005b      	lsls	r3, r3, #1
 800069c:	b29a      	uxth	r2, r3
 800069e:	693b      	ldr	r3, [r7, #16]
 80006a0:	2101      	movs	r1, #1
 80006a2:	4836      	ldr	r0, [pc, #216]	; (800077c <init_rls+0x168>)
 80006a4:	f007 fcd4 	bl	8008050 <arm_mat_init_f32>

	//Init Pn
	float32_t  * data_pn = (float32_t *) malloc (pow((2*sysorder),2)*sizeof(float32_t));
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	005b      	lsls	r3, r3, #1
 80006ac:	ee07 3a90 	vmov	s15, r3
 80006b0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80006b4:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80006b8:	eeb0 0b47 	vmov.f64	d0, d7
 80006bc:	f007 fe58 	bl	8008370 <pow>
 80006c0:	eeb0 7b40 	vmov.f64	d7, d0
 80006c4:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 80006c8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80006cc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006d0:	ee17 0a90 	vmov	r0, s15
 80006d4:	f007 fd54 	bl	8008180 <malloc>
 80006d8:	4603      	mov	r3, r0
 80006da:	60fb      	str	r3, [r7, #12]

	for (int i = 0 ; i < pow((2*sysorder),2) ; i++)
 80006dc:	2300      	movs	r3, #0
 80006de:	61fb      	str	r3, [r7, #28]
 80006e0:	e009      	b.n	80006f6 <init_rls+0xe2>
	{
		data_pn [i] = 0;
 80006e2:	69fb      	ldr	r3, [r7, #28]
 80006e4:	009b      	lsls	r3, r3, #2
 80006e6:	68fa      	ldr	r2, [r7, #12]
 80006e8:	4413      	add	r3, r2
 80006ea:	f04f 0200 	mov.w	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
	for (int i = 0 ; i < pow((2*sysorder),2) ; i++)
 80006f0:	69fb      	ldr	r3, [r7, #28]
 80006f2:	3301      	adds	r3, #1
 80006f4:	61fb      	str	r3, [r7, #28]
 80006f6:	69fb      	ldr	r3, [r7, #28]
 80006f8:	ee07 3a90 	vmov	s15, r3
 80006fc:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	005b      	lsls	r3, r3, #1
 8000704:	ee07 3a90 	vmov	s15, r3
 8000708:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800070c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000710:	eeb0 0b47 	vmov.f64	d0, d7
 8000714:	f007 fe2c 	bl	8008370 <pow>
 8000718:	eeb0 7b40 	vmov.f64	d7, d0
 800071c:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8000720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000724:	d4dd      	bmi.n	80006e2 <init_rls+0xce>
	}
	for (int i = 0 ; i < 2*sysorder ; i++)
 8000726:	2300      	movs	r3, #0
 8000728:	61bb      	str	r3, [r7, #24]
 800072a:	e00d      	b.n	8000748 <init_rls+0x134>
	{
		data_pn [ i*(2*sysorder + 1)] = 0.1 ;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	005b      	lsls	r3, r3, #1
 8000730:	3301      	adds	r3, #1
 8000732:	69ba      	ldr	r2, [r7, #24]
 8000734:	fb02 f303 	mul.w	r3, r2, r3
 8000738:	009b      	lsls	r3, r3, #2
 800073a:	68fa      	ldr	r2, [r7, #12]
 800073c:	4413      	add	r3, r2
 800073e:	4a10      	ldr	r2, [pc, #64]	; (8000780 <init_rls+0x16c>)
 8000740:	601a      	str	r2, [r3, #0]
	for (int i = 0 ; i < 2*sysorder ; i++)
 8000742:	69bb      	ldr	r3, [r7, #24]
 8000744:	3301      	adds	r3, #1
 8000746:	61bb      	str	r3, [r7, #24]
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	005b      	lsls	r3, r3, #1
 800074c:	69ba      	ldr	r2, [r7, #24]
 800074e:	429a      	cmp	r2, r3
 8000750:	dbec      	blt.n	800072c <init_rls+0x118>
	}
	arm_mat_init_f32 ( &Pn , 2*sysorder , 2*sysorder , data_pn);
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	b29b      	uxth	r3, r3
 8000756:	005b      	lsls	r3, r3, #1
 8000758:	b299      	uxth	r1, r3
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	b29b      	uxth	r3, r3
 800075e:	005b      	lsls	r3, r3, #1
 8000760:	b29a      	uxth	r2, r3
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	4807      	ldr	r0, [pc, #28]	; (8000784 <init_rls+0x170>)
 8000766:	f007 fc73 	bl	8008050 <arm_mat_init_f32>

}
 800076a:	bf00      	nop
 800076c:	3728      	adds	r7, #40	; 0x28
 800076e:	46bd      	mov	sp, r7
 8000770:	ecbd 8b02 	vpop	{d8}
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	2400009c 	.word	0x2400009c
 800077c:	240000a4 	.word	0x240000a4
 8000780:	3dcccccd 	.word	0x3dcccccd
 8000784:	240000ac 	.word	0x240000ac

08000788 <init_param_calcul_teta>:
arm_matrix_instance_f32  Pn_new ;
arm_matrix_instance_f32  cst2 ;
arm_matrix_instance_f32  cst3 ;

void init_param_calcul_teta(int sysorder)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	ed2d 8b02 	vpush	{d8}
 800078e:	b094      	sub	sp, #80	; 0x50
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
    //xt
    float32_t  * data = (float32_t *) malloc ((2*sysorder)*sizeof(float32_t));
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	00db      	lsls	r3, r3, #3
 8000798:	4618      	mov	r0, r3
 800079a:	f007 fcf1 	bl	8008180 <malloc>
 800079e:	4603      	mov	r3, r0
 80007a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 0 ; i < (2*sysorder) ; i++)
 80007a2:	2300      	movs	r3, #0
 80007a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80007a6:	e009      	b.n	80007bc <init_param_calcul_teta+0x34>
	{
		data [i] = 0;
 80007a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80007aa:	009b      	lsls	r3, r3, #2
 80007ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80007ae:	4413      	add	r3, r2
 80007b0:	f04f 0200 	mov.w	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
	for (int i = 0 ; i < (2*sysorder) ; i++)
 80007b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80007b8:	3301      	adds	r3, #1
 80007ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	005b      	lsls	r3, r3, #1
 80007c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80007c2:	429a      	cmp	r2, r3
 80007c4:	dbf0      	blt.n	80007a8 <init_param_calcul_teta+0x20>
	}

	arm_mat_init_f32 ( &Xk_t , 2*sysorder , 1  , data);
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	b29b      	uxth	r3, r3
 80007ca:	005b      	lsls	r3, r3, #1
 80007cc:	b299      	uxth	r1, r3
 80007ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007d0:	2201      	movs	r2, #1
 80007d2:	4894      	ldr	r0, [pc, #592]	; (8000a24 <init_param_calcul_teta+0x29c>)
 80007d4:	f007 fc3c 	bl	8008050 <arm_mat_init_f32>


    	float32_t  * data1 = (float32_t *) malloc ((2*sysorder)*sizeof(float32_t));
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	00db      	lsls	r3, r3, #3
 80007dc:	4618      	mov	r0, r3
 80007de:	f007 fccf 	bl	8008180 <malloc>
 80007e2:	4603      	mov	r3, r0
 80007e4:	62bb      	str	r3, [r7, #40]	; 0x28
		for (int i = 0 ; i < (2*sysorder) ; i++)
 80007e6:	2300      	movs	r3, #0
 80007e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80007ea:	e009      	b.n	8000800 <init_param_calcul_teta+0x78>
		{
			data1 [i] = 0;
 80007ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80007ee:	009b      	lsls	r3, r3, #2
 80007f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80007f2:	4413      	add	r3, r2
 80007f4:	f04f 0200 	mov.w	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
		for (int i = 0 ; i < (2*sysorder) ; i++)
 80007fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80007fc:	3301      	adds	r3, #1
 80007fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	005b      	lsls	r3, r3, #1
 8000804:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000806:	429a      	cmp	r2, r3
 8000808:	dbf0      	blt.n	80007ec <init_param_calcul_teta+0x64>
		}

	arm_mat_init_f32 (&constant , 2*sysorder , 1 , data1);
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	b29b      	uxth	r3, r3
 800080e:	005b      	lsls	r3, r3, #1
 8000810:	b299      	uxth	r1, r3
 8000812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000814:	2201      	movs	r2, #1
 8000816:	4884      	ldr	r0, [pc, #528]	; (8000a28 <init_param_calcul_teta+0x2a0>)
 8000818:	f007 fc1a 	bl	8008050 <arm_mat_init_f32>



	float32_t  data_cst;
	arm_mat_init_f32 (&cst_lambda , 1 , 1 , &data_cst);
 800081c:	f107 0310 	add.w	r3, r7, #16
 8000820:	2201      	movs	r2, #1
 8000822:	2101      	movs	r1, #1
 8000824:	4881      	ldr	r0, [pc, #516]	; (8000a2c <init_param_calcul_teta+0x2a4>)
 8000826:	f007 fc13 	bl	8008050 <arm_mat_init_f32>


	float32_t  * data_k = (float32_t *) malloc ((2*sysorder)*sizeof(float32_t));
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	00db      	lsls	r3, r3, #3
 800082e:	4618      	mov	r0, r3
 8000830:	f007 fca6 	bl	8008180 <malloc>
 8000834:	4603      	mov	r3, r0
 8000836:	627b      	str	r3, [r7, #36]	; 0x24
		for (int i = 0 ; i < (2*sysorder) ; i++)
 8000838:	2300      	movs	r3, #0
 800083a:	647b      	str	r3, [r7, #68]	; 0x44
 800083c:	e009      	b.n	8000852 <init_param_calcul_teta+0xca>
		{
			data_k [i] = 0;
 800083e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000840:	009b      	lsls	r3, r3, #2
 8000842:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000844:	4413      	add	r3, r2
 8000846:	f04f 0200 	mov.w	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
		for (int i = 0 ; i < (2*sysorder) ; i++)
 800084c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800084e:	3301      	adds	r3, #1
 8000850:	647b      	str	r3, [r7, #68]	; 0x44
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	005b      	lsls	r3, r3, #1
 8000856:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000858:	429a      	cmp	r2, r3
 800085a:	dbf0      	blt.n	800083e <init_param_calcul_teta+0xb6>
		}

	arm_mat_init_f32 ( &K ,2*sysorder , 1 , data_k);
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	b29b      	uxth	r3, r3
 8000860:	005b      	lsls	r3, r3, #1
 8000862:	b299      	uxth	r1, r3
 8000864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000866:	2201      	movs	r2, #1
 8000868:	4871      	ldr	r0, [pc, #452]	; (8000a30 <init_param_calcul_teta+0x2a8>)
 800086a:	f007 fbf1 	bl	8008050 <arm_mat_init_f32>

	float32_t  data_cst1;
	arm_mat_init_f32 (&constant1 , 1 , 1 , &data_cst1);
 800086e:	f107 030c 	add.w	r3, r7, #12
 8000872:	2201      	movs	r2, #1
 8000874:	2101      	movs	r1, #1
 8000876:	486f      	ldr	r0, [pc, #444]	; (8000a34 <init_param_calcul_teta+0x2ac>)
 8000878:	f007 fbea 	bl	8008050 <arm_mat_init_f32>


	float32_t  * data2= (float32_t *) malloc ((2*sysorder)*sizeof(float32_t));
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	00db      	lsls	r3, r3, #3
 8000880:	4618      	mov	r0, r3
 8000882:	f007 fc7d 	bl	8008180 <malloc>
 8000886:	4603      	mov	r3, r0
 8000888:	623b      	str	r3, [r7, #32]
	for (int i = 0 ; i < (2*sysorder) ; i++)
 800088a:	2300      	movs	r3, #0
 800088c:	643b      	str	r3, [r7, #64]	; 0x40
 800088e:	e009      	b.n	80008a4 <init_param_calcul_teta+0x11c>
	{
		data2 [i] = 0;
 8000890:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000892:	009b      	lsls	r3, r3, #2
 8000894:	6a3a      	ldr	r2, [r7, #32]
 8000896:	4413      	add	r3, r2
 8000898:	f04f 0200 	mov.w	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
	for (int i = 0 ; i < (2*sysorder) ; i++)
 800089e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80008a0:	3301      	adds	r3, #1
 80008a2:	643b      	str	r3, [r7, #64]	; 0x40
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	005b      	lsls	r3, r3, #1
 80008a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80008aa:	429a      	cmp	r2, r3
 80008ac:	dbf0      	blt.n	8000890 <init_param_calcul_teta+0x108>
	}

	arm_mat_init_f32 ( &cst2  , 1 ,2*sysorder , data2);
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	b29b      	uxth	r3, r3
 80008b2:	005b      	lsls	r3, r3, #1
 80008b4:	b29a      	uxth	r2, r3
 80008b6:	6a3b      	ldr	r3, [r7, #32]
 80008b8:	2101      	movs	r1, #1
 80008ba:	485f      	ldr	r0, [pc, #380]	; (8000a38 <init_param_calcul_teta+0x2b0>)
 80008bc:	f007 fbc8 	bl	8008050 <arm_mat_init_f32>


	float32_t  * data3= (float32_t *) malloc ((2*sysorder*2*sysorder)*sizeof(float32_t));
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	fb03 f303 	mul.w	r3, r3, r3
 80008c6:	011b      	lsls	r3, r3, #4
 80008c8:	4618      	mov	r0, r3
 80008ca:	f007 fc59 	bl	8008180 <malloc>
 80008ce:	4603      	mov	r3, r0
 80008d0:	61fb      	str	r3, [r7, #28]
	for (int i = 0 ; i < (2*sysorder*2*sysorder) ; i++)
 80008d2:	2300      	movs	r3, #0
 80008d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80008d6:	e009      	b.n	80008ec <init_param_calcul_teta+0x164>
	{
		data3 [i] = 0;
 80008d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80008da:	009b      	lsls	r3, r3, #2
 80008dc:	69fa      	ldr	r2, [r7, #28]
 80008de:	4413      	add	r3, r2
 80008e0:	f04f 0200 	mov.w	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
	for (int i = 0 ; i < (2*sysorder*2*sysorder) ; i++)
 80008e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80008e8:	3301      	adds	r3, #1
 80008ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	fb03 f303 	mul.w	r3, r3, r3
 80008f2:	009b      	lsls	r3, r3, #2
 80008f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80008f6:	429a      	cmp	r2, r3
 80008f8:	dbee      	blt.n	80008d8 <init_param_calcul_teta+0x150>
	}

	arm_mat_init_f32 ( &cst3  , 2*sysorder ,2*sysorder , data3);
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	b29b      	uxth	r3, r3
 80008fe:	005b      	lsls	r3, r3, #1
 8000900:	b299      	uxth	r1, r3
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	b29b      	uxth	r3, r3
 8000906:	005b      	lsls	r3, r3, #1
 8000908:	b29a      	uxth	r2, r3
 800090a:	69fb      	ldr	r3, [r7, #28]
 800090c:	484b      	ldr	r0, [pc, #300]	; (8000a3c <init_param_calcul_teta+0x2b4>)
 800090e:	f007 fb9f 	bl	8008050 <arm_mat_init_f32>

    float32_t  * data_teta = (float32_t *) malloc ((2*sysorder)*sizeof(float32_t));
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	00db      	lsls	r3, r3, #3
 8000916:	4618      	mov	r0, r3
 8000918:	f007 fc32 	bl	8008180 <malloc>
 800091c:	4603      	mov	r3, r0
 800091e:	61bb      	str	r3, [r7, #24]
	for (int i = 0 ; i < (2*sysorder) ; i++)
 8000920:	2300      	movs	r3, #0
 8000922:	63bb      	str	r3, [r7, #56]	; 0x38
 8000924:	e009      	b.n	800093a <init_param_calcul_teta+0x1b2>
	{
		data_teta [i] = 0;
 8000926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000928:	009b      	lsls	r3, r3, #2
 800092a:	69ba      	ldr	r2, [r7, #24]
 800092c:	4413      	add	r3, r2
 800092e:	f04f 0200 	mov.w	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
	for (int i = 0 ; i < (2*sysorder) ; i++)
 8000934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000936:	3301      	adds	r3, #1
 8000938:	63bb      	str	r3, [r7, #56]	; 0x38
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	005b      	lsls	r3, r3, #1
 800093e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000940:	429a      	cmp	r2, r3
 8000942:	dbf0      	blt.n	8000926 <init_param_calcul_teta+0x19e>
	}
	arm_mat_init_f32 ( &teta_new , 2*sysorder, 1 , data_teta);
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	b29b      	uxth	r3, r3
 8000948:	005b      	lsls	r3, r3, #1
 800094a:	b299      	uxth	r1, r3
 800094c:	69bb      	ldr	r3, [r7, #24]
 800094e:	2201      	movs	r2, #1
 8000950:	483b      	ldr	r0, [pc, #236]	; (8000a40 <init_param_calcul_teta+0x2b8>)
 8000952:	f007 fb7d 	bl	8008050 <arm_mat_init_f32>

    	float32_t  * data_pn_new = (float32_t *) malloc (pow((2*sysorder),2)*sizeof(float32_t));
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	005b      	lsls	r3, r3, #1
 800095a:	ee07 3a90 	vmov	s15, r3
 800095e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000962:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000966:	eeb0 0b47 	vmov.f64	d0, d7
 800096a:	f007 fd01 	bl	8008370 <pow>
 800096e:	eeb0 7b40 	vmov.f64	d7, d0
 8000972:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8000976:	ee27 7b06 	vmul.f64	d7, d7, d6
 800097a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800097e:	ee17 0a90 	vmov	r0, s15
 8000982:	f007 fbfd 	bl	8008180 <malloc>
 8000986:	4603      	mov	r3, r0
 8000988:	617b      	str	r3, [r7, #20]

	for (int i = 0 ; i < pow((2*sysorder),2) ; i++)
 800098a:	2300      	movs	r3, #0
 800098c:	637b      	str	r3, [r7, #52]	; 0x34
 800098e:	e009      	b.n	80009a4 <init_param_calcul_teta+0x21c>
	{
		data_pn_new [i] = 0;
 8000990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000992:	009b      	lsls	r3, r3, #2
 8000994:	697a      	ldr	r2, [r7, #20]
 8000996:	4413      	add	r3, r2
 8000998:	f04f 0200 	mov.w	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
	for (int i = 0 ; i < pow((2*sysorder),2) ; i++)
 800099e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009a0:	3301      	adds	r3, #1
 80009a2:	637b      	str	r3, [r7, #52]	; 0x34
 80009a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009a6:	ee07 3a90 	vmov	s15, r3
 80009aa:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	005b      	lsls	r3, r3, #1
 80009b2:	ee07 3a90 	vmov	s15, r3
 80009b6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80009ba:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80009be:	eeb0 0b47 	vmov.f64	d0, d7
 80009c2:	f007 fcd5 	bl	8008370 <pow>
 80009c6:	eeb0 7b40 	vmov.f64	d7, d0
 80009ca:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80009ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009d2:	d4dd      	bmi.n	8000990 <init_param_calcul_teta+0x208>
	}
	for (int i = 0 ; i < 2*sysorder ; i++)
 80009d4:	2300      	movs	r3, #0
 80009d6:	633b      	str	r3, [r7, #48]	; 0x30
 80009d8:	e00d      	b.n	80009f6 <init_param_calcul_teta+0x26e>
	{
		data_pn_new [ i*(2*sysorder + 1)] = 0.1 ;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	005b      	lsls	r3, r3, #1
 80009de:	3301      	adds	r3, #1
 80009e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80009e2:	fb02 f303 	mul.w	r3, r2, r3
 80009e6:	009b      	lsls	r3, r3, #2
 80009e8:	697a      	ldr	r2, [r7, #20]
 80009ea:	4413      	add	r3, r2
 80009ec:	4a15      	ldr	r2, [pc, #84]	; (8000a44 <init_param_calcul_teta+0x2bc>)
 80009ee:	601a      	str	r2, [r3, #0]
	for (int i = 0 ; i < 2*sysorder ; i++)
 80009f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009f2:	3301      	adds	r3, #1
 80009f4:	633b      	str	r3, [r7, #48]	; 0x30
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	005b      	lsls	r3, r3, #1
 80009fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80009fc:	429a      	cmp	r2, r3
 80009fe:	dbec      	blt.n	80009da <init_param_calcul_teta+0x252>
	}
	arm_mat_init_f32 ( &Pn_new , 2*sysorder , 2*sysorder , data_pn_new);
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	b29b      	uxth	r3, r3
 8000a04:	005b      	lsls	r3, r3, #1
 8000a06:	b299      	uxth	r1, r3
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	b29b      	uxth	r3, r3
 8000a0c:	005b      	lsls	r3, r3, #1
 8000a0e:	b29a      	uxth	r2, r3
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	480d      	ldr	r0, [pc, #52]	; (8000a48 <init_param_calcul_teta+0x2c0>)
 8000a14:	f007 fb1c 	bl	8008050 <arm_mat_init_f32>

}
 8000a18:	bf00      	nop
 8000a1a:	3750      	adds	r7, #80	; 0x50
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	ecbd 8b02 	vpop	{d8}
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	240000b4 	.word	0x240000b4
 8000a28:	240000bc 	.word	0x240000bc
 8000a2c:	240000c4 	.word	0x240000c4
 8000a30:	240000cc 	.word	0x240000cc
 8000a34:	240000dc 	.word	0x240000dc
 8000a38:	240000f4 	.word	0x240000f4
 8000a3c:	240000fc 	.word	0x240000fc
 8000a40:	240000e4 	.word	0x240000e4
 8000a44:	3dcccccd 	.word	0x3dcccccd
 8000a48:	240000ec 	.word	0x240000ec

08000a4c <teta_calc>:

void teta_calc (arm_matrix_instance_f32  Xk , float output_t , float lambda ,int sysorder )
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08c      	sub	sp, #48	; 0x30
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	f107 0310 	add.w	r3, r7, #16
 8000a56:	e883 0003 	stmia.w	r3, {r0, r1}
 8000a5a:	ed87 0a03 	vstr	s0, [r7, #12]
 8000a5e:	edc7 0a02 	vstr	s1, [r7, #8]
 8000a62:	607a      	str	r2, [r7, #4]
	arm_status status;
	// calcul de K
	status = arm_mat_trans_f32 (&Xk , &Xk_t);
 8000a64:	f107 0310 	add.w	r3, r7, #16
 8000a68:	4969      	ldr	r1, [pc, #420]	; (8000c10 <teta_calc+0x1c4>)
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f007 f984 	bl	8007d78 <arm_mat_trans_f32>
 8000a70:	4603      	mov	r3, r0
 8000a72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	status = arm_mat_mult_f32 (&Pn , &Xk_t , &constant); // constant == Pn*Xk'
 8000a76:	4a67      	ldr	r2, [pc, #412]	; (8000c14 <teta_calc+0x1c8>)
 8000a78:	4965      	ldr	r1, [pc, #404]	; (8000c10 <teta_calc+0x1c4>)
 8000a7a:	4867      	ldr	r0, [pc, #412]	; (8000c18 <teta_calc+0x1cc>)
 8000a7c:	f007 fa44 	bl	8007f08 <arm_mat_mult_f32>
 8000a80:	4603      	mov	r3, r0
 8000a82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	status = arm_mat_mult_f32 (&Xk , &constant , &cst_lambda);// cst_lambda == Xk*(Pn*Xk')
 8000a86:	f107 0310 	add.w	r3, r7, #16
 8000a8a:	4a64      	ldr	r2, [pc, #400]	; (8000c1c <teta_calc+0x1d0>)
 8000a8c:	4961      	ldr	r1, [pc, #388]	; (8000c14 <teta_calc+0x1c8>)
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f007 fa3a 	bl	8007f08 <arm_mat_mult_f32>
 8000a94:	4603      	mov	r3, r0
 8000a96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	*(cst_lambda.pData) = *(cst_lambda.pData) + (float32_t)lambda; // cst_lambda = lambda + Xk*(Pn*Xk')
 8000a9a:	4b60      	ldr	r3, [pc, #384]	; (8000c1c <teta_calc+0x1d0>)
 8000a9c:	685b      	ldr	r3, [r3, #4]
 8000a9e:	ed93 7a00 	vldr	s14, [r3]
 8000aa2:	4b5e      	ldr	r3, [pc, #376]	; (8000c1c <teta_calc+0x1d0>)
 8000aa4:	685b      	ldr	r3, [r3, #4]
 8000aa6:	edd7 7a02 	vldr	s15, [r7, #8]
 8000aaa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000aae:	edc3 7a00 	vstr	s15, [r3]

	status = arm_mat_mult_f32 (&Pn , &Xk_t , &K); // K == Pn*Xk'
 8000ab2:	4a5b      	ldr	r2, [pc, #364]	; (8000c20 <teta_calc+0x1d4>)
 8000ab4:	4956      	ldr	r1, [pc, #344]	; (8000c10 <teta_calc+0x1c4>)
 8000ab6:	4858      	ldr	r0, [pc, #352]	; (8000c18 <teta_calc+0x1cc>)
 8000ab8:	f007 fa26 	bl	8007f08 <arm_mat_mult_f32>
 8000abc:	4603      	mov	r3, r0
 8000abe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	for (int i = 0 ; i < 2*sysorder ; i++)
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ac6:	e016      	b.n	8000af6 <teta_calc+0xaa>
	{
		K.pData [i] = (K.pData [i])/(*(cst_lambda.pData)); /* K == (Pn * Xk')./(cst_lambda = (lambda + Xk*(Pn*Xk')))*/
 8000ac8:	4b55      	ldr	r3, [pc, #340]	; (8000c20 <teta_calc+0x1d4>)
 8000aca:	685a      	ldr	r2, [r3, #4]
 8000acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ace:	009b      	lsls	r3, r3, #2
 8000ad0:	4413      	add	r3, r2
 8000ad2:	edd3 6a00 	vldr	s13, [r3]
 8000ad6:	4b51      	ldr	r3, [pc, #324]	; (8000c1c <teta_calc+0x1d0>)
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	ed93 7a00 	vldr	s14, [r3]
 8000ade:	4b50      	ldr	r3, [pc, #320]	; (8000c20 <teta_calc+0x1d4>)
 8000ae0:	685a      	ldr	r2, [r3, #4]
 8000ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ae4:	009b      	lsls	r3, r3, #2
 8000ae6:	4413      	add	r3, r2
 8000ae8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000aec:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0 ; i < 2*sysorder ; i++)
 8000af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000af2:	3301      	adds	r3, #1
 8000af4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	005b      	lsls	r3, r3, #1
 8000afa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000afc:	429a      	cmp	r2, r3
 8000afe:	dbe3      	blt.n	8000ac8 <teta_calc+0x7c>
	}
	Clone_K = K;
 8000b00:	4b48      	ldr	r3, [pc, #288]	; (8000c24 <teta_calc+0x1d8>)
 8000b02:	4a47      	ldr	r2, [pc, #284]	; (8000c20 <teta_calc+0x1d4>)
 8000b04:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b08:	e883 0003 	stmia.w	r3, {r0, r1}

	// teta

	status = arm_mat_mult_f32 (&Xk , &teta , &constant1); // constant1 = Xk * teta
 8000b0c:	f107 0310 	add.w	r3, r7, #16
 8000b10:	4a45      	ldr	r2, [pc, #276]	; (8000c28 <teta_calc+0x1dc>)
 8000b12:	4946      	ldr	r1, [pc, #280]	; (8000c2c <teta_calc+0x1e0>)
 8000b14:	4618      	mov	r0, r3
 8000b16:	f007 f9f7 	bl	8007f08 <arm_mat_mult_f32>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	float32_t cst = (float32_t) output_t - *(constant1.pData); // cst = ( Y(t,:) - Xk * teta)
 8000b20:	4b41      	ldr	r3, [pc, #260]	; (8000c28 <teta_calc+0x1dc>)
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	edd3 7a00 	vldr	s15, [r3]
 8000b28:	ed97 7a03 	vldr	s14, [r7, #12]
 8000b2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b30:	edc7 7a07 	vstr	s15, [r7, #28]

	for (int i = 0 ; i < 2*sysorder ; i++)
 8000b34:	2300      	movs	r3, #0
 8000b36:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b38:	e014      	b.n	8000b64 <teta_calc+0x118>
		{
		Clone_K.pData [i] = (Clone_K.pData [i])*cst ;
 8000b3a:	4b3a      	ldr	r3, [pc, #232]	; (8000c24 <teta_calc+0x1d8>)
 8000b3c:	685a      	ldr	r2, [r3, #4]
 8000b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b40:	009b      	lsls	r3, r3, #2
 8000b42:	4413      	add	r3, r2
 8000b44:	ed93 7a00 	vldr	s14, [r3]
 8000b48:	4b36      	ldr	r3, [pc, #216]	; (8000c24 <teta_calc+0x1d8>)
 8000b4a:	685a      	ldr	r2, [r3, #4]
 8000b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b4e:	009b      	lsls	r3, r3, #2
 8000b50:	4413      	add	r3, r2
 8000b52:	edd7 7a07 	vldr	s15, [r7, #28]
 8000b56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b5a:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0 ; i < 2*sysorder ; i++)
 8000b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b60:	3301      	adds	r3, #1
 8000b62:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	005b      	lsls	r3, r3, #1
 8000b68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000b6a:	429a      	cmp	r2, r3
 8000b6c:	dbe5      	blt.n	8000b3a <teta_calc+0xee>
		}


	status = arm_mat_add_f32 (&teta , &Clone_K , &teta_new);
 8000b6e:	4a30      	ldr	r2, [pc, #192]	; (8000c30 <teta_calc+0x1e4>)
 8000b70:	492c      	ldr	r1, [pc, #176]	; (8000c24 <teta_calc+0x1d8>)
 8000b72:	482e      	ldr	r0, [pc, #184]	; (8000c2c <teta_calc+0x1e0>)
 8000b74:	f007 fa70 	bl	8008058 <arm_mat_add_f32>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	teta = teta_new;
 8000b7e:	4b2b      	ldr	r3, [pc, #172]	; (8000c2c <teta_calc+0x1e0>)
 8000b80:	4a2b      	ldr	r2, [pc, #172]	; (8000c30 <teta_calc+0x1e4>)
 8000b82:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b86:	e883 0003 	stmia.w	r3, {r0, r1}


	status = arm_mat_mult_f32 (&Xk , &Pn , &cst2); // cst2 = Xk*Pn
 8000b8a:	f107 0310 	add.w	r3, r7, #16
 8000b8e:	4a29      	ldr	r2, [pc, #164]	; (8000c34 <teta_calc+0x1e8>)
 8000b90:	4921      	ldr	r1, [pc, #132]	; (8000c18 <teta_calc+0x1cc>)
 8000b92:	4618      	mov	r0, r3
 8000b94:	f007 f9b8 	bl	8007f08 <arm_mat_mult_f32>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23


	status = arm_mat_mult_f32 (&K , &cst2 , &cst3); // cst3 == K*(Xk*Pn)
 8000b9e:	4a26      	ldr	r2, [pc, #152]	; (8000c38 <teta_calc+0x1ec>)
 8000ba0:	4924      	ldr	r1, [pc, #144]	; (8000c34 <teta_calc+0x1e8>)
 8000ba2:	481f      	ldr	r0, [pc, #124]	; (8000c20 <teta_calc+0x1d4>)
 8000ba4:	f007 f9b0 	bl	8007f08 <arm_mat_mult_f32>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23


	status = arm_mat_sub_f32 (&Pn , &cst3 , &Pn_new);
 8000bae:	4a23      	ldr	r2, [pc, #140]	; (8000c3c <teta_calc+0x1f0>)
 8000bb0:	4921      	ldr	r1, [pc, #132]	; (8000c38 <teta_calc+0x1ec>)
 8000bb2:	4819      	ldr	r0, [pc, #100]	; (8000c18 <teta_calc+0x1cc>)
 8000bb4:	f007 f93e 	bl	8007e34 <arm_mat_sub_f32>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	for (int i = 0 ; i < ((2*sysorder)*(2*sysorder)) ; i ++)
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	627b      	str	r3, [r7, #36]	; 0x24
 8000bc2:	e014      	b.n	8000bee <teta_calc+0x1a2>
	{
		Pn_new.pData [i] = Pn_new.pData [i] / lambda ;
 8000bc4:	4b1d      	ldr	r3, [pc, #116]	; (8000c3c <teta_calc+0x1f0>)
 8000bc6:	685a      	ldr	r2, [r3, #4]
 8000bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bca:	009b      	lsls	r3, r3, #2
 8000bcc:	4413      	add	r3, r2
 8000bce:	edd3 6a00 	vldr	s13, [r3]
 8000bd2:	4b1a      	ldr	r3, [pc, #104]	; (8000c3c <teta_calc+0x1f0>)
 8000bd4:	685a      	ldr	r2, [r3, #4]
 8000bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd8:	009b      	lsls	r3, r3, #2
 8000bda:	4413      	add	r3, r2
 8000bdc:	ed97 7a02 	vldr	s14, [r7, #8]
 8000be0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000be4:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0 ; i < ((2*sysorder)*(2*sysorder)) ; i ++)
 8000be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bea:	3301      	adds	r3, #1
 8000bec:	627b      	str	r3, [r7, #36]	; 0x24
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	fb03 f303 	mul.w	r3, r3, r3
 8000bf4:	009b      	lsls	r3, r3, #2
 8000bf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	dbe3      	blt.n	8000bc4 <teta_calc+0x178>
	}
	Pn= Pn_new;
 8000bfc:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <teta_calc+0x1cc>)
 8000bfe:	4a0f      	ldr	r2, [pc, #60]	; (8000c3c <teta_calc+0x1f0>)
 8000c00:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c04:	e883 0003 	stmia.w	r3, {r0, r1}

}
 8000c08:	bf00      	nop
 8000c0a:	3730      	adds	r7, #48	; 0x30
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	240000b4 	.word	0x240000b4
 8000c14:	240000bc 	.word	0x240000bc
 8000c18:	240000ac 	.word	0x240000ac
 8000c1c:	240000c4 	.word	0x240000c4
 8000c20:	240000cc 	.word	0x240000cc
 8000c24:	240000d4 	.word	0x240000d4
 8000c28:	240000dc 	.word	0x240000dc
 8000c2c:	2400009c 	.word	0x2400009c
 8000c30:	240000e4 	.word	0x240000e4
 8000c34:	240000f4 	.word	0x240000f4
 8000c38:	240000fc 	.word	0x240000fc
 8000c3c:	240000ec 	.word	0x240000ec

08000c40 <update_X>:


void update_X (float * X , float input , float output , int sysorder)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b086      	sub	sp, #24
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	60f8      	str	r0, [r7, #12]
 8000c48:	ed87 0a02 	vstr	s0, [r7, #8]
 8000c4c:	edc7 0a01 	vstr	s1, [r7, #4]
 8000c50:	6039      	str	r1, [r7, #0]
	// Yk
	for (int i = (sysorder -1) ; i>0 ; i--)
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	3b01      	subs	r3, #1
 8000c56:	617b      	str	r3, [r7, #20]
 8000c58:	e00f      	b.n	8000c7a <update_X+0x3a>
	{
		X[i] = X[i-1];
 8000c5a:	697a      	ldr	r2, [r7, #20]
 8000c5c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8000c60:	4413      	add	r3, r2
 8000c62:	009b      	lsls	r3, r3, #2
 8000c64:	68fa      	ldr	r2, [r7, #12]
 8000c66:	441a      	add	r2, r3
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	009b      	lsls	r3, r3, #2
 8000c6c:	68f9      	ldr	r1, [r7, #12]
 8000c6e:	440b      	add	r3, r1
 8000c70:	6812      	ldr	r2, [r2, #0]
 8000c72:	601a      	str	r2, [r3, #0]
	for (int i = (sysorder -1) ; i>0 ; i--)
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	3b01      	subs	r3, #1
 8000c78:	617b      	str	r3, [r7, #20]
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	dcec      	bgt.n	8000c5a <update_X+0x1a>
	}
	X[0] = (-1) * output;
 8000c80:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c84:	eef1 7a67 	vneg.f32	s15, s15
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	edc3 7a00 	vstr	s15, [r3]

	// Uk
	for (int i = (2*sysorder -1) ; i > sysorder ; i--)
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	005b      	lsls	r3, r3, #1
 8000c92:	3b01      	subs	r3, #1
 8000c94:	613b      	str	r3, [r7, #16]
 8000c96:	e00f      	b.n	8000cb8 <update_X+0x78>
	{
		X[i] = X[i-1];
 8000c98:	693a      	ldr	r2, [r7, #16]
 8000c9a:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8000c9e:	4413      	add	r3, r2
 8000ca0:	009b      	lsls	r3, r3, #2
 8000ca2:	68fa      	ldr	r2, [r7, #12]
 8000ca4:	441a      	add	r2, r3
 8000ca6:	693b      	ldr	r3, [r7, #16]
 8000ca8:	009b      	lsls	r3, r3, #2
 8000caa:	68f9      	ldr	r1, [r7, #12]
 8000cac:	440b      	add	r3, r1
 8000cae:	6812      	ldr	r2, [r2, #0]
 8000cb0:	601a      	str	r2, [r3, #0]
	for (int i = (2*sysorder -1) ; i > sysorder ; i--)
 8000cb2:	693b      	ldr	r3, [r7, #16]
 8000cb4:	3b01      	subs	r3, #1
 8000cb6:	613b      	str	r3, [r7, #16]
 8000cb8:	693a      	ldr	r2, [r7, #16]
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	dceb      	bgt.n	8000c98 <update_X+0x58>
	}
	X[sysorder] = input;
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	009b      	lsls	r3, r3, #2
 8000cc4:	68fa      	ldr	r2, [r7, #12]
 8000cc6:	4413      	add	r3, r2
 8000cc8:	68ba      	ldr	r2, [r7, #8]
 8000cca:	601a      	str	r2, [r3, #0]
	arm_mat_init_f32 ( &Xk , 1 , 2*sysorder , X);
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	b29b      	uxth	r3, r3
 8000cd0:	005b      	lsls	r3, r3, #1
 8000cd2:	b29a      	uxth	r2, r3
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	2101      	movs	r1, #1
 8000cd8:	4803      	ldr	r0, [pc, #12]	; (8000ce8 <update_X+0xa8>)
 8000cda:	f007 f9b9 	bl	8008050 <arm_mat_init_f32>

}
 8000cde:	bf00      	nop
 8000ce0:	3718      	adds	r7, #24
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	240000a4 	.word	0x240000a4

08000cec <rep_sys>:



float32_t rep_sys (void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
	arm_matrix_instance_f32 rep;
	float32_t  resp_output;
	arm_mat_init_f32 (&rep , 1 , 1 , &resp_output);
 8000cf2:	1d3b      	adds	r3, r7, #4
 8000cf4:	f107 0008 	add.w	r0, r7, #8
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	2101      	movs	r1, #1
 8000cfc:	f007 f9a8 	bl	8008050 <arm_mat_init_f32>
	arm_mat_mult_f32( &Xk, &teta , &rep);
 8000d00:	f107 0308 	add.w	r3, r7, #8
 8000d04:	461a      	mov	r2, r3
 8000d06:	4906      	ldr	r1, [pc, #24]	; (8000d20 <rep_sys+0x34>)
 8000d08:	4806      	ldr	r0, [pc, #24]	; (8000d24 <rep_sys+0x38>)
 8000d0a:	f007 f8fd 	bl	8007f08 <arm_mat_mult_f32>
	return (*(rep.pData));
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	ee07 3a90 	vmov	s15, r3


}
 8000d16:	eeb0 0a67 	vmov.f32	s0, s15
 8000d1a:	3710      	adds	r7, #16
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	2400009c 	.word	0x2400009c
 8000d24:	240000a4 	.word	0x240000a4

08000d28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	X = (float*) malloc((2*sysorder)* sizeof(float));
 8000d2c:	4b2c      	ldr	r3, [pc, #176]	; (8000de0 <main+0xb8>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	00db      	lsls	r3, r3, #3
 8000d32:	4618      	mov	r0, r3
 8000d34:	f007 fa24 	bl	8008180 <malloc>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	4b29      	ldr	r3, [pc, #164]	; (8000de4 <main+0xbc>)
 8000d3e:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4, ccr_reg);
 8000d40:	4b29      	ldr	r3, [pc, #164]	; (8000de8 <main+0xc0>)
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	4b29      	ldr	r3, [pc, #164]	; (8000dec <main+0xc4>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	641a      	str	r2, [r3, #64]	; 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d4a:	f001 f965 	bl	8002018 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d4e:	f000 f85b 	bl	8000e08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d52:	f000 fb9f 	bl	8001494 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000d56:	f000 fb49 	bl	80013ec <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000d5a:	f000 fb93 	bl	8001484 <MX_USB_OTG_HS_USB_Init>
  MX_TIM4_Init();
 8000d5e:	f000 f967 	bl	8001030 <MX_TIM4_Init>
  MX_TIM3_Init();
 8000d62:	f000 f90f 	bl	8000f84 <MX_TIM3_Init>
  MX_TIM8_Init();
 8000d66:	f000 fa2b 	bl	80011c0 <MX_TIM8_Init>
  MX_TIM2_Init();
 8000d6a:	f000 f8bd 	bl	8000ee8 <MX_TIM2_Init>
  MX_TIM5_Init();
 8000d6e:	f000 f9d7 	bl	8001120 <MX_TIM5_Init>
  MX_TIM23_Init();
 8000d72:	f000 fa9d 	bl	80012b0 <MX_TIM23_Init>
  MX_TIM24_Init();
 8000d76:	f000 faeb 	bl	8001350 <MX_TIM24_Init>
  /* USER CODE BEGIN 2 */
  init_rls (sysorder);
 8000d7a:	4b19      	ldr	r3, [pc, #100]	; (8000de0 <main+0xb8>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff fc48 	bl	8000614 <init_rls>
  init_param_calcul_teta(sysorder);
 8000d84:	4b16      	ldr	r3, [pc, #88]	; (8000de0 <main+0xb8>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f7ff fcfd 	bl	8000788 <init_param_calcul_teta>

  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_RESET);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	2101      	movs	r1, #1
 8000d92:	4817      	ldr	r0, [pc, #92]	; (8000df0 <main+0xc8>)
 8000d94:	f001 fc8a 	bl	80026ac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_2,GPIO_PIN_SET);
 8000d98:	2201      	movs	r2, #1
 8000d9a:	2104      	movs	r1, #4
 8000d9c:	4814      	ldr	r0, [pc, #80]	; (8000df0 <main+0xc8>)
 8000d9e:	f001 fc85 	bl	80026ac <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_4);
 8000da2:	210c      	movs	r1, #12
 8000da4:	4811      	ldr	r0, [pc, #68]	; (8000dec <main+0xc4>)
 8000da6:	f004 f88f 	bl	8004ec8 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 8000daa:	213c      	movs	r1, #60	; 0x3c
 8000dac:	4811      	ldr	r0, [pc, #68]	; (8000df4 <main+0xcc>)
 8000dae:	f004 fbc1 	bl	8005534 <HAL_TIM_Encoder_Start>
  HAL_TIM_IC_Start (&htim8,TIM_CHANNEL_3);
 8000db2:	2108      	movs	r1, #8
 8000db4:	4810      	ldr	r0, [pc, #64]	; (8000df8 <main+0xd0>)
 8000db6:	f004 fa05 	bl	80051c4 <HAL_TIM_IC_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8000dba:	4810      	ldr	r0, [pc, #64]	; (8000dfc <main+0xd4>)
 8000dbc:	f003 ff9c 	bl	8004cf8 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  speed = speed_aq();
 8000dc0:	f000 fcce 	bl	8001760 <speed_aq>
 8000dc4:	eef0 7a40 	vmov.f32	s15, s0
 8000dc8:	4b0d      	ldr	r3, [pc, #52]	; (8000e00 <main+0xd8>)
 8000dca:	edc3 7a00 	vstr	s15, [r3]
	  output_est =  rep_sys ();
 8000dce:	f7ff ff8d 	bl	8000cec <rep_sys>
 8000dd2:	eef0 7a40 	vmov.f32	s15, s0
 8000dd6:	4b0b      	ldr	r3, [pc, #44]	; (8000e04 <main+0xdc>)
 8000dd8:	edc3 7a00 	vstr	s15, [r3]
	  speed = speed_aq();
 8000ddc:	e7f0      	b.n	8000dc0 <main+0x98>
 8000dde:	bf00      	nop
 8000de0:	24000000 	.word	0x24000000
 8000de4:	240003d0 	.word	0x240003d0
 8000de8:	240003c0 	.word	0x240003c0
 8000dec:	2400019c 	.word	0x2400019c
 8000df0:	58020800 	.word	0x58020800
 8000df4:	24000150 	.word	0x24000150
 8000df8:	24000234 	.word	0x24000234
 8000dfc:	24000104 	.word	0x24000104
 8000e00:	240003ac 	.word	0x240003ac
 8000e04:	240003cc 	.word	0x240003cc

08000e08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b09c      	sub	sp, #112	; 0x70
 8000e0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e12:	224c      	movs	r2, #76	; 0x4c
 8000e14:	2100      	movs	r1, #0
 8000e16:	4618      	mov	r0, r3
 8000e18:	f007 f9ba 	bl	8008190 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e1c:	1d3b      	adds	r3, r7, #4
 8000e1e:	2220      	movs	r2, #32
 8000e20:	2100      	movs	r1, #0
 8000e22:	4618      	mov	r0, r3
 8000e24:	f007 f9b4 	bl	8008190 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000e28:	2002      	movs	r0, #2
 8000e2a:	f001 fc7d 	bl	8002728 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000e2e:	2300      	movs	r3, #0
 8000e30:	603b      	str	r3, [r7, #0]
 8000e32:	4b2c      	ldr	r3, [pc, #176]	; (8000ee4 <SystemClock_Config+0xdc>)
 8000e34:	699b      	ldr	r3, [r3, #24]
 8000e36:	4a2b      	ldr	r2, [pc, #172]	; (8000ee4 <SystemClock_Config+0xdc>)
 8000e38:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e3c:	6193      	str	r3, [r2, #24]
 8000e3e:	4b29      	ldr	r3, [pc, #164]	; (8000ee4 <SystemClock_Config+0xdc>)
 8000e40:	699b      	ldr	r3, [r3, #24]
 8000e42:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e46:	603b      	str	r3, [r7, #0]
 8000e48:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000e4a:	bf00      	nop
 8000e4c:	4b25      	ldr	r3, [pc, #148]	; (8000ee4 <SystemClock_Config+0xdc>)
 8000e4e:	699b      	ldr	r3, [r3, #24]
 8000e50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e58:	d1f8      	bne.n	8000e4c <SystemClock_Config+0x44>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000e5a:	2321      	movs	r3, #33	; 0x21
 8000e5c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000e5e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000e62:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000e64:	2301      	movs	r3, #1
 8000e66:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e70:	2304      	movs	r3, #4
 8000e72:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 8000e74:	f240 1313 	movw	r3, #275	; 0x113
 8000e78:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e7e:	2304      	movs	r3, #4
 8000e80:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e82:	2302      	movs	r3, #2
 8000e84:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000e86:	2304      	movs	r3, #4
 8000e88:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e96:	4618      	mov	r0, r3
 8000e98:	f001 fc80 	bl	800279c <HAL_RCC_OscConfig>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000ea2:	f000 fdb1 	bl	8001a08 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ea6:	233f      	movs	r3, #63	; 0x3f
 8000ea8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000eb2:	2308      	movs	r3, #8
 8000eb4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000eb6:	2340      	movs	r3, #64	; 0x40
 8000eb8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000eba:	2340      	movs	r3, #64	; 0x40
 8000ebc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000ebe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ec2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000ec4:	2340      	movs	r3, #64	; 0x40
 8000ec6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000ec8:	1d3b      	adds	r3, r7, #4
 8000eca:	2103      	movs	r1, #3
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f002 f813 	bl	8002ef8 <HAL_RCC_ClockConfig>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000ed8:	f000 fd96 	bl	8001a08 <Error_Handler>
  }
}
 8000edc:	bf00      	nop
 8000ede:	3770      	adds	r7, #112	; 0x70
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	58024800 	.word	0x58024800

08000ee8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b088      	sub	sp, #32
 8000eec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eee:	f107 0310 	add.w	r3, r7, #16
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	601a      	str	r2, [r3, #0]
 8000ef6:	605a      	str	r2, [r3, #4]
 8000ef8:	609a      	str	r2, [r3, #8]
 8000efa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000efc:	1d3b      	adds	r3, r7, #4
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
 8000f02:	605a      	str	r2, [r3, #4]
 8000f04:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f06:	4b1e      	ldr	r3, [pc, #120]	; (8000f80 <MX_TIM2_Init+0x98>)
 8000f08:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f0c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 549;
 8000f0e:	4b1c      	ldr	r3, [pc, #112]	; (8000f80 <MX_TIM2_Init+0x98>)
 8000f10:	f240 2225 	movw	r2, #549	; 0x225
 8000f14:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f16:	4b1a      	ldr	r3, [pc, #104]	; (8000f80 <MX_TIM2_Init+0x98>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4999;
 8000f1c:	4b18      	ldr	r3, [pc, #96]	; (8000f80 <MX_TIM2_Init+0x98>)
 8000f1e:	f241 3287 	movw	r2, #4999	; 0x1387
 8000f22:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f24:	4b16      	ldr	r3, [pc, #88]	; (8000f80 <MX_TIM2_Init+0x98>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f2a:	4b15      	ldr	r3, [pc, #84]	; (8000f80 <MX_TIM2_Init+0x98>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f30:	4813      	ldr	r0, [pc, #76]	; (8000f80 <MX_TIM2_Init+0x98>)
 8000f32:	f003 fe89 	bl	8004c48 <HAL_TIM_Base_Init>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000f3c:	f000 fd64 	bl	8001a08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f44:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f46:	f107 0310 	add.w	r3, r7, #16
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	480c      	ldr	r0, [pc, #48]	; (8000f80 <MX_TIM2_Init+0x98>)
 8000f4e:	f004 fe4f 	bl	8005bf0 <HAL_TIM_ConfigClockSource>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000f58:	f000 fd56 	bl	8001a08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f60:	2300      	movs	r3, #0
 8000f62:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f64:	1d3b      	adds	r3, r7, #4
 8000f66:	4619      	mov	r1, r3
 8000f68:	4805      	ldr	r0, [pc, #20]	; (8000f80 <MX_TIM2_Init+0x98>)
 8000f6a:	f005 fcd7 	bl	800691c <HAL_TIMEx_MasterConfigSynchronization>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000f74:	f000 fd48 	bl	8001a08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f78:	bf00      	nop
 8000f7a:	3720      	adds	r7, #32
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	24000104 	.word	0x24000104

08000f84 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08c      	sub	sp, #48	; 0x30
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f8a:	f107 030c 	add.w	r3, r7, #12
 8000f8e:	2224      	movs	r2, #36	; 0x24
 8000f90:	2100      	movs	r1, #0
 8000f92:	4618      	mov	r0, r3
 8000f94:	f007 f8fc 	bl	8008190 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f98:	463b      	mov	r3, r7
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	605a      	str	r2, [r3, #4]
 8000fa0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000fa2:	4b21      	ldr	r3, [pc, #132]	; (8001028 <MX_TIM3_Init+0xa4>)
 8000fa4:	4a21      	ldr	r2, [pc, #132]	; (800102c <MX_TIM3_Init+0xa8>)
 8000fa6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000fa8:	4b1f      	ldr	r3, [pc, #124]	; (8001028 <MX_TIM3_Init+0xa4>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fae:	4b1e      	ldr	r3, [pc, #120]	; (8001028 <MX_TIM3_Init+0xa4>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65532;
 8000fb4:	4b1c      	ldr	r3, [pc, #112]	; (8001028 <MX_TIM3_Init+0xa4>)
 8000fb6:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8000fba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fbc:	4b1a      	ldr	r3, [pc, #104]	; (8001028 <MX_TIM3_Init+0xa4>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fc2:	4b19      	ldr	r3, [pc, #100]	; (8001028 <MX_TIM3_Init+0xa4>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000fc8:	2303      	movs	r3, #3
 8000fca:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000fd8:	230a      	movs	r3, #10
 8000fda:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8000fe8:	230a      	movs	r3, #10
 8000fea:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000fec:	f107 030c 	add.w	r3, r7, #12
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	480d      	ldr	r0, [pc, #52]	; (8001028 <MX_TIM3_Init+0xa4>)
 8000ff4:	f004 f9f8 	bl	80053e8 <HAL_TIM_Encoder_Init>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000ffe:	f000 fd03 	bl	8001a08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001002:	2300      	movs	r3, #0
 8001004:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001006:	2300      	movs	r3, #0
 8001008:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800100a:	463b      	mov	r3, r7
 800100c:	4619      	mov	r1, r3
 800100e:	4806      	ldr	r0, [pc, #24]	; (8001028 <MX_TIM3_Init+0xa4>)
 8001010:	f005 fc84 	bl	800691c <HAL_TIMEx_MasterConfigSynchronization>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800101a:	f000 fcf5 	bl	8001a08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800101e:	bf00      	nop
 8001020:	3730      	adds	r7, #48	; 0x30
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	24000150 	.word	0x24000150
 800102c:	40000400 	.word	0x40000400

08001030 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b08e      	sub	sp, #56	; 0x38
 8001034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001036:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	605a      	str	r2, [r3, #4]
 8001040:	609a      	str	r2, [r3, #8]
 8001042:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001044:	f107 031c 	add.w	r3, r7, #28
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001050:	463b      	mov	r3, r7
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]
 8001058:	609a      	str	r2, [r3, #8]
 800105a:	60da      	str	r2, [r3, #12]
 800105c:	611a      	str	r2, [r3, #16]
 800105e:	615a      	str	r2, [r3, #20]
 8001060:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001062:	4b2d      	ldr	r3, [pc, #180]	; (8001118 <MX_TIM4_Init+0xe8>)
 8001064:	4a2d      	ldr	r2, [pc, #180]	; (800111c <MX_TIM4_Init+0xec>)
 8001066:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 99;
 8001068:	4b2b      	ldr	r3, [pc, #172]	; (8001118 <MX_TIM4_Init+0xe8>)
 800106a:	2263      	movs	r2, #99	; 0x63
 800106c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800106e:	4b2a      	ldr	r3, [pc, #168]	; (8001118 <MX_TIM4_Init+0xe8>)
 8001070:	2200      	movs	r2, #0
 8001072:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 27499;
 8001074:	4b28      	ldr	r3, [pc, #160]	; (8001118 <MX_TIM4_Init+0xe8>)
 8001076:	f646 326b 	movw	r2, #27499	; 0x6b6b
 800107a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800107c:	4b26      	ldr	r3, [pc, #152]	; (8001118 <MX_TIM4_Init+0xe8>)
 800107e:	2200      	movs	r2, #0
 8001080:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001082:	4b25      	ldr	r3, [pc, #148]	; (8001118 <MX_TIM4_Init+0xe8>)
 8001084:	2200      	movs	r2, #0
 8001086:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001088:	4823      	ldr	r0, [pc, #140]	; (8001118 <MX_TIM4_Init+0xe8>)
 800108a:	f003 fddd 	bl	8004c48 <HAL_TIM_Base_Init>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001094:	f000 fcb8 	bl	8001a08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001098:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800109c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800109e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010a2:	4619      	mov	r1, r3
 80010a4:	481c      	ldr	r0, [pc, #112]	; (8001118 <MX_TIM4_Init+0xe8>)
 80010a6:	f004 fda3 	bl	8005bf0 <HAL_TIM_ConfigClockSource>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80010b0:	f000 fcaa 	bl	8001a08 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80010b4:	4818      	ldr	r0, [pc, #96]	; (8001118 <MX_TIM4_Init+0xe8>)
 80010b6:	f003 fea5 	bl	8004e04 <HAL_TIM_PWM_Init>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80010c0:	f000 fca2 	bl	8001a08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010c4:	2300      	movs	r3, #0
 80010c6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010c8:	2300      	movs	r3, #0
 80010ca:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80010cc:	f107 031c 	add.w	r3, r7, #28
 80010d0:	4619      	mov	r1, r3
 80010d2:	4811      	ldr	r0, [pc, #68]	; (8001118 <MX_TIM4_Init+0xe8>)
 80010d4:	f005 fc22 	bl	800691c <HAL_TIMEx_MasterConfigSynchronization>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80010de:	f000 fc93 	bl	8001a08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010e2:	2360      	movs	r3, #96	; 0x60
 80010e4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010ea:	2300      	movs	r3, #0
 80010ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010ee:	2300      	movs	r3, #0
 80010f0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80010f2:	463b      	mov	r3, r7
 80010f4:	220c      	movs	r2, #12
 80010f6:	4619      	mov	r1, r3
 80010f8:	4807      	ldr	r0, [pc, #28]	; (8001118 <MX_TIM4_Init+0xe8>)
 80010fa:	f004 fc65 	bl	80059c8 <HAL_TIM_PWM_ConfigChannel>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001104:	f000 fc80 	bl	8001a08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001108:	4803      	ldr	r0, [pc, #12]	; (8001118 <MX_TIM4_Init+0xe8>)
 800110a:	f000 fdbb 	bl	8001c84 <HAL_TIM_MspPostInit>

}
 800110e:	bf00      	nop
 8001110:	3738      	adds	r7, #56	; 0x38
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	2400019c 	.word	0x2400019c
 800111c:	40000800 	.word	0x40000800

08001120 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b088      	sub	sp, #32
 8001124:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001126:	f107 0310 	add.w	r3, r7, #16
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	605a      	str	r2, [r3, #4]
 8001130:	609a      	str	r2, [r3, #8]
 8001132:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001134:	1d3b      	adds	r3, r7, #4
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	605a      	str	r2, [r3, #4]
 800113c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800113e:	4b1d      	ldr	r3, [pc, #116]	; (80011b4 <MX_TIM5_Init+0x94>)
 8001140:	4a1d      	ldr	r2, [pc, #116]	; (80011b8 <MX_TIM5_Init+0x98>)
 8001142:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 5499;
 8001144:	4b1b      	ldr	r3, [pc, #108]	; (80011b4 <MX_TIM5_Init+0x94>)
 8001146:	f241 527b 	movw	r2, #5499	; 0x157b
 800114a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800114c:	4b19      	ldr	r3, [pc, #100]	; (80011b4 <MX_TIM5_Init+0x94>)
 800114e:	2200      	movs	r2, #0
 8001150:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 99999;
 8001152:	4b18      	ldr	r3, [pc, #96]	; (80011b4 <MX_TIM5_Init+0x94>)
 8001154:	4a19      	ldr	r2, [pc, #100]	; (80011bc <MX_TIM5_Init+0x9c>)
 8001156:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001158:	4b16      	ldr	r3, [pc, #88]	; (80011b4 <MX_TIM5_Init+0x94>)
 800115a:	2200      	movs	r2, #0
 800115c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800115e:	4b15      	ldr	r3, [pc, #84]	; (80011b4 <MX_TIM5_Init+0x94>)
 8001160:	2200      	movs	r2, #0
 8001162:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001164:	4813      	ldr	r0, [pc, #76]	; (80011b4 <MX_TIM5_Init+0x94>)
 8001166:	f003 fd6f 	bl	8004c48 <HAL_TIM_Base_Init>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001170:	f000 fc4a 	bl	8001a08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001174:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001178:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800117a:	f107 0310 	add.w	r3, r7, #16
 800117e:	4619      	mov	r1, r3
 8001180:	480c      	ldr	r0, [pc, #48]	; (80011b4 <MX_TIM5_Init+0x94>)
 8001182:	f004 fd35 	bl	8005bf0 <HAL_TIM_ConfigClockSource>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 800118c:	f000 fc3c 	bl	8001a08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001190:	2300      	movs	r3, #0
 8001192:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001194:	2300      	movs	r3, #0
 8001196:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001198:	1d3b      	adds	r3, r7, #4
 800119a:	4619      	mov	r1, r3
 800119c:	4805      	ldr	r0, [pc, #20]	; (80011b4 <MX_TIM5_Init+0x94>)
 800119e:	f005 fbbd 	bl	800691c <HAL_TIMEx_MasterConfigSynchronization>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80011a8:	f000 fc2e 	bl	8001a08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80011ac:	bf00      	nop
 80011ae:	3720      	adds	r7, #32
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	240001e8 	.word	0x240001e8
 80011b8:	40000c00 	.word	0x40000c00
 80011bc:	0001869f 	.word	0x0001869f

080011c0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08c      	sub	sp, #48	; 0x30
 80011c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011c6:	f107 0320 	add.w	r3, r7, #32
 80011ca:	2200      	movs	r2, #0
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	605a      	str	r2, [r3, #4]
 80011d0:	609a      	str	r2, [r3, #8]
 80011d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011d4:	f107 0314 	add.w	r3, r7, #20
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	605a      	str	r2, [r3, #4]
 80011de:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80011e0:	1d3b      	adds	r3, r7, #4
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	605a      	str	r2, [r3, #4]
 80011e8:	609a      	str	r2, [r3, #8]
 80011ea:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80011ec:	4b2e      	ldr	r3, [pc, #184]	; (80012a8 <MX_TIM8_Init+0xe8>)
 80011ee:	4a2f      	ldr	r2, [pc, #188]	; (80012ac <MX_TIM8_Init+0xec>)
 80011f0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 9999;
 80011f2:	4b2d      	ldr	r3, [pc, #180]	; (80012a8 <MX_TIM8_Init+0xe8>)
 80011f4:	f242 720f 	movw	r2, #9999	; 0x270f
 80011f8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011fa:	4b2b      	ldr	r3, [pc, #172]	; (80012a8 <MX_TIM8_Init+0xe8>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001200:	4b29      	ldr	r3, [pc, #164]	; (80012a8 <MX_TIM8_Init+0xe8>)
 8001202:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001206:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001208:	4b27      	ldr	r3, [pc, #156]	; (80012a8 <MX_TIM8_Init+0xe8>)
 800120a:	2200      	movs	r2, #0
 800120c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 10;
 800120e:	4b26      	ldr	r3, [pc, #152]	; (80012a8 <MX_TIM8_Init+0xe8>)
 8001210:	220a      	movs	r2, #10
 8001212:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001214:	4b24      	ldr	r3, [pc, #144]	; (80012a8 <MX_TIM8_Init+0xe8>)
 8001216:	2200      	movs	r2, #0
 8001218:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800121a:	4823      	ldr	r0, [pc, #140]	; (80012a8 <MX_TIM8_Init+0xe8>)
 800121c:	f003 fd14 	bl	8004c48 <HAL_TIM_Base_Init>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_TIM8_Init+0x6a>
  {
    Error_Handler();
 8001226:	f000 fbef 	bl	8001a08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800122a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800122e:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001230:	f107 0320 	add.w	r3, r7, #32
 8001234:	4619      	mov	r1, r3
 8001236:	481c      	ldr	r0, [pc, #112]	; (80012a8 <MX_TIM8_Init+0xe8>)
 8001238:	f004 fcda 	bl	8005bf0 <HAL_TIM_ConfigClockSource>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_TIM8_Init+0x86>
  {
    Error_Handler();
 8001242:	f000 fbe1 	bl	8001a08 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 8001246:	4818      	ldr	r0, [pc, #96]	; (80012a8 <MX_TIM8_Init+0xe8>)
 8001248:	f003 ff5a 	bl	8005100 <HAL_TIM_IC_Init>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001252:	f000 fbd9 	bl	8001a08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001256:	2300      	movs	r3, #0
 8001258:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800125a:	2300      	movs	r3, #0
 800125c:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800125e:	2300      	movs	r3, #0
 8001260:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001262:	f107 0314 	add.w	r3, r7, #20
 8001266:	4619      	mov	r1, r3
 8001268:	480f      	ldr	r0, [pc, #60]	; (80012a8 <MX_TIM8_Init+0xe8>)
 800126a:	f005 fb57 	bl	800691c <HAL_TIMEx_MasterConfigSynchronization>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_TIM8_Init+0xb8>
  {
    Error_Handler();
 8001274:	f000 fbc8 	bl	8001a08 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001278:	2300      	movs	r3, #0
 800127a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800127c:	2301      	movs	r3, #1
 800127e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001280:	2300      	movs	r3, #0
 8001282:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 10;
 8001284:	230a      	movs	r3, #10
 8001286:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001288:	1d3b      	adds	r3, r7, #4
 800128a:	2208      	movs	r2, #8
 800128c:	4619      	mov	r1, r3
 800128e:	4806      	ldr	r0, [pc, #24]	; (80012a8 <MX_TIM8_Init+0xe8>)
 8001290:	f004 fafd 	bl	800588e <HAL_TIM_IC_ConfigChannel>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_TIM8_Init+0xde>
  {
    Error_Handler();
 800129a:	f000 fbb5 	bl	8001a08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800129e:	bf00      	nop
 80012a0:	3730      	adds	r7, #48	; 0x30
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	24000234 	.word	0x24000234
 80012ac:	40010400 	.word	0x40010400

080012b0 <MX_TIM23_Init>:
  * @brief TIM23 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM23_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b088      	sub	sp, #32
 80012b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012b6:	f107 0310 	add.w	r3, r7, #16
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	605a      	str	r2, [r3, #4]
 80012c0:	609a      	str	r2, [r3, #8]
 80012c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012c4:	1d3b      	adds	r3, r7, #4
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	605a      	str	r2, [r3, #4]
 80012cc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 80012ce:	4b1e      	ldr	r3, [pc, #120]	; (8001348 <MX_TIM23_Init+0x98>)
 80012d0:	4a1e      	ldr	r2, [pc, #120]	; (800134c <MX_TIM23_Init+0x9c>)
 80012d2:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 549;
 80012d4:	4b1c      	ldr	r3, [pc, #112]	; (8001348 <MX_TIM23_Init+0x98>)
 80012d6:	f240 2225 	movw	r2, #549	; 0x225
 80012da:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012dc:	4b1a      	ldr	r3, [pc, #104]	; (8001348 <MX_TIM23_Init+0x98>)
 80012de:	2200      	movs	r2, #0
 80012e0:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 9999;
 80012e2:	4b19      	ldr	r3, [pc, #100]	; (8001348 <MX_TIM23_Init+0x98>)
 80012e4:	f242 720f 	movw	r2, #9999	; 0x270f
 80012e8:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ea:	4b17      	ldr	r3, [pc, #92]	; (8001348 <MX_TIM23_Init+0x98>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012f0:	4b15      	ldr	r3, [pc, #84]	; (8001348 <MX_TIM23_Init+0x98>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim23) != HAL_OK)
 80012f6:	4814      	ldr	r0, [pc, #80]	; (8001348 <MX_TIM23_Init+0x98>)
 80012f8:	f003 fca6 	bl	8004c48 <HAL_TIM_Base_Init>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_TIM23_Init+0x56>
  {
    Error_Handler();
 8001302:	f000 fb81 	bl	8001a08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001306:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800130a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim23, &sClockSourceConfig) != HAL_OK)
 800130c:	f107 0310 	add.w	r3, r7, #16
 8001310:	4619      	mov	r1, r3
 8001312:	480d      	ldr	r0, [pc, #52]	; (8001348 <MX_TIM23_Init+0x98>)
 8001314:	f004 fc6c 	bl	8005bf0 <HAL_TIM_ConfigClockSource>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_TIM23_Init+0x72>
  {
    Error_Handler();
 800131e:	f000 fb73 	bl	8001a08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001322:	2300      	movs	r3, #0
 8001324:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001326:	2300      	movs	r3, #0
 8001328:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 800132a:	1d3b      	adds	r3, r7, #4
 800132c:	4619      	mov	r1, r3
 800132e:	4806      	ldr	r0, [pc, #24]	; (8001348 <MX_TIM23_Init+0x98>)
 8001330:	f005 faf4 	bl	800691c <HAL_TIMEx_MasterConfigSynchronization>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_TIM23_Init+0x8e>
  {
    Error_Handler();
 800133a:	f000 fb65 	bl	8001a08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 800133e:	bf00      	nop
 8001340:	3720      	adds	r7, #32
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	24000280 	.word	0x24000280
 800134c:	4000e000 	.word	0x4000e000

08001350 <MX_TIM24_Init>:
  * @brief TIM24 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM24_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b088      	sub	sp, #32
 8001354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM24_Init 0 */

  /* USER CODE END TIM24_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001356:	f107 0310 	add.w	r3, r7, #16
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	605a      	str	r2, [r3, #4]
 8001360:	609a      	str	r2, [r3, #8]
 8001362:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001364:	1d3b      	adds	r3, r7, #4
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	605a      	str	r2, [r3, #4]
 800136c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM24_Init 1 */

  /* USER CODE END TIM24_Init 1 */
  htim24.Instance = TIM24;
 800136e:	4b1d      	ldr	r3, [pc, #116]	; (80013e4 <MX_TIM24_Init+0x94>)
 8001370:	4a1d      	ldr	r2, [pc, #116]	; (80013e8 <MX_TIM24_Init+0x98>)
 8001372:	601a      	str	r2, [r3, #0]
  htim24.Init.Prescaler = 65530;
 8001374:	4b1b      	ldr	r3, [pc, #108]	; (80013e4 <MX_TIM24_Init+0x94>)
 8001376:	f64f 72fa 	movw	r2, #65530	; 0xfffa
 800137a:	605a      	str	r2, [r3, #4]
  htim24.Init.CounterMode = TIM_COUNTERMODE_UP;
 800137c:	4b19      	ldr	r3, [pc, #100]	; (80013e4 <MX_TIM24_Init+0x94>)
 800137e:	2200      	movs	r2, #0
 8001380:	609a      	str	r2, [r3, #8]
  htim24.Init.Period = 14;
 8001382:	4b18      	ldr	r3, [pc, #96]	; (80013e4 <MX_TIM24_Init+0x94>)
 8001384:	220e      	movs	r2, #14
 8001386:	60da      	str	r2, [r3, #12]
  htim24.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001388:	4b16      	ldr	r3, [pc, #88]	; (80013e4 <MX_TIM24_Init+0x94>)
 800138a:	2200      	movs	r2, #0
 800138c:	611a      	str	r2, [r3, #16]
  htim24.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800138e:	4b15      	ldr	r3, [pc, #84]	; (80013e4 <MX_TIM24_Init+0x94>)
 8001390:	2200      	movs	r2, #0
 8001392:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim24) != HAL_OK)
 8001394:	4813      	ldr	r0, [pc, #76]	; (80013e4 <MX_TIM24_Init+0x94>)
 8001396:	f003 fc57 	bl	8004c48 <HAL_TIM_Base_Init>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_TIM24_Init+0x54>
  {
    Error_Handler();
 80013a0:	f000 fb32 	bl	8001a08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013a8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim24, &sClockSourceConfig) != HAL_OK)
 80013aa:	f107 0310 	add.w	r3, r7, #16
 80013ae:	4619      	mov	r1, r3
 80013b0:	480c      	ldr	r0, [pc, #48]	; (80013e4 <MX_TIM24_Init+0x94>)
 80013b2:	f004 fc1d 	bl	8005bf0 <HAL_TIM_ConfigClockSource>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_TIM24_Init+0x70>
  {
    Error_Handler();
 80013bc:	f000 fb24 	bl	8001a08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013c0:	2300      	movs	r3, #0
 80013c2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013c4:	2300      	movs	r3, #0
 80013c6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim24, &sMasterConfig) != HAL_OK)
 80013c8:	1d3b      	adds	r3, r7, #4
 80013ca:	4619      	mov	r1, r3
 80013cc:	4805      	ldr	r0, [pc, #20]	; (80013e4 <MX_TIM24_Init+0x94>)
 80013ce:	f005 faa5 	bl	800691c <HAL_TIMEx_MasterConfigSynchronization>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_TIM24_Init+0x8c>
  {
    Error_Handler();
 80013d8:	f000 fb16 	bl	8001a08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM24_Init 2 */

  /* USER CODE END TIM24_Init 2 */

}
 80013dc:	bf00      	nop
 80013de:	3720      	adds	r7, #32
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	240002cc 	.word	0x240002cc
 80013e8:	4000e400 	.word	0x4000e400

080013ec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80013f0:	4b22      	ldr	r3, [pc, #136]	; (800147c <MX_USART3_UART_Init+0x90>)
 80013f2:	4a23      	ldr	r2, [pc, #140]	; (8001480 <MX_USART3_UART_Init+0x94>)
 80013f4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80013f6:	4b21      	ldr	r3, [pc, #132]	; (800147c <MX_USART3_UART_Init+0x90>)
 80013f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013fc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80013fe:	4b1f      	ldr	r3, [pc, #124]	; (800147c <MX_USART3_UART_Init+0x90>)
 8001400:	2200      	movs	r2, #0
 8001402:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001404:	4b1d      	ldr	r3, [pc, #116]	; (800147c <MX_USART3_UART_Init+0x90>)
 8001406:	2200      	movs	r2, #0
 8001408:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800140a:	4b1c      	ldr	r3, [pc, #112]	; (800147c <MX_USART3_UART_Init+0x90>)
 800140c:	2200      	movs	r2, #0
 800140e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001410:	4b1a      	ldr	r3, [pc, #104]	; (800147c <MX_USART3_UART_Init+0x90>)
 8001412:	220c      	movs	r2, #12
 8001414:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001416:	4b19      	ldr	r3, [pc, #100]	; (800147c <MX_USART3_UART_Init+0x90>)
 8001418:	2200      	movs	r2, #0
 800141a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800141c:	4b17      	ldr	r3, [pc, #92]	; (800147c <MX_USART3_UART_Init+0x90>)
 800141e:	2200      	movs	r2, #0
 8001420:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001422:	4b16      	ldr	r3, [pc, #88]	; (800147c <MX_USART3_UART_Init+0x90>)
 8001424:	2200      	movs	r2, #0
 8001426:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001428:	4b14      	ldr	r3, [pc, #80]	; (800147c <MX_USART3_UART_Init+0x90>)
 800142a:	2200      	movs	r2, #0
 800142c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800142e:	4b13      	ldr	r3, [pc, #76]	; (800147c <MX_USART3_UART_Init+0x90>)
 8001430:	2200      	movs	r2, #0
 8001432:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001434:	4811      	ldr	r0, [pc, #68]	; (800147c <MX_USART3_UART_Init+0x90>)
 8001436:	f005 fb2b 	bl	8006a90 <HAL_UART_Init>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001440:	f000 fae2 	bl	8001a08 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001444:	2100      	movs	r1, #0
 8001446:	480d      	ldr	r0, [pc, #52]	; (800147c <MX_USART3_UART_Init+0x90>)
 8001448:	f006 fbcc 	bl	8007be4 <HAL_UARTEx_SetTxFifoThreshold>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001452:	f000 fad9 	bl	8001a08 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001456:	2100      	movs	r1, #0
 8001458:	4808      	ldr	r0, [pc, #32]	; (800147c <MX_USART3_UART_Init+0x90>)
 800145a:	f006 fc01 	bl	8007c60 <HAL_UARTEx_SetRxFifoThreshold>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001464:	f000 fad0 	bl	8001a08 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001468:	4804      	ldr	r0, [pc, #16]	; (800147c <MX_USART3_UART_Init+0x90>)
 800146a:	f006 fb82 	bl	8007b72 <HAL_UARTEx_DisableFifoMode>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001474:	f000 fac8 	bl	8001a08 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001478:	bf00      	nop
 800147a:	bd80      	pop	{r7, pc}
 800147c:	24000318 	.word	0x24000318
 8001480:	40004800 	.word	0x40004800

08001484 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001488:	bf00      	nop
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
	...

08001494 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b08c      	sub	sp, #48	; 0x30
 8001498:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800149a:	f107 031c 	add.w	r3, r7, #28
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	605a      	str	r2, [r3, #4]
 80014a4:	609a      	str	r2, [r3, #8]
 80014a6:	60da      	str	r2, [r3, #12]
 80014a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014aa:	4ba6      	ldr	r3, [pc, #664]	; (8001744 <MX_GPIO_Init+0x2b0>)
 80014ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014b0:	4aa4      	ldr	r2, [pc, #656]	; (8001744 <MX_GPIO_Init+0x2b0>)
 80014b2:	f043 0304 	orr.w	r3, r3, #4
 80014b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014ba:	4ba2      	ldr	r3, [pc, #648]	; (8001744 <MX_GPIO_Init+0x2b0>)
 80014bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014c0:	f003 0304 	and.w	r3, r3, #4
 80014c4:	61bb      	str	r3, [r7, #24]
 80014c6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014c8:	4b9e      	ldr	r3, [pc, #632]	; (8001744 <MX_GPIO_Init+0x2b0>)
 80014ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014ce:	4a9d      	ldr	r2, [pc, #628]	; (8001744 <MX_GPIO_Init+0x2b0>)
 80014d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014d8:	4b9a      	ldr	r3, [pc, #616]	; (8001744 <MX_GPIO_Init+0x2b0>)
 80014da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014e2:	617b      	str	r3, [r7, #20]
 80014e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e6:	4b97      	ldr	r3, [pc, #604]	; (8001744 <MX_GPIO_Init+0x2b0>)
 80014e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014ec:	4a95      	ldr	r2, [pc, #596]	; (8001744 <MX_GPIO_Init+0x2b0>)
 80014ee:	f043 0301 	orr.w	r3, r3, #1
 80014f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014f6:	4b93      	ldr	r3, [pc, #588]	; (8001744 <MX_GPIO_Init+0x2b0>)
 80014f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014fc:	f003 0301 	and.w	r3, r3, #1
 8001500:	613b      	str	r3, [r7, #16]
 8001502:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001504:	4b8f      	ldr	r3, [pc, #572]	; (8001744 <MX_GPIO_Init+0x2b0>)
 8001506:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800150a:	4a8e      	ldr	r2, [pc, #568]	; (8001744 <MX_GPIO_Init+0x2b0>)
 800150c:	f043 0302 	orr.w	r3, r3, #2
 8001510:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001514:	4b8b      	ldr	r3, [pc, #556]	; (8001744 <MX_GPIO_Init+0x2b0>)
 8001516:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001522:	4b88      	ldr	r3, [pc, #544]	; (8001744 <MX_GPIO_Init+0x2b0>)
 8001524:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001528:	4a86      	ldr	r2, [pc, #536]	; (8001744 <MX_GPIO_Init+0x2b0>)
 800152a:	f043 0308 	orr.w	r3, r3, #8
 800152e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001532:	4b84      	ldr	r3, [pc, #528]	; (8001744 <MX_GPIO_Init+0x2b0>)
 8001534:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001538:	f003 0308 	and.w	r3, r3, #8
 800153c:	60bb      	str	r3, [r7, #8]
 800153e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001540:	4b80      	ldr	r3, [pc, #512]	; (8001744 <MX_GPIO_Init+0x2b0>)
 8001542:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001546:	4a7f      	ldr	r2, [pc, #508]	; (8001744 <MX_GPIO_Init+0x2b0>)
 8001548:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800154c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001550:	4b7c      	ldr	r3, [pc, #496]	; (8001744 <MX_GPIO_Init+0x2b0>)
 8001552:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800155a:	607b      	str	r3, [r7, #4]
 800155c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800155e:	4b79      	ldr	r3, [pc, #484]	; (8001744 <MX_GPIO_Init+0x2b0>)
 8001560:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001564:	4a77      	ldr	r2, [pc, #476]	; (8001744 <MX_GPIO_Init+0x2b0>)
 8001566:	f043 0310 	orr.w	r3, r3, #16
 800156a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800156e:	4b75      	ldr	r3, [pc, #468]	; (8001744 <MX_GPIO_Init+0x2b0>)
 8001570:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001574:	f003 0310 	and.w	r3, r3, #16
 8001578:	603b      	str	r3, [r7, #0]
 800157a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, C0_Pin|C2_Pin, GPIO_PIN_RESET);
 800157c:	2200      	movs	r2, #0
 800157e:	2105      	movs	r1, #5
 8001580:	4871      	ldr	r0, [pc, #452]	; (8001748 <MX_GPIO_Init+0x2b4>)
 8001582:	f001 f893 	bl	80026ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8001586:	2200      	movs	r2, #0
 8001588:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800158c:	486f      	ldr	r0, [pc, #444]	; (800174c <MX_GPIO_Init+0x2b8>)
 800158e:	f001 f88d 	bl	80026ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001592:	2200      	movs	r2, #0
 8001594:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001598:	486d      	ldr	r0, [pc, #436]	; (8001750 <MX_GPIO_Init+0x2bc>)
 800159a:	f001 f887 	bl	80026ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 800159e:	2200      	movs	r2, #0
 80015a0:	2102      	movs	r1, #2
 80015a2:	486c      	ldr	r0, [pc, #432]	; (8001754 <MX_GPIO_Init+0x2c0>)
 80015a4:	f001 f882 	bl	80026ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : C13_Pin */
  GPIO_InitStruct.Pin = C13_Pin;
 80015a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015ae:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80015b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(C13_GPIO_Port, &GPIO_InitStruct);
 80015b8:	f107 031c 	add.w	r3, r7, #28
 80015bc:	4619      	mov	r1, r3
 80015be:	4862      	ldr	r0, [pc, #392]	; (8001748 <MX_GPIO_Init+0x2b4>)
 80015c0:	f000 fecc 	bl	800235c <HAL_GPIO_Init>

  /*Configure GPIO pins : C0_Pin C2_Pin */
  GPIO_InitStruct.Pin = C0_Pin|C2_Pin;
 80015c4:	2305      	movs	r3, #5
 80015c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c8:	2301      	movs	r3, #1
 80015ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015cc:	2300      	movs	r3, #0
 80015ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d0:	2300      	movs	r3, #0
 80015d2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015d4:	f107 031c 	add.w	r3, r7, #28
 80015d8:	4619      	mov	r1, r3
 80015da:	485b      	ldr	r0, [pc, #364]	; (8001748 <MX_GPIO_Init+0x2b4>)
 80015dc:	f000 febe 	bl	800235c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80015e0:	2332      	movs	r3, #50	; 0x32
 80015e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e4:	2302      	movs	r3, #2
 80015e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e8:	2300      	movs	r3, #0
 80015ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ec:	2300      	movs	r3, #0
 80015ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015f0:	230b      	movs	r3, #11
 80015f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015f4:	f107 031c 	add.w	r3, r7, #28
 80015f8:	4619      	mov	r1, r3
 80015fa:	4853      	ldr	r0, [pc, #332]	; (8001748 <MX_GPIO_Init+0x2b4>)
 80015fc:	f000 feae 	bl	800235c <HAL_GPIO_Init>

  /*Configure GPIO pin : C3_Pin */
  GPIO_InitStruct.Pin = C3_Pin;
 8001600:	2308      	movs	r3, #8
 8001602:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001604:	2300      	movs	r3, #0
 8001606:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001608:	2300      	movs	r3, #0
 800160a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(C3_GPIO_Port, &GPIO_InitStruct);
 800160c:	f107 031c 	add.w	r3, r7, #28
 8001610:	4619      	mov	r1, r3
 8001612:	484d      	ldr	r0, [pc, #308]	; (8001748 <MX_GPIO_Init+0x2b4>)
 8001614:	f000 fea2 	bl	800235c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001618:	2384      	movs	r3, #132	; 0x84
 800161a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161c:	2302      	movs	r3, #2
 800161e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001624:	2300      	movs	r3, #0
 8001626:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001628:	230b      	movs	r3, #11
 800162a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800162c:	f107 031c 	add.w	r3, r7, #28
 8001630:	4619      	mov	r1, r3
 8001632:	4849      	ldr	r0, [pc, #292]	; (8001758 <MX_GPIO_Init+0x2c4>)
 8001634:	f000 fe92 	bl	800235c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001638:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800163c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163e:	2302      	movs	r3, #2
 8001640:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001642:	2300      	movs	r3, #0
 8001644:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001646:	2300      	movs	r3, #0
 8001648:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800164a:	230b      	movs	r3, #11
 800164c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800164e:	f107 031c 	add.w	r3, r7, #28
 8001652:	4619      	mov	r1, r3
 8001654:	483d      	ldr	r0, [pc, #244]	; (800174c <MX_GPIO_Init+0x2b8>)
 8001656:	f000 fe81 	bl	800235c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 800165a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800165e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001660:	2301      	movs	r3, #1
 8001662:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001664:	2300      	movs	r3, #0
 8001666:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001668:	2300      	movs	r3, #0
 800166a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 800166c:	f107 031c 	add.w	r3, r7, #28
 8001670:	4619      	mov	r1, r3
 8001672:	4836      	ldr	r0, [pc, #216]	; (800174c <MX_GPIO_Init+0x2b8>)
 8001674:	f000 fe72 	bl	800235c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8001678:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800167c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800167e:	2301      	movs	r3, #1
 8001680:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001682:	2300      	movs	r3, #0
 8001684:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001686:	2300      	movs	r3, #0
 8001688:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800168a:	f107 031c 	add.w	r3, r7, #28
 800168e:	4619      	mov	r1, r3
 8001690:	482f      	ldr	r0, [pc, #188]	; (8001750 <MX_GPIO_Init+0x2bc>)
 8001692:	f000 fe63 	bl	800235c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8001696:	2380      	movs	r3, #128	; 0x80
 8001698:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800169a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800169e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a0:	2300      	movs	r3, #0
 80016a2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80016a4:	f107 031c 	add.w	r3, r7, #28
 80016a8:	4619      	mov	r1, r3
 80016aa:	482c      	ldr	r0, [pc, #176]	; (800175c <MX_GPIO_Init+0x2c8>)
 80016ac:	f000 fe56 	bl	800235c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 80016b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016b6:	2300      	movs	r3, #0
 80016b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ba:	2300      	movs	r3, #0
 80016bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80016be:	f107 031c 	add.w	r3, r7, #28
 80016c2:	4619      	mov	r1, r3
 80016c4:	4824      	ldr	r0, [pc, #144]	; (8001758 <MX_GPIO_Init+0x2c4>)
 80016c6:	f000 fe49 	bl	800235c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 80016ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d0:	2302      	movs	r3, #2
 80016d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d4:	2300      	movs	r3, #0
 80016d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d8:	2300      	movs	r3, #0
 80016da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 80016dc:	230a      	movs	r3, #10
 80016de:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 80016e0:	f107 031c 	add.w	r3, r7, #28
 80016e4:	4619      	mov	r1, r3
 80016e6:	481c      	ldr	r0, [pc, #112]	; (8001758 <MX_GPIO_Init+0x2c4>)
 80016e8:	f000 fe38 	bl	800235c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80016ec:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80016f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f2:	2302      	movs	r3, #2
 80016f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f6:	2300      	movs	r3, #0
 80016f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fa:	2300      	movs	r3, #0
 80016fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80016fe:	230b      	movs	r3, #11
 8001700:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001702:	f107 031c 	add.w	r3, r7, #28
 8001706:	4619      	mov	r1, r3
 8001708:	4814      	ldr	r0, [pc, #80]	; (800175c <MX_GPIO_Init+0x2c8>)
 800170a:	f000 fe27 	bl	800235c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 800170e:	2302      	movs	r3, #2
 8001710:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001712:	2301      	movs	r3, #1
 8001714:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001716:	2300      	movs	r3, #0
 8001718:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171a:	2300      	movs	r3, #0
 800171c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 800171e:	f107 031c 	add.w	r3, r7, #28
 8001722:	4619      	mov	r1, r3
 8001724:	480b      	ldr	r0, [pc, #44]	; (8001754 <MX_GPIO_Init+0x2c0>)
 8001726:	f000 fe19 	bl	800235c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800172a:	2200      	movs	r2, #0
 800172c:	2100      	movs	r1, #0
 800172e:	2028      	movs	r0, #40	; 0x28
 8001730:	f000 fddf 	bl	80022f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001734:	2028      	movs	r0, #40	; 0x28
 8001736:	f000 fdf6 	bl	8002326 <HAL_NVIC_EnableIRQ>

}
 800173a:	bf00      	nop
 800173c:	3730      	adds	r7, #48	; 0x30
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	58024400 	.word	0x58024400
 8001748:	58020800 	.word	0x58020800
 800174c:	58020400 	.word	0x58020400
 8001750:	58020c00 	.word	0x58020c00
 8001754:	58021000 	.word	0x58021000
 8001758:	58020000 	.word	0x58020000
 800175c:	58021800 	.word	0x58021800

08001760 <speed_aq>:

/* USER CODE BEGIN 4 */

float speed_aq (void)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
	  while(! (__HAL_TIM_GET_FLAG(&htim8,TIM_FLAG_CC3))) {}
 8001766:	bf00      	nop
 8001768:	4b19      	ldr	r3, [pc, #100]	; (80017d0 <speed_aq+0x70>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	691b      	ldr	r3, [r3, #16]
 800176e:	f003 0308 	and.w	r3, r3, #8
 8001772:	2b08      	cmp	r3, #8
 8001774:	d1f8      	bne.n	8001768 <speed_aq+0x8>
	  CCR_new = __HAL_TIM_GET_COMPARE(&htim8,TIM_CHANNEL_3);
 8001776:	4b16      	ldr	r3, [pc, #88]	; (80017d0 <speed_aq+0x70>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800177c:	461a      	mov	r2, r3
 800177e:	4b15      	ldr	r3, [pc, #84]	; (80017d4 <speed_aq+0x74>)
 8001780:	601a      	str	r2, [r3, #0]
	  int diff = CCR_new - CCR_old;
 8001782:	4b14      	ldr	r3, [pc, #80]	; (80017d4 <speed_aq+0x74>)
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	4b14      	ldr	r3, [pc, #80]	; (80017d8 <speed_aq+0x78>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	607b      	str	r3, [r7, #4]
	  CCR_old = CCR_new;
 800178e:	4b11      	ldr	r3, [pc, #68]	; (80017d4 <speed_aq+0x74>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a11      	ldr	r2, [pc, #68]	; (80017d8 <speed_aq+0x78>)
 8001794:	6013      	str	r3, [r2, #0]
	  speed = 154.2746392/ diff; // Rad/s
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	ee07 3a90 	vmov	s15, r3
 800179c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80017a0:	ed9f 5b09 	vldr	d5, [pc, #36]	; 80017c8 <speed_aq+0x68>
 80017a4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80017a8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80017ac:	4b0b      	ldr	r3, [pc, #44]	; (80017dc <speed_aq+0x7c>)
 80017ae:	edc3 7a00 	vstr	s15, [r3]
		//143.320208327- PPR 1205.6
		// 127.0497029 - PPR 1360
		//154.2746392 - PPR 1120
	  return (speed);
 80017b2:	4b0a      	ldr	r3, [pc, #40]	; (80017dc <speed_aq+0x7c>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	ee07 3a90 	vmov	s15, r3
}
 80017ba:	eeb0 0a67 	vmov.f32	s0, s15
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	d825c663 	.word	0xd825c663
 80017cc:	406348c9 	.word	0x406348c9
 80017d0:	24000234 	.word	0x24000234
 80017d4:	240003c8 	.word	0x240003c8
 80017d8:	240003c4 	.word	0x240003c4
 80017dc:	240003ac 	.word	0x240003ac

080017e0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	ed2d 8b02 	vpush	{d8}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
	if (t >= sysorder)
 80017ec:	4b7a      	ldr	r3, [pc, #488]	; (80019d8 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	4b7a      	ldr	r3, [pc, #488]	; (80019dc <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	db0d      	blt.n	8001814 <HAL_TIM_PeriodElapsedCallback+0x34>
	{

		teta_calc (Xk , speed , 0.9995 , sysorder);
 80017f8:	4b79      	ldr	r3, [pc, #484]	; (80019e0 <HAL_TIM_PeriodElapsedCallback+0x200>)
 80017fa:	edd3 7a00 	vldr	s15, [r3]
 80017fe:	4b77      	ldr	r3, [pc, #476]	; (80019dc <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4978      	ldr	r1, [pc, #480]	; (80019e4 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001804:	461a      	mov	r2, r3
 8001806:	eddf 0a78 	vldr	s1, [pc, #480]	; 80019e8 <HAL_TIM_PeriodElapsedCallback+0x208>
 800180a:	eeb0 0a67 	vmov.f32	s0, s15
 800180e:	c903      	ldmia	r1, {r0, r1}
 8001810:	f7ff f91c 	bl	8000a4c <teta_calc>
	}
	update_X (X , input_val,speed , sysorder);
 8001814:	4b75      	ldr	r3, [pc, #468]	; (80019ec <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a75      	ldr	r2, [pc, #468]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x210>)
 800181a:	edd2 7a00 	vldr	s15, [r2]
 800181e:	4a70      	ldr	r2, [pc, #448]	; (80019e0 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001820:	ed92 7a00 	vldr	s14, [r2]
 8001824:	4a6d      	ldr	r2, [pc, #436]	; (80019dc <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001826:	6812      	ldr	r2, [r2, #0]
 8001828:	4611      	mov	r1, r2
 800182a:	eef0 0a47 	vmov.f32	s1, s14
 800182e:	eeb0 0a67 	vmov.f32	s0, s15
 8001832:	4618      	mov	r0, r3
 8001834:	f7ff fa04 	bl	8000c40 <update_X>

	t++;
 8001838:	4b67      	ldr	r3, [pc, #412]	; (80019d8 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	3301      	adds	r3, #1
 800183e:	4a66      	ldr	r2, [pc, #408]	; (80019d8 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001840:	6013      	str	r3, [r2, #0]
	DutyC =  (((2.2*sin(3.123*(double)(t/Fe)) + 2.3)/4.9) + ((1.7*sin(5.73*(double)(t/Fe)) + 1.8)/3.5) + ((1.4*sin(2.39*(double)(t/Fe)) + 1.4)/2.8))/3;
 8001842:	4b65      	ldr	r3, [pc, #404]	; (80019d8 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	ee07 3a90 	vmov	s15, r3
 800184a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800184e:	4b69      	ldr	r3, [pc, #420]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8001850:	ed93 7a00 	vldr	s14, [r3]
 8001854:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001858:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800185c:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 8001988 <HAL_TIM_PeriodElapsedCallback+0x1a8>
 8001860:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001864:	eeb0 0b47 	vmov.f64	d0, d7
 8001868:	f007 f81a 	bl	80088a0 <sin>
 800186c:	eeb0 7b40 	vmov.f64	d7, d0
 8001870:	ed9f 6b47 	vldr	d6, [pc, #284]	; 8001990 <HAL_TIM_PeriodElapsedCallback+0x1b0>
 8001874:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001878:	ed9f 6b47 	vldr	d6, [pc, #284]	; 8001998 <HAL_TIM_PeriodElapsedCallback+0x1b8>
 800187c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001880:	ed9f 6b47 	vldr	d6, [pc, #284]	; 80019a0 <HAL_TIM_PeriodElapsedCallback+0x1c0>
 8001884:	ee87 8b06 	vdiv.f64	d8, d7, d6
 8001888:	4b53      	ldr	r3, [pc, #332]	; (80019d8 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	ee07 3a90 	vmov	s15, r3
 8001890:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001894:	4b57      	ldr	r3, [pc, #348]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8001896:	ed93 7a00 	vldr	s14, [r3]
 800189a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800189e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80018a2:	ed9f 6b41 	vldr	d6, [pc, #260]	; 80019a8 <HAL_TIM_PeriodElapsedCallback+0x1c8>
 80018a6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80018aa:	eeb0 0b47 	vmov.f64	d0, d7
 80018ae:	f006 fff7 	bl	80088a0 <sin>
 80018b2:	eeb0 7b40 	vmov.f64	d7, d0
 80018b6:	ed9f 6b3e 	vldr	d6, [pc, #248]	; 80019b0 <HAL_TIM_PeriodElapsedCallback+0x1d0>
 80018ba:	ee27 7b06 	vmul.f64	d7, d7, d6
 80018be:	ed9f 6b3e 	vldr	d6, [pc, #248]	; 80019b8 <HAL_TIM_PeriodElapsedCallback+0x1d8>
 80018c2:	ee37 6b06 	vadd.f64	d6, d7, d6
 80018c6:	eeb0 5b0c 	vmov.f64	d5, #12	; 0x40600000  3.5
 80018ca:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80018ce:	ee38 8b07 	vadd.f64	d8, d8, d7
 80018d2:	4b41      	ldr	r3, [pc, #260]	; (80019d8 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	ee07 3a90 	vmov	s15, r3
 80018da:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80018de:	4b45      	ldr	r3, [pc, #276]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x214>)
 80018e0:	ed93 7a00 	vldr	s14, [r3]
 80018e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018e8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80018ec:	ed9f 6b34 	vldr	d6, [pc, #208]	; 80019c0 <HAL_TIM_PeriodElapsedCallback+0x1e0>
 80018f0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80018f4:	eeb0 0b47 	vmov.f64	d0, d7
 80018f8:	f006 ffd2 	bl	80088a0 <sin>
 80018fc:	eeb0 7b40 	vmov.f64	d7, d0
 8001900:	ed9f 6b31 	vldr	d6, [pc, #196]	; 80019c8 <HAL_TIM_PeriodElapsedCallback+0x1e8>
 8001904:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001908:	ed9f 6b2f 	vldr	d6, [pc, #188]	; 80019c8 <HAL_TIM_PeriodElapsedCallback+0x1e8>
 800190c:	ee37 6b06 	vadd.f64	d6, d7, d6
 8001910:	ed9f 5b2f 	vldr	d5, [pc, #188]	; 80019d0 <HAL_TIM_PeriodElapsedCallback+0x1f0>
 8001914:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001918:	ee38 6b07 	vadd.f64	d6, d8, d7
 800191c:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8001920:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001924:	4b34      	ldr	r3, [pc, #208]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001926:	ed83 7b00 	vstr	d7, [r3]

	input_val =  DutyC * 12 ;
 800192a:	4b33      	ldr	r3, [pc, #204]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x218>)
 800192c:	ed93 7b00 	vldr	d7, [r3]
 8001930:	eeb2 6b08 	vmov.f64	d6, #40	; 0x41400000  12.0
 8001934:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001938:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800193c:	4b2c      	ldr	r3, [pc, #176]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x210>)
 800193e:	edc3 7a00 	vstr	s15, [r3]
	ccr_reg = (int) round ( DutyC * ARR ) ;
 8001942:	4b2e      	ldr	r3, [pc, #184]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	ee07 3a90 	vmov	s15, r3
 800194a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800194e:	4b2a      	ldr	r3, [pc, #168]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001950:	ed93 7b00 	vldr	d7, [r3]
 8001954:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001958:	eeb0 0b47 	vmov.f64	d0, d7
 800195c:	f006 ff5a 	bl	8008814 <round>
 8001960:	eeb0 7b40 	vmov.f64	d7, d0
 8001964:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001968:	ee17 2a90 	vmov	r2, s15
 800196c:	4b24      	ldr	r3, [pc, #144]	; (8001a00 <HAL_TIM_PeriodElapsedCallback+0x220>)
 800196e:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4, ccr_reg);
 8001970:	4b23      	ldr	r3, [pc, #140]	; (8001a00 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	4b23      	ldr	r3, [pc, #140]	; (8001a04 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	641a      	str	r2, [r3, #64]	; 0x40





}
 800197a:	bf00      	nop
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	ecbd 8b02 	vpop	{d8}
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	6c8b4396 	.word	0x6c8b4396
 800198c:	4008fbe7 	.word	0x4008fbe7
 8001990:	9999999a 	.word	0x9999999a
 8001994:	40019999 	.word	0x40019999
 8001998:	66666666 	.word	0x66666666
 800199c:	40026666 	.word	0x40026666
 80019a0:	9999999a 	.word	0x9999999a
 80019a4:	40139999 	.word	0x40139999
 80019a8:	1eb851ec 	.word	0x1eb851ec
 80019ac:	4016eb85 	.word	0x4016eb85
 80019b0:	33333333 	.word	0x33333333
 80019b4:	3ffb3333 	.word	0x3ffb3333
 80019b8:	cccccccd 	.word	0xcccccccd
 80019bc:	3ffccccc 	.word	0x3ffccccc
 80019c0:	51eb851f 	.word	0x51eb851f
 80019c4:	40031eb8 	.word	0x40031eb8
 80019c8:	66666666 	.word	0x66666666
 80019cc:	3ff66666 	.word	0x3ff66666
 80019d0:	66666666 	.word	0x66666666
 80019d4:	40066666 	.word	0x40066666
 80019d8:	240003a8 	.word	0x240003a8
 80019dc:	24000000 	.word	0x24000000
 80019e0:	240003ac 	.word	0x240003ac
 80019e4:	240000a4 	.word	0x240000a4
 80019e8:	3f7fdf3b 	.word	0x3f7fdf3b
 80019ec:	240003d0 	.word	0x240003d0
 80019f0:	240003b0 	.word	0x240003b0
 80019f4:	24000004 	.word	0x24000004
 80019f8:	240003b8 	.word	0x240003b8
 80019fc:	24000008 	.word	0x24000008
 8001a00:	240003c0 	.word	0x240003c0
 8001a04:	2400019c 	.word	0x2400019c

08001a08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a0c:	b672      	cpsid	i
}
 8001a0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a10:	e7fe      	b.n	8001a10 <Error_Handler+0x8>
	...

08001a14 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a1a:	4b0a      	ldr	r3, [pc, #40]	; (8001a44 <HAL_MspInit+0x30>)
 8001a1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001a20:	4a08      	ldr	r2, [pc, #32]	; (8001a44 <HAL_MspInit+0x30>)
 8001a22:	f043 0302 	orr.w	r3, r3, #2
 8001a26:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001a2a:	4b06      	ldr	r3, [pc, #24]	; (8001a44 <HAL_MspInit+0x30>)
 8001a2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001a30:	f003 0302 	and.w	r3, r3, #2
 8001a34:	607b      	str	r3, [r7, #4]
 8001a36:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a38:	bf00      	nop
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr
 8001a44:	58024400 	.word	0x58024400

08001a48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b08e      	sub	sp, #56	; 0x38
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	605a      	str	r2, [r3, #4]
 8001a5a:	609a      	str	r2, [r3, #8]
 8001a5c:	60da      	str	r2, [r3, #12]
 8001a5e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a68:	d117      	bne.n	8001a9a <HAL_TIM_Base_MspInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a6a:	4b5a      	ldr	r3, [pc, #360]	; (8001bd4 <HAL_TIM_Base_MspInit+0x18c>)
 8001a6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a70:	4a58      	ldr	r2, [pc, #352]	; (8001bd4 <HAL_TIM_Base_MspInit+0x18c>)
 8001a72:	f043 0301 	orr.w	r3, r3, #1
 8001a76:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001a7a:	4b56      	ldr	r3, [pc, #344]	; (8001bd4 <HAL_TIM_Base_MspInit+0x18c>)
 8001a7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a80:	f003 0301 	and.w	r3, r3, #1
 8001a84:	623b      	str	r3, [r7, #32]
 8001a86:	6a3b      	ldr	r3, [r7, #32]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a88:	2200      	movs	r2, #0
 8001a8a:	2100      	movs	r1, #0
 8001a8c:	201c      	movs	r0, #28
 8001a8e:	f000 fc30 	bl	80022f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a92:	201c      	movs	r0, #28
 8001a94:	f000 fc47 	bl	8002326 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM24_MspInit 1 */

  /* USER CODE END TIM24_MspInit 1 */
  }

}
 8001a98:	e097      	b.n	8001bca <HAL_TIM_Base_MspInit+0x182>
  else if(htim_base->Instance==TIM4)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a4e      	ldr	r2, [pc, #312]	; (8001bd8 <HAL_TIM_Base_MspInit+0x190>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d10f      	bne.n	8001ac4 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001aa4:	4b4b      	ldr	r3, [pc, #300]	; (8001bd4 <HAL_TIM_Base_MspInit+0x18c>)
 8001aa6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001aaa:	4a4a      	ldr	r2, [pc, #296]	; (8001bd4 <HAL_TIM_Base_MspInit+0x18c>)
 8001aac:	f043 0304 	orr.w	r3, r3, #4
 8001ab0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001ab4:	4b47      	ldr	r3, [pc, #284]	; (8001bd4 <HAL_TIM_Base_MspInit+0x18c>)
 8001ab6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001aba:	f003 0304 	and.w	r3, r3, #4
 8001abe:	61fb      	str	r3, [r7, #28]
 8001ac0:	69fb      	ldr	r3, [r7, #28]
}
 8001ac2:	e082      	b.n	8001bca <HAL_TIM_Base_MspInit+0x182>
  else if(htim_base->Instance==TIM5)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a44      	ldr	r2, [pc, #272]	; (8001bdc <HAL_TIM_Base_MspInit+0x194>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d10f      	bne.n	8001aee <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001ace:	4b41      	ldr	r3, [pc, #260]	; (8001bd4 <HAL_TIM_Base_MspInit+0x18c>)
 8001ad0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ad4:	4a3f      	ldr	r2, [pc, #252]	; (8001bd4 <HAL_TIM_Base_MspInit+0x18c>)
 8001ad6:	f043 0308 	orr.w	r3, r3, #8
 8001ada:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001ade:	4b3d      	ldr	r3, [pc, #244]	; (8001bd4 <HAL_TIM_Base_MspInit+0x18c>)
 8001ae0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ae4:	f003 0308 	and.w	r3, r3, #8
 8001ae8:	61bb      	str	r3, [r7, #24]
 8001aea:	69bb      	ldr	r3, [r7, #24]
}
 8001aec:	e06d      	b.n	8001bca <HAL_TIM_Base_MspInit+0x182>
  else if(htim_base->Instance==TIM8)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a3b      	ldr	r2, [pc, #236]	; (8001be0 <HAL_TIM_Base_MspInit+0x198>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d12f      	bne.n	8001b58 <HAL_TIM_Base_MspInit+0x110>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001af8:	4b36      	ldr	r3, [pc, #216]	; (8001bd4 <HAL_TIM_Base_MspInit+0x18c>)
 8001afa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001afe:	4a35      	ldr	r2, [pc, #212]	; (8001bd4 <HAL_TIM_Base_MspInit+0x18c>)
 8001b00:	f043 0302 	orr.w	r3, r3, #2
 8001b04:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001b08:	4b32      	ldr	r3, [pc, #200]	; (8001bd4 <HAL_TIM_Base_MspInit+0x18c>)
 8001b0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b0e:	f003 0302 	and.w	r3, r3, #2
 8001b12:	617b      	str	r3, [r7, #20]
 8001b14:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b16:	4b2f      	ldr	r3, [pc, #188]	; (8001bd4 <HAL_TIM_Base_MspInit+0x18c>)
 8001b18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b1c:	4a2d      	ldr	r2, [pc, #180]	; (8001bd4 <HAL_TIM_Base_MspInit+0x18c>)
 8001b1e:	f043 0304 	orr.w	r3, r3, #4
 8001b22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b26:	4b2b      	ldr	r3, [pc, #172]	; (8001bd4 <HAL_TIM_Base_MspInit+0x18c>)
 8001b28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b2c:	f003 0304 	and.w	r3, r3, #4
 8001b30:	613b      	str	r3, [r7, #16]
 8001b32:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001b34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b42:	2300      	movs	r3, #0
 8001b44:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001b46:	2303      	movs	r3, #3
 8001b48:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b4e:	4619      	mov	r1, r3
 8001b50:	4824      	ldr	r0, [pc, #144]	; (8001be4 <HAL_TIM_Base_MspInit+0x19c>)
 8001b52:	f000 fc03 	bl	800235c <HAL_GPIO_Init>
}
 8001b56:	e038      	b.n	8001bca <HAL_TIM_Base_MspInit+0x182>
  else if(htim_base->Instance==TIM23)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a22      	ldr	r2, [pc, #136]	; (8001be8 <HAL_TIM_Base_MspInit+0x1a0>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d117      	bne.n	8001b92 <HAL_TIM_Base_MspInit+0x14a>
    __HAL_RCC_TIM23_CLK_ENABLE();
 8001b62:	4b1c      	ldr	r3, [pc, #112]	; (8001bd4 <HAL_TIM_Base_MspInit+0x18c>)
 8001b64:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001b68:	4a1a      	ldr	r2, [pc, #104]	; (8001bd4 <HAL_TIM_Base_MspInit+0x18c>)
 8001b6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b6e:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001b72:	4b18      	ldr	r3, [pc, #96]	; (8001bd4 <HAL_TIM_Base_MspInit+0x18c>)
 8001b74:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001b78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b7c:	60fb      	str	r3, [r7, #12]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM23_IRQn, 0, 0);
 8001b80:	2200      	movs	r2, #0
 8001b82:	2100      	movs	r1, #0
 8001b84:	20a1      	movs	r0, #161	; 0xa1
 8001b86:	f000 fbb4 	bl	80022f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM23_IRQn);
 8001b8a:	20a1      	movs	r0, #161	; 0xa1
 8001b8c:	f000 fbcb 	bl	8002326 <HAL_NVIC_EnableIRQ>
}
 8001b90:	e01b      	b.n	8001bca <HAL_TIM_Base_MspInit+0x182>
  else if(htim_base->Instance==TIM24)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a15      	ldr	r2, [pc, #84]	; (8001bec <HAL_TIM_Base_MspInit+0x1a4>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d116      	bne.n	8001bca <HAL_TIM_Base_MspInit+0x182>
    __HAL_RCC_TIM24_CLK_ENABLE();
 8001b9c:	4b0d      	ldr	r3, [pc, #52]	; (8001bd4 <HAL_TIM_Base_MspInit+0x18c>)
 8001b9e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001ba2:	4a0c      	ldr	r2, [pc, #48]	; (8001bd4 <HAL_TIM_Base_MspInit+0x18c>)
 8001ba4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ba8:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001bac:	4b09      	ldr	r3, [pc, #36]	; (8001bd4 <HAL_TIM_Base_MspInit+0x18c>)
 8001bae:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bb6:	60bb      	str	r3, [r7, #8]
 8001bb8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM24_IRQn, 0, 0);
 8001bba:	2200      	movs	r2, #0
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	20a2      	movs	r0, #162	; 0xa2
 8001bc0:	f000 fb97 	bl	80022f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM24_IRQn);
 8001bc4:	20a2      	movs	r0, #162	; 0xa2
 8001bc6:	f000 fbae 	bl	8002326 <HAL_NVIC_EnableIRQ>
}
 8001bca:	bf00      	nop
 8001bcc:	3738      	adds	r7, #56	; 0x38
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	58024400 	.word	0x58024400
 8001bd8:	40000800 	.word	0x40000800
 8001bdc:	40000c00 	.word	0x40000c00
 8001be0:	40010400 	.word	0x40010400
 8001be4:	58020800 	.word	0x58020800
 8001be8:	4000e000 	.word	0x4000e000
 8001bec:	4000e400 	.word	0x4000e400

08001bf0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b08a      	sub	sp, #40	; 0x28
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf8:	f107 0314 	add.w	r3, r7, #20
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	605a      	str	r2, [r3, #4]
 8001c02:	609a      	str	r2, [r3, #8]
 8001c04:	60da      	str	r2, [r3, #12]
 8001c06:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a1a      	ldr	r2, [pc, #104]	; (8001c78 <HAL_TIM_Encoder_MspInit+0x88>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d12d      	bne.n	8001c6e <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c12:	4b1a      	ldr	r3, [pc, #104]	; (8001c7c <HAL_TIM_Encoder_MspInit+0x8c>)
 8001c14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c18:	4a18      	ldr	r2, [pc, #96]	; (8001c7c <HAL_TIM_Encoder_MspInit+0x8c>)
 8001c1a:	f043 0302 	orr.w	r3, r3, #2
 8001c1e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001c22:	4b16      	ldr	r3, [pc, #88]	; (8001c7c <HAL_TIM_Encoder_MspInit+0x8c>)
 8001c24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c28:	f003 0302 	and.w	r3, r3, #2
 8001c2c:	613b      	str	r3, [r7, #16]
 8001c2e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c30:	4b12      	ldr	r3, [pc, #72]	; (8001c7c <HAL_TIM_Encoder_MspInit+0x8c>)
 8001c32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c36:	4a11      	ldr	r2, [pc, #68]	; (8001c7c <HAL_TIM_Encoder_MspInit+0x8c>)
 8001c38:	f043 0302 	orr.w	r3, r3, #2
 8001c3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c40:	4b0e      	ldr	r3, [pc, #56]	; (8001c7c <HAL_TIM_Encoder_MspInit+0x8c>)
 8001c42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c46:	f003 0302 	and.w	r3, r3, #2
 8001c4a:	60fb      	str	r3, [r7, #12]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4(NJTRST)     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001c4e:	2330      	movs	r3, #48	; 0x30
 8001c50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c52:	2302      	movs	r3, #2
 8001c54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c56:	2300      	movs	r3, #0
 8001c58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c5e:	2302      	movs	r3, #2
 8001c60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c62:	f107 0314 	add.w	r3, r7, #20
 8001c66:	4619      	mov	r1, r3
 8001c68:	4805      	ldr	r0, [pc, #20]	; (8001c80 <HAL_TIM_Encoder_MspInit+0x90>)
 8001c6a:	f000 fb77 	bl	800235c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001c6e:	bf00      	nop
 8001c70:	3728      	adds	r7, #40	; 0x28
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	40000400 	.word	0x40000400
 8001c7c:	58024400 	.word	0x58024400
 8001c80:	58020400 	.word	0x58020400

08001c84 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b088      	sub	sp, #32
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c8c:	f107 030c 	add.w	r3, r7, #12
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]
 8001c94:	605a      	str	r2, [r3, #4]
 8001c96:	609a      	str	r2, [r3, #8]
 8001c98:	60da      	str	r2, [r3, #12]
 8001c9a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a13      	ldr	r2, [pc, #76]	; (8001cf0 <HAL_TIM_MspPostInit+0x6c>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d11f      	bne.n	8001ce6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ca6:	4b13      	ldr	r3, [pc, #76]	; (8001cf4 <HAL_TIM_MspPostInit+0x70>)
 8001ca8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cac:	4a11      	ldr	r2, [pc, #68]	; (8001cf4 <HAL_TIM_MspPostInit+0x70>)
 8001cae:	f043 0308 	orr.w	r3, r3, #8
 8001cb2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cb6:	4b0f      	ldr	r3, [pc, #60]	; (8001cf4 <HAL_TIM_MspPostInit+0x70>)
 8001cb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cbc:	f003 0308 	and.w	r3, r3, #8
 8001cc0:	60bb      	str	r3, [r7, #8]
 8001cc2:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001cc4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001cc8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cca:	2302      	movs	r3, #2
 8001ccc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cda:	f107 030c 	add.w	r3, r7, #12
 8001cde:	4619      	mov	r1, r3
 8001ce0:	4805      	ldr	r0, [pc, #20]	; (8001cf8 <HAL_TIM_MspPostInit+0x74>)
 8001ce2:	f000 fb3b 	bl	800235c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001ce6:	bf00      	nop
 8001ce8:	3720      	adds	r7, #32
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	40000800 	.word	0x40000800
 8001cf4:	58024400 	.word	0x58024400
 8001cf8:	58020c00 	.word	0x58020c00

08001cfc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b0b6      	sub	sp, #216	; 0xd8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d04:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	605a      	str	r2, [r3, #4]
 8001d0e:	609a      	str	r2, [r3, #8]
 8001d10:	60da      	str	r2, [r3, #12]
 8001d12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d14:	f107 0310 	add.w	r3, r7, #16
 8001d18:	22b4      	movs	r2, #180	; 0xb4
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f006 fa37 	bl	8008190 <memset>
  if(huart->Instance==USART3)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a25      	ldr	r2, [pc, #148]	; (8001dbc <HAL_UART_MspInit+0xc0>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d142      	bne.n	8001db2 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001d30:	2300      	movs	r3, #0
 8001d32:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d36:	f107 0310 	add.w	r3, r7, #16
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f001 fc68 	bl	8003610 <HAL_RCCEx_PeriphCLKConfig>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001d46:	f7ff fe5f 	bl	8001a08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d4a:	4b1d      	ldr	r3, [pc, #116]	; (8001dc0 <HAL_UART_MspInit+0xc4>)
 8001d4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d50:	4a1b      	ldr	r2, [pc, #108]	; (8001dc0 <HAL_UART_MspInit+0xc4>)
 8001d52:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d56:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001d5a:	4b19      	ldr	r3, [pc, #100]	; (8001dc0 <HAL_UART_MspInit+0xc4>)
 8001d5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d64:	60fb      	str	r3, [r7, #12]
 8001d66:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d68:	4b15      	ldr	r3, [pc, #84]	; (8001dc0 <HAL_UART_MspInit+0xc4>)
 8001d6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d6e:	4a14      	ldr	r2, [pc, #80]	; (8001dc0 <HAL_UART_MspInit+0xc4>)
 8001d70:	f043 0308 	orr.w	r3, r3, #8
 8001d74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d78:	4b11      	ldr	r3, [pc, #68]	; (8001dc0 <HAL_UART_MspInit+0xc4>)
 8001d7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d7e:	f003 0308 	and.w	r3, r3, #8
 8001d82:	60bb      	str	r3, [r7, #8]
 8001d84:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8001d86:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d8a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8e:	2302      	movs	r3, #2
 8001d90:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d94:	2300      	movs	r3, #0
 8001d96:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001da0:	2307      	movs	r3, #7
 8001da2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001da6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001daa:	4619      	mov	r1, r3
 8001dac:	4805      	ldr	r0, [pc, #20]	; (8001dc4 <HAL_UART_MspInit+0xc8>)
 8001dae:	f000 fad5 	bl	800235c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001db2:	bf00      	nop
 8001db4:	37d8      	adds	r7, #216	; 0xd8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	40004800 	.word	0x40004800
 8001dc0:	58024400 	.word	0x58024400
 8001dc4:	58020c00 	.word	0x58020c00

08001dc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dcc:	e7fe      	b.n	8001dcc <NMI_Handler+0x4>

08001dce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dd2:	e7fe      	b.n	8001dd2 <HardFault_Handler+0x4>

08001dd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dd8:	e7fe      	b.n	8001dd8 <MemManage_Handler+0x4>

08001dda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dde:	e7fe      	b.n	8001dde <BusFault_Handler+0x4>

08001de0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001de4:	e7fe      	b.n	8001de4 <UsageFault_Handler+0x4>

08001de6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001de6:	b480      	push	{r7}
 8001de8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dea:	bf00      	nop
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001df8:	bf00      	nop
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr

08001e02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e02:	b480      	push	{r7}
 8001e04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e06:	bf00      	nop
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e14:	f000 f972 	bl	80020fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e18:	bf00      	nop
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001e20:	4802      	ldr	r0, [pc, #8]	; (8001e2c <TIM2_IRQHandler+0x10>)
 8001e22:	f003 fc15 	bl	8005650 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001e26:	bf00      	nop
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	24000104 	.word	0x24000104

08001e30 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001e34:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001e38:	f000 fc51 	bl	80026de <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001e3c:	bf00      	nop
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <TIM23_IRQHandler>:

/**
  * @brief This function handles TIM23 global interrupt.
  */
void TIM23_IRQHandler(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM23_IRQn 0 */

  /* USER CODE END TIM23_IRQn 0 */
  HAL_TIM_IRQHandler(&htim23);
 8001e44:	4802      	ldr	r0, [pc, #8]	; (8001e50 <TIM23_IRQHandler+0x10>)
 8001e46:	f003 fc03 	bl	8005650 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM23_IRQn 1 */

  /* USER CODE END TIM23_IRQn 1 */
}
 8001e4a:	bf00      	nop
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	24000280 	.word	0x24000280

08001e54 <TIM24_IRQHandler>:

/**
  * @brief This function handles TIM24 global interrupt.
  */
void TIM24_IRQHandler(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM24_IRQn 0 */

  /* USER CODE END TIM24_IRQn 0 */
  HAL_TIM_IRQHandler(&htim24);
 8001e58:	4802      	ldr	r0, [pc, #8]	; (8001e64 <TIM24_IRQHandler+0x10>)
 8001e5a:	f003 fbf9 	bl	8005650 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM24_IRQn 1 */

  /* USER CODE END TIM24_IRQn 1 */
}
 8001e5e:	bf00      	nop
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	240002cc 	.word	0x240002cc

08001e68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b086      	sub	sp, #24
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e70:	4a14      	ldr	r2, [pc, #80]	; (8001ec4 <_sbrk+0x5c>)
 8001e72:	4b15      	ldr	r3, [pc, #84]	; (8001ec8 <_sbrk+0x60>)
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e7c:	4b13      	ldr	r3, [pc, #76]	; (8001ecc <_sbrk+0x64>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d102      	bne.n	8001e8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e84:	4b11      	ldr	r3, [pc, #68]	; (8001ecc <_sbrk+0x64>)
 8001e86:	4a12      	ldr	r2, [pc, #72]	; (8001ed0 <_sbrk+0x68>)
 8001e88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e8a:	4b10      	ldr	r3, [pc, #64]	; (8001ecc <_sbrk+0x64>)
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4413      	add	r3, r2
 8001e92:	693a      	ldr	r2, [r7, #16]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d207      	bcs.n	8001ea8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e98:	f006 f948 	bl	800812c <__errno>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	220c      	movs	r2, #12
 8001ea0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ea6:	e009      	b.n	8001ebc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ea8:	4b08      	ldr	r3, [pc, #32]	; (8001ecc <_sbrk+0x64>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001eae:	4b07      	ldr	r3, [pc, #28]	; (8001ecc <_sbrk+0x64>)
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	4a05      	ldr	r2, [pc, #20]	; (8001ecc <_sbrk+0x64>)
 8001eb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001eba:	68fb      	ldr	r3, [r7, #12]
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3718      	adds	r7, #24
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	24050000 	.word	0x24050000
 8001ec8:	00000400 	.word	0x00000400
 8001ecc:	240003d4 	.word	0x240003d4
 8001ed0:	240003f0 	.word	0x240003f0

08001ed4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001ed8:	4b32      	ldr	r3, [pc, #200]	; (8001fa4 <SystemInit+0xd0>)
 8001eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ede:	4a31      	ldr	r2, [pc, #196]	; (8001fa4 <SystemInit+0xd0>)
 8001ee0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ee4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001ee8:	4b2f      	ldr	r3, [pc, #188]	; (8001fa8 <SystemInit+0xd4>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 030f 	and.w	r3, r3, #15
 8001ef0:	2b06      	cmp	r3, #6
 8001ef2:	d807      	bhi.n	8001f04 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001ef4:	4b2c      	ldr	r3, [pc, #176]	; (8001fa8 <SystemInit+0xd4>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f023 030f 	bic.w	r3, r3, #15
 8001efc:	4a2a      	ldr	r2, [pc, #168]	; (8001fa8 <SystemInit+0xd4>)
 8001efe:	f043 0307 	orr.w	r3, r3, #7
 8001f02:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001f04:	4b29      	ldr	r3, [pc, #164]	; (8001fac <SystemInit+0xd8>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a28      	ldr	r2, [pc, #160]	; (8001fac <SystemInit+0xd8>)
 8001f0a:	f043 0301 	orr.w	r3, r3, #1
 8001f0e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001f10:	4b26      	ldr	r3, [pc, #152]	; (8001fac <SystemInit+0xd8>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001f16:	4b25      	ldr	r3, [pc, #148]	; (8001fac <SystemInit+0xd8>)
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	4924      	ldr	r1, [pc, #144]	; (8001fac <SystemInit+0xd8>)
 8001f1c:	4b24      	ldr	r3, [pc, #144]	; (8001fb0 <SystemInit+0xdc>)
 8001f1e:	4013      	ands	r3, r2
 8001f20:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001f22:	4b21      	ldr	r3, [pc, #132]	; (8001fa8 <SystemInit+0xd4>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0308 	and.w	r3, r3, #8
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d007      	beq.n	8001f3e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001f2e:	4b1e      	ldr	r3, [pc, #120]	; (8001fa8 <SystemInit+0xd4>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f023 030f 	bic.w	r3, r3, #15
 8001f36:	4a1c      	ldr	r2, [pc, #112]	; (8001fa8 <SystemInit+0xd4>)
 8001f38:	f043 0307 	orr.w	r3, r3, #7
 8001f3c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001f3e:	4b1b      	ldr	r3, [pc, #108]	; (8001fac <SystemInit+0xd8>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001f44:	4b19      	ldr	r3, [pc, #100]	; (8001fac <SystemInit+0xd8>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001f4a:	4b18      	ldr	r3, [pc, #96]	; (8001fac <SystemInit+0xd8>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001f50:	4b16      	ldr	r3, [pc, #88]	; (8001fac <SystemInit+0xd8>)
 8001f52:	4a18      	ldr	r2, [pc, #96]	; (8001fb4 <SystemInit+0xe0>)
 8001f54:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001f56:	4b15      	ldr	r3, [pc, #84]	; (8001fac <SystemInit+0xd8>)
 8001f58:	4a17      	ldr	r2, [pc, #92]	; (8001fb8 <SystemInit+0xe4>)
 8001f5a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001f5c:	4b13      	ldr	r3, [pc, #76]	; (8001fac <SystemInit+0xd8>)
 8001f5e:	4a17      	ldr	r2, [pc, #92]	; (8001fbc <SystemInit+0xe8>)
 8001f60:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001f62:	4b12      	ldr	r3, [pc, #72]	; (8001fac <SystemInit+0xd8>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001f68:	4b10      	ldr	r3, [pc, #64]	; (8001fac <SystemInit+0xd8>)
 8001f6a:	4a14      	ldr	r2, [pc, #80]	; (8001fbc <SystemInit+0xe8>)
 8001f6c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001f6e:	4b0f      	ldr	r3, [pc, #60]	; (8001fac <SystemInit+0xd8>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001f74:	4b0d      	ldr	r3, [pc, #52]	; (8001fac <SystemInit+0xd8>)
 8001f76:	4a11      	ldr	r2, [pc, #68]	; (8001fbc <SystemInit+0xe8>)
 8001f78:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001f7a:	4b0c      	ldr	r3, [pc, #48]	; (8001fac <SystemInit+0xd8>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001f80:	4b0a      	ldr	r3, [pc, #40]	; (8001fac <SystemInit+0xd8>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a09      	ldr	r2, [pc, #36]	; (8001fac <SystemInit+0xd8>)
 8001f86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f8a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001f8c:	4b07      	ldr	r3, [pc, #28]	; (8001fac <SystemInit+0xd8>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001f92:	4b0b      	ldr	r3, [pc, #44]	; (8001fc0 <SystemInit+0xec>)
 8001f94:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001f98:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001f9a:	bf00      	nop
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr
 8001fa4:	e000ed00 	.word	0xe000ed00
 8001fa8:	52002000 	.word	0x52002000
 8001fac:	58024400 	.word	0x58024400
 8001fb0:	eaf6ed7f 	.word	0xeaf6ed7f
 8001fb4:	02020200 	.word	0x02020200
 8001fb8:	01ff0000 	.word	0x01ff0000
 8001fbc:	01010280 	.word	0x01010280
 8001fc0:	52004000 	.word	0x52004000

08001fc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001fc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ffc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001fc8:	f7ff ff84 	bl	8001ed4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fcc:	480c      	ldr	r0, [pc, #48]	; (8002000 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001fce:	490d      	ldr	r1, [pc, #52]	; (8002004 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001fd0:	4a0d      	ldr	r2, [pc, #52]	; (8002008 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001fd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fd4:	e002      	b.n	8001fdc <LoopCopyDataInit>

08001fd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fda:	3304      	adds	r3, #4

08001fdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fe0:	d3f9      	bcc.n	8001fd6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fe2:	4a0a      	ldr	r2, [pc, #40]	; (800200c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001fe4:	4c0a      	ldr	r4, [pc, #40]	; (8002010 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001fe6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fe8:	e001      	b.n	8001fee <LoopFillZerobss>

08001fea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fec:	3204      	adds	r2, #4

08001fee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ff0:	d3fb      	bcc.n	8001fea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ff2:	f006 f8a1 	bl	8008138 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ff6:	f7fe fe97 	bl	8000d28 <main>
  bx  lr
 8001ffa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ffc:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8002000:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002004:	24000080 	.word	0x24000080
  ldr r2, =_sidata
 8002008:	0800b060 	.word	0x0800b060
  ldr r2, =_sbss
 800200c:	24000080 	.word	0x24000080
  ldr r4, =_ebss
 8002010:	240003ec 	.word	0x240003ec

08002014 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002014:	e7fe      	b.n	8002014 <ADC3_IRQHandler>
	...

08002018 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800201e:	2003      	movs	r0, #3
 8002020:	f000 f95c 	bl	80022dc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002024:	f001 f91e 	bl	8003264 <HAL_RCC_GetSysClockFreq>
 8002028:	4602      	mov	r2, r0
 800202a:	4b15      	ldr	r3, [pc, #84]	; (8002080 <HAL_Init+0x68>)
 800202c:	699b      	ldr	r3, [r3, #24]
 800202e:	0a1b      	lsrs	r3, r3, #8
 8002030:	f003 030f 	and.w	r3, r3, #15
 8002034:	4913      	ldr	r1, [pc, #76]	; (8002084 <HAL_Init+0x6c>)
 8002036:	5ccb      	ldrb	r3, [r1, r3]
 8002038:	f003 031f 	and.w	r3, r3, #31
 800203c:	fa22 f303 	lsr.w	r3, r2, r3
 8002040:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002042:	4b0f      	ldr	r3, [pc, #60]	; (8002080 <HAL_Init+0x68>)
 8002044:	699b      	ldr	r3, [r3, #24]
 8002046:	f003 030f 	and.w	r3, r3, #15
 800204a:	4a0e      	ldr	r2, [pc, #56]	; (8002084 <HAL_Init+0x6c>)
 800204c:	5cd3      	ldrb	r3, [r2, r3]
 800204e:	f003 031f 	and.w	r3, r3, #31
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	fa22 f303 	lsr.w	r3, r2, r3
 8002058:	4a0b      	ldr	r2, [pc, #44]	; (8002088 <HAL_Init+0x70>)
 800205a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800205c:	4a0b      	ldr	r2, [pc, #44]	; (800208c <HAL_Init+0x74>)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002062:	2000      	movs	r0, #0
 8002064:	f000 f814 	bl	8002090 <HAL_InitTick>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e002      	b.n	8002078 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002072:	f7ff fccf 	bl	8001a14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002076:	2300      	movs	r3, #0
}
 8002078:	4618      	mov	r0, r3
 800207a:	3708      	adds	r7, #8
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	58024400 	.word	0x58024400
 8002084:	08009588 	.word	0x08009588
 8002088:	24000010 	.word	0x24000010
 800208c:	2400000c 	.word	0x2400000c

08002090 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002098:	4b15      	ldr	r3, [pc, #84]	; (80020f0 <HAL_InitTick+0x60>)
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d101      	bne.n	80020a4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e021      	b.n	80020e8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80020a4:	4b13      	ldr	r3, [pc, #76]	; (80020f4 <HAL_InitTick+0x64>)
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	4b11      	ldr	r3, [pc, #68]	; (80020f0 <HAL_InitTick+0x60>)
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	4619      	mov	r1, r3
 80020ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80020b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ba:	4618      	mov	r0, r3
 80020bc:	f000 f941 	bl	8002342 <HAL_SYSTICK_Config>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e00e      	b.n	80020e8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2b0f      	cmp	r3, #15
 80020ce:	d80a      	bhi.n	80020e6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020d0:	2200      	movs	r2, #0
 80020d2:	6879      	ldr	r1, [r7, #4]
 80020d4:	f04f 30ff 	mov.w	r0, #4294967295
 80020d8:	f000 f90b 	bl	80022f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020dc:	4a06      	ldr	r2, [pc, #24]	; (80020f8 <HAL_InitTick+0x68>)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020e2:	2300      	movs	r3, #0
 80020e4:	e000      	b.n	80020e8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3708      	adds	r7, #8
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	24000018 	.word	0x24000018
 80020f4:	2400000c 	.word	0x2400000c
 80020f8:	24000014 	.word	0x24000014

080020fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002100:	4b06      	ldr	r3, [pc, #24]	; (800211c <HAL_IncTick+0x20>)
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	461a      	mov	r2, r3
 8002106:	4b06      	ldr	r3, [pc, #24]	; (8002120 <HAL_IncTick+0x24>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4413      	add	r3, r2
 800210c:	4a04      	ldr	r2, [pc, #16]	; (8002120 <HAL_IncTick+0x24>)
 800210e:	6013      	str	r3, [r2, #0]
}
 8002110:	bf00      	nop
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	24000018 	.word	0x24000018
 8002120:	240003d8 	.word	0x240003d8

08002124 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  return uwTick;
 8002128:	4b03      	ldr	r3, [pc, #12]	; (8002138 <HAL_GetTick+0x14>)
 800212a:	681b      	ldr	r3, [r3, #0]
}
 800212c:	4618      	mov	r0, r3
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	240003d8 	.word	0x240003d8

0800213c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800213c:	b480      	push	{r7}
 800213e:	b085      	sub	sp, #20
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f003 0307 	and.w	r3, r3, #7
 800214a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800214c:	4b0b      	ldr	r3, [pc, #44]	; (800217c <__NVIC_SetPriorityGrouping+0x40>)
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002152:	68ba      	ldr	r2, [r7, #8]
 8002154:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002158:	4013      	ands	r3, r2
 800215a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002164:	4b06      	ldr	r3, [pc, #24]	; (8002180 <__NVIC_SetPriorityGrouping+0x44>)
 8002166:	4313      	orrs	r3, r2
 8002168:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800216a:	4a04      	ldr	r2, [pc, #16]	; (800217c <__NVIC_SetPriorityGrouping+0x40>)
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	60d3      	str	r3, [r2, #12]
}
 8002170:	bf00      	nop
 8002172:	3714      	adds	r7, #20
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr
 800217c:	e000ed00 	.word	0xe000ed00
 8002180:	05fa0000 	.word	0x05fa0000

08002184 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002188:	4b04      	ldr	r3, [pc, #16]	; (800219c <__NVIC_GetPriorityGrouping+0x18>)
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	0a1b      	lsrs	r3, r3, #8
 800218e:	f003 0307 	and.w	r3, r3, #7
}
 8002192:	4618      	mov	r0, r3
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr
 800219c:	e000ed00 	.word	0xe000ed00

080021a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	4603      	mov	r3, r0
 80021a8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80021aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	db0b      	blt.n	80021ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021b2:	88fb      	ldrh	r3, [r7, #6]
 80021b4:	f003 021f 	and.w	r2, r3, #31
 80021b8:	4907      	ldr	r1, [pc, #28]	; (80021d8 <__NVIC_EnableIRQ+0x38>)
 80021ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021be:	095b      	lsrs	r3, r3, #5
 80021c0:	2001      	movs	r0, #1
 80021c2:	fa00 f202 	lsl.w	r2, r0, r2
 80021c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021ca:	bf00      	nop
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	e000e100 	.word	0xe000e100

080021dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	4603      	mov	r3, r0
 80021e4:	6039      	str	r1, [r7, #0]
 80021e6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80021e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	db0a      	blt.n	8002206 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	b2da      	uxtb	r2, r3
 80021f4:	490c      	ldr	r1, [pc, #48]	; (8002228 <__NVIC_SetPriority+0x4c>)
 80021f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021fa:	0112      	lsls	r2, r2, #4
 80021fc:	b2d2      	uxtb	r2, r2
 80021fe:	440b      	add	r3, r1
 8002200:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002204:	e00a      	b.n	800221c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	b2da      	uxtb	r2, r3
 800220a:	4908      	ldr	r1, [pc, #32]	; (800222c <__NVIC_SetPriority+0x50>)
 800220c:	88fb      	ldrh	r3, [r7, #6]
 800220e:	f003 030f 	and.w	r3, r3, #15
 8002212:	3b04      	subs	r3, #4
 8002214:	0112      	lsls	r2, r2, #4
 8002216:	b2d2      	uxtb	r2, r2
 8002218:	440b      	add	r3, r1
 800221a:	761a      	strb	r2, [r3, #24]
}
 800221c:	bf00      	nop
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr
 8002228:	e000e100 	.word	0xe000e100
 800222c:	e000ed00 	.word	0xe000ed00

08002230 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002230:	b480      	push	{r7}
 8002232:	b089      	sub	sp, #36	; 0x24
 8002234:	af00      	add	r7, sp, #0
 8002236:	60f8      	str	r0, [r7, #12]
 8002238:	60b9      	str	r1, [r7, #8]
 800223a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f003 0307 	and.w	r3, r3, #7
 8002242:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	f1c3 0307 	rsb	r3, r3, #7
 800224a:	2b04      	cmp	r3, #4
 800224c:	bf28      	it	cs
 800224e:	2304      	movcs	r3, #4
 8002250:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	3304      	adds	r3, #4
 8002256:	2b06      	cmp	r3, #6
 8002258:	d902      	bls.n	8002260 <NVIC_EncodePriority+0x30>
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	3b03      	subs	r3, #3
 800225e:	e000      	b.n	8002262 <NVIC_EncodePriority+0x32>
 8002260:	2300      	movs	r3, #0
 8002262:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002264:	f04f 32ff 	mov.w	r2, #4294967295
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	fa02 f303 	lsl.w	r3, r2, r3
 800226e:	43da      	mvns	r2, r3
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	401a      	ands	r2, r3
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002278:	f04f 31ff 	mov.w	r1, #4294967295
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	fa01 f303 	lsl.w	r3, r1, r3
 8002282:	43d9      	mvns	r1, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002288:	4313      	orrs	r3, r2
         );
}
 800228a:	4618      	mov	r0, r3
 800228c:	3724      	adds	r7, #36	; 0x24
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
	...

08002298 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	3b01      	subs	r3, #1
 80022a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022a8:	d301      	bcc.n	80022ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022aa:	2301      	movs	r3, #1
 80022ac:	e00f      	b.n	80022ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022ae:	4a0a      	ldr	r2, [pc, #40]	; (80022d8 <SysTick_Config+0x40>)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	3b01      	subs	r3, #1
 80022b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022b6:	210f      	movs	r1, #15
 80022b8:	f04f 30ff 	mov.w	r0, #4294967295
 80022bc:	f7ff ff8e 	bl	80021dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022c0:	4b05      	ldr	r3, [pc, #20]	; (80022d8 <SysTick_Config+0x40>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022c6:	4b04      	ldr	r3, [pc, #16]	; (80022d8 <SysTick_Config+0x40>)
 80022c8:	2207      	movs	r2, #7
 80022ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	e000e010 	.word	0xe000e010

080022dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f7ff ff29 	bl	800213c <__NVIC_SetPriorityGrouping>
}
 80022ea:	bf00      	nop
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}

080022f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022f2:	b580      	push	{r7, lr}
 80022f4:	b086      	sub	sp, #24
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	4603      	mov	r3, r0
 80022fa:	60b9      	str	r1, [r7, #8]
 80022fc:	607a      	str	r2, [r7, #4]
 80022fe:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002300:	f7ff ff40 	bl	8002184 <__NVIC_GetPriorityGrouping>
 8002304:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	68b9      	ldr	r1, [r7, #8]
 800230a:	6978      	ldr	r0, [r7, #20]
 800230c:	f7ff ff90 	bl	8002230 <NVIC_EncodePriority>
 8002310:	4602      	mov	r2, r0
 8002312:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002316:	4611      	mov	r1, r2
 8002318:	4618      	mov	r0, r3
 800231a:	f7ff ff5f 	bl	80021dc <__NVIC_SetPriority>
}
 800231e:	bf00      	nop
 8002320:	3718      	adds	r7, #24
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002326:	b580      	push	{r7, lr}
 8002328:	b082      	sub	sp, #8
 800232a:	af00      	add	r7, sp, #0
 800232c:	4603      	mov	r3, r0
 800232e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002330:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002334:	4618      	mov	r0, r3
 8002336:	f7ff ff33 	bl	80021a0 <__NVIC_EnableIRQ>
}
 800233a:	bf00      	nop
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}

08002342 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002342:	b580      	push	{r7, lr}
 8002344:	b082      	sub	sp, #8
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f7ff ffa4 	bl	8002298 <SysTick_Config>
 8002350:	4603      	mov	r3, r0
}
 8002352:	4618      	mov	r0, r3
 8002354:	3708      	adds	r7, #8
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
	...

0800235c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800235c:	b480      	push	{r7}
 800235e:	b089      	sub	sp, #36	; 0x24
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002366:	2300      	movs	r3, #0
 8002368:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800236a:	4b86      	ldr	r3, [pc, #536]	; (8002584 <HAL_GPIO_Init+0x228>)
 800236c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800236e:	e18c      	b.n	800268a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	2101      	movs	r1, #1
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	fa01 f303 	lsl.w	r3, r1, r3
 800237c:	4013      	ands	r3, r2
 800237e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	2b00      	cmp	r3, #0
 8002384:	f000 817e 	beq.w	8002684 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f003 0303 	and.w	r3, r3, #3
 8002390:	2b01      	cmp	r3, #1
 8002392:	d005      	beq.n	80023a0 <HAL_GPIO_Init+0x44>
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f003 0303 	and.w	r3, r3, #3
 800239c:	2b02      	cmp	r3, #2
 800239e:	d130      	bne.n	8002402 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	2203      	movs	r2, #3
 80023ac:	fa02 f303 	lsl.w	r3, r2, r3
 80023b0:	43db      	mvns	r3, r3
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	4013      	ands	r3, r2
 80023b6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	68da      	ldr	r2, [r3, #12]
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	fa02 f303 	lsl.w	r3, r2, r3
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80023d6:	2201      	movs	r2, #1
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	fa02 f303 	lsl.w	r3, r2, r3
 80023de:	43db      	mvns	r3, r3
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	4013      	ands	r3, r2
 80023e4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	091b      	lsrs	r3, r3, #4
 80023ec:	f003 0201 	and.w	r2, r3, #1
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	fa02 f303 	lsl.w	r3, r2, r3
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	69ba      	ldr	r2, [r7, #24]
 8002400:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f003 0303 	and.w	r3, r3, #3
 800240a:	2b03      	cmp	r3, #3
 800240c:	d017      	beq.n	800243e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	005b      	lsls	r3, r3, #1
 8002418:	2203      	movs	r2, #3
 800241a:	fa02 f303 	lsl.w	r3, r2, r3
 800241e:	43db      	mvns	r3, r3
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	4013      	ands	r3, r2
 8002424:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	689a      	ldr	r2, [r3, #8]
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	fa02 f303 	lsl.w	r3, r2, r3
 8002432:	69ba      	ldr	r2, [r7, #24]
 8002434:	4313      	orrs	r3, r2
 8002436:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	69ba      	ldr	r2, [r7, #24]
 800243c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f003 0303 	and.w	r3, r3, #3
 8002446:	2b02      	cmp	r3, #2
 8002448:	d123      	bne.n	8002492 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	08da      	lsrs	r2, r3, #3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	3208      	adds	r2, #8
 8002452:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002456:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	f003 0307 	and.w	r3, r3, #7
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	220f      	movs	r2, #15
 8002462:	fa02 f303 	lsl.w	r3, r2, r3
 8002466:	43db      	mvns	r3, r3
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	4013      	ands	r3, r2
 800246c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	691a      	ldr	r2, [r3, #16]
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	f003 0307 	and.w	r3, r3, #7
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	fa02 f303 	lsl.w	r3, r2, r3
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	4313      	orrs	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	08da      	lsrs	r2, r3, #3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	3208      	adds	r2, #8
 800248c:	69b9      	ldr	r1, [r7, #24]
 800248e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	2203      	movs	r2, #3
 800249e:	fa02 f303 	lsl.w	r3, r2, r3
 80024a2:	43db      	mvns	r3, r3
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	4013      	ands	r3, r2
 80024a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f003 0203 	and.w	r2, r3, #3
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	4313      	orrs	r3, r2
 80024be:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	f000 80d8 	beq.w	8002684 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024d4:	4b2c      	ldr	r3, [pc, #176]	; (8002588 <HAL_GPIO_Init+0x22c>)
 80024d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80024da:	4a2b      	ldr	r2, [pc, #172]	; (8002588 <HAL_GPIO_Init+0x22c>)
 80024dc:	f043 0302 	orr.w	r3, r3, #2
 80024e0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80024e4:	4b28      	ldr	r3, [pc, #160]	; (8002588 <HAL_GPIO_Init+0x22c>)
 80024e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	60fb      	str	r3, [r7, #12]
 80024f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024f2:	4a26      	ldr	r2, [pc, #152]	; (800258c <HAL_GPIO_Init+0x230>)
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	089b      	lsrs	r3, r3, #2
 80024f8:	3302      	adds	r3, #2
 80024fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	f003 0303 	and.w	r3, r3, #3
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	220f      	movs	r2, #15
 800250a:	fa02 f303 	lsl.w	r3, r2, r3
 800250e:	43db      	mvns	r3, r3
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	4013      	ands	r3, r2
 8002514:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a1d      	ldr	r2, [pc, #116]	; (8002590 <HAL_GPIO_Init+0x234>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d04a      	beq.n	80025b4 <HAL_GPIO_Init+0x258>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a1c      	ldr	r2, [pc, #112]	; (8002594 <HAL_GPIO_Init+0x238>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d02b      	beq.n	800257e <HAL_GPIO_Init+0x222>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a1b      	ldr	r2, [pc, #108]	; (8002598 <HAL_GPIO_Init+0x23c>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d025      	beq.n	800257a <HAL_GPIO_Init+0x21e>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a1a      	ldr	r2, [pc, #104]	; (800259c <HAL_GPIO_Init+0x240>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d01f      	beq.n	8002576 <HAL_GPIO_Init+0x21a>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a19      	ldr	r2, [pc, #100]	; (80025a0 <HAL_GPIO_Init+0x244>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d019      	beq.n	8002572 <HAL_GPIO_Init+0x216>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a18      	ldr	r2, [pc, #96]	; (80025a4 <HAL_GPIO_Init+0x248>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d013      	beq.n	800256e <HAL_GPIO_Init+0x212>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a17      	ldr	r2, [pc, #92]	; (80025a8 <HAL_GPIO_Init+0x24c>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d00d      	beq.n	800256a <HAL_GPIO_Init+0x20e>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a16      	ldr	r2, [pc, #88]	; (80025ac <HAL_GPIO_Init+0x250>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d007      	beq.n	8002566 <HAL_GPIO_Init+0x20a>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a15      	ldr	r2, [pc, #84]	; (80025b0 <HAL_GPIO_Init+0x254>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d101      	bne.n	8002562 <HAL_GPIO_Init+0x206>
 800255e:	2309      	movs	r3, #9
 8002560:	e029      	b.n	80025b6 <HAL_GPIO_Init+0x25a>
 8002562:	230a      	movs	r3, #10
 8002564:	e027      	b.n	80025b6 <HAL_GPIO_Init+0x25a>
 8002566:	2307      	movs	r3, #7
 8002568:	e025      	b.n	80025b6 <HAL_GPIO_Init+0x25a>
 800256a:	2306      	movs	r3, #6
 800256c:	e023      	b.n	80025b6 <HAL_GPIO_Init+0x25a>
 800256e:	2305      	movs	r3, #5
 8002570:	e021      	b.n	80025b6 <HAL_GPIO_Init+0x25a>
 8002572:	2304      	movs	r3, #4
 8002574:	e01f      	b.n	80025b6 <HAL_GPIO_Init+0x25a>
 8002576:	2303      	movs	r3, #3
 8002578:	e01d      	b.n	80025b6 <HAL_GPIO_Init+0x25a>
 800257a:	2302      	movs	r3, #2
 800257c:	e01b      	b.n	80025b6 <HAL_GPIO_Init+0x25a>
 800257e:	2301      	movs	r3, #1
 8002580:	e019      	b.n	80025b6 <HAL_GPIO_Init+0x25a>
 8002582:	bf00      	nop
 8002584:	58000080 	.word	0x58000080
 8002588:	58024400 	.word	0x58024400
 800258c:	58000400 	.word	0x58000400
 8002590:	58020000 	.word	0x58020000
 8002594:	58020400 	.word	0x58020400
 8002598:	58020800 	.word	0x58020800
 800259c:	58020c00 	.word	0x58020c00
 80025a0:	58021000 	.word	0x58021000
 80025a4:	58021400 	.word	0x58021400
 80025a8:	58021800 	.word	0x58021800
 80025ac:	58021c00 	.word	0x58021c00
 80025b0:	58022400 	.word	0x58022400
 80025b4:	2300      	movs	r3, #0
 80025b6:	69fa      	ldr	r2, [r7, #28]
 80025b8:	f002 0203 	and.w	r2, r2, #3
 80025bc:	0092      	lsls	r2, r2, #2
 80025be:	4093      	lsls	r3, r2
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025c6:	4938      	ldr	r1, [pc, #224]	; (80026a8 <HAL_GPIO_Init+0x34c>)
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	089b      	lsrs	r3, r3, #2
 80025cc:	3302      	adds	r3, #2
 80025ce:	69ba      	ldr	r2, [r7, #24]
 80025d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80025d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	43db      	mvns	r3, r3
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	4013      	ands	r3, r2
 80025e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d003      	beq.n	80025fa <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80025f2:	69ba      	ldr	r2, [r7, #24]
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80025fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002602:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	43db      	mvns	r3, r3
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	4013      	ands	r3, r2
 8002612:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d003      	beq.n	8002628 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	4313      	orrs	r3, r2
 8002626:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002628:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	43db      	mvns	r3, r3
 800263a:	69ba      	ldr	r2, [r7, #24]
 800263c:	4013      	ands	r3, r2
 800263e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d003      	beq.n	8002654 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800264c:	69ba      	ldr	r2, [r7, #24]
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	4313      	orrs	r3, r2
 8002652:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	43db      	mvns	r3, r3
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	4013      	ands	r3, r2
 8002668:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d003      	beq.n	800267e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	4313      	orrs	r3, r2
 800267c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	3301      	adds	r3, #1
 8002688:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	fa22 f303 	lsr.w	r3, r2, r3
 8002694:	2b00      	cmp	r3, #0
 8002696:	f47f ae6b 	bne.w	8002370 <HAL_GPIO_Init+0x14>
  }
}
 800269a:	bf00      	nop
 800269c:	bf00      	nop
 800269e:	3724      	adds	r7, #36	; 0x24
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr
 80026a8:	58000400 	.word	0x58000400

080026ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	460b      	mov	r3, r1
 80026b6:	807b      	strh	r3, [r7, #2]
 80026b8:	4613      	mov	r3, r2
 80026ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026bc:	787b      	ldrb	r3, [r7, #1]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d003      	beq.n	80026ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026c2:	887a      	ldrh	r2, [r7, #2]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80026c8:	e003      	b.n	80026d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80026ca:	887b      	ldrh	r3, [r7, #2]
 80026cc:	041a      	lsls	r2, r3, #16
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	619a      	str	r2, [r3, #24]
}
 80026d2:	bf00      	nop
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr

080026de <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80026de:	b580      	push	{r7, lr}
 80026e0:	b082      	sub	sp, #8
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	4603      	mov	r3, r0
 80026e6:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80026e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026ec:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80026f0:	88fb      	ldrh	r3, [r7, #6]
 80026f2:	4013      	ands	r3, r2
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d008      	beq.n	800270a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80026f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026fc:	88fb      	ldrh	r3, [r7, #6]
 80026fe:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002702:	88fb      	ldrh	r3, [r7, #6]
 8002704:	4618      	mov	r0, r3
 8002706:	f000 f804 	bl	8002712 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800270a:	bf00      	nop
 800270c:	3708      	adds	r7, #8
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002712:	b480      	push	{r7}
 8002714:	b083      	sub	sp, #12
 8002716:	af00      	add	r7, sp, #0
 8002718:	4603      	mov	r3, r0
 800271a:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800271c:	bf00      	nop
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002730:	4b19      	ldr	r3, [pc, #100]	; (8002798 <HAL_PWREx_ConfigSupply+0x70>)
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	f003 0304 	and.w	r3, r3, #4
 8002738:	2b04      	cmp	r3, #4
 800273a:	d00a      	beq.n	8002752 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800273c:	4b16      	ldr	r3, [pc, #88]	; (8002798 <HAL_PWREx_ConfigSupply+0x70>)
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	f003 0307 	and.w	r3, r3, #7
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	429a      	cmp	r2, r3
 8002748:	d001      	beq.n	800274e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e01f      	b.n	800278e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800274e:	2300      	movs	r3, #0
 8002750:	e01d      	b.n	800278e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002752:	4b11      	ldr	r3, [pc, #68]	; (8002798 <HAL_PWREx_ConfigSupply+0x70>)
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	f023 0207 	bic.w	r2, r3, #7
 800275a:	490f      	ldr	r1, [pc, #60]	; (8002798 <HAL_PWREx_ConfigSupply+0x70>)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	4313      	orrs	r3, r2
 8002760:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002762:	f7ff fcdf 	bl	8002124 <HAL_GetTick>
 8002766:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002768:	e009      	b.n	800277e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800276a:	f7ff fcdb 	bl	8002124 <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002778:	d901      	bls.n	800277e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e007      	b.n	800278e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800277e:	4b06      	ldr	r3, [pc, #24]	; (8002798 <HAL_PWREx_ConfigSupply+0x70>)
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002786:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800278a:	d1ee      	bne.n	800276a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	3710      	adds	r7, #16
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	58024800 	.word	0x58024800

0800279c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b08c      	sub	sp, #48	; 0x30
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e39d      	b.n	8002eea <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0301 	and.w	r3, r3, #1
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	f000 8087 	beq.w	80028ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027bc:	4b88      	ldr	r3, [pc, #544]	; (80029e0 <HAL_RCC_OscConfig+0x244>)
 80027be:	691b      	ldr	r3, [r3, #16]
 80027c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80027c6:	4b86      	ldr	r3, [pc, #536]	; (80029e0 <HAL_RCC_OscConfig+0x244>)
 80027c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ca:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80027cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ce:	2b10      	cmp	r3, #16
 80027d0:	d007      	beq.n	80027e2 <HAL_RCC_OscConfig+0x46>
 80027d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027d4:	2b18      	cmp	r3, #24
 80027d6:	d110      	bne.n	80027fa <HAL_RCC_OscConfig+0x5e>
 80027d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027da:	f003 0303 	and.w	r3, r3, #3
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d10b      	bne.n	80027fa <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027e2:	4b7f      	ldr	r3, [pc, #508]	; (80029e0 <HAL_RCC_OscConfig+0x244>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d06c      	beq.n	80028c8 <HAL_RCC_OscConfig+0x12c>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d168      	bne.n	80028c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e377      	b.n	8002eea <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002802:	d106      	bne.n	8002812 <HAL_RCC_OscConfig+0x76>
 8002804:	4b76      	ldr	r3, [pc, #472]	; (80029e0 <HAL_RCC_OscConfig+0x244>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a75      	ldr	r2, [pc, #468]	; (80029e0 <HAL_RCC_OscConfig+0x244>)
 800280a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800280e:	6013      	str	r3, [r2, #0]
 8002810:	e02e      	b.n	8002870 <HAL_RCC_OscConfig+0xd4>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d10c      	bne.n	8002834 <HAL_RCC_OscConfig+0x98>
 800281a:	4b71      	ldr	r3, [pc, #452]	; (80029e0 <HAL_RCC_OscConfig+0x244>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a70      	ldr	r2, [pc, #448]	; (80029e0 <HAL_RCC_OscConfig+0x244>)
 8002820:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002824:	6013      	str	r3, [r2, #0]
 8002826:	4b6e      	ldr	r3, [pc, #440]	; (80029e0 <HAL_RCC_OscConfig+0x244>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a6d      	ldr	r2, [pc, #436]	; (80029e0 <HAL_RCC_OscConfig+0x244>)
 800282c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002830:	6013      	str	r3, [r2, #0]
 8002832:	e01d      	b.n	8002870 <HAL_RCC_OscConfig+0xd4>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800283c:	d10c      	bne.n	8002858 <HAL_RCC_OscConfig+0xbc>
 800283e:	4b68      	ldr	r3, [pc, #416]	; (80029e0 <HAL_RCC_OscConfig+0x244>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a67      	ldr	r2, [pc, #412]	; (80029e0 <HAL_RCC_OscConfig+0x244>)
 8002844:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002848:	6013      	str	r3, [r2, #0]
 800284a:	4b65      	ldr	r3, [pc, #404]	; (80029e0 <HAL_RCC_OscConfig+0x244>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a64      	ldr	r2, [pc, #400]	; (80029e0 <HAL_RCC_OscConfig+0x244>)
 8002850:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002854:	6013      	str	r3, [r2, #0]
 8002856:	e00b      	b.n	8002870 <HAL_RCC_OscConfig+0xd4>
 8002858:	4b61      	ldr	r3, [pc, #388]	; (80029e0 <HAL_RCC_OscConfig+0x244>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a60      	ldr	r2, [pc, #384]	; (80029e0 <HAL_RCC_OscConfig+0x244>)
 800285e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002862:	6013      	str	r3, [r2, #0]
 8002864:	4b5e      	ldr	r3, [pc, #376]	; (80029e0 <HAL_RCC_OscConfig+0x244>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a5d      	ldr	r2, [pc, #372]	; (80029e0 <HAL_RCC_OscConfig+0x244>)
 800286a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800286e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d013      	beq.n	80028a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002878:	f7ff fc54 	bl	8002124 <HAL_GetTick>
 800287c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800287e:	e008      	b.n	8002892 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002880:	f7ff fc50 	bl	8002124 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b64      	cmp	r3, #100	; 0x64
 800288c:	d901      	bls.n	8002892 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e32b      	b.n	8002eea <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002892:	4b53      	ldr	r3, [pc, #332]	; (80029e0 <HAL_RCC_OscConfig+0x244>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d0f0      	beq.n	8002880 <HAL_RCC_OscConfig+0xe4>
 800289e:	e014      	b.n	80028ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a0:	f7ff fc40 	bl	8002124 <HAL_GetTick>
 80028a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80028a6:	e008      	b.n	80028ba <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028a8:	f7ff fc3c 	bl	8002124 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b64      	cmp	r3, #100	; 0x64
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e317      	b.n	8002eea <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80028ba:	4b49      	ldr	r3, [pc, #292]	; (80029e0 <HAL_RCC_OscConfig+0x244>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d1f0      	bne.n	80028a8 <HAL_RCC_OscConfig+0x10c>
 80028c6:	e000      	b.n	80028ca <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0302 	and.w	r3, r3, #2
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	f000 808c 	beq.w	80029f0 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028d8:	4b41      	ldr	r3, [pc, #260]	; (80029e0 <HAL_RCC_OscConfig+0x244>)
 80028da:	691b      	ldr	r3, [r3, #16]
 80028dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80028e0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80028e2:	4b3f      	ldr	r3, [pc, #252]	; (80029e0 <HAL_RCC_OscConfig+0x244>)
 80028e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80028e8:	6a3b      	ldr	r3, [r7, #32]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d007      	beq.n	80028fe <HAL_RCC_OscConfig+0x162>
 80028ee:	6a3b      	ldr	r3, [r7, #32]
 80028f0:	2b18      	cmp	r3, #24
 80028f2:	d137      	bne.n	8002964 <HAL_RCC_OscConfig+0x1c8>
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	f003 0303 	and.w	r3, r3, #3
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d132      	bne.n	8002964 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028fe:	4b38      	ldr	r3, [pc, #224]	; (80029e0 <HAL_RCC_OscConfig+0x244>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0304 	and.w	r3, r3, #4
 8002906:	2b00      	cmp	r3, #0
 8002908:	d005      	beq.n	8002916 <HAL_RCC_OscConfig+0x17a>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d101      	bne.n	8002916 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e2e9      	b.n	8002eea <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002916:	4b32      	ldr	r3, [pc, #200]	; (80029e0 <HAL_RCC_OscConfig+0x244>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f023 0219 	bic.w	r2, r3, #25
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	492f      	ldr	r1, [pc, #188]	; (80029e0 <HAL_RCC_OscConfig+0x244>)
 8002924:	4313      	orrs	r3, r2
 8002926:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002928:	f7ff fbfc 	bl	8002124 <HAL_GetTick>
 800292c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800292e:	e008      	b.n	8002942 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002930:	f7ff fbf8 	bl	8002124 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	2b02      	cmp	r3, #2
 800293c:	d901      	bls.n	8002942 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e2d3      	b.n	8002eea <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002942:	4b27      	ldr	r3, [pc, #156]	; (80029e0 <HAL_RCC_OscConfig+0x244>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0304 	and.w	r3, r3, #4
 800294a:	2b00      	cmp	r3, #0
 800294c:	d0f0      	beq.n	8002930 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800294e:	4b24      	ldr	r3, [pc, #144]	; (80029e0 <HAL_RCC_OscConfig+0x244>)
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	061b      	lsls	r3, r3, #24
 800295c:	4920      	ldr	r1, [pc, #128]	; (80029e0 <HAL_RCC_OscConfig+0x244>)
 800295e:	4313      	orrs	r3, r2
 8002960:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002962:	e045      	b.n	80029f0 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d026      	beq.n	80029ba <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800296c:	4b1c      	ldr	r3, [pc, #112]	; (80029e0 <HAL_RCC_OscConfig+0x244>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f023 0219 	bic.w	r2, r3, #25
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	4919      	ldr	r1, [pc, #100]	; (80029e0 <HAL_RCC_OscConfig+0x244>)
 800297a:	4313      	orrs	r3, r2
 800297c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800297e:	f7ff fbd1 	bl	8002124 <HAL_GetTick>
 8002982:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002984:	e008      	b.n	8002998 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002986:	f7ff fbcd 	bl	8002124 <HAL_GetTick>
 800298a:	4602      	mov	r2, r0
 800298c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	2b02      	cmp	r3, #2
 8002992:	d901      	bls.n	8002998 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	e2a8      	b.n	8002eea <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002998:	4b11      	ldr	r3, [pc, #68]	; (80029e0 <HAL_RCC_OscConfig+0x244>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0304 	and.w	r3, r3, #4
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d0f0      	beq.n	8002986 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029a4:	4b0e      	ldr	r3, [pc, #56]	; (80029e0 <HAL_RCC_OscConfig+0x244>)
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	691b      	ldr	r3, [r3, #16]
 80029b0:	061b      	lsls	r3, r3, #24
 80029b2:	490b      	ldr	r1, [pc, #44]	; (80029e0 <HAL_RCC_OscConfig+0x244>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	604b      	str	r3, [r1, #4]
 80029b8:	e01a      	b.n	80029f0 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029ba:	4b09      	ldr	r3, [pc, #36]	; (80029e0 <HAL_RCC_OscConfig+0x244>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a08      	ldr	r2, [pc, #32]	; (80029e0 <HAL_RCC_OscConfig+0x244>)
 80029c0:	f023 0301 	bic.w	r3, r3, #1
 80029c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c6:	f7ff fbad 	bl	8002124 <HAL_GetTick>
 80029ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80029cc:	e00a      	b.n	80029e4 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029ce:	f7ff fba9 	bl	8002124 <HAL_GetTick>
 80029d2:	4602      	mov	r2, r0
 80029d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d903      	bls.n	80029e4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e284      	b.n	8002eea <HAL_RCC_OscConfig+0x74e>
 80029e0:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80029e4:	4b96      	ldr	r3, [pc, #600]	; (8002c40 <HAL_RCC_OscConfig+0x4a4>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0304 	and.w	r3, r3, #4
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d1ee      	bne.n	80029ce <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0310 	and.w	r3, r3, #16
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d06a      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029fc:	4b90      	ldr	r3, [pc, #576]	; (8002c40 <HAL_RCC_OscConfig+0x4a4>)
 80029fe:	691b      	ldr	r3, [r3, #16]
 8002a00:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a04:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002a06:	4b8e      	ldr	r3, [pc, #568]	; (8002c40 <HAL_RCC_OscConfig+0x4a4>)
 8002a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a0a:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	2b08      	cmp	r3, #8
 8002a10:	d007      	beq.n	8002a22 <HAL_RCC_OscConfig+0x286>
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	2b18      	cmp	r3, #24
 8002a16:	d11b      	bne.n	8002a50 <HAL_RCC_OscConfig+0x2b4>
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	f003 0303 	and.w	r3, r3, #3
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d116      	bne.n	8002a50 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a22:	4b87      	ldr	r3, [pc, #540]	; (8002c40 <HAL_RCC_OscConfig+0x4a4>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d005      	beq.n	8002a3a <HAL_RCC_OscConfig+0x29e>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	69db      	ldr	r3, [r3, #28]
 8002a32:	2b80      	cmp	r3, #128	; 0x80
 8002a34:	d001      	beq.n	8002a3a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e257      	b.n	8002eea <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a3a:	4b81      	ldr	r3, [pc, #516]	; (8002c40 <HAL_RCC_OscConfig+0x4a4>)
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a1b      	ldr	r3, [r3, #32]
 8002a46:	061b      	lsls	r3, r3, #24
 8002a48:	497d      	ldr	r1, [pc, #500]	; (8002c40 <HAL_RCC_OscConfig+0x4a4>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a4e:	e040      	b.n	8002ad2 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	69db      	ldr	r3, [r3, #28]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d023      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002a58:	4b79      	ldr	r3, [pc, #484]	; (8002c40 <HAL_RCC_OscConfig+0x4a4>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a78      	ldr	r2, [pc, #480]	; (8002c40 <HAL_RCC_OscConfig+0x4a4>)
 8002a5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a64:	f7ff fb5e 	bl	8002124 <HAL_GetTick>
 8002a68:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002a6a:	e008      	b.n	8002a7e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002a6c:	f7ff fb5a 	bl	8002124 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e235      	b.n	8002eea <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002a7e:	4b70      	ldr	r3, [pc, #448]	; (8002c40 <HAL_RCC_OscConfig+0x4a4>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d0f0      	beq.n	8002a6c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a8a:	4b6d      	ldr	r3, [pc, #436]	; (8002c40 <HAL_RCC_OscConfig+0x4a4>)
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a1b      	ldr	r3, [r3, #32]
 8002a96:	061b      	lsls	r3, r3, #24
 8002a98:	4969      	ldr	r1, [pc, #420]	; (8002c40 <HAL_RCC_OscConfig+0x4a4>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	60cb      	str	r3, [r1, #12]
 8002a9e:	e018      	b.n	8002ad2 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002aa0:	4b67      	ldr	r3, [pc, #412]	; (8002c40 <HAL_RCC_OscConfig+0x4a4>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a66      	ldr	r2, [pc, #408]	; (8002c40 <HAL_RCC_OscConfig+0x4a4>)
 8002aa6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002aaa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aac:	f7ff fb3a 	bl	8002124 <HAL_GetTick>
 8002ab0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002ab2:	e008      	b.n	8002ac6 <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002ab4:	f7ff fb36 	bl	8002124 <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e211      	b.n	8002eea <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002ac6:	4b5e      	ldr	r3, [pc, #376]	; (8002c40 <HAL_RCC_OscConfig+0x4a4>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d1f0      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0308 	and.w	r3, r3, #8
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d036      	beq.n	8002b4c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	695b      	ldr	r3, [r3, #20]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d019      	beq.n	8002b1a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ae6:	4b56      	ldr	r3, [pc, #344]	; (8002c40 <HAL_RCC_OscConfig+0x4a4>)
 8002ae8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aea:	4a55      	ldr	r2, [pc, #340]	; (8002c40 <HAL_RCC_OscConfig+0x4a4>)
 8002aec:	f043 0301 	orr.w	r3, r3, #1
 8002af0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002af2:	f7ff fb17 	bl	8002124 <HAL_GetTick>
 8002af6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002af8:	e008      	b.n	8002b0c <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002afa:	f7ff fb13 	bl	8002124 <HAL_GetTick>
 8002afe:	4602      	mov	r2, r0
 8002b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d901      	bls.n	8002b0c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e1ee      	b.n	8002eea <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b0c:	4b4c      	ldr	r3, [pc, #304]	; (8002c40 <HAL_RCC_OscConfig+0x4a4>)
 8002b0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b10:	f003 0302 	and.w	r3, r3, #2
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d0f0      	beq.n	8002afa <HAL_RCC_OscConfig+0x35e>
 8002b18:	e018      	b.n	8002b4c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b1a:	4b49      	ldr	r3, [pc, #292]	; (8002c40 <HAL_RCC_OscConfig+0x4a4>)
 8002b1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b1e:	4a48      	ldr	r2, [pc, #288]	; (8002c40 <HAL_RCC_OscConfig+0x4a4>)
 8002b20:	f023 0301 	bic.w	r3, r3, #1
 8002b24:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b26:	f7ff fafd 	bl	8002124 <HAL_GetTick>
 8002b2a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b2c:	e008      	b.n	8002b40 <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b2e:	f7ff faf9 	bl	8002124 <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d901      	bls.n	8002b40 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e1d4      	b.n	8002eea <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b40:	4b3f      	ldr	r3, [pc, #252]	; (8002c40 <HAL_RCC_OscConfig+0x4a4>)
 8002b42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b44:	f003 0302 	and.w	r3, r3, #2
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d1f0      	bne.n	8002b2e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0320 	and.w	r3, r3, #32
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d036      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	699b      	ldr	r3, [r3, #24]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d019      	beq.n	8002b94 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002b60:	4b37      	ldr	r3, [pc, #220]	; (8002c40 <HAL_RCC_OscConfig+0x4a4>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a36      	ldr	r2, [pc, #216]	; (8002c40 <HAL_RCC_OscConfig+0x4a4>)
 8002b66:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b6a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002b6c:	f7ff fada 	bl	8002124 <HAL_GetTick>
 8002b70:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002b72:	e008      	b.n	8002b86 <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002b74:	f7ff fad6 	bl	8002124 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e1b1      	b.n	8002eea <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002b86:	4b2e      	ldr	r3, [pc, #184]	; (8002c40 <HAL_RCC_OscConfig+0x4a4>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d0f0      	beq.n	8002b74 <HAL_RCC_OscConfig+0x3d8>
 8002b92:	e018      	b.n	8002bc6 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002b94:	4b2a      	ldr	r3, [pc, #168]	; (8002c40 <HAL_RCC_OscConfig+0x4a4>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a29      	ldr	r2, [pc, #164]	; (8002c40 <HAL_RCC_OscConfig+0x4a4>)
 8002b9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b9e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002ba0:	f7ff fac0 	bl	8002124 <HAL_GetTick>
 8002ba4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002ba6:	e008      	b.n	8002bba <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002ba8:	f7ff fabc 	bl	8002124 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e197      	b.n	8002eea <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002bba:	4b21      	ldr	r3, [pc, #132]	; (8002c40 <HAL_RCC_OscConfig+0x4a4>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1f0      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0304 	and.w	r3, r3, #4
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	f000 8086 	beq.w	8002ce0 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002bd4:	4b1b      	ldr	r3, [pc, #108]	; (8002c44 <HAL_RCC_OscConfig+0x4a8>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a1a      	ldr	r2, [pc, #104]	; (8002c44 <HAL_RCC_OscConfig+0x4a8>)
 8002bda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bde:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002be0:	f7ff faa0 	bl	8002124 <HAL_GetTick>
 8002be4:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002be6:	e008      	b.n	8002bfa <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002be8:	f7ff fa9c 	bl	8002124 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b64      	cmp	r3, #100	; 0x64
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e177      	b.n	8002eea <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002bfa:	4b12      	ldr	r3, [pc, #72]	; (8002c44 <HAL_RCC_OscConfig+0x4a8>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d0f0      	beq.n	8002be8 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d106      	bne.n	8002c1c <HAL_RCC_OscConfig+0x480>
 8002c0e:	4b0c      	ldr	r3, [pc, #48]	; (8002c40 <HAL_RCC_OscConfig+0x4a4>)
 8002c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c12:	4a0b      	ldr	r2, [pc, #44]	; (8002c40 <HAL_RCC_OscConfig+0x4a4>)
 8002c14:	f043 0301 	orr.w	r3, r3, #1
 8002c18:	6713      	str	r3, [r2, #112]	; 0x70
 8002c1a:	e032      	b.n	8002c82 <HAL_RCC_OscConfig+0x4e6>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d111      	bne.n	8002c48 <HAL_RCC_OscConfig+0x4ac>
 8002c24:	4b06      	ldr	r3, [pc, #24]	; (8002c40 <HAL_RCC_OscConfig+0x4a4>)
 8002c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c28:	4a05      	ldr	r2, [pc, #20]	; (8002c40 <HAL_RCC_OscConfig+0x4a4>)
 8002c2a:	f023 0301 	bic.w	r3, r3, #1
 8002c2e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c30:	4b03      	ldr	r3, [pc, #12]	; (8002c40 <HAL_RCC_OscConfig+0x4a4>)
 8002c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c34:	4a02      	ldr	r2, [pc, #8]	; (8002c40 <HAL_RCC_OscConfig+0x4a4>)
 8002c36:	f023 0304 	bic.w	r3, r3, #4
 8002c3a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c3c:	e021      	b.n	8002c82 <HAL_RCC_OscConfig+0x4e6>
 8002c3e:	bf00      	nop
 8002c40:	58024400 	.word	0x58024400
 8002c44:	58024800 	.word	0x58024800
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	2b05      	cmp	r3, #5
 8002c4e:	d10c      	bne.n	8002c6a <HAL_RCC_OscConfig+0x4ce>
 8002c50:	4b83      	ldr	r3, [pc, #524]	; (8002e60 <HAL_RCC_OscConfig+0x6c4>)
 8002c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c54:	4a82      	ldr	r2, [pc, #520]	; (8002e60 <HAL_RCC_OscConfig+0x6c4>)
 8002c56:	f043 0304 	orr.w	r3, r3, #4
 8002c5a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c5c:	4b80      	ldr	r3, [pc, #512]	; (8002e60 <HAL_RCC_OscConfig+0x6c4>)
 8002c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c60:	4a7f      	ldr	r2, [pc, #508]	; (8002e60 <HAL_RCC_OscConfig+0x6c4>)
 8002c62:	f043 0301 	orr.w	r3, r3, #1
 8002c66:	6713      	str	r3, [r2, #112]	; 0x70
 8002c68:	e00b      	b.n	8002c82 <HAL_RCC_OscConfig+0x4e6>
 8002c6a:	4b7d      	ldr	r3, [pc, #500]	; (8002e60 <HAL_RCC_OscConfig+0x6c4>)
 8002c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c6e:	4a7c      	ldr	r2, [pc, #496]	; (8002e60 <HAL_RCC_OscConfig+0x6c4>)
 8002c70:	f023 0301 	bic.w	r3, r3, #1
 8002c74:	6713      	str	r3, [r2, #112]	; 0x70
 8002c76:	4b7a      	ldr	r3, [pc, #488]	; (8002e60 <HAL_RCC_OscConfig+0x6c4>)
 8002c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c7a:	4a79      	ldr	r2, [pc, #484]	; (8002e60 <HAL_RCC_OscConfig+0x6c4>)
 8002c7c:	f023 0304 	bic.w	r3, r3, #4
 8002c80:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d015      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c8a:	f7ff fa4b 	bl	8002124 <HAL_GetTick>
 8002c8e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c90:	e00a      	b.n	8002ca8 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c92:	f7ff fa47 	bl	8002124 <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d901      	bls.n	8002ca8 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e120      	b.n	8002eea <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ca8:	4b6d      	ldr	r3, [pc, #436]	; (8002e60 <HAL_RCC_OscConfig+0x6c4>)
 8002caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cac:	f003 0302 	and.w	r3, r3, #2
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d0ee      	beq.n	8002c92 <HAL_RCC_OscConfig+0x4f6>
 8002cb4:	e014      	b.n	8002ce0 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cb6:	f7ff fa35 	bl	8002124 <HAL_GetTick>
 8002cba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002cbc:	e00a      	b.n	8002cd4 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cbe:	f7ff fa31 	bl	8002124 <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d901      	bls.n	8002cd4 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e10a      	b.n	8002eea <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002cd4:	4b62      	ldr	r3, [pc, #392]	; (8002e60 <HAL_RCC_OscConfig+0x6c4>)
 8002cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd8:	f003 0302 	and.w	r3, r3, #2
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d1ee      	bne.n	8002cbe <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	f000 80ff 	beq.w	8002ee8 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002cea:	4b5d      	ldr	r3, [pc, #372]	; (8002e60 <HAL_RCC_OscConfig+0x6c4>)
 8002cec:	691b      	ldr	r3, [r3, #16]
 8002cee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002cf2:	2b18      	cmp	r3, #24
 8002cf4:	f000 80ba 	beq.w	8002e6c <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	f040 8095 	bne.w	8002e2c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d02:	4b57      	ldr	r3, [pc, #348]	; (8002e60 <HAL_RCC_OscConfig+0x6c4>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a56      	ldr	r2, [pc, #344]	; (8002e60 <HAL_RCC_OscConfig+0x6c4>)
 8002d08:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d0e:	f7ff fa09 	bl	8002124 <HAL_GetTick>
 8002d12:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d14:	e008      	b.n	8002d28 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d16:	f7ff fa05 	bl	8002124 <HAL_GetTick>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d901      	bls.n	8002d28 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	e0e0      	b.n	8002eea <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d28:	4b4d      	ldr	r3, [pc, #308]	; (8002e60 <HAL_RCC_OscConfig+0x6c4>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d1f0      	bne.n	8002d16 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d34:	4b4a      	ldr	r3, [pc, #296]	; (8002e60 <HAL_RCC_OscConfig+0x6c4>)
 8002d36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d38:	4b4a      	ldr	r3, [pc, #296]	; (8002e64 <HAL_RCC_OscConfig+0x6c8>)
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002d44:	0112      	lsls	r2, r2, #4
 8002d46:	430a      	orrs	r2, r1
 8002d48:	4945      	ldr	r1, [pc, #276]	; (8002e60 <HAL_RCC_OscConfig+0x6c4>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	628b      	str	r3, [r1, #40]	; 0x28
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d52:	3b01      	subs	r3, #1
 8002d54:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d5c:	3b01      	subs	r3, #1
 8002d5e:	025b      	lsls	r3, r3, #9
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	431a      	orrs	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d68:	3b01      	subs	r3, #1
 8002d6a:	041b      	lsls	r3, r3, #16
 8002d6c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002d70:	431a      	orrs	r2, r3
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d76:	3b01      	subs	r3, #1
 8002d78:	061b      	lsls	r3, r3, #24
 8002d7a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002d7e:	4938      	ldr	r1, [pc, #224]	; (8002e60 <HAL_RCC_OscConfig+0x6c4>)
 8002d80:	4313      	orrs	r3, r2
 8002d82:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002d84:	4b36      	ldr	r3, [pc, #216]	; (8002e60 <HAL_RCC_OscConfig+0x6c4>)
 8002d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d88:	4a35      	ldr	r2, [pc, #212]	; (8002e60 <HAL_RCC_OscConfig+0x6c4>)
 8002d8a:	f023 0301 	bic.w	r3, r3, #1
 8002d8e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002d90:	4b33      	ldr	r3, [pc, #204]	; (8002e60 <HAL_RCC_OscConfig+0x6c4>)
 8002d92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d94:	4b34      	ldr	r3, [pc, #208]	; (8002e68 <HAL_RCC_OscConfig+0x6cc>)
 8002d96:	4013      	ands	r3, r2
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002d9c:	00d2      	lsls	r2, r2, #3
 8002d9e:	4930      	ldr	r1, [pc, #192]	; (8002e60 <HAL_RCC_OscConfig+0x6c4>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002da4:	4b2e      	ldr	r3, [pc, #184]	; (8002e60 <HAL_RCC_OscConfig+0x6c4>)
 8002da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da8:	f023 020c 	bic.w	r2, r3, #12
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db0:	492b      	ldr	r1, [pc, #172]	; (8002e60 <HAL_RCC_OscConfig+0x6c4>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002db6:	4b2a      	ldr	r3, [pc, #168]	; (8002e60 <HAL_RCC_OscConfig+0x6c4>)
 8002db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dba:	f023 0202 	bic.w	r2, r3, #2
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dc2:	4927      	ldr	r1, [pc, #156]	; (8002e60 <HAL_RCC_OscConfig+0x6c4>)
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002dc8:	4b25      	ldr	r3, [pc, #148]	; (8002e60 <HAL_RCC_OscConfig+0x6c4>)
 8002dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dcc:	4a24      	ldr	r2, [pc, #144]	; (8002e60 <HAL_RCC_OscConfig+0x6c4>)
 8002dce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dd2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002dd4:	4b22      	ldr	r3, [pc, #136]	; (8002e60 <HAL_RCC_OscConfig+0x6c4>)
 8002dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd8:	4a21      	ldr	r2, [pc, #132]	; (8002e60 <HAL_RCC_OscConfig+0x6c4>)
 8002dda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dde:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002de0:	4b1f      	ldr	r3, [pc, #124]	; (8002e60 <HAL_RCC_OscConfig+0x6c4>)
 8002de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de4:	4a1e      	ldr	r2, [pc, #120]	; (8002e60 <HAL_RCC_OscConfig+0x6c4>)
 8002de6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002dec:	4b1c      	ldr	r3, [pc, #112]	; (8002e60 <HAL_RCC_OscConfig+0x6c4>)
 8002dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df0:	4a1b      	ldr	r2, [pc, #108]	; (8002e60 <HAL_RCC_OscConfig+0x6c4>)
 8002df2:	f043 0301 	orr.w	r3, r3, #1
 8002df6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002df8:	4b19      	ldr	r3, [pc, #100]	; (8002e60 <HAL_RCC_OscConfig+0x6c4>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a18      	ldr	r2, [pc, #96]	; (8002e60 <HAL_RCC_OscConfig+0x6c4>)
 8002dfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e04:	f7ff f98e 	bl	8002124 <HAL_GetTick>
 8002e08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e0a:	e008      	b.n	8002e1e <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e0c:	f7ff f98a 	bl	8002124 <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d901      	bls.n	8002e1e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e065      	b.n	8002eea <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e1e:	4b10      	ldr	r3, [pc, #64]	; (8002e60 <HAL_RCC_OscConfig+0x6c4>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d0f0      	beq.n	8002e0c <HAL_RCC_OscConfig+0x670>
 8002e2a:	e05d      	b.n	8002ee8 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e2c:	4b0c      	ldr	r3, [pc, #48]	; (8002e60 <HAL_RCC_OscConfig+0x6c4>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a0b      	ldr	r2, [pc, #44]	; (8002e60 <HAL_RCC_OscConfig+0x6c4>)
 8002e32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e38:	f7ff f974 	bl	8002124 <HAL_GetTick>
 8002e3c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e3e:	e008      	b.n	8002e52 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e40:	f7ff f970 	bl	8002124 <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e04b      	b.n	8002eea <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e52:	4b03      	ldr	r3, [pc, #12]	; (8002e60 <HAL_RCC_OscConfig+0x6c4>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d1f0      	bne.n	8002e40 <HAL_RCC_OscConfig+0x6a4>
 8002e5e:	e043      	b.n	8002ee8 <HAL_RCC_OscConfig+0x74c>
 8002e60:	58024400 	.word	0x58024400
 8002e64:	fffffc0c 	.word	0xfffffc0c
 8002e68:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002e6c:	4b21      	ldr	r3, [pc, #132]	; (8002ef4 <HAL_RCC_OscConfig+0x758>)
 8002e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e70:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002e72:	4b20      	ldr	r3, [pc, #128]	; (8002ef4 <HAL_RCC_OscConfig+0x758>)
 8002e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e76:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d031      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	f003 0203 	and.w	r2, r3, #3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d12a      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	091b      	lsrs	r3, r3, #4
 8002e92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d122      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d11a      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	0a5b      	lsrs	r3, r3, #9
 8002eb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eba:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d111      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	0c1b      	lsrs	r3, r3, #16
 8002ec4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ecc:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d108      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	0e1b      	lsrs	r3, r3, #24
 8002ed6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ede:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d001      	beq.n	8002ee8 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e000      	b.n	8002eea <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3730      	adds	r7, #48	; 0x30
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	58024400 	.word	0x58024400

08002ef8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b086      	sub	sp, #24
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d101      	bne.n	8002f0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e19c      	b.n	8003246 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f0c:	4b8a      	ldr	r3, [pc, #552]	; (8003138 <HAL_RCC_ClockConfig+0x240>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 030f 	and.w	r3, r3, #15
 8002f14:	683a      	ldr	r2, [r7, #0]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d910      	bls.n	8002f3c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f1a:	4b87      	ldr	r3, [pc, #540]	; (8003138 <HAL_RCC_ClockConfig+0x240>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f023 020f 	bic.w	r2, r3, #15
 8002f22:	4985      	ldr	r1, [pc, #532]	; (8003138 <HAL_RCC_ClockConfig+0x240>)
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f2a:	4b83      	ldr	r3, [pc, #524]	; (8003138 <HAL_RCC_ClockConfig+0x240>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 030f 	and.w	r3, r3, #15
 8002f32:	683a      	ldr	r2, [r7, #0]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d001      	beq.n	8002f3c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e184      	b.n	8003246 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0304 	and.w	r3, r3, #4
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d010      	beq.n	8002f6a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	691a      	ldr	r2, [r3, #16]
 8002f4c:	4b7b      	ldr	r3, [pc, #492]	; (800313c <HAL_RCC_ClockConfig+0x244>)
 8002f4e:	699b      	ldr	r3, [r3, #24]
 8002f50:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d908      	bls.n	8002f6a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002f58:	4b78      	ldr	r3, [pc, #480]	; (800313c <HAL_RCC_ClockConfig+0x244>)
 8002f5a:	699b      	ldr	r3, [r3, #24]
 8002f5c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	691b      	ldr	r3, [r3, #16]
 8002f64:	4975      	ldr	r1, [pc, #468]	; (800313c <HAL_RCC_ClockConfig+0x244>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0308 	and.w	r3, r3, #8
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d010      	beq.n	8002f98 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	695a      	ldr	r2, [r3, #20]
 8002f7a:	4b70      	ldr	r3, [pc, #448]	; (800313c <HAL_RCC_ClockConfig+0x244>)
 8002f7c:	69db      	ldr	r3, [r3, #28]
 8002f7e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d908      	bls.n	8002f98 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002f86:	4b6d      	ldr	r3, [pc, #436]	; (800313c <HAL_RCC_ClockConfig+0x244>)
 8002f88:	69db      	ldr	r3, [r3, #28]
 8002f8a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	695b      	ldr	r3, [r3, #20]
 8002f92:	496a      	ldr	r1, [pc, #424]	; (800313c <HAL_RCC_ClockConfig+0x244>)
 8002f94:	4313      	orrs	r3, r2
 8002f96:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0310 	and.w	r3, r3, #16
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d010      	beq.n	8002fc6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	699a      	ldr	r2, [r3, #24]
 8002fa8:	4b64      	ldr	r3, [pc, #400]	; (800313c <HAL_RCC_ClockConfig+0x244>)
 8002faa:	69db      	ldr	r3, [r3, #28]
 8002fac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d908      	bls.n	8002fc6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002fb4:	4b61      	ldr	r3, [pc, #388]	; (800313c <HAL_RCC_ClockConfig+0x244>)
 8002fb6:	69db      	ldr	r3, [r3, #28]
 8002fb8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	699b      	ldr	r3, [r3, #24]
 8002fc0:	495e      	ldr	r1, [pc, #376]	; (800313c <HAL_RCC_ClockConfig+0x244>)
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0320 	and.w	r3, r3, #32
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d010      	beq.n	8002ff4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	69da      	ldr	r2, [r3, #28]
 8002fd6:	4b59      	ldr	r3, [pc, #356]	; (800313c <HAL_RCC_ClockConfig+0x244>)
 8002fd8:	6a1b      	ldr	r3, [r3, #32]
 8002fda:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d908      	bls.n	8002ff4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002fe2:	4b56      	ldr	r3, [pc, #344]	; (800313c <HAL_RCC_ClockConfig+0x244>)
 8002fe4:	6a1b      	ldr	r3, [r3, #32]
 8002fe6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	69db      	ldr	r3, [r3, #28]
 8002fee:	4953      	ldr	r1, [pc, #332]	; (800313c <HAL_RCC_ClockConfig+0x244>)
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0302 	and.w	r3, r3, #2
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d010      	beq.n	8003022 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	68da      	ldr	r2, [r3, #12]
 8003004:	4b4d      	ldr	r3, [pc, #308]	; (800313c <HAL_RCC_ClockConfig+0x244>)
 8003006:	699b      	ldr	r3, [r3, #24]
 8003008:	f003 030f 	and.w	r3, r3, #15
 800300c:	429a      	cmp	r2, r3
 800300e:	d908      	bls.n	8003022 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003010:	4b4a      	ldr	r3, [pc, #296]	; (800313c <HAL_RCC_ClockConfig+0x244>)
 8003012:	699b      	ldr	r3, [r3, #24]
 8003014:	f023 020f 	bic.w	r2, r3, #15
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	4947      	ldr	r1, [pc, #284]	; (800313c <HAL_RCC_ClockConfig+0x244>)
 800301e:	4313      	orrs	r3, r2
 8003020:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0301 	and.w	r3, r3, #1
 800302a:	2b00      	cmp	r3, #0
 800302c:	d055      	beq.n	80030da <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800302e:	4b43      	ldr	r3, [pc, #268]	; (800313c <HAL_RCC_ClockConfig+0x244>)
 8003030:	699b      	ldr	r3, [r3, #24]
 8003032:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	4940      	ldr	r1, [pc, #256]	; (800313c <HAL_RCC_ClockConfig+0x244>)
 800303c:	4313      	orrs	r3, r2
 800303e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	2b02      	cmp	r3, #2
 8003046:	d107      	bne.n	8003058 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003048:	4b3c      	ldr	r3, [pc, #240]	; (800313c <HAL_RCC_ClockConfig+0x244>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d121      	bne.n	8003098 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e0f6      	b.n	8003246 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	2b03      	cmp	r3, #3
 800305e:	d107      	bne.n	8003070 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003060:	4b36      	ldr	r3, [pc, #216]	; (800313c <HAL_RCC_ClockConfig+0x244>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d115      	bne.n	8003098 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e0ea      	b.n	8003246 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	2b01      	cmp	r3, #1
 8003076:	d107      	bne.n	8003088 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003078:	4b30      	ldr	r3, [pc, #192]	; (800313c <HAL_RCC_ClockConfig+0x244>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003080:	2b00      	cmp	r3, #0
 8003082:	d109      	bne.n	8003098 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e0de      	b.n	8003246 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003088:	4b2c      	ldr	r3, [pc, #176]	; (800313c <HAL_RCC_ClockConfig+0x244>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0304 	and.w	r3, r3, #4
 8003090:	2b00      	cmp	r3, #0
 8003092:	d101      	bne.n	8003098 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e0d6      	b.n	8003246 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003098:	4b28      	ldr	r3, [pc, #160]	; (800313c <HAL_RCC_ClockConfig+0x244>)
 800309a:	691b      	ldr	r3, [r3, #16]
 800309c:	f023 0207 	bic.w	r2, r3, #7
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	4925      	ldr	r1, [pc, #148]	; (800313c <HAL_RCC_ClockConfig+0x244>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030aa:	f7ff f83b 	bl	8002124 <HAL_GetTick>
 80030ae:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030b0:	e00a      	b.n	80030c8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030b2:	f7ff f837 	bl	8002124 <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d901      	bls.n	80030c8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80030c4:	2303      	movs	r3, #3
 80030c6:	e0be      	b.n	8003246 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030c8:	4b1c      	ldr	r3, [pc, #112]	; (800313c <HAL_RCC_ClockConfig+0x244>)
 80030ca:	691b      	ldr	r3, [r3, #16]
 80030cc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	00db      	lsls	r3, r3, #3
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d1eb      	bne.n	80030b2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0302 	and.w	r3, r3, #2
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d010      	beq.n	8003108 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	68da      	ldr	r2, [r3, #12]
 80030ea:	4b14      	ldr	r3, [pc, #80]	; (800313c <HAL_RCC_ClockConfig+0x244>)
 80030ec:	699b      	ldr	r3, [r3, #24]
 80030ee:	f003 030f 	and.w	r3, r3, #15
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d208      	bcs.n	8003108 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030f6:	4b11      	ldr	r3, [pc, #68]	; (800313c <HAL_RCC_ClockConfig+0x244>)
 80030f8:	699b      	ldr	r3, [r3, #24]
 80030fa:	f023 020f 	bic.w	r2, r3, #15
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	490e      	ldr	r1, [pc, #56]	; (800313c <HAL_RCC_ClockConfig+0x244>)
 8003104:	4313      	orrs	r3, r2
 8003106:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003108:	4b0b      	ldr	r3, [pc, #44]	; (8003138 <HAL_RCC_ClockConfig+0x240>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 030f 	and.w	r3, r3, #15
 8003110:	683a      	ldr	r2, [r7, #0]
 8003112:	429a      	cmp	r2, r3
 8003114:	d214      	bcs.n	8003140 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003116:	4b08      	ldr	r3, [pc, #32]	; (8003138 <HAL_RCC_ClockConfig+0x240>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f023 020f 	bic.w	r2, r3, #15
 800311e:	4906      	ldr	r1, [pc, #24]	; (8003138 <HAL_RCC_ClockConfig+0x240>)
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	4313      	orrs	r3, r2
 8003124:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003126:	4b04      	ldr	r3, [pc, #16]	; (8003138 <HAL_RCC_ClockConfig+0x240>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 030f 	and.w	r3, r3, #15
 800312e:	683a      	ldr	r2, [r7, #0]
 8003130:	429a      	cmp	r2, r3
 8003132:	d005      	beq.n	8003140 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e086      	b.n	8003246 <HAL_RCC_ClockConfig+0x34e>
 8003138:	52002000 	.word	0x52002000
 800313c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0304 	and.w	r3, r3, #4
 8003148:	2b00      	cmp	r3, #0
 800314a:	d010      	beq.n	800316e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	691a      	ldr	r2, [r3, #16]
 8003150:	4b3f      	ldr	r3, [pc, #252]	; (8003250 <HAL_RCC_ClockConfig+0x358>)
 8003152:	699b      	ldr	r3, [r3, #24]
 8003154:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003158:	429a      	cmp	r2, r3
 800315a:	d208      	bcs.n	800316e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800315c:	4b3c      	ldr	r3, [pc, #240]	; (8003250 <HAL_RCC_ClockConfig+0x358>)
 800315e:	699b      	ldr	r3, [r3, #24]
 8003160:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	691b      	ldr	r3, [r3, #16]
 8003168:	4939      	ldr	r1, [pc, #228]	; (8003250 <HAL_RCC_ClockConfig+0x358>)
 800316a:	4313      	orrs	r3, r2
 800316c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0308 	and.w	r3, r3, #8
 8003176:	2b00      	cmp	r3, #0
 8003178:	d010      	beq.n	800319c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	695a      	ldr	r2, [r3, #20]
 800317e:	4b34      	ldr	r3, [pc, #208]	; (8003250 <HAL_RCC_ClockConfig+0x358>)
 8003180:	69db      	ldr	r3, [r3, #28]
 8003182:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003186:	429a      	cmp	r2, r3
 8003188:	d208      	bcs.n	800319c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800318a:	4b31      	ldr	r3, [pc, #196]	; (8003250 <HAL_RCC_ClockConfig+0x358>)
 800318c:	69db      	ldr	r3, [r3, #28]
 800318e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	695b      	ldr	r3, [r3, #20]
 8003196:	492e      	ldr	r1, [pc, #184]	; (8003250 <HAL_RCC_ClockConfig+0x358>)
 8003198:	4313      	orrs	r3, r2
 800319a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0310 	and.w	r3, r3, #16
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d010      	beq.n	80031ca <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	699a      	ldr	r2, [r3, #24]
 80031ac:	4b28      	ldr	r3, [pc, #160]	; (8003250 <HAL_RCC_ClockConfig+0x358>)
 80031ae:	69db      	ldr	r3, [r3, #28]
 80031b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d208      	bcs.n	80031ca <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80031b8:	4b25      	ldr	r3, [pc, #148]	; (8003250 <HAL_RCC_ClockConfig+0x358>)
 80031ba:	69db      	ldr	r3, [r3, #28]
 80031bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	699b      	ldr	r3, [r3, #24]
 80031c4:	4922      	ldr	r1, [pc, #136]	; (8003250 <HAL_RCC_ClockConfig+0x358>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0320 	and.w	r3, r3, #32
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d010      	beq.n	80031f8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	69da      	ldr	r2, [r3, #28]
 80031da:	4b1d      	ldr	r3, [pc, #116]	; (8003250 <HAL_RCC_ClockConfig+0x358>)
 80031dc:	6a1b      	ldr	r3, [r3, #32]
 80031de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d208      	bcs.n	80031f8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80031e6:	4b1a      	ldr	r3, [pc, #104]	; (8003250 <HAL_RCC_ClockConfig+0x358>)
 80031e8:	6a1b      	ldr	r3, [r3, #32]
 80031ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	69db      	ldr	r3, [r3, #28]
 80031f2:	4917      	ldr	r1, [pc, #92]	; (8003250 <HAL_RCC_ClockConfig+0x358>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80031f8:	f000 f834 	bl	8003264 <HAL_RCC_GetSysClockFreq>
 80031fc:	4602      	mov	r2, r0
 80031fe:	4b14      	ldr	r3, [pc, #80]	; (8003250 <HAL_RCC_ClockConfig+0x358>)
 8003200:	699b      	ldr	r3, [r3, #24]
 8003202:	0a1b      	lsrs	r3, r3, #8
 8003204:	f003 030f 	and.w	r3, r3, #15
 8003208:	4912      	ldr	r1, [pc, #72]	; (8003254 <HAL_RCC_ClockConfig+0x35c>)
 800320a:	5ccb      	ldrb	r3, [r1, r3]
 800320c:	f003 031f 	and.w	r3, r3, #31
 8003210:	fa22 f303 	lsr.w	r3, r2, r3
 8003214:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003216:	4b0e      	ldr	r3, [pc, #56]	; (8003250 <HAL_RCC_ClockConfig+0x358>)
 8003218:	699b      	ldr	r3, [r3, #24]
 800321a:	f003 030f 	and.w	r3, r3, #15
 800321e:	4a0d      	ldr	r2, [pc, #52]	; (8003254 <HAL_RCC_ClockConfig+0x35c>)
 8003220:	5cd3      	ldrb	r3, [r2, r3]
 8003222:	f003 031f 	and.w	r3, r3, #31
 8003226:	693a      	ldr	r2, [r7, #16]
 8003228:	fa22 f303 	lsr.w	r3, r2, r3
 800322c:	4a0a      	ldr	r2, [pc, #40]	; (8003258 <HAL_RCC_ClockConfig+0x360>)
 800322e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003230:	4a0a      	ldr	r2, [pc, #40]	; (800325c <HAL_RCC_ClockConfig+0x364>)
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003236:	4b0a      	ldr	r3, [pc, #40]	; (8003260 <HAL_RCC_ClockConfig+0x368>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4618      	mov	r0, r3
 800323c:	f7fe ff28 	bl	8002090 <HAL_InitTick>
 8003240:	4603      	mov	r3, r0
 8003242:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003244:	7bfb      	ldrb	r3, [r7, #15]
}
 8003246:	4618      	mov	r0, r3
 8003248:	3718      	adds	r7, #24
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	58024400 	.word	0x58024400
 8003254:	08009588 	.word	0x08009588
 8003258:	24000010 	.word	0x24000010
 800325c:	2400000c 	.word	0x2400000c
 8003260:	24000014 	.word	0x24000014

08003264 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003264:	b480      	push	{r7}
 8003266:	b089      	sub	sp, #36	; 0x24
 8003268:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800326a:	4bb3      	ldr	r3, [pc, #716]	; (8003538 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003272:	2b18      	cmp	r3, #24
 8003274:	f200 8155 	bhi.w	8003522 <HAL_RCC_GetSysClockFreq+0x2be>
 8003278:	a201      	add	r2, pc, #4	; (adr r2, 8003280 <HAL_RCC_GetSysClockFreq+0x1c>)
 800327a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800327e:	bf00      	nop
 8003280:	080032e5 	.word	0x080032e5
 8003284:	08003523 	.word	0x08003523
 8003288:	08003523 	.word	0x08003523
 800328c:	08003523 	.word	0x08003523
 8003290:	08003523 	.word	0x08003523
 8003294:	08003523 	.word	0x08003523
 8003298:	08003523 	.word	0x08003523
 800329c:	08003523 	.word	0x08003523
 80032a0:	0800330b 	.word	0x0800330b
 80032a4:	08003523 	.word	0x08003523
 80032a8:	08003523 	.word	0x08003523
 80032ac:	08003523 	.word	0x08003523
 80032b0:	08003523 	.word	0x08003523
 80032b4:	08003523 	.word	0x08003523
 80032b8:	08003523 	.word	0x08003523
 80032bc:	08003523 	.word	0x08003523
 80032c0:	08003311 	.word	0x08003311
 80032c4:	08003523 	.word	0x08003523
 80032c8:	08003523 	.word	0x08003523
 80032cc:	08003523 	.word	0x08003523
 80032d0:	08003523 	.word	0x08003523
 80032d4:	08003523 	.word	0x08003523
 80032d8:	08003523 	.word	0x08003523
 80032dc:	08003523 	.word	0x08003523
 80032e0:	08003317 	.word	0x08003317
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80032e4:	4b94      	ldr	r3, [pc, #592]	; (8003538 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0320 	and.w	r3, r3, #32
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d009      	beq.n	8003304 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80032f0:	4b91      	ldr	r3, [pc, #580]	; (8003538 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	08db      	lsrs	r3, r3, #3
 80032f6:	f003 0303 	and.w	r3, r3, #3
 80032fa:	4a90      	ldr	r2, [pc, #576]	; (800353c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80032fc:	fa22 f303 	lsr.w	r3, r2, r3
 8003300:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003302:	e111      	b.n	8003528 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003304:	4b8d      	ldr	r3, [pc, #564]	; (800353c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003306:	61bb      	str	r3, [r7, #24]
    break;
 8003308:	e10e      	b.n	8003528 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800330a:	4b8d      	ldr	r3, [pc, #564]	; (8003540 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800330c:	61bb      	str	r3, [r7, #24]
    break;
 800330e:	e10b      	b.n	8003528 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003310:	4b8c      	ldr	r3, [pc, #560]	; (8003544 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003312:	61bb      	str	r3, [r7, #24]
    break;
 8003314:	e108      	b.n	8003528 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003316:	4b88      	ldr	r3, [pc, #544]	; (8003538 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800331a:	f003 0303 	and.w	r3, r3, #3
 800331e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003320:	4b85      	ldr	r3, [pc, #532]	; (8003538 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003324:	091b      	lsrs	r3, r3, #4
 8003326:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800332a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800332c:	4b82      	ldr	r3, [pc, #520]	; (8003538 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800332e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003330:	f003 0301 	and.w	r3, r3, #1
 8003334:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003336:	4b80      	ldr	r3, [pc, #512]	; (8003538 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800333a:	08db      	lsrs	r3, r3, #3
 800333c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003340:	68fa      	ldr	r2, [r7, #12]
 8003342:	fb02 f303 	mul.w	r3, r2, r3
 8003346:	ee07 3a90 	vmov	s15, r3
 800334a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800334e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	2b00      	cmp	r3, #0
 8003356:	f000 80e1 	beq.w	800351c <HAL_RCC_GetSysClockFreq+0x2b8>
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	2b02      	cmp	r3, #2
 800335e:	f000 8083 	beq.w	8003468 <HAL_RCC_GetSysClockFreq+0x204>
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	2b02      	cmp	r3, #2
 8003366:	f200 80a1 	bhi.w	80034ac <HAL_RCC_GetSysClockFreq+0x248>
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d003      	beq.n	8003378 <HAL_RCC_GetSysClockFreq+0x114>
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	2b01      	cmp	r3, #1
 8003374:	d056      	beq.n	8003424 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003376:	e099      	b.n	80034ac <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003378:	4b6f      	ldr	r3, [pc, #444]	; (8003538 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0320 	and.w	r3, r3, #32
 8003380:	2b00      	cmp	r3, #0
 8003382:	d02d      	beq.n	80033e0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003384:	4b6c      	ldr	r3, [pc, #432]	; (8003538 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	08db      	lsrs	r3, r3, #3
 800338a:	f003 0303 	and.w	r3, r3, #3
 800338e:	4a6b      	ldr	r2, [pc, #428]	; (800353c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003390:	fa22 f303 	lsr.w	r3, r2, r3
 8003394:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	ee07 3a90 	vmov	s15, r3
 800339c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	ee07 3a90 	vmov	s15, r3
 80033a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033ae:	4b62      	ldr	r3, [pc, #392]	; (8003538 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033b6:	ee07 3a90 	vmov	s15, r3
 80033ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033be:	ed97 6a02 	vldr	s12, [r7, #8]
 80033c2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003548 <HAL_RCC_GetSysClockFreq+0x2e4>
 80033c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033da:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80033de:	e087      	b.n	80034f0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	ee07 3a90 	vmov	s15, r3
 80033e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033ea:	eddf 6a58 	vldr	s13, [pc, #352]	; 800354c <HAL_RCC_GetSysClockFreq+0x2e8>
 80033ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033f2:	4b51      	ldr	r3, [pc, #324]	; (8003538 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033fa:	ee07 3a90 	vmov	s15, r3
 80033fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003402:	ed97 6a02 	vldr	s12, [r7, #8]
 8003406:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003548 <HAL_RCC_GetSysClockFreq+0x2e4>
 800340a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800340e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003412:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003416:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800341a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800341e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003422:	e065      	b.n	80034f0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	ee07 3a90 	vmov	s15, r3
 800342a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800342e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003550 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003432:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003436:	4b40      	ldr	r3, [pc, #256]	; (8003538 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800343e:	ee07 3a90 	vmov	s15, r3
 8003442:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003446:	ed97 6a02 	vldr	s12, [r7, #8]
 800344a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003548 <HAL_RCC_GetSysClockFreq+0x2e4>
 800344e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003452:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003456:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800345a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800345e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003462:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003466:	e043      	b.n	80034f0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	ee07 3a90 	vmov	s15, r3
 800346e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003472:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003554 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003476:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800347a:	4b2f      	ldr	r3, [pc, #188]	; (8003538 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800347c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003482:	ee07 3a90 	vmov	s15, r3
 8003486:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800348a:	ed97 6a02 	vldr	s12, [r7, #8]
 800348e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003548 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003492:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003496:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800349a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800349e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80034aa:	e021      	b.n	80034f0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	ee07 3a90 	vmov	s15, r3
 80034b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034b6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003550 <HAL_RCC_GetSysClockFreq+0x2ec>
 80034ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034be:	4b1e      	ldr	r3, [pc, #120]	; (8003538 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034c6:	ee07 3a90 	vmov	s15, r3
 80034ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80034d2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003548 <HAL_RCC_GetSysClockFreq+0x2e4>
 80034d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80034ee:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80034f0:	4b11      	ldr	r3, [pc, #68]	; (8003538 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f4:	0a5b      	lsrs	r3, r3, #9
 80034f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034fa:	3301      	adds	r3, #1
 80034fc:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	ee07 3a90 	vmov	s15, r3
 8003504:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003508:	edd7 6a07 	vldr	s13, [r7, #28]
 800350c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003510:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003514:	ee17 3a90 	vmov	r3, s15
 8003518:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800351a:	e005      	b.n	8003528 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800351c:	2300      	movs	r3, #0
 800351e:	61bb      	str	r3, [r7, #24]
    break;
 8003520:	e002      	b.n	8003528 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003522:	4b07      	ldr	r3, [pc, #28]	; (8003540 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003524:	61bb      	str	r3, [r7, #24]
    break;
 8003526:	bf00      	nop
  }

  return sysclockfreq;
 8003528:	69bb      	ldr	r3, [r7, #24]
}
 800352a:	4618      	mov	r0, r3
 800352c:	3724      	adds	r7, #36	; 0x24
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop
 8003538:	58024400 	.word	0x58024400
 800353c:	03d09000 	.word	0x03d09000
 8003540:	003d0900 	.word	0x003d0900
 8003544:	007a1200 	.word	0x007a1200
 8003548:	46000000 	.word	0x46000000
 800354c:	4c742400 	.word	0x4c742400
 8003550:	4a742400 	.word	0x4a742400
 8003554:	4af42400 	.word	0x4af42400

08003558 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800355e:	f7ff fe81 	bl	8003264 <HAL_RCC_GetSysClockFreq>
 8003562:	4602      	mov	r2, r0
 8003564:	4b10      	ldr	r3, [pc, #64]	; (80035a8 <HAL_RCC_GetHCLKFreq+0x50>)
 8003566:	699b      	ldr	r3, [r3, #24]
 8003568:	0a1b      	lsrs	r3, r3, #8
 800356a:	f003 030f 	and.w	r3, r3, #15
 800356e:	490f      	ldr	r1, [pc, #60]	; (80035ac <HAL_RCC_GetHCLKFreq+0x54>)
 8003570:	5ccb      	ldrb	r3, [r1, r3]
 8003572:	f003 031f 	and.w	r3, r3, #31
 8003576:	fa22 f303 	lsr.w	r3, r2, r3
 800357a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800357c:	4b0a      	ldr	r3, [pc, #40]	; (80035a8 <HAL_RCC_GetHCLKFreq+0x50>)
 800357e:	699b      	ldr	r3, [r3, #24]
 8003580:	f003 030f 	and.w	r3, r3, #15
 8003584:	4a09      	ldr	r2, [pc, #36]	; (80035ac <HAL_RCC_GetHCLKFreq+0x54>)
 8003586:	5cd3      	ldrb	r3, [r2, r3]
 8003588:	f003 031f 	and.w	r3, r3, #31
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	fa22 f303 	lsr.w	r3, r2, r3
 8003592:	4a07      	ldr	r2, [pc, #28]	; (80035b0 <HAL_RCC_GetHCLKFreq+0x58>)
 8003594:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003596:	4a07      	ldr	r2, [pc, #28]	; (80035b4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800359c:	4b04      	ldr	r3, [pc, #16]	; (80035b0 <HAL_RCC_GetHCLKFreq+0x58>)
 800359e:	681b      	ldr	r3, [r3, #0]
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3708      	adds	r7, #8
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	58024400 	.word	0x58024400
 80035ac:	08009588 	.word	0x08009588
 80035b0:	24000010 	.word	0x24000010
 80035b4:	2400000c 	.word	0x2400000c

080035b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80035bc:	f7ff ffcc 	bl	8003558 <HAL_RCC_GetHCLKFreq>
 80035c0:	4602      	mov	r2, r0
 80035c2:	4b06      	ldr	r3, [pc, #24]	; (80035dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80035c4:	69db      	ldr	r3, [r3, #28]
 80035c6:	091b      	lsrs	r3, r3, #4
 80035c8:	f003 0307 	and.w	r3, r3, #7
 80035cc:	4904      	ldr	r1, [pc, #16]	; (80035e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80035ce:	5ccb      	ldrb	r3, [r1, r3]
 80035d0:	f003 031f 	and.w	r3, r3, #31
 80035d4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80035d8:	4618      	mov	r0, r3
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	58024400 	.word	0x58024400
 80035e0:	08009588 	.word	0x08009588

080035e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80035e8:	f7ff ffb6 	bl	8003558 <HAL_RCC_GetHCLKFreq>
 80035ec:	4602      	mov	r2, r0
 80035ee:	4b06      	ldr	r3, [pc, #24]	; (8003608 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035f0:	69db      	ldr	r3, [r3, #28]
 80035f2:	0a1b      	lsrs	r3, r3, #8
 80035f4:	f003 0307 	and.w	r3, r3, #7
 80035f8:	4904      	ldr	r1, [pc, #16]	; (800360c <HAL_RCC_GetPCLK2Freq+0x28>)
 80035fa:	5ccb      	ldrb	r3, [r1, r3]
 80035fc:	f003 031f 	and.w	r3, r3, #31
 8003600:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003604:	4618      	mov	r0, r3
 8003606:	bd80      	pop	{r7, pc}
 8003608:	58024400 	.word	0x58024400
 800360c:	08009588 	.word	0x08009588

08003610 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b086      	sub	sp, #24
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003618:	2300      	movs	r3, #0
 800361a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800361c:	2300      	movs	r3, #0
 800361e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d03f      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003630:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003634:	d02a      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003636:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800363a:	d824      	bhi.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800363c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003640:	d018      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003642:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003646:	d81e      	bhi.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003648:	2b00      	cmp	r3, #0
 800364a:	d003      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800364c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003650:	d007      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003652:	e018      	b.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003654:	4ba4      	ldr	r3, [pc, #656]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8003656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003658:	4aa3      	ldr	r2, [pc, #652]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800365a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800365e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003660:	e015      	b.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	3304      	adds	r3, #4
 8003666:	2102      	movs	r1, #2
 8003668:	4618      	mov	r0, r3
 800366a:	f001 f989 	bl	8004980 <RCCEx_PLL2_Config>
 800366e:	4603      	mov	r3, r0
 8003670:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003672:	e00c      	b.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	3324      	adds	r3, #36	; 0x24
 8003678:	2102      	movs	r1, #2
 800367a:	4618      	mov	r0, r3
 800367c:	f001 fa32 	bl	8004ae4 <RCCEx_PLL3_Config>
 8003680:	4603      	mov	r3, r0
 8003682:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003684:	e003      	b.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	75fb      	strb	r3, [r7, #23]
      break;
 800368a:	e000      	b.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800368c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800368e:	7dfb      	ldrb	r3, [r7, #23]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d109      	bne.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003694:	4b94      	ldr	r3, [pc, #592]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8003696:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003698:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036a0:	4991      	ldr	r1, [pc, #580]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	650b      	str	r3, [r1, #80]	; 0x50
 80036a6:	e001      	b.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036a8:	7dfb      	ldrb	r3, [r7, #23]
 80036aa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d03d      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036bc:	2b04      	cmp	r3, #4
 80036be:	d826      	bhi.n	800370e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80036c0:	a201      	add	r2, pc, #4	; (adr r2, 80036c8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80036c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036c6:	bf00      	nop
 80036c8:	080036dd 	.word	0x080036dd
 80036cc:	080036eb 	.word	0x080036eb
 80036d0:	080036fd 	.word	0x080036fd
 80036d4:	08003715 	.word	0x08003715
 80036d8:	08003715 	.word	0x08003715
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036dc:	4b82      	ldr	r3, [pc, #520]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80036de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e0:	4a81      	ldr	r2, [pc, #516]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80036e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80036e8:	e015      	b.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	3304      	adds	r3, #4
 80036ee:	2100      	movs	r1, #0
 80036f0:	4618      	mov	r0, r3
 80036f2:	f001 f945 	bl	8004980 <RCCEx_PLL2_Config>
 80036f6:	4603      	mov	r3, r0
 80036f8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80036fa:	e00c      	b.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	3324      	adds	r3, #36	; 0x24
 8003700:	2100      	movs	r1, #0
 8003702:	4618      	mov	r0, r3
 8003704:	f001 f9ee 	bl	8004ae4 <RCCEx_PLL3_Config>
 8003708:	4603      	mov	r3, r0
 800370a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800370c:	e003      	b.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	75fb      	strb	r3, [r7, #23]
      break;
 8003712:	e000      	b.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003714:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003716:	7dfb      	ldrb	r3, [r7, #23]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d109      	bne.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800371c:	4b72      	ldr	r3, [pc, #456]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800371e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003720:	f023 0207 	bic.w	r2, r3, #7
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003728:	496f      	ldr	r1, [pc, #444]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800372a:	4313      	orrs	r3, r2
 800372c:	650b      	str	r3, [r1, #80]	; 0x50
 800372e:	e001      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003730:	7dfb      	ldrb	r3, [r7, #23]
 8003732:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800373c:	2b00      	cmp	r3, #0
 800373e:	d051      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003746:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800374a:	d036      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800374c:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8003750:	d830      	bhi.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8003752:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003756:	d032      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8003758:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800375c:	d82a      	bhi.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800375e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003762:	d02e      	beq.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8003764:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003768:	d824      	bhi.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800376a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800376e:	d018      	beq.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003770:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003774:	d81e      	bhi.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8003776:	2b00      	cmp	r3, #0
 8003778:	d003      	beq.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x172>
 800377a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800377e:	d007      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8003780:	e018      	b.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003782:	4b59      	ldr	r3, [pc, #356]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8003784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003786:	4a58      	ldr	r2, [pc, #352]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8003788:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800378c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800378e:	e019      	b.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	3304      	adds	r3, #4
 8003794:	2100      	movs	r1, #0
 8003796:	4618      	mov	r0, r3
 8003798:	f001 f8f2 	bl	8004980 <RCCEx_PLL2_Config>
 800379c:	4603      	mov	r3, r0
 800379e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80037a0:	e010      	b.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	3324      	adds	r3, #36	; 0x24
 80037a6:	2100      	movs	r1, #0
 80037a8:	4618      	mov	r0, r3
 80037aa:	f001 f99b 	bl	8004ae4 <RCCEx_PLL3_Config>
 80037ae:	4603      	mov	r3, r0
 80037b0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80037b2:	e007      	b.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	75fb      	strb	r3, [r7, #23]
      break;
 80037b8:	e004      	b.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80037ba:	bf00      	nop
 80037bc:	e002      	b.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80037be:	bf00      	nop
 80037c0:	e000      	b.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80037c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037c4:	7dfb      	ldrb	r3, [r7, #23]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d10a      	bne.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80037ca:	4b47      	ldr	r3, [pc, #284]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80037cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ce:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80037d8:	4943      	ldr	r1, [pc, #268]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80037da:	4313      	orrs	r3, r2
 80037dc:	658b      	str	r3, [r1, #88]	; 0x58
 80037de:	e001      	b.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037e0:	7dfb      	ldrb	r3, [r7, #23]
 80037e2:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d051      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80037f6:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80037fa:	d036      	beq.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x25a>
 80037fc:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003800:	d830      	bhi.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8003802:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003806:	d032      	beq.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8003808:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800380c:	d82a      	bhi.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800380e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003812:	d02e      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8003814:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003818:	d824      	bhi.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800381a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800381e:	d018      	beq.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8003820:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003824:	d81e      	bhi.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8003826:	2b00      	cmp	r3, #0
 8003828:	d003      	beq.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x222>
 800382a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800382e:	d007      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003830:	e018      	b.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003832:	4b2d      	ldr	r3, [pc, #180]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8003834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003836:	4a2c      	ldr	r2, [pc, #176]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8003838:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800383c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800383e:	e019      	b.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	3304      	adds	r3, #4
 8003844:	2100      	movs	r1, #0
 8003846:	4618      	mov	r0, r3
 8003848:	f001 f89a 	bl	8004980 <RCCEx_PLL2_Config>
 800384c:	4603      	mov	r3, r0
 800384e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003850:	e010      	b.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	3324      	adds	r3, #36	; 0x24
 8003856:	2100      	movs	r1, #0
 8003858:	4618      	mov	r0, r3
 800385a:	f001 f943 	bl	8004ae4 <RCCEx_PLL3_Config>
 800385e:	4603      	mov	r3, r0
 8003860:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003862:	e007      	b.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	75fb      	strb	r3, [r7, #23]
      break;
 8003868:	e004      	b.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800386a:	bf00      	nop
 800386c:	e002      	b.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800386e:	bf00      	nop
 8003870:	e000      	b.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8003872:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003874:	7dfb      	ldrb	r3, [r7, #23]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d10a      	bne.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800387a:	4b1b      	ldr	r3, [pc, #108]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800387c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800387e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003888:	4917      	ldr	r1, [pc, #92]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800388a:	4313      	orrs	r3, r2
 800388c:	658b      	str	r3, [r1, #88]	; 0x58
 800388e:	e001      	b.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003890:	7dfb      	ldrb	r3, [r7, #23]
 8003892:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d035      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038a4:	2b30      	cmp	r3, #48	; 0x30
 80038a6:	d01c      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80038a8:	2b30      	cmp	r3, #48	; 0x30
 80038aa:	d817      	bhi.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80038ac:	2b20      	cmp	r3, #32
 80038ae:	d00c      	beq.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80038b0:	2b20      	cmp	r3, #32
 80038b2:	d813      	bhi.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d019      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 80038b8:	2b10      	cmp	r3, #16
 80038ba:	d10f      	bne.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038bc:	4b0a      	ldr	r3, [pc, #40]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80038be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c0:	4a09      	ldr	r2, [pc, #36]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80038c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80038c8:	e011      	b.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	3304      	adds	r3, #4
 80038ce:	2102      	movs	r1, #2
 80038d0:	4618      	mov	r0, r3
 80038d2:	f001 f855 	bl	8004980 <RCCEx_PLL2_Config>
 80038d6:	4603      	mov	r3, r0
 80038d8:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80038da:	e008      	b.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	75fb      	strb	r3, [r7, #23]
      break;
 80038e0:	e005      	b.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 80038e2:	bf00      	nop
 80038e4:	e003      	b.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80038e6:	bf00      	nop
 80038e8:	58024400 	.word	0x58024400
      break;
 80038ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038ee:	7dfb      	ldrb	r3, [r7, #23]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d109      	bne.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80038f4:	4ba3      	ldr	r3, [pc, #652]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80038f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038f8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003900:	49a0      	ldr	r1, [pc, #640]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8003902:	4313      	orrs	r3, r2
 8003904:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003906:	e001      	b.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003908:	7dfb      	ldrb	r3, [r7, #23]
 800390a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d047      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800391c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003920:	d030      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8003922:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003926:	d82a      	bhi.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003928:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800392c:	d02c      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x378>
 800392e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003932:	d824      	bhi.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003934:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003938:	d018      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800393a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800393e:	d81e      	bhi.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003940:	2b00      	cmp	r3, #0
 8003942:	d003      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003944:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003948:	d007      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800394a:	e018      	b.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800394c:	4b8d      	ldr	r3, [pc, #564]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800394e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003950:	4a8c      	ldr	r2, [pc, #560]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8003952:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003956:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003958:	e017      	b.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	3304      	adds	r3, #4
 800395e:	2100      	movs	r1, #0
 8003960:	4618      	mov	r0, r3
 8003962:	f001 f80d 	bl	8004980 <RCCEx_PLL2_Config>
 8003966:	4603      	mov	r3, r0
 8003968:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800396a:	e00e      	b.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	3324      	adds	r3, #36	; 0x24
 8003970:	2100      	movs	r1, #0
 8003972:	4618      	mov	r0, r3
 8003974:	f001 f8b6 	bl	8004ae4 <RCCEx_PLL3_Config>
 8003978:	4603      	mov	r3, r0
 800397a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800397c:	e005      	b.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	75fb      	strb	r3, [r7, #23]
      break;
 8003982:	e002      	b.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8003984:	bf00      	nop
 8003986:	e000      	b.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8003988:	bf00      	nop
    }

    if(ret == HAL_OK)
 800398a:	7dfb      	ldrb	r3, [r7, #23]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d109      	bne.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003990:	4b7c      	ldr	r3, [pc, #496]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8003992:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003994:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800399c:	4979      	ldr	r1, [pc, #484]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	650b      	str	r3, [r1, #80]	; 0x50
 80039a2:	e001      	b.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039a4:	7dfb      	ldrb	r3, [r7, #23]
 80039a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d049      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039bc:	d02e      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x40c>
 80039be:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039c2:	d828      	bhi.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x406>
 80039c4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80039c8:	d02a      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80039ca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80039ce:	d822      	bhi.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x406>
 80039d0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80039d4:	d026      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x414>
 80039d6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80039da:	d81c      	bhi.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x406>
 80039dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80039e0:	d010      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 80039e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80039e6:	d816      	bhi.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x406>
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d01d      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x418>
 80039ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039f0:	d111      	bne.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	3304      	adds	r3, #4
 80039f6:	2101      	movs	r1, #1
 80039f8:	4618      	mov	r0, r3
 80039fa:	f000 ffc1 	bl	8004980 <RCCEx_PLL2_Config>
 80039fe:	4603      	mov	r3, r0
 8003a00:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003a02:	e012      	b.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	3324      	adds	r3, #36	; 0x24
 8003a08:	2101      	movs	r1, #1
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f001 f86a 	bl	8004ae4 <RCCEx_PLL3_Config>
 8003a10:	4603      	mov	r3, r0
 8003a12:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003a14:	e009      	b.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	75fb      	strb	r3, [r7, #23]
      break;
 8003a1a:	e006      	b.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003a1c:	bf00      	nop
 8003a1e:	e004      	b.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003a20:	bf00      	nop
 8003a22:	e002      	b.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003a24:	bf00      	nop
 8003a26:	e000      	b.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003a28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a2a:	7dfb      	ldrb	r3, [r7, #23]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d109      	bne.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003a30:	4b54      	ldr	r3, [pc, #336]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8003a32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a34:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a3c:	4951      	ldr	r1, [pc, #324]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	650b      	str	r3, [r1, #80]	; 0x50
 8003a42:	e001      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a44:	7dfb      	ldrb	r3, [r7, #23]
 8003a46:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d04b      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003a5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a5e:	d02e      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8003a60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a64:	d828      	bhi.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003a66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a6a:	d02a      	beq.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8003a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a70:	d822      	bhi.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003a72:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003a76:	d026      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8003a78:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003a7c:	d81c      	bhi.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003a7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a82:	d010      	beq.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x496>
 8003a84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a88:	d816      	bhi.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d01d      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8003a8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a92:	d111      	bne.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	3304      	adds	r3, #4
 8003a98:	2101      	movs	r1, #1
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f000 ff70 	bl	8004980 <RCCEx_PLL2_Config>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003aa4:	e012      	b.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	3324      	adds	r3, #36	; 0x24
 8003aaa:	2101      	movs	r1, #1
 8003aac:	4618      	mov	r0, r3
 8003aae:	f001 f819 	bl	8004ae4 <RCCEx_PLL3_Config>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003ab6:	e009      	b.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	75fb      	strb	r3, [r7, #23]
      break;
 8003abc:	e006      	b.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8003abe:	bf00      	nop
 8003ac0:	e004      	b.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8003ac2:	bf00      	nop
 8003ac4:	e002      	b.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8003ac6:	bf00      	nop
 8003ac8:	e000      	b.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8003aca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003acc:	7dfb      	ldrb	r3, [r7, #23]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d10a      	bne.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003ad2:	4b2c      	ldr	r3, [pc, #176]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8003ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ad6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003ae0:	4928      	ldr	r1, [pc, #160]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	658b      	str	r3, [r1, #88]	; 0x58
 8003ae6:	e001      	b.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ae8:	7dfb      	ldrb	r3, [r7, #23]
 8003aea:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d02f      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003afc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b00:	d00e      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8003b02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b06:	d814      	bhi.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d015      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8003b0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b10:	d10f      	bne.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b12:	4b1c      	ldr	r3, [pc, #112]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8003b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b16:	4a1b      	ldr	r2, [pc, #108]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8003b18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b1c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003b1e:	e00c      	b.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	3304      	adds	r3, #4
 8003b24:	2101      	movs	r1, #1
 8003b26:	4618      	mov	r0, r3
 8003b28:	f000 ff2a 	bl	8004980 <RCCEx_PLL2_Config>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003b30:	e003      	b.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	75fb      	strb	r3, [r7, #23]
      break;
 8003b36:	e000      	b.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8003b38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b3a:	7dfb      	ldrb	r3, [r7, #23]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d109      	bne.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003b40:	4b10      	ldr	r3, [pc, #64]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8003b42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b44:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b4c:	490d      	ldr	r1, [pc, #52]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	650b      	str	r3, [r1, #80]	; 0x50
 8003b52:	e001      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b54:	7dfb      	ldrb	r3, [r7, #23]
 8003b56:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d034      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b68:	2b03      	cmp	r3, #3
 8003b6a:	d81d      	bhi.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8003b6c:	a201      	add	r2, pc, #4	; (adr r2, 8003b74 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8003b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b72:	bf00      	nop
 8003b74:	08003baf 	.word	0x08003baf
 8003b78:	08003b89 	.word	0x08003b89
 8003b7c:	08003b97 	.word	0x08003b97
 8003b80:	08003baf 	.word	0x08003baf
 8003b84:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b88:	4bb1      	ldr	r3, [pc, #708]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b8c:	4ab0      	ldr	r2, [pc, #704]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003b8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b92:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003b94:	e00c      	b.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	3304      	adds	r3, #4
 8003b9a:	2102      	movs	r1, #2
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f000 feef 	bl	8004980 <RCCEx_PLL2_Config>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003ba6:	e003      	b.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	75fb      	strb	r3, [r7, #23]
      break;
 8003bac:	e000      	b.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 8003bae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bb0:	7dfb      	ldrb	r3, [r7, #23]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d109      	bne.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003bb6:	4ba6      	ldr	r3, [pc, #664]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bba:	f023 0203 	bic.w	r2, r3, #3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc2:	49a3      	ldr	r1, [pc, #652]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003bc8:	e001      	b.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bca:	7dfb      	ldrb	r3, [r7, #23]
 8003bcc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	f000 8086 	beq.w	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bdc:	4b9d      	ldr	r3, [pc, #628]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a9c      	ldr	r2, [pc, #624]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8003be2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003be6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003be8:	f7fe fa9c 	bl	8002124 <HAL_GetTick>
 8003bec:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003bee:	e009      	b.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bf0:	f7fe fa98 	bl	8002124 <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	2b64      	cmp	r3, #100	; 0x64
 8003bfc:	d902      	bls.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	75fb      	strb	r3, [r7, #23]
        break;
 8003c02:	e005      	b.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c04:	4b93      	ldr	r3, [pc, #588]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d0ef      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 8003c10:	7dfb      	ldrb	r3, [r7, #23]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d166      	bne.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003c16:	4b8e      	ldr	r3, [pc, #568]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003c18:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003c20:	4053      	eors	r3, r2
 8003c22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d013      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c2a:	4b89      	ldr	r3, [pc, #548]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c32:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c34:	4b86      	ldr	r3, [pc, #536]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c38:	4a85      	ldr	r2, [pc, #532]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003c3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c3e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c40:	4b83      	ldr	r3, [pc, #524]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c44:	4a82      	ldr	r2, [pc, #520]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003c46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c4a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003c4c:	4a80      	ldr	r2, [pc, #512]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003c58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c5c:	d115      	bne.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c5e:	f7fe fa61 	bl	8002124 <HAL_GetTick>
 8003c62:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c64:	e00b      	b.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c66:	f7fe fa5d 	bl	8002124 <HAL_GetTick>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d902      	bls.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	75fb      	strb	r3, [r7, #23]
            break;
 8003c7c:	e005      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c7e:	4b74      	ldr	r3, [pc, #464]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c82:	f003 0302 	and.w	r3, r3, #2
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d0ed      	beq.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 8003c8a:	7dfb      	ldrb	r3, [r7, #23]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d126      	bne.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003c96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c9e:	d10d      	bne.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8003ca0:	4b6b      	ldr	r3, [pc, #428]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003ca2:	691b      	ldr	r3, [r3, #16]
 8003ca4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003cae:	0919      	lsrs	r1, r3, #4
 8003cb0:	4b69      	ldr	r3, [pc, #420]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003cb2:	400b      	ands	r3, r1
 8003cb4:	4966      	ldr	r1, [pc, #408]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	610b      	str	r3, [r1, #16]
 8003cba:	e005      	b.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8003cbc:	4b64      	ldr	r3, [pc, #400]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003cbe:	691b      	ldr	r3, [r3, #16]
 8003cc0:	4a63      	ldr	r2, [pc, #396]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003cc2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003cc6:	6113      	str	r3, [r2, #16]
 8003cc8:	4b61      	ldr	r3, [pc, #388]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003cca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003cd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cd6:	495e      	ldr	r1, [pc, #376]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	670b      	str	r3, [r1, #112]	; 0x70
 8003cdc:	e004      	b.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003cde:	7dfb      	ldrb	r3, [r7, #23]
 8003ce0:	75bb      	strb	r3, [r7, #22]
 8003ce2:	e001      	b.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ce4:	7dfb      	ldrb	r3, [r7, #23]
 8003ce6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0301 	and.w	r3, r3, #1
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d07e      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cf8:	2b28      	cmp	r3, #40	; 0x28
 8003cfa:	d867      	bhi.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8003cfc:	a201      	add	r2, pc, #4	; (adr r2, 8003d04 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8003cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d02:	bf00      	nop
 8003d04:	08003dd3 	.word	0x08003dd3
 8003d08:	08003dcd 	.word	0x08003dcd
 8003d0c:	08003dcd 	.word	0x08003dcd
 8003d10:	08003dcd 	.word	0x08003dcd
 8003d14:	08003dcd 	.word	0x08003dcd
 8003d18:	08003dcd 	.word	0x08003dcd
 8003d1c:	08003dcd 	.word	0x08003dcd
 8003d20:	08003dcd 	.word	0x08003dcd
 8003d24:	08003da9 	.word	0x08003da9
 8003d28:	08003dcd 	.word	0x08003dcd
 8003d2c:	08003dcd 	.word	0x08003dcd
 8003d30:	08003dcd 	.word	0x08003dcd
 8003d34:	08003dcd 	.word	0x08003dcd
 8003d38:	08003dcd 	.word	0x08003dcd
 8003d3c:	08003dcd 	.word	0x08003dcd
 8003d40:	08003dcd 	.word	0x08003dcd
 8003d44:	08003dbb 	.word	0x08003dbb
 8003d48:	08003dcd 	.word	0x08003dcd
 8003d4c:	08003dcd 	.word	0x08003dcd
 8003d50:	08003dcd 	.word	0x08003dcd
 8003d54:	08003dcd 	.word	0x08003dcd
 8003d58:	08003dcd 	.word	0x08003dcd
 8003d5c:	08003dcd 	.word	0x08003dcd
 8003d60:	08003dcd 	.word	0x08003dcd
 8003d64:	08003dd3 	.word	0x08003dd3
 8003d68:	08003dcd 	.word	0x08003dcd
 8003d6c:	08003dcd 	.word	0x08003dcd
 8003d70:	08003dcd 	.word	0x08003dcd
 8003d74:	08003dcd 	.word	0x08003dcd
 8003d78:	08003dcd 	.word	0x08003dcd
 8003d7c:	08003dcd 	.word	0x08003dcd
 8003d80:	08003dcd 	.word	0x08003dcd
 8003d84:	08003dd3 	.word	0x08003dd3
 8003d88:	08003dcd 	.word	0x08003dcd
 8003d8c:	08003dcd 	.word	0x08003dcd
 8003d90:	08003dcd 	.word	0x08003dcd
 8003d94:	08003dcd 	.word	0x08003dcd
 8003d98:	08003dcd 	.word	0x08003dcd
 8003d9c:	08003dcd 	.word	0x08003dcd
 8003da0:	08003dcd 	.word	0x08003dcd
 8003da4:	08003dd3 	.word	0x08003dd3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	3304      	adds	r3, #4
 8003dac:	2101      	movs	r1, #1
 8003dae:	4618      	mov	r0, r3
 8003db0:	f000 fde6 	bl	8004980 <RCCEx_PLL2_Config>
 8003db4:	4603      	mov	r3, r0
 8003db6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003db8:	e00c      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	3324      	adds	r3, #36	; 0x24
 8003dbe:	2101      	movs	r1, #1
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f000 fe8f 	bl	8004ae4 <RCCEx_PLL3_Config>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003dca:	e003      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	75fb      	strb	r3, [r7, #23]
      break;
 8003dd0:	e000      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 8003dd2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dd4:	7dfb      	ldrb	r3, [r7, #23]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d109      	bne.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003dda:	4b1d      	ldr	r3, [pc, #116]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dde:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003de6:	491a      	ldr	r1, [pc, #104]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003de8:	4313      	orrs	r3, r2
 8003dea:	654b      	str	r3, [r1, #84]	; 0x54
 8003dec:	e001      	b.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dee:	7dfb      	ldrb	r3, [r7, #23]
 8003df0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0302 	and.w	r3, r3, #2
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d03e      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e02:	2b05      	cmp	r3, #5
 8003e04:	d820      	bhi.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x838>
 8003e06:	a201      	add	r2, pc, #4	; (adr r2, 8003e0c <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8003e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e0c:	08003e5d 	.word	0x08003e5d
 8003e10:	08003e25 	.word	0x08003e25
 8003e14:	08003e37 	.word	0x08003e37
 8003e18:	08003e5d 	.word	0x08003e5d
 8003e1c:	08003e5d 	.word	0x08003e5d
 8003e20:	08003e5d 	.word	0x08003e5d
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	3304      	adds	r3, #4
 8003e28:	2101      	movs	r1, #1
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f000 fda8 	bl	8004980 <RCCEx_PLL2_Config>
 8003e30:	4603      	mov	r3, r0
 8003e32:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003e34:	e013      	b.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	3324      	adds	r3, #36	; 0x24
 8003e3a:	2101      	movs	r1, #1
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f000 fe51 	bl	8004ae4 <RCCEx_PLL3_Config>
 8003e42:	4603      	mov	r3, r0
 8003e44:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003e46:	e00a      	b.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	75fb      	strb	r3, [r7, #23]
      break;
 8003e4c:	e007      	b.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x84e>
 8003e4e:	bf00      	nop
 8003e50:	58024400 	.word	0x58024400
 8003e54:	58024800 	.word	0x58024800
 8003e58:	00ffffcf 	.word	0x00ffffcf
      break;
 8003e5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e5e:	7dfb      	ldrb	r3, [r7, #23]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d109      	bne.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003e64:	4b9f      	ldr	r3, [pc, #636]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003e66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e68:	f023 0207 	bic.w	r2, r3, #7
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e70:	499c      	ldr	r1, [pc, #624]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	654b      	str	r3, [r1, #84]	; 0x54
 8003e76:	e001      	b.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e78:	7dfb      	ldrb	r3, [r7, #23]
 8003e7a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0304 	and.w	r3, r3, #4
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d039      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e8e:	2b05      	cmp	r3, #5
 8003e90:	d820      	bhi.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 8003e92:	a201      	add	r2, pc, #4	; (adr r2, 8003e98 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8003e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e98:	08003edb 	.word	0x08003edb
 8003e9c:	08003eb1 	.word	0x08003eb1
 8003ea0:	08003ec3 	.word	0x08003ec3
 8003ea4:	08003edb 	.word	0x08003edb
 8003ea8:	08003edb 	.word	0x08003edb
 8003eac:	08003edb 	.word	0x08003edb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	3304      	adds	r3, #4
 8003eb4:	2101      	movs	r1, #1
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f000 fd62 	bl	8004980 <RCCEx_PLL2_Config>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003ec0:	e00c      	b.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	3324      	adds	r3, #36	; 0x24
 8003ec6:	2101      	movs	r1, #1
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f000 fe0b 	bl	8004ae4 <RCCEx_PLL3_Config>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003ed2:	e003      	b.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	75fb      	strb	r3, [r7, #23]
      break;
 8003ed8:	e000      	b.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 8003eda:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003edc:	7dfb      	ldrb	r3, [r7, #23]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d10a      	bne.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ee2:	4b80      	ldr	r3, [pc, #512]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ee6:	f023 0207 	bic.w	r2, r3, #7
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ef0:	497c      	ldr	r1, [pc, #496]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	658b      	str	r3, [r1, #88]	; 0x58
 8003ef6:	e001      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ef8:	7dfb      	ldrb	r3, [r7, #23]
 8003efa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0320 	and.w	r3, r3, #32
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d04b      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f12:	d02e      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x962>
 8003f14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f18:	d828      	bhi.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8003f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f1e:	d02a      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8003f20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f24:	d822      	bhi.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8003f26:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003f2a:	d026      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8003f2c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003f30:	d81c      	bhi.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8003f32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f36:	d010      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8003f38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f3c:	d816      	bhi.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d01d      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003f42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f46:	d111      	bne.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	3304      	adds	r3, #4
 8003f4c:	2100      	movs	r1, #0
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f000 fd16 	bl	8004980 <RCCEx_PLL2_Config>
 8003f54:	4603      	mov	r3, r0
 8003f56:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003f58:	e012      	b.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	3324      	adds	r3, #36	; 0x24
 8003f5e:	2102      	movs	r1, #2
 8003f60:	4618      	mov	r0, r3
 8003f62:	f000 fdbf 	bl	8004ae4 <RCCEx_PLL3_Config>
 8003f66:	4603      	mov	r3, r0
 8003f68:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003f6a:	e009      	b.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	75fb      	strb	r3, [r7, #23]
      break;
 8003f70:	e006      	b.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8003f72:	bf00      	nop
 8003f74:	e004      	b.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8003f76:	bf00      	nop
 8003f78:	e002      	b.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8003f7a:	bf00      	nop
 8003f7c:	e000      	b.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8003f7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f80:	7dfb      	ldrb	r3, [r7, #23]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d10a      	bne.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f86:	4b57      	ldr	r3, [pc, #348]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f8a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f94:	4953      	ldr	r1, [pc, #332]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003f96:	4313      	orrs	r3, r2
 8003f98:	654b      	str	r3, [r1, #84]	; 0x54
 8003f9a:	e001      	b.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f9c:	7dfb      	ldrb	r3, [r7, #23]
 8003f9e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d04b      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fb2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003fb6:	d02e      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8003fb8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003fbc:	d828      	bhi.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8003fbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fc2:	d02a      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8003fc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fc8:	d822      	bhi.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8003fca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003fce:	d026      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8003fd0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003fd4:	d81c      	bhi.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8003fd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fda:	d010      	beq.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8003fdc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fe0:	d816      	bhi.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d01d      	beq.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8003fe6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fea:	d111      	bne.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	3304      	adds	r3, #4
 8003ff0:	2100      	movs	r1, #0
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f000 fcc4 	bl	8004980 <RCCEx_PLL2_Config>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003ffc:	e012      	b.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	3324      	adds	r3, #36	; 0x24
 8004002:	2102      	movs	r1, #2
 8004004:	4618      	mov	r0, r3
 8004006:	f000 fd6d 	bl	8004ae4 <RCCEx_PLL3_Config>
 800400a:	4603      	mov	r3, r0
 800400c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800400e:	e009      	b.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	75fb      	strb	r3, [r7, #23]
      break;
 8004014:	e006      	b.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8004016:	bf00      	nop
 8004018:	e004      	b.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800401a:	bf00      	nop
 800401c:	e002      	b.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800401e:	bf00      	nop
 8004020:	e000      	b.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8004022:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004024:	7dfb      	ldrb	r3, [r7, #23]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d10a      	bne.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800402a:	4b2e      	ldr	r3, [pc, #184]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800402c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800402e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004038:	492a      	ldr	r1, [pc, #168]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800403a:	4313      	orrs	r3, r2
 800403c:	658b      	str	r3, [r1, #88]	; 0x58
 800403e:	e001      	b.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004040:	7dfb      	ldrb	r3, [r7, #23]
 8004042:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800404c:	2b00      	cmp	r3, #0
 800404e:	d04d      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004056:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800405a:	d02e      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 800405c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004060:	d828      	bhi.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8004062:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004066:	d02a      	beq.n	80040be <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8004068:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800406c:	d822      	bhi.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800406e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004072:	d026      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8004074:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004078:	d81c      	bhi.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800407a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800407e:	d010      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8004080:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004084:	d816      	bhi.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8004086:	2b00      	cmp	r3, #0
 8004088:	d01d      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800408a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800408e:	d111      	bne.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	3304      	adds	r3, #4
 8004094:	2100      	movs	r1, #0
 8004096:	4618      	mov	r0, r3
 8004098:	f000 fc72 	bl	8004980 <RCCEx_PLL2_Config>
 800409c:	4603      	mov	r3, r0
 800409e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80040a0:	e012      	b.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	3324      	adds	r3, #36	; 0x24
 80040a6:	2102      	movs	r1, #2
 80040a8:	4618      	mov	r0, r3
 80040aa:	f000 fd1b 	bl	8004ae4 <RCCEx_PLL3_Config>
 80040ae:	4603      	mov	r3, r0
 80040b0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80040b2:	e009      	b.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	75fb      	strb	r3, [r7, #23]
      break;
 80040b8:	e006      	b.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80040ba:	bf00      	nop
 80040bc:	e004      	b.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80040be:	bf00      	nop
 80040c0:	e002      	b.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80040c2:	bf00      	nop
 80040c4:	e000      	b.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80040c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040c8:	7dfb      	ldrb	r3, [r7, #23]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d10c      	bne.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80040ce:	4b05      	ldr	r3, [pc, #20]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80040d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80040dc:	4901      	ldr	r1, [pc, #4]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80040de:	4313      	orrs	r3, r2
 80040e0:	658b      	str	r3, [r1, #88]	; 0x58
 80040e2:	e003      	b.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80040e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040e8:	7dfb      	ldrb	r3, [r7, #23]
 80040ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0308 	and.w	r3, r3, #8
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d018      	beq.n	800412a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004100:	d10a      	bne.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	3324      	adds	r3, #36	; 0x24
 8004106:	2102      	movs	r1, #2
 8004108:	4618      	mov	r0, r3
 800410a:	f000 fceb 	bl	8004ae4 <RCCEx_PLL3_Config>
 800410e:	4603      	mov	r3, r0
 8004110:	2b00      	cmp	r3, #0
 8004112:	d001      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8004118:	4b8a      	ldr	r3, [pc, #552]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800411a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800411c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004124:	4987      	ldr	r1, [pc, #540]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004126:	4313      	orrs	r3, r2
 8004128:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0310 	and.w	r3, r3, #16
 8004132:	2b00      	cmp	r3, #0
 8004134:	d01a      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800413c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004140:	d10a      	bne.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	3324      	adds	r3, #36	; 0x24
 8004146:	2102      	movs	r1, #2
 8004148:	4618      	mov	r0, r3
 800414a:	f000 fccb 	bl	8004ae4 <RCCEx_PLL3_Config>
 800414e:	4603      	mov	r3, r0
 8004150:	2b00      	cmp	r3, #0
 8004152:	d001      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004158:	4b7a      	ldr	r3, [pc, #488]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800415a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800415c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004166:	4977      	ldr	r1, [pc, #476]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004168:	4313      	orrs	r3, r2
 800416a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004174:	2b00      	cmp	r3, #0
 8004176:	d034      	beq.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800417e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004182:	d01d      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8004184:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004188:	d817      	bhi.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 800418a:	2b00      	cmp	r3, #0
 800418c:	d003      	beq.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800418e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004192:	d009      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004194:	e011      	b.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	3304      	adds	r3, #4
 800419a:	2100      	movs	r1, #0
 800419c:	4618      	mov	r0, r3
 800419e:	f000 fbef 	bl	8004980 <RCCEx_PLL2_Config>
 80041a2:	4603      	mov	r3, r0
 80041a4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80041a6:	e00c      	b.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	3324      	adds	r3, #36	; 0x24
 80041ac:	2102      	movs	r1, #2
 80041ae:	4618      	mov	r0, r3
 80041b0:	f000 fc98 	bl	8004ae4 <RCCEx_PLL3_Config>
 80041b4:	4603      	mov	r3, r0
 80041b6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80041b8:	e003      	b.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	75fb      	strb	r3, [r7, #23]
      break;
 80041be:	e000      	b.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 80041c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041c2:	7dfb      	ldrb	r3, [r7, #23]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d10a      	bne.n	80041de <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80041c8:	4b5e      	ldr	r3, [pc, #376]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80041ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041d6:	495b      	ldr	r1, [pc, #364]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80041d8:	4313      	orrs	r3, r2
 80041da:	658b      	str	r3, [r1, #88]	; 0x58
 80041dc:	e001      	b.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041de:	7dfb      	ldrb	r3, [r7, #23]
 80041e0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d033      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041f4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80041f8:	d01c      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80041fa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80041fe:	d816      	bhi.n	800422e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004200:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004204:	d003      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8004206:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800420a:	d007      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 800420c:	e00f      	b.n	800422e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800420e:	4b4d      	ldr	r3, [pc, #308]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004212:	4a4c      	ldr	r2, [pc, #304]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004214:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004218:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800421a:	e00c      	b.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	3324      	adds	r3, #36	; 0x24
 8004220:	2101      	movs	r1, #1
 8004222:	4618      	mov	r0, r3
 8004224:	f000 fc5e 	bl	8004ae4 <RCCEx_PLL3_Config>
 8004228:	4603      	mov	r3, r0
 800422a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800422c:	e003      	b.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	75fb      	strb	r3, [r7, #23]
      break;
 8004232:	e000      	b.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8004234:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004236:	7dfb      	ldrb	r3, [r7, #23]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d10a      	bne.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800423c:	4b41      	ldr	r3, [pc, #260]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800423e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004240:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800424a:	493e      	ldr	r1, [pc, #248]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800424c:	4313      	orrs	r3, r2
 800424e:	654b      	str	r3, [r1, #84]	; 0x54
 8004250:	e001      	b.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004252:	7dfb      	ldrb	r3, [r7, #23]
 8004254:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d029      	beq.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004266:	2b00      	cmp	r3, #0
 8004268:	d003      	beq.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800426a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800426e:	d007      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8004270:	e00f      	b.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004272:	4b34      	ldr	r3, [pc, #208]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004276:	4a33      	ldr	r2, [pc, #204]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004278:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800427c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800427e:	e00b      	b.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	3304      	adds	r3, #4
 8004284:	2102      	movs	r1, #2
 8004286:	4618      	mov	r0, r3
 8004288:	f000 fb7a 	bl	8004980 <RCCEx_PLL2_Config>
 800428c:	4603      	mov	r3, r0
 800428e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004290:	e002      	b.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	75fb      	strb	r3, [r7, #23]
      break;
 8004296:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004298:	7dfb      	ldrb	r3, [r7, #23]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d109      	bne.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800429e:	4b29      	ldr	r3, [pc, #164]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80042a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042a2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042aa:	4926      	ldr	r1, [pc, #152]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80042ac:	4313      	orrs	r3, r2
 80042ae:	64cb      	str	r3, [r1, #76]	; 0x4c
 80042b0:	e001      	b.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042b2:	7dfb      	ldrb	r3, [r7, #23]
 80042b4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d00a      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	3324      	adds	r3, #36	; 0x24
 80042c6:	2102      	movs	r1, #2
 80042c8:	4618      	mov	r0, r3
 80042ca:	f000 fc0b 	bl	8004ae4 <RCCEx_PLL3_Config>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d001      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d033      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042ec:	d017      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 80042ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042f2:	d811      	bhi.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80042f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042f8:	d013      	beq.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0xd12>
 80042fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042fe:	d80b      	bhi.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004300:	2b00      	cmp	r3, #0
 8004302:	d010      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0xd16>
 8004304:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004308:	d106      	bne.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800430a:	4b0e      	ldr	r3, [pc, #56]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800430c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800430e:	4a0d      	ldr	r2, [pc, #52]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004310:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004314:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004316:	e007      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	75fb      	strb	r3, [r7, #23]
      break;
 800431c:	e004      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800431e:	bf00      	nop
 8004320:	e002      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8004322:	bf00      	nop
 8004324:	e000      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8004326:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004328:	7dfb      	ldrb	r3, [r7, #23]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d10c      	bne.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800432e:	4b05      	ldr	r3, [pc, #20]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004332:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800433a:	4902      	ldr	r1, [pc, #8]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800433c:	4313      	orrs	r3, r2
 800433e:	654b      	str	r3, [r1, #84]	; 0x54
 8004340:	e004      	b.n	800434c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 8004342:	bf00      	nop
 8004344:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004348:	7dfb      	ldrb	r3, [r7, #23]
 800434a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004354:	2b00      	cmp	r3, #0
 8004356:	d008      	beq.n	800436a <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004358:	4b29      	ldr	r3, [pc, #164]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800435a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800435c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004364:	4926      	ldr	r1, [pc, #152]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004366:	4313      	orrs	r3, r2
 8004368:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d008      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004376:	4b22      	ldr	r3, [pc, #136]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004378:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800437a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004382:	491f      	ldr	r1, [pc, #124]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004384:	4313      	orrs	r3, r2
 8004386:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004390:	2b00      	cmp	r3, #0
 8004392:	d00d      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004394:	4b1a      	ldr	r3, [pc, #104]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004396:	691b      	ldr	r3, [r3, #16]
 8004398:	4a19      	ldr	r2, [pc, #100]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800439a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800439e:	6113      	str	r3, [r2, #16]
 80043a0:	4b17      	ldr	r3, [pc, #92]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80043a2:	691a      	ldr	r2, [r3, #16]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80043aa:	4915      	ldr	r1, [pc, #84]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80043ac:	4313      	orrs	r3, r2
 80043ae:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	da08      	bge.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80043b8:	4b11      	ldr	r3, [pc, #68]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80043ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043bc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043c4:	490e      	ldr	r1, [pc, #56]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80043c6:	4313      	orrs	r3, r2
 80043c8:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d009      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80043d6:	4b0a      	ldr	r3, [pc, #40]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80043d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043da:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043e4:	4906      	ldr	r1, [pc, #24]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80043e6:	4313      	orrs	r3, r2
 80043e8:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80043ea:	7dbb      	ldrb	r3, [r7, #22]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d101      	bne.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 80043f0:	2300      	movs	r3, #0
 80043f2:	e000      	b.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3718      	adds	r7, #24
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	58024400 	.word	0x58024400

08004404 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004408:	f7ff f8a6 	bl	8003558 <HAL_RCC_GetHCLKFreq>
 800440c:	4602      	mov	r2, r0
 800440e:	4b06      	ldr	r3, [pc, #24]	; (8004428 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004410:	6a1b      	ldr	r3, [r3, #32]
 8004412:	091b      	lsrs	r3, r3, #4
 8004414:	f003 0307 	and.w	r3, r3, #7
 8004418:	4904      	ldr	r1, [pc, #16]	; (800442c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800441a:	5ccb      	ldrb	r3, [r1, r3]
 800441c:	f003 031f 	and.w	r3, r3, #31
 8004420:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004424:	4618      	mov	r0, r3
 8004426:	bd80      	pop	{r7, pc}
 8004428:	58024400 	.word	0x58024400
 800442c:	08009588 	.word	0x08009588

08004430 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004430:	b480      	push	{r7}
 8004432:	b089      	sub	sp, #36	; 0x24
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004438:	4ba1      	ldr	r3, [pc, #644]	; (80046c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800443a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800443c:	f003 0303 	and.w	r3, r3, #3
 8004440:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004442:	4b9f      	ldr	r3, [pc, #636]	; (80046c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004446:	0b1b      	lsrs	r3, r3, #12
 8004448:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800444c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800444e:	4b9c      	ldr	r3, [pc, #624]	; (80046c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004452:	091b      	lsrs	r3, r3, #4
 8004454:	f003 0301 	and.w	r3, r3, #1
 8004458:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800445a:	4b99      	ldr	r3, [pc, #612]	; (80046c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800445c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800445e:	08db      	lsrs	r3, r3, #3
 8004460:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004464:	693a      	ldr	r2, [r7, #16]
 8004466:	fb02 f303 	mul.w	r3, r2, r3
 800446a:	ee07 3a90 	vmov	s15, r3
 800446e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004472:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	2b00      	cmp	r3, #0
 800447a:	f000 8111 	beq.w	80046a0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800447e:	69bb      	ldr	r3, [r7, #24]
 8004480:	2b02      	cmp	r3, #2
 8004482:	f000 8083 	beq.w	800458c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	2b02      	cmp	r3, #2
 800448a:	f200 80a1 	bhi.w	80045d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d003      	beq.n	800449c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	2b01      	cmp	r3, #1
 8004498:	d056      	beq.n	8004548 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800449a:	e099      	b.n	80045d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800449c:	4b88      	ldr	r3, [pc, #544]	; (80046c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0320 	and.w	r3, r3, #32
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d02d      	beq.n	8004504 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80044a8:	4b85      	ldr	r3, [pc, #532]	; (80046c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	08db      	lsrs	r3, r3, #3
 80044ae:	f003 0303 	and.w	r3, r3, #3
 80044b2:	4a84      	ldr	r2, [pc, #528]	; (80046c4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80044b4:	fa22 f303 	lsr.w	r3, r2, r3
 80044b8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	ee07 3a90 	vmov	s15, r3
 80044c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	ee07 3a90 	vmov	s15, r3
 80044ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044d2:	4b7b      	ldr	r3, [pc, #492]	; (80046c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044da:	ee07 3a90 	vmov	s15, r3
 80044de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80044e6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80046c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80044ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044fe:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004502:	e087      	b.n	8004614 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	ee07 3a90 	vmov	s15, r3
 800450a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800450e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80046cc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004512:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004516:	4b6a      	ldr	r3, [pc, #424]	; (80046c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800451a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800451e:	ee07 3a90 	vmov	s15, r3
 8004522:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004526:	ed97 6a03 	vldr	s12, [r7, #12]
 800452a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80046c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800452e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004532:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004536:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800453a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800453e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004542:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004546:	e065      	b.n	8004614 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	ee07 3a90 	vmov	s15, r3
 800454e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004552:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80046d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004556:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800455a:	4b59      	ldr	r3, [pc, #356]	; (80046c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800455c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800455e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004562:	ee07 3a90 	vmov	s15, r3
 8004566:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800456a:	ed97 6a03 	vldr	s12, [r7, #12]
 800456e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80046c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004572:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004576:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800457a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800457e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004582:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004586:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800458a:	e043      	b.n	8004614 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	ee07 3a90 	vmov	s15, r3
 8004592:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004596:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80046d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800459a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800459e:	4b48      	ldr	r3, [pc, #288]	; (80046c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045a6:	ee07 3a90 	vmov	s15, r3
 80045aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80045b2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80046c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80045b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80045ce:	e021      	b.n	8004614 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	ee07 3a90 	vmov	s15, r3
 80045d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045da:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80046d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80045de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045e2:	4b37      	ldr	r3, [pc, #220]	; (80046c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045ea:	ee07 3a90 	vmov	s15, r3
 80045ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80045f6:	eddf 5a34 	vldr	s11, [pc, #208]	; 80046c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80045fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004602:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004606:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800460a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800460e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004612:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004614:	4b2a      	ldr	r3, [pc, #168]	; (80046c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004618:	0a5b      	lsrs	r3, r3, #9
 800461a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800461e:	ee07 3a90 	vmov	s15, r3
 8004622:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004626:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800462a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800462e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004632:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004636:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800463a:	ee17 2a90 	vmov	r2, s15
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004642:	4b1f      	ldr	r3, [pc, #124]	; (80046c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004646:	0c1b      	lsrs	r3, r3, #16
 8004648:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800464c:	ee07 3a90 	vmov	s15, r3
 8004650:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004654:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004658:	ee37 7a87 	vadd.f32	s14, s15, s14
 800465c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004660:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004664:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004668:	ee17 2a90 	vmov	r2, s15
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004670:	4b13      	ldr	r3, [pc, #76]	; (80046c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004674:	0e1b      	lsrs	r3, r3, #24
 8004676:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800467a:	ee07 3a90 	vmov	s15, r3
 800467e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004682:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004686:	ee37 7a87 	vadd.f32	s14, s15, s14
 800468a:	edd7 6a07 	vldr	s13, [r7, #28]
 800468e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004692:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004696:	ee17 2a90 	vmov	r2, s15
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800469e:	e008      	b.n	80046b2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	609a      	str	r2, [r3, #8]
}
 80046b2:	bf00      	nop
 80046b4:	3724      	adds	r7, #36	; 0x24
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr
 80046be:	bf00      	nop
 80046c0:	58024400 	.word	0x58024400
 80046c4:	03d09000 	.word	0x03d09000
 80046c8:	46000000 	.word	0x46000000
 80046cc:	4c742400 	.word	0x4c742400
 80046d0:	4a742400 	.word	0x4a742400
 80046d4:	4af42400 	.word	0x4af42400

080046d8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80046d8:	b480      	push	{r7}
 80046da:	b089      	sub	sp, #36	; 0x24
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80046e0:	4ba1      	ldr	r3, [pc, #644]	; (8004968 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e4:	f003 0303 	and.w	r3, r3, #3
 80046e8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80046ea:	4b9f      	ldr	r3, [pc, #636]	; (8004968 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ee:	0d1b      	lsrs	r3, r3, #20
 80046f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046f4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80046f6:	4b9c      	ldr	r3, [pc, #624]	; (8004968 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046fa:	0a1b      	lsrs	r3, r3, #8
 80046fc:	f003 0301 	and.w	r3, r3, #1
 8004700:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004702:	4b99      	ldr	r3, [pc, #612]	; (8004968 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004706:	08db      	lsrs	r3, r3, #3
 8004708:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800470c:	693a      	ldr	r2, [r7, #16]
 800470e:	fb02 f303 	mul.w	r3, r2, r3
 8004712:	ee07 3a90 	vmov	s15, r3
 8004716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800471a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	2b00      	cmp	r3, #0
 8004722:	f000 8111 	beq.w	8004948 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004726:	69bb      	ldr	r3, [r7, #24]
 8004728:	2b02      	cmp	r3, #2
 800472a:	f000 8083 	beq.w	8004834 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800472e:	69bb      	ldr	r3, [r7, #24]
 8004730:	2b02      	cmp	r3, #2
 8004732:	f200 80a1 	bhi.w	8004878 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004736:	69bb      	ldr	r3, [r7, #24]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d003      	beq.n	8004744 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800473c:	69bb      	ldr	r3, [r7, #24]
 800473e:	2b01      	cmp	r3, #1
 8004740:	d056      	beq.n	80047f0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004742:	e099      	b.n	8004878 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004744:	4b88      	ldr	r3, [pc, #544]	; (8004968 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0320 	and.w	r3, r3, #32
 800474c:	2b00      	cmp	r3, #0
 800474e:	d02d      	beq.n	80047ac <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004750:	4b85      	ldr	r3, [pc, #532]	; (8004968 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	08db      	lsrs	r3, r3, #3
 8004756:	f003 0303 	and.w	r3, r3, #3
 800475a:	4a84      	ldr	r2, [pc, #528]	; (800496c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800475c:	fa22 f303 	lsr.w	r3, r2, r3
 8004760:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	ee07 3a90 	vmov	s15, r3
 8004768:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	ee07 3a90 	vmov	s15, r3
 8004772:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004776:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800477a:	4b7b      	ldr	r3, [pc, #492]	; (8004968 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800477c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004782:	ee07 3a90 	vmov	s15, r3
 8004786:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800478a:	ed97 6a03 	vldr	s12, [r7, #12]
 800478e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004970 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004792:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004796:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800479a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800479e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047a6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80047aa:	e087      	b.n	80048bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	ee07 3a90 	vmov	s15, r3
 80047b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047b6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004974 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80047ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047be:	4b6a      	ldr	r3, [pc, #424]	; (8004968 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047c6:	ee07 3a90 	vmov	s15, r3
 80047ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80047d2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004970 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80047d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80047ee:	e065      	b.n	80048bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	ee07 3a90 	vmov	s15, r3
 80047f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047fa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004978 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80047fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004802:	4b59      	ldr	r3, [pc, #356]	; (8004968 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004806:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800480a:	ee07 3a90 	vmov	s15, r3
 800480e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004812:	ed97 6a03 	vldr	s12, [r7, #12]
 8004816:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004970 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800481a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800481e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004822:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004826:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800482a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800482e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004832:	e043      	b.n	80048bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	ee07 3a90 	vmov	s15, r3
 800483a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800483e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800497c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004842:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004846:	4b48      	ldr	r3, [pc, #288]	; (8004968 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800484e:	ee07 3a90 	vmov	s15, r3
 8004852:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004856:	ed97 6a03 	vldr	s12, [r7, #12]
 800485a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004970 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800485e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004862:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004866:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800486a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800486e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004872:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004876:	e021      	b.n	80048bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	ee07 3a90 	vmov	s15, r3
 800487e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004882:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004978 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004886:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800488a:	4b37      	ldr	r3, [pc, #220]	; (8004968 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800488c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004892:	ee07 3a90 	vmov	s15, r3
 8004896:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800489a:	ed97 6a03 	vldr	s12, [r7, #12]
 800489e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004970 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80048a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80048ba:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80048bc:	4b2a      	ldr	r3, [pc, #168]	; (8004968 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c0:	0a5b      	lsrs	r3, r3, #9
 80048c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048c6:	ee07 3a90 	vmov	s15, r3
 80048ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80048d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80048d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80048da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048e2:	ee17 2a90 	vmov	r2, s15
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80048ea:	4b1f      	ldr	r3, [pc, #124]	; (8004968 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ee:	0c1b      	lsrs	r3, r3, #16
 80048f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048f4:	ee07 3a90 	vmov	s15, r3
 80048f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004900:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004904:	edd7 6a07 	vldr	s13, [r7, #28]
 8004908:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800490c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004910:	ee17 2a90 	vmov	r2, s15
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004918:	4b13      	ldr	r3, [pc, #76]	; (8004968 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800491a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491c:	0e1b      	lsrs	r3, r3, #24
 800491e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004922:	ee07 3a90 	vmov	s15, r3
 8004926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800492a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800492e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004932:	edd7 6a07 	vldr	s13, [r7, #28]
 8004936:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800493a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800493e:	ee17 2a90 	vmov	r2, s15
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004946:	e008      	b.n	800495a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2200      	movs	r2, #0
 800494c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	609a      	str	r2, [r3, #8]
}
 800495a:	bf00      	nop
 800495c:	3724      	adds	r7, #36	; 0x24
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr
 8004966:	bf00      	nop
 8004968:	58024400 	.word	0x58024400
 800496c:	03d09000 	.word	0x03d09000
 8004970:	46000000 	.word	0x46000000
 8004974:	4c742400 	.word	0x4c742400
 8004978:	4a742400 	.word	0x4a742400
 800497c:	4af42400 	.word	0x4af42400

08004980 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800498a:	2300      	movs	r3, #0
 800498c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800498e:	4b53      	ldr	r3, [pc, #332]	; (8004adc <RCCEx_PLL2_Config+0x15c>)
 8004990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004992:	f003 0303 	and.w	r3, r3, #3
 8004996:	2b03      	cmp	r3, #3
 8004998:	d101      	bne.n	800499e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e099      	b.n	8004ad2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800499e:	4b4f      	ldr	r3, [pc, #316]	; (8004adc <RCCEx_PLL2_Config+0x15c>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a4e      	ldr	r2, [pc, #312]	; (8004adc <RCCEx_PLL2_Config+0x15c>)
 80049a4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80049a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049aa:	f7fd fbbb 	bl	8002124 <HAL_GetTick>
 80049ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80049b0:	e008      	b.n	80049c4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80049b2:	f7fd fbb7 	bl	8002124 <HAL_GetTick>
 80049b6:	4602      	mov	r2, r0
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	2b02      	cmp	r3, #2
 80049be:	d901      	bls.n	80049c4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80049c0:	2303      	movs	r3, #3
 80049c2:	e086      	b.n	8004ad2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80049c4:	4b45      	ldr	r3, [pc, #276]	; (8004adc <RCCEx_PLL2_Config+0x15c>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d1f0      	bne.n	80049b2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80049d0:	4b42      	ldr	r3, [pc, #264]	; (8004adc <RCCEx_PLL2_Config+0x15c>)
 80049d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	031b      	lsls	r3, r3, #12
 80049de:	493f      	ldr	r1, [pc, #252]	; (8004adc <RCCEx_PLL2_Config+0x15c>)
 80049e0:	4313      	orrs	r3, r2
 80049e2:	628b      	str	r3, [r1, #40]	; 0x28
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	3b01      	subs	r3, #1
 80049ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	3b01      	subs	r3, #1
 80049f4:	025b      	lsls	r3, r3, #9
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	431a      	orrs	r2, r3
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	3b01      	subs	r3, #1
 8004a00:	041b      	lsls	r3, r3, #16
 8004a02:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004a06:	431a      	orrs	r2, r3
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	691b      	ldr	r3, [r3, #16]
 8004a0c:	3b01      	subs	r3, #1
 8004a0e:	061b      	lsls	r3, r3, #24
 8004a10:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004a14:	4931      	ldr	r1, [pc, #196]	; (8004adc <RCCEx_PLL2_Config+0x15c>)
 8004a16:	4313      	orrs	r3, r2
 8004a18:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004a1a:	4b30      	ldr	r3, [pc, #192]	; (8004adc <RCCEx_PLL2_Config+0x15c>)
 8004a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a1e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	695b      	ldr	r3, [r3, #20]
 8004a26:	492d      	ldr	r1, [pc, #180]	; (8004adc <RCCEx_PLL2_Config+0x15c>)
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004a2c:	4b2b      	ldr	r3, [pc, #172]	; (8004adc <RCCEx_PLL2_Config+0x15c>)
 8004a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a30:	f023 0220 	bic.w	r2, r3, #32
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	699b      	ldr	r3, [r3, #24]
 8004a38:	4928      	ldr	r1, [pc, #160]	; (8004adc <RCCEx_PLL2_Config+0x15c>)
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004a3e:	4b27      	ldr	r3, [pc, #156]	; (8004adc <RCCEx_PLL2_Config+0x15c>)
 8004a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a42:	4a26      	ldr	r2, [pc, #152]	; (8004adc <RCCEx_PLL2_Config+0x15c>)
 8004a44:	f023 0310 	bic.w	r3, r3, #16
 8004a48:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004a4a:	4b24      	ldr	r3, [pc, #144]	; (8004adc <RCCEx_PLL2_Config+0x15c>)
 8004a4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a4e:	4b24      	ldr	r3, [pc, #144]	; (8004ae0 <RCCEx_PLL2_Config+0x160>)
 8004a50:	4013      	ands	r3, r2
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	69d2      	ldr	r2, [r2, #28]
 8004a56:	00d2      	lsls	r2, r2, #3
 8004a58:	4920      	ldr	r1, [pc, #128]	; (8004adc <RCCEx_PLL2_Config+0x15c>)
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004a5e:	4b1f      	ldr	r3, [pc, #124]	; (8004adc <RCCEx_PLL2_Config+0x15c>)
 8004a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a62:	4a1e      	ldr	r2, [pc, #120]	; (8004adc <RCCEx_PLL2_Config+0x15c>)
 8004a64:	f043 0310 	orr.w	r3, r3, #16
 8004a68:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d106      	bne.n	8004a7e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004a70:	4b1a      	ldr	r3, [pc, #104]	; (8004adc <RCCEx_PLL2_Config+0x15c>)
 8004a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a74:	4a19      	ldr	r2, [pc, #100]	; (8004adc <RCCEx_PLL2_Config+0x15c>)
 8004a76:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a7a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004a7c:	e00f      	b.n	8004a9e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d106      	bne.n	8004a92 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004a84:	4b15      	ldr	r3, [pc, #84]	; (8004adc <RCCEx_PLL2_Config+0x15c>)
 8004a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a88:	4a14      	ldr	r2, [pc, #80]	; (8004adc <RCCEx_PLL2_Config+0x15c>)
 8004a8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a8e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004a90:	e005      	b.n	8004a9e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004a92:	4b12      	ldr	r3, [pc, #72]	; (8004adc <RCCEx_PLL2_Config+0x15c>)
 8004a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a96:	4a11      	ldr	r2, [pc, #68]	; (8004adc <RCCEx_PLL2_Config+0x15c>)
 8004a98:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004a9c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004a9e:	4b0f      	ldr	r3, [pc, #60]	; (8004adc <RCCEx_PLL2_Config+0x15c>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a0e      	ldr	r2, [pc, #56]	; (8004adc <RCCEx_PLL2_Config+0x15c>)
 8004aa4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004aa8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004aaa:	f7fd fb3b 	bl	8002124 <HAL_GetTick>
 8004aae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004ab0:	e008      	b.n	8004ac4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004ab2:	f7fd fb37 	bl	8002124 <HAL_GetTick>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	2b02      	cmp	r3, #2
 8004abe:	d901      	bls.n	8004ac4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	e006      	b.n	8004ad2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004ac4:	4b05      	ldr	r3, [pc, #20]	; (8004adc <RCCEx_PLL2_Config+0x15c>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d0f0      	beq.n	8004ab2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3710      	adds	r7, #16
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}
 8004ada:	bf00      	nop
 8004adc:	58024400 	.word	0x58024400
 8004ae0:	ffff0007 	.word	0xffff0007

08004ae4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004aee:	2300      	movs	r3, #0
 8004af0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004af2:	4b53      	ldr	r3, [pc, #332]	; (8004c40 <RCCEx_PLL3_Config+0x15c>)
 8004af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af6:	f003 0303 	and.w	r3, r3, #3
 8004afa:	2b03      	cmp	r3, #3
 8004afc:	d101      	bne.n	8004b02 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e099      	b.n	8004c36 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004b02:	4b4f      	ldr	r3, [pc, #316]	; (8004c40 <RCCEx_PLL3_Config+0x15c>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a4e      	ldr	r2, [pc, #312]	; (8004c40 <RCCEx_PLL3_Config+0x15c>)
 8004b08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b0e:	f7fd fb09 	bl	8002124 <HAL_GetTick>
 8004b12:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004b14:	e008      	b.n	8004b28 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004b16:	f7fd fb05 	bl	8002124 <HAL_GetTick>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	1ad3      	subs	r3, r2, r3
 8004b20:	2b02      	cmp	r3, #2
 8004b22:	d901      	bls.n	8004b28 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004b24:	2303      	movs	r3, #3
 8004b26:	e086      	b.n	8004c36 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004b28:	4b45      	ldr	r3, [pc, #276]	; (8004c40 <RCCEx_PLL3_Config+0x15c>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d1f0      	bne.n	8004b16 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004b34:	4b42      	ldr	r3, [pc, #264]	; (8004c40 <RCCEx_PLL3_Config+0x15c>)
 8004b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b38:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	051b      	lsls	r3, r3, #20
 8004b42:	493f      	ldr	r1, [pc, #252]	; (8004c40 <RCCEx_PLL3_Config+0x15c>)
 8004b44:	4313      	orrs	r3, r2
 8004b46:	628b      	str	r3, [r1, #40]	; 0x28
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	3b01      	subs	r3, #1
 8004b4e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	3b01      	subs	r3, #1
 8004b58:	025b      	lsls	r3, r3, #9
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	431a      	orrs	r2, r3
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	3b01      	subs	r3, #1
 8004b64:	041b      	lsls	r3, r3, #16
 8004b66:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004b6a:	431a      	orrs	r2, r3
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	691b      	ldr	r3, [r3, #16]
 8004b70:	3b01      	subs	r3, #1
 8004b72:	061b      	lsls	r3, r3, #24
 8004b74:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004b78:	4931      	ldr	r1, [pc, #196]	; (8004c40 <RCCEx_PLL3_Config+0x15c>)
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004b7e:	4b30      	ldr	r3, [pc, #192]	; (8004c40 <RCCEx_PLL3_Config+0x15c>)
 8004b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b82:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	695b      	ldr	r3, [r3, #20]
 8004b8a:	492d      	ldr	r1, [pc, #180]	; (8004c40 <RCCEx_PLL3_Config+0x15c>)
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004b90:	4b2b      	ldr	r3, [pc, #172]	; (8004c40 <RCCEx_PLL3_Config+0x15c>)
 8004b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b94:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	699b      	ldr	r3, [r3, #24]
 8004b9c:	4928      	ldr	r1, [pc, #160]	; (8004c40 <RCCEx_PLL3_Config+0x15c>)
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004ba2:	4b27      	ldr	r3, [pc, #156]	; (8004c40 <RCCEx_PLL3_Config+0x15c>)
 8004ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba6:	4a26      	ldr	r2, [pc, #152]	; (8004c40 <RCCEx_PLL3_Config+0x15c>)
 8004ba8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004bae:	4b24      	ldr	r3, [pc, #144]	; (8004c40 <RCCEx_PLL3_Config+0x15c>)
 8004bb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bb2:	4b24      	ldr	r3, [pc, #144]	; (8004c44 <RCCEx_PLL3_Config+0x160>)
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	69d2      	ldr	r2, [r2, #28]
 8004bba:	00d2      	lsls	r2, r2, #3
 8004bbc:	4920      	ldr	r1, [pc, #128]	; (8004c40 <RCCEx_PLL3_Config+0x15c>)
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004bc2:	4b1f      	ldr	r3, [pc, #124]	; (8004c40 <RCCEx_PLL3_Config+0x15c>)
 8004bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc6:	4a1e      	ldr	r2, [pc, #120]	; (8004c40 <RCCEx_PLL3_Config+0x15c>)
 8004bc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bcc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d106      	bne.n	8004be2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004bd4:	4b1a      	ldr	r3, [pc, #104]	; (8004c40 <RCCEx_PLL3_Config+0x15c>)
 8004bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd8:	4a19      	ldr	r2, [pc, #100]	; (8004c40 <RCCEx_PLL3_Config+0x15c>)
 8004bda:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004bde:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004be0:	e00f      	b.n	8004c02 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d106      	bne.n	8004bf6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004be8:	4b15      	ldr	r3, [pc, #84]	; (8004c40 <RCCEx_PLL3_Config+0x15c>)
 8004bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bec:	4a14      	ldr	r2, [pc, #80]	; (8004c40 <RCCEx_PLL3_Config+0x15c>)
 8004bee:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004bf2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004bf4:	e005      	b.n	8004c02 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004bf6:	4b12      	ldr	r3, [pc, #72]	; (8004c40 <RCCEx_PLL3_Config+0x15c>)
 8004bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bfa:	4a11      	ldr	r2, [pc, #68]	; (8004c40 <RCCEx_PLL3_Config+0x15c>)
 8004bfc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c00:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004c02:	4b0f      	ldr	r3, [pc, #60]	; (8004c40 <RCCEx_PLL3_Config+0x15c>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a0e      	ldr	r2, [pc, #56]	; (8004c40 <RCCEx_PLL3_Config+0x15c>)
 8004c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c0e:	f7fd fa89 	bl	8002124 <HAL_GetTick>
 8004c12:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004c14:	e008      	b.n	8004c28 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004c16:	f7fd fa85 	bl	8002124 <HAL_GetTick>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	1ad3      	subs	r3, r2, r3
 8004c20:	2b02      	cmp	r3, #2
 8004c22:	d901      	bls.n	8004c28 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004c24:	2303      	movs	r3, #3
 8004c26:	e006      	b.n	8004c36 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004c28:	4b05      	ldr	r3, [pc, #20]	; (8004c40 <RCCEx_PLL3_Config+0x15c>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d0f0      	beq.n	8004c16 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3710      	adds	r7, #16
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	bf00      	nop
 8004c40:	58024400 	.word	0x58024400
 8004c44:	ffff0007 	.word	0xffff0007

08004c48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b082      	sub	sp, #8
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d101      	bne.n	8004c5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e049      	b.n	8004cee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d106      	bne.n	8004c74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f7fc feea 	bl	8001a48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2202      	movs	r2, #2
 8004c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	3304      	adds	r3, #4
 8004c84:	4619      	mov	r1, r3
 8004c86:	4610      	mov	r0, r2
 8004c88:	f001 f8d2 	bl	8005e30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2201      	movs	r2, #1
 8004c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cec:	2300      	movs	r3, #0
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3708      	adds	r7, #8
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
	...

08004cf8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b085      	sub	sp, #20
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d001      	beq.n	8004d10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e05e      	b.n	8004dce <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2202      	movs	r2, #2
 8004d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	68da      	ldr	r2, [r3, #12]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f042 0201 	orr.w	r2, r2, #1
 8004d26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a2b      	ldr	r2, [pc, #172]	; (8004ddc <HAL_TIM_Base_Start_IT+0xe4>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d02c      	beq.n	8004d8c <HAL_TIM_Base_Start_IT+0x94>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d3a:	d027      	beq.n	8004d8c <HAL_TIM_Base_Start_IT+0x94>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a27      	ldr	r2, [pc, #156]	; (8004de0 <HAL_TIM_Base_Start_IT+0xe8>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d022      	beq.n	8004d8c <HAL_TIM_Base_Start_IT+0x94>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a26      	ldr	r2, [pc, #152]	; (8004de4 <HAL_TIM_Base_Start_IT+0xec>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d01d      	beq.n	8004d8c <HAL_TIM_Base_Start_IT+0x94>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a24      	ldr	r2, [pc, #144]	; (8004de8 <HAL_TIM_Base_Start_IT+0xf0>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d018      	beq.n	8004d8c <HAL_TIM_Base_Start_IT+0x94>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a23      	ldr	r2, [pc, #140]	; (8004dec <HAL_TIM_Base_Start_IT+0xf4>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d013      	beq.n	8004d8c <HAL_TIM_Base_Start_IT+0x94>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a21      	ldr	r2, [pc, #132]	; (8004df0 <HAL_TIM_Base_Start_IT+0xf8>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d00e      	beq.n	8004d8c <HAL_TIM_Base_Start_IT+0x94>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a20      	ldr	r2, [pc, #128]	; (8004df4 <HAL_TIM_Base_Start_IT+0xfc>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d009      	beq.n	8004d8c <HAL_TIM_Base_Start_IT+0x94>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a1e      	ldr	r2, [pc, #120]	; (8004df8 <HAL_TIM_Base_Start_IT+0x100>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d004      	beq.n	8004d8c <HAL_TIM_Base_Start_IT+0x94>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a1d      	ldr	r2, [pc, #116]	; (8004dfc <HAL_TIM_Base_Start_IT+0x104>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d115      	bne.n	8004db8 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	689a      	ldr	r2, [r3, #8]
 8004d92:	4b1b      	ldr	r3, [pc, #108]	; (8004e00 <HAL_TIM_Base_Start_IT+0x108>)
 8004d94:	4013      	ands	r3, r2
 8004d96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2b06      	cmp	r3, #6
 8004d9c:	d015      	beq.n	8004dca <HAL_TIM_Base_Start_IT+0xd2>
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004da4:	d011      	beq.n	8004dca <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f042 0201 	orr.w	r2, r2, #1
 8004db4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004db6:	e008      	b.n	8004dca <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f042 0201 	orr.w	r2, r2, #1
 8004dc6:	601a      	str	r2, [r3, #0]
 8004dc8:	e000      	b.n	8004dcc <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004dcc:	2300      	movs	r3, #0
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3714      	adds	r7, #20
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr
 8004dda:	bf00      	nop
 8004ddc:	40010000 	.word	0x40010000
 8004de0:	40000400 	.word	0x40000400
 8004de4:	40000800 	.word	0x40000800
 8004de8:	40000c00 	.word	0x40000c00
 8004dec:	40010400 	.word	0x40010400
 8004df0:	40001800 	.word	0x40001800
 8004df4:	40014000 	.word	0x40014000
 8004df8:	4000e000 	.word	0x4000e000
 8004dfc:	4000e400 	.word	0x4000e400
 8004e00:	00010007 	.word	0x00010007

08004e04 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b082      	sub	sp, #8
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d101      	bne.n	8004e16 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e049      	b.n	8004eaa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d106      	bne.n	8004e30 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f000 f841 	bl	8004eb2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2202      	movs	r2, #2
 8004e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	3304      	adds	r3, #4
 8004e40:	4619      	mov	r1, r3
 8004e42:	4610      	mov	r0, r2
 8004e44:	f000 fff4 	bl	8005e30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2201      	movs	r2, #1
 8004e94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ea8:	2300      	movs	r3, #0
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3708      	adds	r7, #8
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}

08004eb2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004eb2:	b480      	push	{r7}
 8004eb4:	b083      	sub	sp, #12
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004eba:	bf00      	nop
 8004ebc:	370c      	adds	r7, #12
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr
	...

08004ec8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b084      	sub	sp, #16
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d109      	bne.n	8004eec <HAL_TIM_PWM_Start+0x24>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ede:	b2db      	uxtb	r3, r3
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	bf14      	ite	ne
 8004ee4:	2301      	movne	r3, #1
 8004ee6:	2300      	moveq	r3, #0
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	e03c      	b.n	8004f66 <HAL_TIM_PWM_Start+0x9e>
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	2b04      	cmp	r3, #4
 8004ef0:	d109      	bne.n	8004f06 <HAL_TIM_PWM_Start+0x3e>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	bf14      	ite	ne
 8004efe:	2301      	movne	r3, #1
 8004f00:	2300      	moveq	r3, #0
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	e02f      	b.n	8004f66 <HAL_TIM_PWM_Start+0x9e>
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	2b08      	cmp	r3, #8
 8004f0a:	d109      	bne.n	8004f20 <HAL_TIM_PWM_Start+0x58>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	bf14      	ite	ne
 8004f18:	2301      	movne	r3, #1
 8004f1a:	2300      	moveq	r3, #0
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	e022      	b.n	8004f66 <HAL_TIM_PWM_Start+0x9e>
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	2b0c      	cmp	r3, #12
 8004f24:	d109      	bne.n	8004f3a <HAL_TIM_PWM_Start+0x72>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	bf14      	ite	ne
 8004f32:	2301      	movne	r3, #1
 8004f34:	2300      	moveq	r3, #0
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	e015      	b.n	8004f66 <HAL_TIM_PWM_Start+0x9e>
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	2b10      	cmp	r3, #16
 8004f3e:	d109      	bne.n	8004f54 <HAL_TIM_PWM_Start+0x8c>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004f46:	b2db      	uxtb	r3, r3
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	bf14      	ite	ne
 8004f4c:	2301      	movne	r3, #1
 8004f4e:	2300      	moveq	r3, #0
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	e008      	b.n	8004f66 <HAL_TIM_PWM_Start+0x9e>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	bf14      	ite	ne
 8004f60:	2301      	movne	r3, #1
 8004f62:	2300      	moveq	r3, #0
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d001      	beq.n	8004f6e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e0ab      	b.n	80050c6 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d104      	bne.n	8004f7e <HAL_TIM_PWM_Start+0xb6>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2202      	movs	r2, #2
 8004f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f7c:	e023      	b.n	8004fc6 <HAL_TIM_PWM_Start+0xfe>
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	2b04      	cmp	r3, #4
 8004f82:	d104      	bne.n	8004f8e <HAL_TIM_PWM_Start+0xc6>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2202      	movs	r2, #2
 8004f88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f8c:	e01b      	b.n	8004fc6 <HAL_TIM_PWM_Start+0xfe>
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	2b08      	cmp	r3, #8
 8004f92:	d104      	bne.n	8004f9e <HAL_TIM_PWM_Start+0xd6>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2202      	movs	r2, #2
 8004f98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f9c:	e013      	b.n	8004fc6 <HAL_TIM_PWM_Start+0xfe>
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	2b0c      	cmp	r3, #12
 8004fa2:	d104      	bne.n	8004fae <HAL_TIM_PWM_Start+0xe6>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2202      	movs	r2, #2
 8004fa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004fac:	e00b      	b.n	8004fc6 <HAL_TIM_PWM_Start+0xfe>
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	2b10      	cmp	r3, #16
 8004fb2:	d104      	bne.n	8004fbe <HAL_TIM_PWM_Start+0xf6>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2202      	movs	r2, #2
 8004fb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fbc:	e003      	b.n	8004fc6 <HAL_TIM_PWM_Start+0xfe>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2202      	movs	r2, #2
 8004fc2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	6839      	ldr	r1, [r7, #0]
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f001 fc7e 	bl	80068d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a3d      	ldr	r2, [pc, #244]	; (80050d0 <HAL_TIM_PWM_Start+0x208>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d013      	beq.n	8005006 <HAL_TIM_PWM_Start+0x13e>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a3c      	ldr	r2, [pc, #240]	; (80050d4 <HAL_TIM_PWM_Start+0x20c>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d00e      	beq.n	8005006 <HAL_TIM_PWM_Start+0x13e>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a3a      	ldr	r2, [pc, #232]	; (80050d8 <HAL_TIM_PWM_Start+0x210>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d009      	beq.n	8005006 <HAL_TIM_PWM_Start+0x13e>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a39      	ldr	r2, [pc, #228]	; (80050dc <HAL_TIM_PWM_Start+0x214>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d004      	beq.n	8005006 <HAL_TIM_PWM_Start+0x13e>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a37      	ldr	r2, [pc, #220]	; (80050e0 <HAL_TIM_PWM_Start+0x218>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d101      	bne.n	800500a <HAL_TIM_PWM_Start+0x142>
 8005006:	2301      	movs	r3, #1
 8005008:	e000      	b.n	800500c <HAL_TIM_PWM_Start+0x144>
 800500a:	2300      	movs	r3, #0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d007      	beq.n	8005020 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800501e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a2a      	ldr	r2, [pc, #168]	; (80050d0 <HAL_TIM_PWM_Start+0x208>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d02c      	beq.n	8005084 <HAL_TIM_PWM_Start+0x1bc>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005032:	d027      	beq.n	8005084 <HAL_TIM_PWM_Start+0x1bc>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a2a      	ldr	r2, [pc, #168]	; (80050e4 <HAL_TIM_PWM_Start+0x21c>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d022      	beq.n	8005084 <HAL_TIM_PWM_Start+0x1bc>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a29      	ldr	r2, [pc, #164]	; (80050e8 <HAL_TIM_PWM_Start+0x220>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d01d      	beq.n	8005084 <HAL_TIM_PWM_Start+0x1bc>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a27      	ldr	r2, [pc, #156]	; (80050ec <HAL_TIM_PWM_Start+0x224>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d018      	beq.n	8005084 <HAL_TIM_PWM_Start+0x1bc>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a1f      	ldr	r2, [pc, #124]	; (80050d4 <HAL_TIM_PWM_Start+0x20c>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d013      	beq.n	8005084 <HAL_TIM_PWM_Start+0x1bc>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a23      	ldr	r2, [pc, #140]	; (80050f0 <HAL_TIM_PWM_Start+0x228>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d00e      	beq.n	8005084 <HAL_TIM_PWM_Start+0x1bc>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a1b      	ldr	r2, [pc, #108]	; (80050d8 <HAL_TIM_PWM_Start+0x210>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d009      	beq.n	8005084 <HAL_TIM_PWM_Start+0x1bc>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a1f      	ldr	r2, [pc, #124]	; (80050f4 <HAL_TIM_PWM_Start+0x22c>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d004      	beq.n	8005084 <HAL_TIM_PWM_Start+0x1bc>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a1e      	ldr	r2, [pc, #120]	; (80050f8 <HAL_TIM_PWM_Start+0x230>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d115      	bne.n	80050b0 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	689a      	ldr	r2, [r3, #8]
 800508a:	4b1c      	ldr	r3, [pc, #112]	; (80050fc <HAL_TIM_PWM_Start+0x234>)
 800508c:	4013      	ands	r3, r2
 800508e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2b06      	cmp	r3, #6
 8005094:	d015      	beq.n	80050c2 <HAL_TIM_PWM_Start+0x1fa>
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800509c:	d011      	beq.n	80050c2 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f042 0201 	orr.w	r2, r2, #1
 80050ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050ae:	e008      	b.n	80050c2 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f042 0201 	orr.w	r2, r2, #1
 80050be:	601a      	str	r2, [r3, #0]
 80050c0:	e000      	b.n	80050c4 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80050c4:	2300      	movs	r3, #0
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3710      	adds	r7, #16
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}
 80050ce:	bf00      	nop
 80050d0:	40010000 	.word	0x40010000
 80050d4:	40010400 	.word	0x40010400
 80050d8:	40014000 	.word	0x40014000
 80050dc:	40014400 	.word	0x40014400
 80050e0:	40014800 	.word	0x40014800
 80050e4:	40000400 	.word	0x40000400
 80050e8:	40000800 	.word	0x40000800
 80050ec:	40000c00 	.word	0x40000c00
 80050f0:	40001800 	.word	0x40001800
 80050f4:	4000e000 	.word	0x4000e000
 80050f8:	4000e400 	.word	0x4000e400
 80050fc:	00010007 	.word	0x00010007

08005100 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b082      	sub	sp, #8
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d101      	bne.n	8005112 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e049      	b.n	80051a6 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005118:	b2db      	uxtb	r3, r3
 800511a:	2b00      	cmp	r3, #0
 800511c:	d106      	bne.n	800512c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f000 f841 	bl	80051ae <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2202      	movs	r2, #2
 8005130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	3304      	adds	r3, #4
 800513c:	4619      	mov	r1, r3
 800513e:	4610      	mov	r0, r2
 8005140:	f000 fe76 	bl	8005e30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2201      	movs	r2, #1
 80051a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051a4:	2300      	movs	r3, #0
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3708      	adds	r7, #8
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}

080051ae <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80051ae:	b480      	push	{r7}
 80051b0:	b083      	sub	sp, #12
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80051b6:	bf00      	nop
 80051b8:	370c      	adds	r7, #12
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr
	...

080051c4 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b084      	sub	sp, #16
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d104      	bne.n	80051de <HAL_TIM_IC_Start+0x1a>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	e023      	b.n	8005226 <HAL_TIM_IC_Start+0x62>
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	2b04      	cmp	r3, #4
 80051e2:	d104      	bne.n	80051ee <HAL_TIM_IC_Start+0x2a>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	e01b      	b.n	8005226 <HAL_TIM_IC_Start+0x62>
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	2b08      	cmp	r3, #8
 80051f2:	d104      	bne.n	80051fe <HAL_TIM_IC_Start+0x3a>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80051fa:	b2db      	uxtb	r3, r3
 80051fc:	e013      	b.n	8005226 <HAL_TIM_IC_Start+0x62>
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	2b0c      	cmp	r3, #12
 8005202:	d104      	bne.n	800520e <HAL_TIM_IC_Start+0x4a>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800520a:	b2db      	uxtb	r3, r3
 800520c:	e00b      	b.n	8005226 <HAL_TIM_IC_Start+0x62>
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	2b10      	cmp	r3, #16
 8005212:	d104      	bne.n	800521e <HAL_TIM_IC_Start+0x5a>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800521a:	b2db      	uxtb	r3, r3
 800521c:	e003      	b.n	8005226 <HAL_TIM_IC_Start+0x62>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005224:	b2db      	uxtb	r3, r3
 8005226:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d104      	bne.n	8005238 <HAL_TIM_IC_Start+0x74>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005234:	b2db      	uxtb	r3, r3
 8005236:	e013      	b.n	8005260 <HAL_TIM_IC_Start+0x9c>
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	2b04      	cmp	r3, #4
 800523c:	d104      	bne.n	8005248 <HAL_TIM_IC_Start+0x84>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005244:	b2db      	uxtb	r3, r3
 8005246:	e00b      	b.n	8005260 <HAL_TIM_IC_Start+0x9c>
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	2b08      	cmp	r3, #8
 800524c:	d104      	bne.n	8005258 <HAL_TIM_IC_Start+0x94>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005254:	b2db      	uxtb	r3, r3
 8005256:	e003      	b.n	8005260 <HAL_TIM_IC_Start+0x9c>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800525e:	b2db      	uxtb	r3, r3
 8005260:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005262:	7bfb      	ldrb	r3, [r7, #15]
 8005264:	2b01      	cmp	r3, #1
 8005266:	d102      	bne.n	800526e <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005268:	7bbb      	ldrb	r3, [r7, #14]
 800526a:	2b01      	cmp	r3, #1
 800526c:	d001      	beq.n	8005272 <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	e0a1      	b.n	80053b6 <HAL_TIM_IC_Start+0x1f2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d104      	bne.n	8005282 <HAL_TIM_IC_Start+0xbe>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2202      	movs	r2, #2
 800527c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005280:	e023      	b.n	80052ca <HAL_TIM_IC_Start+0x106>
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	2b04      	cmp	r3, #4
 8005286:	d104      	bne.n	8005292 <HAL_TIM_IC_Start+0xce>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2202      	movs	r2, #2
 800528c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005290:	e01b      	b.n	80052ca <HAL_TIM_IC_Start+0x106>
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	2b08      	cmp	r3, #8
 8005296:	d104      	bne.n	80052a2 <HAL_TIM_IC_Start+0xde>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2202      	movs	r2, #2
 800529c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052a0:	e013      	b.n	80052ca <HAL_TIM_IC_Start+0x106>
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	2b0c      	cmp	r3, #12
 80052a6:	d104      	bne.n	80052b2 <HAL_TIM_IC_Start+0xee>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2202      	movs	r2, #2
 80052ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80052b0:	e00b      	b.n	80052ca <HAL_TIM_IC_Start+0x106>
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	2b10      	cmp	r3, #16
 80052b6:	d104      	bne.n	80052c2 <HAL_TIM_IC_Start+0xfe>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2202      	movs	r2, #2
 80052bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052c0:	e003      	b.n	80052ca <HAL_TIM_IC_Start+0x106>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2202      	movs	r2, #2
 80052c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d104      	bne.n	80052da <HAL_TIM_IC_Start+0x116>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2202      	movs	r2, #2
 80052d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052d8:	e013      	b.n	8005302 <HAL_TIM_IC_Start+0x13e>
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	2b04      	cmp	r3, #4
 80052de:	d104      	bne.n	80052ea <HAL_TIM_IC_Start+0x126>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2202      	movs	r2, #2
 80052e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80052e8:	e00b      	b.n	8005302 <HAL_TIM_IC_Start+0x13e>
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	2b08      	cmp	r3, #8
 80052ee:	d104      	bne.n	80052fa <HAL_TIM_IC_Start+0x136>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2202      	movs	r2, #2
 80052f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80052f8:	e003      	b.n	8005302 <HAL_TIM_IC_Start+0x13e>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2202      	movs	r2, #2
 80052fe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	2201      	movs	r2, #1
 8005308:	6839      	ldr	r1, [r7, #0]
 800530a:	4618      	mov	r0, r3
 800530c:	f001 fae0 	bl	80068d0 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a2a      	ldr	r2, [pc, #168]	; (80053c0 <HAL_TIM_IC_Start+0x1fc>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d02c      	beq.n	8005374 <HAL_TIM_IC_Start+0x1b0>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005322:	d027      	beq.n	8005374 <HAL_TIM_IC_Start+0x1b0>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a26      	ldr	r2, [pc, #152]	; (80053c4 <HAL_TIM_IC_Start+0x200>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d022      	beq.n	8005374 <HAL_TIM_IC_Start+0x1b0>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a25      	ldr	r2, [pc, #148]	; (80053c8 <HAL_TIM_IC_Start+0x204>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d01d      	beq.n	8005374 <HAL_TIM_IC_Start+0x1b0>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a23      	ldr	r2, [pc, #140]	; (80053cc <HAL_TIM_IC_Start+0x208>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d018      	beq.n	8005374 <HAL_TIM_IC_Start+0x1b0>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a22      	ldr	r2, [pc, #136]	; (80053d0 <HAL_TIM_IC_Start+0x20c>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d013      	beq.n	8005374 <HAL_TIM_IC_Start+0x1b0>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a20      	ldr	r2, [pc, #128]	; (80053d4 <HAL_TIM_IC_Start+0x210>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d00e      	beq.n	8005374 <HAL_TIM_IC_Start+0x1b0>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a1f      	ldr	r2, [pc, #124]	; (80053d8 <HAL_TIM_IC_Start+0x214>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d009      	beq.n	8005374 <HAL_TIM_IC_Start+0x1b0>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a1d      	ldr	r2, [pc, #116]	; (80053dc <HAL_TIM_IC_Start+0x218>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d004      	beq.n	8005374 <HAL_TIM_IC_Start+0x1b0>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a1c      	ldr	r2, [pc, #112]	; (80053e0 <HAL_TIM_IC_Start+0x21c>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d115      	bne.n	80053a0 <HAL_TIM_IC_Start+0x1dc>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	689a      	ldr	r2, [r3, #8]
 800537a:	4b1a      	ldr	r3, [pc, #104]	; (80053e4 <HAL_TIM_IC_Start+0x220>)
 800537c:	4013      	ands	r3, r2
 800537e:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	2b06      	cmp	r3, #6
 8005384:	d015      	beq.n	80053b2 <HAL_TIM_IC_Start+0x1ee>
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800538c:	d011      	beq.n	80053b2 <HAL_TIM_IC_Start+0x1ee>
    {
      __HAL_TIM_ENABLE(htim);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f042 0201 	orr.w	r2, r2, #1
 800539c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800539e:	e008      	b.n	80053b2 <HAL_TIM_IC_Start+0x1ee>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f042 0201 	orr.w	r2, r2, #1
 80053ae:	601a      	str	r2, [r3, #0]
 80053b0:	e000      	b.n	80053b4 <HAL_TIM_IC_Start+0x1f0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80053b4:	2300      	movs	r3, #0
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3710      	adds	r7, #16
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}
 80053be:	bf00      	nop
 80053c0:	40010000 	.word	0x40010000
 80053c4:	40000400 	.word	0x40000400
 80053c8:	40000800 	.word	0x40000800
 80053cc:	40000c00 	.word	0x40000c00
 80053d0:	40010400 	.word	0x40010400
 80053d4:	40001800 	.word	0x40001800
 80053d8:	40014000 	.word	0x40014000
 80053dc:	4000e000 	.word	0x4000e000
 80053e0:	4000e400 	.word	0x4000e400
 80053e4:	00010007 	.word	0x00010007

080053e8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b086      	sub	sp, #24
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d101      	bne.n	80053fc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	e08f      	b.n	800551c <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005402:	b2db      	uxtb	r3, r3
 8005404:	2b00      	cmp	r3, #0
 8005406:	d106      	bne.n	8005416 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f7fc fbed 	bl	8001bf0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2202      	movs	r2, #2
 800541a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	6899      	ldr	r1, [r3, #8]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	4b3e      	ldr	r3, [pc, #248]	; (8005524 <HAL_TIM_Encoder_Init+0x13c>)
 800542a:	400b      	ands	r3, r1
 800542c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	3304      	adds	r3, #4
 8005436:	4619      	mov	r1, r3
 8005438:	4610      	mov	r0, r2
 800543a:	f000 fcf9 	bl	8005e30 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	699b      	ldr	r3, [r3, #24]
 800544c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	6a1b      	ldr	r3, [r3, #32]
 8005454:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	697a      	ldr	r2, [r7, #20]
 800545c:	4313      	orrs	r3, r2
 800545e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005460:	693a      	ldr	r2, [r7, #16]
 8005462:	4b31      	ldr	r3, [pc, #196]	; (8005528 <HAL_TIM_Encoder_Init+0x140>)
 8005464:	4013      	ands	r3, r2
 8005466:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	689a      	ldr	r2, [r3, #8]
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	699b      	ldr	r3, [r3, #24]
 8005470:	021b      	lsls	r3, r3, #8
 8005472:	4313      	orrs	r3, r2
 8005474:	693a      	ldr	r2, [r7, #16]
 8005476:	4313      	orrs	r3, r2
 8005478:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800547a:	693a      	ldr	r2, [r7, #16]
 800547c:	4b2b      	ldr	r3, [pc, #172]	; (800552c <HAL_TIM_Encoder_Init+0x144>)
 800547e:	4013      	ands	r3, r2
 8005480:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005482:	693a      	ldr	r2, [r7, #16]
 8005484:	4b2a      	ldr	r3, [pc, #168]	; (8005530 <HAL_TIM_Encoder_Init+0x148>)
 8005486:	4013      	ands	r3, r2
 8005488:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	68da      	ldr	r2, [r3, #12]
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	69db      	ldr	r3, [r3, #28]
 8005492:	021b      	lsls	r3, r3, #8
 8005494:	4313      	orrs	r3, r2
 8005496:	693a      	ldr	r2, [r7, #16]
 8005498:	4313      	orrs	r3, r2
 800549a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	691b      	ldr	r3, [r3, #16]
 80054a0:	011a      	lsls	r2, r3, #4
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	6a1b      	ldr	r3, [r3, #32]
 80054a6:	031b      	lsls	r3, r3, #12
 80054a8:	4313      	orrs	r3, r2
 80054aa:	693a      	ldr	r2, [r7, #16]
 80054ac:	4313      	orrs	r3, r2
 80054ae:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80054b6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80054be:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	685a      	ldr	r2, [r3, #4]
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	695b      	ldr	r3, [r3, #20]
 80054c8:	011b      	lsls	r3, r3, #4
 80054ca:	4313      	orrs	r3, r2
 80054cc:	68fa      	ldr	r2, [r7, #12]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	697a      	ldr	r2, [r7, #20]
 80054d8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	693a      	ldr	r2, [r7, #16]
 80054e0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	68fa      	ldr	r2, [r7, #12]
 80054e8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2201      	movs	r2, #1
 80054ee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2201      	movs	r2, #1
 80054f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2201      	movs	r2, #1
 80054fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2201      	movs	r2, #1
 8005506:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2201      	movs	r2, #1
 800550e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2201      	movs	r2, #1
 8005516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800551a:	2300      	movs	r3, #0
}
 800551c:	4618      	mov	r0, r3
 800551e:	3718      	adds	r7, #24
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}
 8005524:	fffebff8 	.word	0xfffebff8
 8005528:	fffffcfc 	.word	0xfffffcfc
 800552c:	fffff3f3 	.word	0xfffff3f3
 8005530:	ffff0f0f 	.word	0xffff0f0f

08005534 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b084      	sub	sp, #16
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005544:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800554c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005554:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800555c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d110      	bne.n	8005586 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005564:	7bfb      	ldrb	r3, [r7, #15]
 8005566:	2b01      	cmp	r3, #1
 8005568:	d102      	bne.n	8005570 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800556a:	7b7b      	ldrb	r3, [r7, #13]
 800556c:	2b01      	cmp	r3, #1
 800556e:	d001      	beq.n	8005574 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	e069      	b.n	8005648 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2202      	movs	r2, #2
 8005578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2202      	movs	r2, #2
 8005580:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005584:	e031      	b.n	80055ea <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	2b04      	cmp	r3, #4
 800558a:	d110      	bne.n	80055ae <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800558c:	7bbb      	ldrb	r3, [r7, #14]
 800558e:	2b01      	cmp	r3, #1
 8005590:	d102      	bne.n	8005598 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005592:	7b3b      	ldrb	r3, [r7, #12]
 8005594:	2b01      	cmp	r3, #1
 8005596:	d001      	beq.n	800559c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	e055      	b.n	8005648 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2202      	movs	r2, #2
 80055a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2202      	movs	r2, #2
 80055a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80055ac:	e01d      	b.n	80055ea <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80055ae:	7bfb      	ldrb	r3, [r7, #15]
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d108      	bne.n	80055c6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80055b4:	7bbb      	ldrb	r3, [r7, #14]
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d105      	bne.n	80055c6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80055ba:	7b7b      	ldrb	r3, [r7, #13]
 80055bc:	2b01      	cmp	r3, #1
 80055be:	d102      	bne.n	80055c6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80055c0:	7b3b      	ldrb	r3, [r7, #12]
 80055c2:	2b01      	cmp	r3, #1
 80055c4:	d001      	beq.n	80055ca <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	e03e      	b.n	8005648 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2202      	movs	r2, #2
 80055ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2202      	movs	r2, #2
 80055d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2202      	movs	r2, #2
 80055de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2202      	movs	r2, #2
 80055e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d003      	beq.n	80055f8 <HAL_TIM_Encoder_Start+0xc4>
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	2b04      	cmp	r3, #4
 80055f4:	d008      	beq.n	8005608 <HAL_TIM_Encoder_Start+0xd4>
 80055f6:	e00f      	b.n	8005618 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	2201      	movs	r2, #1
 80055fe:	2100      	movs	r1, #0
 8005600:	4618      	mov	r0, r3
 8005602:	f001 f965 	bl	80068d0 <TIM_CCxChannelCmd>
      break;
 8005606:	e016      	b.n	8005636 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	2201      	movs	r2, #1
 800560e:	2104      	movs	r1, #4
 8005610:	4618      	mov	r0, r3
 8005612:	f001 f95d 	bl	80068d0 <TIM_CCxChannelCmd>
      break;
 8005616:	e00e      	b.n	8005636 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	2201      	movs	r2, #1
 800561e:	2100      	movs	r1, #0
 8005620:	4618      	mov	r0, r3
 8005622:	f001 f955 	bl	80068d0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	2201      	movs	r2, #1
 800562c:	2104      	movs	r1, #4
 800562e:	4618      	mov	r0, r3
 8005630:	f001 f94e 	bl	80068d0 <TIM_CCxChannelCmd>
      break;
 8005634:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f042 0201 	orr.w	r2, r2, #1
 8005644:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005646:	2300      	movs	r3, #0
}
 8005648:	4618      	mov	r0, r3
 800564a:	3710      	adds	r7, #16
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}

08005650 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b082      	sub	sp, #8
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	691b      	ldr	r3, [r3, #16]
 800565e:	f003 0302 	and.w	r3, r3, #2
 8005662:	2b02      	cmp	r3, #2
 8005664:	d122      	bne.n	80056ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	f003 0302 	and.w	r3, r3, #2
 8005670:	2b02      	cmp	r3, #2
 8005672:	d11b      	bne.n	80056ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f06f 0202 	mvn.w	r2, #2
 800567c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2201      	movs	r2, #1
 8005682:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	699b      	ldr	r3, [r3, #24]
 800568a:	f003 0303 	and.w	r3, r3, #3
 800568e:	2b00      	cmp	r3, #0
 8005690:	d003      	beq.n	800569a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f000 fbae 	bl	8005df4 <HAL_TIM_IC_CaptureCallback>
 8005698:	e005      	b.n	80056a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f000 fba0 	bl	8005de0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f000 fbb1 	bl	8005e08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2200      	movs	r2, #0
 80056aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	691b      	ldr	r3, [r3, #16]
 80056b2:	f003 0304 	and.w	r3, r3, #4
 80056b6:	2b04      	cmp	r3, #4
 80056b8:	d122      	bne.n	8005700 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	68db      	ldr	r3, [r3, #12]
 80056c0:	f003 0304 	and.w	r3, r3, #4
 80056c4:	2b04      	cmp	r3, #4
 80056c6:	d11b      	bne.n	8005700 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f06f 0204 	mvn.w	r2, #4
 80056d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2202      	movs	r2, #2
 80056d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	699b      	ldr	r3, [r3, #24]
 80056de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d003      	beq.n	80056ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f000 fb84 	bl	8005df4 <HAL_TIM_IC_CaptureCallback>
 80056ec:	e005      	b.n	80056fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f000 fb76 	bl	8005de0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f000 fb87 	bl	8005e08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2200      	movs	r2, #0
 80056fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	691b      	ldr	r3, [r3, #16]
 8005706:	f003 0308 	and.w	r3, r3, #8
 800570a:	2b08      	cmp	r3, #8
 800570c:	d122      	bne.n	8005754 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	f003 0308 	and.w	r3, r3, #8
 8005718:	2b08      	cmp	r3, #8
 800571a:	d11b      	bne.n	8005754 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f06f 0208 	mvn.w	r2, #8
 8005724:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2204      	movs	r2, #4
 800572a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	69db      	ldr	r3, [r3, #28]
 8005732:	f003 0303 	and.w	r3, r3, #3
 8005736:	2b00      	cmp	r3, #0
 8005738:	d003      	beq.n	8005742 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f000 fb5a 	bl	8005df4 <HAL_TIM_IC_CaptureCallback>
 8005740:	e005      	b.n	800574e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f000 fb4c 	bl	8005de0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f000 fb5d 	bl	8005e08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2200      	movs	r2, #0
 8005752:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	691b      	ldr	r3, [r3, #16]
 800575a:	f003 0310 	and.w	r3, r3, #16
 800575e:	2b10      	cmp	r3, #16
 8005760:	d122      	bne.n	80057a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	f003 0310 	and.w	r3, r3, #16
 800576c:	2b10      	cmp	r3, #16
 800576e:	d11b      	bne.n	80057a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f06f 0210 	mvn.w	r2, #16
 8005778:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2208      	movs	r2, #8
 800577e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	69db      	ldr	r3, [r3, #28]
 8005786:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800578a:	2b00      	cmp	r3, #0
 800578c:	d003      	beq.n	8005796 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f000 fb30 	bl	8005df4 <HAL_TIM_IC_CaptureCallback>
 8005794:	e005      	b.n	80057a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f000 fb22 	bl	8005de0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f000 fb33 	bl	8005e08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	f003 0301 	and.w	r3, r3, #1
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d10e      	bne.n	80057d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	f003 0301 	and.w	r3, r3, #1
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d107      	bne.n	80057d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f06f 0201 	mvn.w	r2, #1
 80057cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f7fc f806 	bl	80017e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	691b      	ldr	r3, [r3, #16]
 80057da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057de:	2b80      	cmp	r3, #128	; 0x80
 80057e0:	d10e      	bne.n	8005800 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057ec:	2b80      	cmp	r3, #128	; 0x80
 80057ee:	d107      	bne.n	8005800 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80057f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f001 f934 	bl	8006a68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	691b      	ldr	r3, [r3, #16]
 8005806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800580a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800580e:	d10e      	bne.n	800582e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800581a:	2b80      	cmp	r3, #128	; 0x80
 800581c:	d107      	bne.n	800582e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005826:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f001 f927 	bl	8006a7c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	691b      	ldr	r3, [r3, #16]
 8005834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005838:	2b40      	cmp	r3, #64	; 0x40
 800583a:	d10e      	bne.n	800585a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005846:	2b40      	cmp	r3, #64	; 0x40
 8005848:	d107      	bne.n	800585a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005852:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f000 fae1 	bl	8005e1c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	691b      	ldr	r3, [r3, #16]
 8005860:	f003 0320 	and.w	r3, r3, #32
 8005864:	2b20      	cmp	r3, #32
 8005866:	d10e      	bne.n	8005886 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	68db      	ldr	r3, [r3, #12]
 800586e:	f003 0320 	and.w	r3, r3, #32
 8005872:	2b20      	cmp	r3, #32
 8005874:	d107      	bne.n	8005886 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f06f 0220 	mvn.w	r2, #32
 800587e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f001 f8e7 	bl	8006a54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005886:	bf00      	nop
 8005888:	3708      	adds	r7, #8
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}

0800588e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800588e:	b580      	push	{r7, lr}
 8005890:	b086      	sub	sp, #24
 8005892:	af00      	add	r7, sp, #0
 8005894:	60f8      	str	r0, [r7, #12]
 8005896:	60b9      	str	r1, [r7, #8]
 8005898:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800589a:	2300      	movs	r3, #0
 800589c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d101      	bne.n	80058ac <HAL_TIM_IC_ConfigChannel+0x1e>
 80058a8:	2302      	movs	r3, #2
 80058aa:	e088      	b.n	80059be <HAL_TIM_IC_ConfigChannel+0x130>
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d11b      	bne.n	80058f2 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	6818      	ldr	r0, [r3, #0]
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	6819      	ldr	r1, [r3, #0]
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	685a      	ldr	r2, [r3, #4]
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	68db      	ldr	r3, [r3, #12]
 80058ca:	f000 fe2d 	bl	8006528 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	699a      	ldr	r2, [r3, #24]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f022 020c 	bic.w	r2, r2, #12
 80058dc:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	6999      	ldr	r1, [r3, #24]
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	689a      	ldr	r2, [r3, #8]
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	430a      	orrs	r2, r1
 80058ee:	619a      	str	r2, [r3, #24]
 80058f0:	e060      	b.n	80059b4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2b04      	cmp	r3, #4
 80058f6:	d11c      	bne.n	8005932 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	6818      	ldr	r0, [r3, #0]
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	6819      	ldr	r1, [r3, #0]
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	685a      	ldr	r2, [r3, #4]
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	68db      	ldr	r3, [r3, #12]
 8005908:	f000 febd 	bl	8006686 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	699a      	ldr	r2, [r3, #24]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800591a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	6999      	ldr	r1, [r3, #24]
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	021a      	lsls	r2, r3, #8
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	430a      	orrs	r2, r1
 800592e:	619a      	str	r2, [r3, #24]
 8005930:	e040      	b.n	80059b4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2b08      	cmp	r3, #8
 8005936:	d11b      	bne.n	8005970 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	6818      	ldr	r0, [r3, #0]
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	6819      	ldr	r1, [r3, #0]
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	685a      	ldr	r2, [r3, #4]
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	68db      	ldr	r3, [r3, #12]
 8005948:	f000 ff0a 	bl	8006760 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	69da      	ldr	r2, [r3, #28]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f022 020c 	bic.w	r2, r2, #12
 800595a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	69d9      	ldr	r1, [r3, #28]
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	689a      	ldr	r2, [r3, #8]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	430a      	orrs	r2, r1
 800596c:	61da      	str	r2, [r3, #28]
 800596e:	e021      	b.n	80059b4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2b0c      	cmp	r3, #12
 8005974:	d11c      	bne.n	80059b0 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	6818      	ldr	r0, [r3, #0]
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	6819      	ldr	r1, [r3, #0]
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	685a      	ldr	r2, [r3, #4]
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	f000 ff27 	bl	80067d8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	69da      	ldr	r2, [r3, #28]
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005998:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	69d9      	ldr	r1, [r3, #28]
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	021a      	lsls	r2, r3, #8
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	430a      	orrs	r2, r1
 80059ac:	61da      	str	r2, [r3, #28]
 80059ae:	e001      	b.n	80059b4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2200      	movs	r2, #0
 80059b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80059bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3718      	adds	r7, #24
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
	...

080059c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b086      	sub	sp, #24
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	60f8      	str	r0, [r7, #12]
 80059d0:	60b9      	str	r1, [r7, #8]
 80059d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059d4:	2300      	movs	r3, #0
 80059d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059de:	2b01      	cmp	r3, #1
 80059e0:	d101      	bne.n	80059e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80059e2:	2302      	movs	r3, #2
 80059e4:	e0ff      	b.n	8005be6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2201      	movs	r2, #1
 80059ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2b14      	cmp	r3, #20
 80059f2:	f200 80f0 	bhi.w	8005bd6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80059f6:	a201      	add	r2, pc, #4	; (adr r2, 80059fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80059f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059fc:	08005a51 	.word	0x08005a51
 8005a00:	08005bd7 	.word	0x08005bd7
 8005a04:	08005bd7 	.word	0x08005bd7
 8005a08:	08005bd7 	.word	0x08005bd7
 8005a0c:	08005a91 	.word	0x08005a91
 8005a10:	08005bd7 	.word	0x08005bd7
 8005a14:	08005bd7 	.word	0x08005bd7
 8005a18:	08005bd7 	.word	0x08005bd7
 8005a1c:	08005ad3 	.word	0x08005ad3
 8005a20:	08005bd7 	.word	0x08005bd7
 8005a24:	08005bd7 	.word	0x08005bd7
 8005a28:	08005bd7 	.word	0x08005bd7
 8005a2c:	08005b13 	.word	0x08005b13
 8005a30:	08005bd7 	.word	0x08005bd7
 8005a34:	08005bd7 	.word	0x08005bd7
 8005a38:	08005bd7 	.word	0x08005bd7
 8005a3c:	08005b55 	.word	0x08005b55
 8005a40:	08005bd7 	.word	0x08005bd7
 8005a44:	08005bd7 	.word	0x08005bd7
 8005a48:	08005bd7 	.word	0x08005bd7
 8005a4c:	08005b95 	.word	0x08005b95
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	68b9      	ldr	r1, [r7, #8]
 8005a56:	4618      	mov	r0, r3
 8005a58:	f000 fa90 	bl	8005f7c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	699a      	ldr	r2, [r3, #24]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f042 0208 	orr.w	r2, r2, #8
 8005a6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	699a      	ldr	r2, [r3, #24]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f022 0204 	bic.w	r2, r2, #4
 8005a7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	6999      	ldr	r1, [r3, #24]
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	691a      	ldr	r2, [r3, #16]
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	430a      	orrs	r2, r1
 8005a8c:	619a      	str	r2, [r3, #24]
      break;
 8005a8e:	e0a5      	b.n	8005bdc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	68b9      	ldr	r1, [r7, #8]
 8005a96:	4618      	mov	r0, r3
 8005a98:	f000 fb00 	bl	800609c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	699a      	ldr	r2, [r3, #24]
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005aaa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	699a      	ldr	r2, [r3, #24]
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005aba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	6999      	ldr	r1, [r3, #24]
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	691b      	ldr	r3, [r3, #16]
 8005ac6:	021a      	lsls	r2, r3, #8
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	430a      	orrs	r2, r1
 8005ace:	619a      	str	r2, [r3, #24]
      break;
 8005ad0:	e084      	b.n	8005bdc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	68b9      	ldr	r1, [r7, #8]
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f000 fb69 	bl	80061b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	69da      	ldr	r2, [r3, #28]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f042 0208 	orr.w	r2, r2, #8
 8005aec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	69da      	ldr	r2, [r3, #28]
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f022 0204 	bic.w	r2, r2, #4
 8005afc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	69d9      	ldr	r1, [r3, #28]
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	691a      	ldr	r2, [r3, #16]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	430a      	orrs	r2, r1
 8005b0e:	61da      	str	r2, [r3, #28]
      break;
 8005b10:	e064      	b.n	8005bdc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	68b9      	ldr	r1, [r7, #8]
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f000 fbd1 	bl	80062c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	69da      	ldr	r2, [r3, #28]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	69da      	ldr	r2, [r3, #28]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	69d9      	ldr	r1, [r3, #28]
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	691b      	ldr	r3, [r3, #16]
 8005b48:	021a      	lsls	r2, r3, #8
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	430a      	orrs	r2, r1
 8005b50:	61da      	str	r2, [r3, #28]
      break;
 8005b52:	e043      	b.n	8005bdc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	68b9      	ldr	r1, [r7, #8]
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f000 fc1a 	bl	8006394 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f042 0208 	orr.w	r2, r2, #8
 8005b6e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f022 0204 	bic.w	r2, r2, #4
 8005b7e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	691a      	ldr	r2, [r3, #16]
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	430a      	orrs	r2, r1
 8005b90:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005b92:	e023      	b.n	8005bdc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	68b9      	ldr	r1, [r7, #8]
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f000 fc5e 	bl	800645c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005bae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bbe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	691b      	ldr	r3, [r3, #16]
 8005bca:	021a      	lsls	r2, r3, #8
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	430a      	orrs	r2, r1
 8005bd2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005bd4:	e002      	b.n	8005bdc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	75fb      	strb	r3, [r7, #23]
      break;
 8005bda:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2200      	movs	r2, #0
 8005be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005be4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3718      	adds	r7, #24
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}
 8005bee:	bf00      	nop

08005bf0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d101      	bne.n	8005c0c <HAL_TIM_ConfigClockSource+0x1c>
 8005c08:	2302      	movs	r3, #2
 8005c0a:	e0dc      	b.n	8005dc6 <HAL_TIM_ConfigClockSource+0x1d6>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2202      	movs	r2, #2
 8005c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c24:	68ba      	ldr	r2, [r7, #8]
 8005c26:	4b6a      	ldr	r3, [pc, #424]	; (8005dd0 <HAL_TIM_ConfigClockSource+0x1e0>)
 8005c28:	4013      	ands	r3, r2
 8005c2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c32:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	68ba      	ldr	r2, [r7, #8]
 8005c3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a64      	ldr	r2, [pc, #400]	; (8005dd4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	f000 80a9 	beq.w	8005d9a <HAL_TIM_ConfigClockSource+0x1aa>
 8005c48:	4a62      	ldr	r2, [pc, #392]	; (8005dd4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	f200 80ae 	bhi.w	8005dac <HAL_TIM_ConfigClockSource+0x1bc>
 8005c50:	4a61      	ldr	r2, [pc, #388]	; (8005dd8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	f000 80a1 	beq.w	8005d9a <HAL_TIM_ConfigClockSource+0x1aa>
 8005c58:	4a5f      	ldr	r2, [pc, #380]	; (8005dd8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	f200 80a6 	bhi.w	8005dac <HAL_TIM_ConfigClockSource+0x1bc>
 8005c60:	4a5e      	ldr	r2, [pc, #376]	; (8005ddc <HAL_TIM_ConfigClockSource+0x1ec>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	f000 8099 	beq.w	8005d9a <HAL_TIM_ConfigClockSource+0x1aa>
 8005c68:	4a5c      	ldr	r2, [pc, #368]	; (8005ddc <HAL_TIM_ConfigClockSource+0x1ec>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	f200 809e 	bhi.w	8005dac <HAL_TIM_ConfigClockSource+0x1bc>
 8005c70:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005c74:	f000 8091 	beq.w	8005d9a <HAL_TIM_ConfigClockSource+0x1aa>
 8005c78:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005c7c:	f200 8096 	bhi.w	8005dac <HAL_TIM_ConfigClockSource+0x1bc>
 8005c80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c84:	f000 8089 	beq.w	8005d9a <HAL_TIM_ConfigClockSource+0x1aa>
 8005c88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c8c:	f200 808e 	bhi.w	8005dac <HAL_TIM_ConfigClockSource+0x1bc>
 8005c90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c94:	d03e      	beq.n	8005d14 <HAL_TIM_ConfigClockSource+0x124>
 8005c96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c9a:	f200 8087 	bhi.w	8005dac <HAL_TIM_ConfigClockSource+0x1bc>
 8005c9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ca2:	f000 8086 	beq.w	8005db2 <HAL_TIM_ConfigClockSource+0x1c2>
 8005ca6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005caa:	d87f      	bhi.n	8005dac <HAL_TIM_ConfigClockSource+0x1bc>
 8005cac:	2b70      	cmp	r3, #112	; 0x70
 8005cae:	d01a      	beq.n	8005ce6 <HAL_TIM_ConfigClockSource+0xf6>
 8005cb0:	2b70      	cmp	r3, #112	; 0x70
 8005cb2:	d87b      	bhi.n	8005dac <HAL_TIM_ConfigClockSource+0x1bc>
 8005cb4:	2b60      	cmp	r3, #96	; 0x60
 8005cb6:	d050      	beq.n	8005d5a <HAL_TIM_ConfigClockSource+0x16a>
 8005cb8:	2b60      	cmp	r3, #96	; 0x60
 8005cba:	d877      	bhi.n	8005dac <HAL_TIM_ConfigClockSource+0x1bc>
 8005cbc:	2b50      	cmp	r3, #80	; 0x50
 8005cbe:	d03c      	beq.n	8005d3a <HAL_TIM_ConfigClockSource+0x14a>
 8005cc0:	2b50      	cmp	r3, #80	; 0x50
 8005cc2:	d873      	bhi.n	8005dac <HAL_TIM_ConfigClockSource+0x1bc>
 8005cc4:	2b40      	cmp	r3, #64	; 0x40
 8005cc6:	d058      	beq.n	8005d7a <HAL_TIM_ConfigClockSource+0x18a>
 8005cc8:	2b40      	cmp	r3, #64	; 0x40
 8005cca:	d86f      	bhi.n	8005dac <HAL_TIM_ConfigClockSource+0x1bc>
 8005ccc:	2b30      	cmp	r3, #48	; 0x30
 8005cce:	d064      	beq.n	8005d9a <HAL_TIM_ConfigClockSource+0x1aa>
 8005cd0:	2b30      	cmp	r3, #48	; 0x30
 8005cd2:	d86b      	bhi.n	8005dac <HAL_TIM_ConfigClockSource+0x1bc>
 8005cd4:	2b20      	cmp	r3, #32
 8005cd6:	d060      	beq.n	8005d9a <HAL_TIM_ConfigClockSource+0x1aa>
 8005cd8:	2b20      	cmp	r3, #32
 8005cda:	d867      	bhi.n	8005dac <HAL_TIM_ConfigClockSource+0x1bc>
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d05c      	beq.n	8005d9a <HAL_TIM_ConfigClockSource+0x1aa>
 8005ce0:	2b10      	cmp	r3, #16
 8005ce2:	d05a      	beq.n	8005d9a <HAL_TIM_ConfigClockSource+0x1aa>
 8005ce4:	e062      	b.n	8005dac <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6818      	ldr	r0, [r3, #0]
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	6899      	ldr	r1, [r3, #8]
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	685a      	ldr	r2, [r3, #4]
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	68db      	ldr	r3, [r3, #12]
 8005cf6:	f000 fdcb 	bl	8006890 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005d08:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	68ba      	ldr	r2, [r7, #8]
 8005d10:	609a      	str	r2, [r3, #8]
      break;
 8005d12:	e04f      	b.n	8005db4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6818      	ldr	r0, [r3, #0]
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	6899      	ldr	r1, [r3, #8]
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	685a      	ldr	r2, [r3, #4]
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	f000 fdb4 	bl	8006890 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	689a      	ldr	r2, [r3, #8]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d36:	609a      	str	r2, [r3, #8]
      break;
 8005d38:	e03c      	b.n	8005db4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6818      	ldr	r0, [r3, #0]
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	6859      	ldr	r1, [r3, #4]
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	68db      	ldr	r3, [r3, #12]
 8005d46:	461a      	mov	r2, r3
 8005d48:	f000 fc6e 	bl	8006628 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	2150      	movs	r1, #80	; 0x50
 8005d52:	4618      	mov	r0, r3
 8005d54:	f000 fd7e 	bl	8006854 <TIM_ITRx_SetConfig>
      break;
 8005d58:	e02c      	b.n	8005db4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6818      	ldr	r0, [r3, #0]
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	6859      	ldr	r1, [r3, #4]
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	68db      	ldr	r3, [r3, #12]
 8005d66:	461a      	mov	r2, r3
 8005d68:	f000 fcca 	bl	8006700 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	2160      	movs	r1, #96	; 0x60
 8005d72:	4618      	mov	r0, r3
 8005d74:	f000 fd6e 	bl	8006854 <TIM_ITRx_SetConfig>
      break;
 8005d78:	e01c      	b.n	8005db4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6818      	ldr	r0, [r3, #0]
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	6859      	ldr	r1, [r3, #4]
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	68db      	ldr	r3, [r3, #12]
 8005d86:	461a      	mov	r2, r3
 8005d88:	f000 fc4e 	bl	8006628 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	2140      	movs	r1, #64	; 0x40
 8005d92:	4618      	mov	r0, r3
 8005d94:	f000 fd5e 	bl	8006854 <TIM_ITRx_SetConfig>
      break;
 8005d98:	e00c      	b.n	8005db4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4619      	mov	r1, r3
 8005da4:	4610      	mov	r0, r2
 8005da6:	f000 fd55 	bl	8006854 <TIM_ITRx_SetConfig>
      break;
 8005daa:	e003      	b.n	8005db4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8005dac:	2301      	movs	r3, #1
 8005dae:	73fb      	strb	r3, [r7, #15]
      break;
 8005db0:	e000      	b.n	8005db4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8005db2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2201      	movs	r2, #1
 8005db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3710      	adds	r7, #16
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	bf00      	nop
 8005dd0:	ffceff88 	.word	0xffceff88
 8005dd4:	00100040 	.word	0x00100040
 8005dd8:	00100030 	.word	0x00100030
 8005ddc:	00100020 	.word	0x00100020

08005de0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b083      	sub	sp, #12
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005de8:	bf00      	nop
 8005dea:	370c      	adds	r7, #12
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr

08005df4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b083      	sub	sp, #12
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005dfc:	bf00      	nop
 8005dfe:	370c      	adds	r7, #12
 8005e00:	46bd      	mov	sp, r7
 8005e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e06:	4770      	bx	lr

08005e08 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b083      	sub	sp, #12
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e10:	bf00      	nop
 8005e12:	370c      	adds	r7, #12
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr

08005e1c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b083      	sub	sp, #12
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e24:	bf00      	nop
 8005e26:	370c      	adds	r7, #12
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr

08005e30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b085      	sub	sp, #20
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	4a44      	ldr	r2, [pc, #272]	; (8005f54 <TIM_Base_SetConfig+0x124>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d013      	beq.n	8005e70 <TIM_Base_SetConfig+0x40>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e4e:	d00f      	beq.n	8005e70 <TIM_Base_SetConfig+0x40>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	4a41      	ldr	r2, [pc, #260]	; (8005f58 <TIM_Base_SetConfig+0x128>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d00b      	beq.n	8005e70 <TIM_Base_SetConfig+0x40>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	4a40      	ldr	r2, [pc, #256]	; (8005f5c <TIM_Base_SetConfig+0x12c>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d007      	beq.n	8005e70 <TIM_Base_SetConfig+0x40>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	4a3f      	ldr	r2, [pc, #252]	; (8005f60 <TIM_Base_SetConfig+0x130>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d003      	beq.n	8005e70 <TIM_Base_SetConfig+0x40>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	4a3e      	ldr	r2, [pc, #248]	; (8005f64 <TIM_Base_SetConfig+0x134>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d108      	bne.n	8005e82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	68fa      	ldr	r2, [r7, #12]
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	4a33      	ldr	r2, [pc, #204]	; (8005f54 <TIM_Base_SetConfig+0x124>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d027      	beq.n	8005eda <TIM_Base_SetConfig+0xaa>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e90:	d023      	beq.n	8005eda <TIM_Base_SetConfig+0xaa>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	4a30      	ldr	r2, [pc, #192]	; (8005f58 <TIM_Base_SetConfig+0x128>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d01f      	beq.n	8005eda <TIM_Base_SetConfig+0xaa>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	4a2f      	ldr	r2, [pc, #188]	; (8005f5c <TIM_Base_SetConfig+0x12c>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d01b      	beq.n	8005eda <TIM_Base_SetConfig+0xaa>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	4a2e      	ldr	r2, [pc, #184]	; (8005f60 <TIM_Base_SetConfig+0x130>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d017      	beq.n	8005eda <TIM_Base_SetConfig+0xaa>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	4a2d      	ldr	r2, [pc, #180]	; (8005f64 <TIM_Base_SetConfig+0x134>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d013      	beq.n	8005eda <TIM_Base_SetConfig+0xaa>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	4a2c      	ldr	r2, [pc, #176]	; (8005f68 <TIM_Base_SetConfig+0x138>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d00f      	beq.n	8005eda <TIM_Base_SetConfig+0xaa>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	4a2b      	ldr	r2, [pc, #172]	; (8005f6c <TIM_Base_SetConfig+0x13c>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d00b      	beq.n	8005eda <TIM_Base_SetConfig+0xaa>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	4a2a      	ldr	r2, [pc, #168]	; (8005f70 <TIM_Base_SetConfig+0x140>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d007      	beq.n	8005eda <TIM_Base_SetConfig+0xaa>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	4a29      	ldr	r2, [pc, #164]	; (8005f74 <TIM_Base_SetConfig+0x144>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d003      	beq.n	8005eda <TIM_Base_SetConfig+0xaa>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	4a28      	ldr	r2, [pc, #160]	; (8005f78 <TIM_Base_SetConfig+0x148>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d108      	bne.n	8005eec <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ee0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	68db      	ldr	r3, [r3, #12]
 8005ee6:	68fa      	ldr	r2, [r7, #12]
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	695b      	ldr	r3, [r3, #20]
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	68fa      	ldr	r2, [r7, #12]
 8005efe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	689a      	ldr	r2, [r3, #8]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	681a      	ldr	r2, [r3, #0]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	4a10      	ldr	r2, [pc, #64]	; (8005f54 <TIM_Base_SetConfig+0x124>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d00f      	beq.n	8005f38 <TIM_Base_SetConfig+0x108>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	4a12      	ldr	r2, [pc, #72]	; (8005f64 <TIM_Base_SetConfig+0x134>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d00b      	beq.n	8005f38 <TIM_Base_SetConfig+0x108>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	4a11      	ldr	r2, [pc, #68]	; (8005f68 <TIM_Base_SetConfig+0x138>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d007      	beq.n	8005f38 <TIM_Base_SetConfig+0x108>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	4a10      	ldr	r2, [pc, #64]	; (8005f6c <TIM_Base_SetConfig+0x13c>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d003      	beq.n	8005f38 <TIM_Base_SetConfig+0x108>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	4a0f      	ldr	r2, [pc, #60]	; (8005f70 <TIM_Base_SetConfig+0x140>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d103      	bne.n	8005f40 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	691a      	ldr	r2, [r3, #16]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2201      	movs	r2, #1
 8005f44:	615a      	str	r2, [r3, #20]
}
 8005f46:	bf00      	nop
 8005f48:	3714      	adds	r7, #20
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr
 8005f52:	bf00      	nop
 8005f54:	40010000 	.word	0x40010000
 8005f58:	40000400 	.word	0x40000400
 8005f5c:	40000800 	.word	0x40000800
 8005f60:	40000c00 	.word	0x40000c00
 8005f64:	40010400 	.word	0x40010400
 8005f68:	40014000 	.word	0x40014000
 8005f6c:	40014400 	.word	0x40014400
 8005f70:	40014800 	.word	0x40014800
 8005f74:	4000e000 	.word	0x4000e000
 8005f78:	4000e400 	.word	0x4000e400

08005f7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b087      	sub	sp, #28
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6a1b      	ldr	r3, [r3, #32]
 8005f8a:	f023 0201 	bic.w	r2, r3, #1
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6a1b      	ldr	r3, [r3, #32]
 8005f96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	699b      	ldr	r3, [r3, #24]
 8005fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005fa4:	68fa      	ldr	r2, [r7, #12]
 8005fa6:	4b37      	ldr	r3, [pc, #220]	; (8006084 <TIM_OC1_SetConfig+0x108>)
 8005fa8:	4013      	ands	r3, r2
 8005faa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f023 0303 	bic.w	r3, r3, #3
 8005fb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	68fa      	ldr	r2, [r7, #12]
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	f023 0302 	bic.w	r3, r3, #2
 8005fc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	697a      	ldr	r2, [r7, #20]
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	4a2d      	ldr	r2, [pc, #180]	; (8006088 <TIM_OC1_SetConfig+0x10c>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d00f      	beq.n	8005ff8 <TIM_OC1_SetConfig+0x7c>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	4a2c      	ldr	r2, [pc, #176]	; (800608c <TIM_OC1_SetConfig+0x110>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d00b      	beq.n	8005ff8 <TIM_OC1_SetConfig+0x7c>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	4a2b      	ldr	r2, [pc, #172]	; (8006090 <TIM_OC1_SetConfig+0x114>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d007      	beq.n	8005ff8 <TIM_OC1_SetConfig+0x7c>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	4a2a      	ldr	r2, [pc, #168]	; (8006094 <TIM_OC1_SetConfig+0x118>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d003      	beq.n	8005ff8 <TIM_OC1_SetConfig+0x7c>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	4a29      	ldr	r2, [pc, #164]	; (8006098 <TIM_OC1_SetConfig+0x11c>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d10c      	bne.n	8006012 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	f023 0308 	bic.w	r3, r3, #8
 8005ffe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	697a      	ldr	r2, [r7, #20]
 8006006:	4313      	orrs	r3, r2
 8006008:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	f023 0304 	bic.w	r3, r3, #4
 8006010:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	4a1c      	ldr	r2, [pc, #112]	; (8006088 <TIM_OC1_SetConfig+0x10c>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d00f      	beq.n	800603a <TIM_OC1_SetConfig+0xbe>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4a1b      	ldr	r2, [pc, #108]	; (800608c <TIM_OC1_SetConfig+0x110>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d00b      	beq.n	800603a <TIM_OC1_SetConfig+0xbe>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4a1a      	ldr	r2, [pc, #104]	; (8006090 <TIM_OC1_SetConfig+0x114>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d007      	beq.n	800603a <TIM_OC1_SetConfig+0xbe>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4a19      	ldr	r2, [pc, #100]	; (8006094 <TIM_OC1_SetConfig+0x118>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d003      	beq.n	800603a <TIM_OC1_SetConfig+0xbe>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	4a18      	ldr	r2, [pc, #96]	; (8006098 <TIM_OC1_SetConfig+0x11c>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d111      	bne.n	800605e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006040:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006048:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	695b      	ldr	r3, [r3, #20]
 800604e:	693a      	ldr	r2, [r7, #16]
 8006050:	4313      	orrs	r3, r2
 8006052:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	699b      	ldr	r3, [r3, #24]
 8006058:	693a      	ldr	r2, [r7, #16]
 800605a:	4313      	orrs	r3, r2
 800605c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	693a      	ldr	r2, [r7, #16]
 8006062:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	68fa      	ldr	r2, [r7, #12]
 8006068:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	685a      	ldr	r2, [r3, #4]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	697a      	ldr	r2, [r7, #20]
 8006076:	621a      	str	r2, [r3, #32]
}
 8006078:	bf00      	nop
 800607a:	371c      	adds	r7, #28
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr
 8006084:	fffeff8f 	.word	0xfffeff8f
 8006088:	40010000 	.word	0x40010000
 800608c:	40010400 	.word	0x40010400
 8006090:	40014000 	.word	0x40014000
 8006094:	40014400 	.word	0x40014400
 8006098:	40014800 	.word	0x40014800

0800609c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800609c:	b480      	push	{r7}
 800609e:	b087      	sub	sp, #28
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6a1b      	ldr	r3, [r3, #32]
 80060aa:	f023 0210 	bic.w	r2, r3, #16
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6a1b      	ldr	r3, [r3, #32]
 80060b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	699b      	ldr	r3, [r3, #24]
 80060c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80060c4:	68fa      	ldr	r2, [r7, #12]
 80060c6:	4b34      	ldr	r3, [pc, #208]	; (8006198 <TIM_OC2_SetConfig+0xfc>)
 80060c8:	4013      	ands	r3, r2
 80060ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	021b      	lsls	r3, r3, #8
 80060da:	68fa      	ldr	r2, [r7, #12]
 80060dc:	4313      	orrs	r3, r2
 80060de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	f023 0320 	bic.w	r3, r3, #32
 80060e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	011b      	lsls	r3, r3, #4
 80060ee:	697a      	ldr	r2, [r7, #20]
 80060f0:	4313      	orrs	r3, r2
 80060f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	4a29      	ldr	r2, [pc, #164]	; (800619c <TIM_OC2_SetConfig+0x100>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d003      	beq.n	8006104 <TIM_OC2_SetConfig+0x68>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	4a28      	ldr	r2, [pc, #160]	; (80061a0 <TIM_OC2_SetConfig+0x104>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d10d      	bne.n	8006120 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800610a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	68db      	ldr	r3, [r3, #12]
 8006110:	011b      	lsls	r3, r3, #4
 8006112:	697a      	ldr	r2, [r7, #20]
 8006114:	4313      	orrs	r3, r2
 8006116:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800611e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	4a1e      	ldr	r2, [pc, #120]	; (800619c <TIM_OC2_SetConfig+0x100>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d00f      	beq.n	8006148 <TIM_OC2_SetConfig+0xac>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	4a1d      	ldr	r2, [pc, #116]	; (80061a0 <TIM_OC2_SetConfig+0x104>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d00b      	beq.n	8006148 <TIM_OC2_SetConfig+0xac>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	4a1c      	ldr	r2, [pc, #112]	; (80061a4 <TIM_OC2_SetConfig+0x108>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d007      	beq.n	8006148 <TIM_OC2_SetConfig+0xac>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	4a1b      	ldr	r2, [pc, #108]	; (80061a8 <TIM_OC2_SetConfig+0x10c>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d003      	beq.n	8006148 <TIM_OC2_SetConfig+0xac>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	4a1a      	ldr	r2, [pc, #104]	; (80061ac <TIM_OC2_SetConfig+0x110>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d113      	bne.n	8006170 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800614e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006156:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	695b      	ldr	r3, [r3, #20]
 800615c:	009b      	lsls	r3, r3, #2
 800615e:	693a      	ldr	r2, [r7, #16]
 8006160:	4313      	orrs	r3, r2
 8006162:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	699b      	ldr	r3, [r3, #24]
 8006168:	009b      	lsls	r3, r3, #2
 800616a:	693a      	ldr	r2, [r7, #16]
 800616c:	4313      	orrs	r3, r2
 800616e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	693a      	ldr	r2, [r7, #16]
 8006174:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	68fa      	ldr	r2, [r7, #12]
 800617a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	685a      	ldr	r2, [r3, #4]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	697a      	ldr	r2, [r7, #20]
 8006188:	621a      	str	r2, [r3, #32]
}
 800618a:	bf00      	nop
 800618c:	371c      	adds	r7, #28
 800618e:	46bd      	mov	sp, r7
 8006190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006194:	4770      	bx	lr
 8006196:	bf00      	nop
 8006198:	feff8fff 	.word	0xfeff8fff
 800619c:	40010000 	.word	0x40010000
 80061a0:	40010400 	.word	0x40010400
 80061a4:	40014000 	.word	0x40014000
 80061a8:	40014400 	.word	0x40014400
 80061ac:	40014800 	.word	0x40014800

080061b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b087      	sub	sp, #28
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6a1b      	ldr	r3, [r3, #32]
 80061be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6a1b      	ldr	r3, [r3, #32]
 80061ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	69db      	ldr	r3, [r3, #28]
 80061d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80061d8:	68fa      	ldr	r2, [r7, #12]
 80061da:	4b33      	ldr	r3, [pc, #204]	; (80062a8 <TIM_OC3_SetConfig+0xf8>)
 80061dc:	4013      	ands	r3, r2
 80061de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f023 0303 	bic.w	r3, r3, #3
 80061e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	68fa      	ldr	r2, [r7, #12]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80061f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	021b      	lsls	r3, r3, #8
 8006200:	697a      	ldr	r2, [r7, #20]
 8006202:	4313      	orrs	r3, r2
 8006204:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	4a28      	ldr	r2, [pc, #160]	; (80062ac <TIM_OC3_SetConfig+0xfc>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d003      	beq.n	8006216 <TIM_OC3_SetConfig+0x66>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	4a27      	ldr	r2, [pc, #156]	; (80062b0 <TIM_OC3_SetConfig+0x100>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d10d      	bne.n	8006232 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800621c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	68db      	ldr	r3, [r3, #12]
 8006222:	021b      	lsls	r3, r3, #8
 8006224:	697a      	ldr	r2, [r7, #20]
 8006226:	4313      	orrs	r3, r2
 8006228:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006230:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	4a1d      	ldr	r2, [pc, #116]	; (80062ac <TIM_OC3_SetConfig+0xfc>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d00f      	beq.n	800625a <TIM_OC3_SetConfig+0xaa>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	4a1c      	ldr	r2, [pc, #112]	; (80062b0 <TIM_OC3_SetConfig+0x100>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d00b      	beq.n	800625a <TIM_OC3_SetConfig+0xaa>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	4a1b      	ldr	r2, [pc, #108]	; (80062b4 <TIM_OC3_SetConfig+0x104>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d007      	beq.n	800625a <TIM_OC3_SetConfig+0xaa>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	4a1a      	ldr	r2, [pc, #104]	; (80062b8 <TIM_OC3_SetConfig+0x108>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d003      	beq.n	800625a <TIM_OC3_SetConfig+0xaa>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	4a19      	ldr	r2, [pc, #100]	; (80062bc <TIM_OC3_SetConfig+0x10c>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d113      	bne.n	8006282 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006260:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006268:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	695b      	ldr	r3, [r3, #20]
 800626e:	011b      	lsls	r3, r3, #4
 8006270:	693a      	ldr	r2, [r7, #16]
 8006272:	4313      	orrs	r3, r2
 8006274:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	699b      	ldr	r3, [r3, #24]
 800627a:	011b      	lsls	r3, r3, #4
 800627c:	693a      	ldr	r2, [r7, #16]
 800627e:	4313      	orrs	r3, r2
 8006280:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	693a      	ldr	r2, [r7, #16]
 8006286:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	68fa      	ldr	r2, [r7, #12]
 800628c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	685a      	ldr	r2, [r3, #4]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	697a      	ldr	r2, [r7, #20]
 800629a:	621a      	str	r2, [r3, #32]
}
 800629c:	bf00      	nop
 800629e:	371c      	adds	r7, #28
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr
 80062a8:	fffeff8f 	.word	0xfffeff8f
 80062ac:	40010000 	.word	0x40010000
 80062b0:	40010400 	.word	0x40010400
 80062b4:	40014000 	.word	0x40014000
 80062b8:	40014400 	.word	0x40014400
 80062bc:	40014800 	.word	0x40014800

080062c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b087      	sub	sp, #28
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6a1b      	ldr	r3, [r3, #32]
 80062ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6a1b      	ldr	r3, [r3, #32]
 80062da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	69db      	ldr	r3, [r3, #28]
 80062e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80062e8:	68fa      	ldr	r2, [r7, #12]
 80062ea:	4b24      	ldr	r3, [pc, #144]	; (800637c <TIM_OC4_SetConfig+0xbc>)
 80062ec:	4013      	ands	r3, r2
 80062ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	021b      	lsls	r3, r3, #8
 80062fe:	68fa      	ldr	r2, [r7, #12]
 8006300:	4313      	orrs	r3, r2
 8006302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800630a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	031b      	lsls	r3, r3, #12
 8006312:	693a      	ldr	r2, [r7, #16]
 8006314:	4313      	orrs	r3, r2
 8006316:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	4a19      	ldr	r2, [pc, #100]	; (8006380 <TIM_OC4_SetConfig+0xc0>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d00f      	beq.n	8006340 <TIM_OC4_SetConfig+0x80>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	4a18      	ldr	r2, [pc, #96]	; (8006384 <TIM_OC4_SetConfig+0xc4>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d00b      	beq.n	8006340 <TIM_OC4_SetConfig+0x80>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	4a17      	ldr	r2, [pc, #92]	; (8006388 <TIM_OC4_SetConfig+0xc8>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d007      	beq.n	8006340 <TIM_OC4_SetConfig+0x80>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	4a16      	ldr	r2, [pc, #88]	; (800638c <TIM_OC4_SetConfig+0xcc>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d003      	beq.n	8006340 <TIM_OC4_SetConfig+0x80>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	4a15      	ldr	r2, [pc, #84]	; (8006390 <TIM_OC4_SetConfig+0xd0>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d109      	bne.n	8006354 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006346:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	695b      	ldr	r3, [r3, #20]
 800634c:	019b      	lsls	r3, r3, #6
 800634e:	697a      	ldr	r2, [r7, #20]
 8006350:	4313      	orrs	r3, r2
 8006352:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	697a      	ldr	r2, [r7, #20]
 8006358:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	68fa      	ldr	r2, [r7, #12]
 800635e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	685a      	ldr	r2, [r3, #4]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	693a      	ldr	r2, [r7, #16]
 800636c:	621a      	str	r2, [r3, #32]
}
 800636e:	bf00      	nop
 8006370:	371c      	adds	r7, #28
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr
 800637a:	bf00      	nop
 800637c:	feff8fff 	.word	0xfeff8fff
 8006380:	40010000 	.word	0x40010000
 8006384:	40010400 	.word	0x40010400
 8006388:	40014000 	.word	0x40014000
 800638c:	40014400 	.word	0x40014400
 8006390:	40014800 	.word	0x40014800

08006394 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006394:	b480      	push	{r7}
 8006396:	b087      	sub	sp, #28
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6a1b      	ldr	r3, [r3, #32]
 80063a2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6a1b      	ldr	r3, [r3, #32]
 80063ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80063bc:	68fa      	ldr	r2, [r7, #12]
 80063be:	4b21      	ldr	r3, [pc, #132]	; (8006444 <TIM_OC5_SetConfig+0xb0>)
 80063c0:	4013      	ands	r3, r2
 80063c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	68fa      	ldr	r2, [r7, #12]
 80063ca:	4313      	orrs	r3, r2
 80063cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80063d4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	689b      	ldr	r3, [r3, #8]
 80063da:	041b      	lsls	r3, r3, #16
 80063dc:	693a      	ldr	r2, [r7, #16]
 80063de:	4313      	orrs	r3, r2
 80063e0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	4a18      	ldr	r2, [pc, #96]	; (8006448 <TIM_OC5_SetConfig+0xb4>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d00f      	beq.n	800640a <TIM_OC5_SetConfig+0x76>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	4a17      	ldr	r2, [pc, #92]	; (800644c <TIM_OC5_SetConfig+0xb8>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d00b      	beq.n	800640a <TIM_OC5_SetConfig+0x76>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	4a16      	ldr	r2, [pc, #88]	; (8006450 <TIM_OC5_SetConfig+0xbc>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d007      	beq.n	800640a <TIM_OC5_SetConfig+0x76>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	4a15      	ldr	r2, [pc, #84]	; (8006454 <TIM_OC5_SetConfig+0xc0>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d003      	beq.n	800640a <TIM_OC5_SetConfig+0x76>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	4a14      	ldr	r2, [pc, #80]	; (8006458 <TIM_OC5_SetConfig+0xc4>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d109      	bne.n	800641e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006410:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	695b      	ldr	r3, [r3, #20]
 8006416:	021b      	lsls	r3, r3, #8
 8006418:	697a      	ldr	r2, [r7, #20]
 800641a:	4313      	orrs	r3, r2
 800641c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	697a      	ldr	r2, [r7, #20]
 8006422:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	68fa      	ldr	r2, [r7, #12]
 8006428:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	685a      	ldr	r2, [r3, #4]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	693a      	ldr	r2, [r7, #16]
 8006436:	621a      	str	r2, [r3, #32]
}
 8006438:	bf00      	nop
 800643a:	371c      	adds	r7, #28
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr
 8006444:	fffeff8f 	.word	0xfffeff8f
 8006448:	40010000 	.word	0x40010000
 800644c:	40010400 	.word	0x40010400
 8006450:	40014000 	.word	0x40014000
 8006454:	40014400 	.word	0x40014400
 8006458:	40014800 	.word	0x40014800

0800645c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800645c:	b480      	push	{r7}
 800645e:	b087      	sub	sp, #28
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6a1b      	ldr	r3, [r3, #32]
 800646a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6a1b      	ldr	r3, [r3, #32]
 8006476:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006484:	68fa      	ldr	r2, [r7, #12]
 8006486:	4b22      	ldr	r3, [pc, #136]	; (8006510 <TIM_OC6_SetConfig+0xb4>)
 8006488:	4013      	ands	r3, r2
 800648a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	021b      	lsls	r3, r3, #8
 8006492:	68fa      	ldr	r2, [r7, #12]
 8006494:	4313      	orrs	r3, r2
 8006496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800649e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	051b      	lsls	r3, r3, #20
 80064a6:	693a      	ldr	r2, [r7, #16]
 80064a8:	4313      	orrs	r3, r2
 80064aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	4a19      	ldr	r2, [pc, #100]	; (8006514 <TIM_OC6_SetConfig+0xb8>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d00f      	beq.n	80064d4 <TIM_OC6_SetConfig+0x78>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	4a18      	ldr	r2, [pc, #96]	; (8006518 <TIM_OC6_SetConfig+0xbc>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d00b      	beq.n	80064d4 <TIM_OC6_SetConfig+0x78>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	4a17      	ldr	r2, [pc, #92]	; (800651c <TIM_OC6_SetConfig+0xc0>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d007      	beq.n	80064d4 <TIM_OC6_SetConfig+0x78>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	4a16      	ldr	r2, [pc, #88]	; (8006520 <TIM_OC6_SetConfig+0xc4>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d003      	beq.n	80064d4 <TIM_OC6_SetConfig+0x78>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	4a15      	ldr	r2, [pc, #84]	; (8006524 <TIM_OC6_SetConfig+0xc8>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d109      	bne.n	80064e8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80064da:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	695b      	ldr	r3, [r3, #20]
 80064e0:	029b      	lsls	r3, r3, #10
 80064e2:	697a      	ldr	r2, [r7, #20]
 80064e4:	4313      	orrs	r3, r2
 80064e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	697a      	ldr	r2, [r7, #20]
 80064ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	68fa      	ldr	r2, [r7, #12]
 80064f2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	685a      	ldr	r2, [r3, #4]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	693a      	ldr	r2, [r7, #16]
 8006500:	621a      	str	r2, [r3, #32]
}
 8006502:	bf00      	nop
 8006504:	371c      	adds	r7, #28
 8006506:	46bd      	mov	sp, r7
 8006508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650c:	4770      	bx	lr
 800650e:	bf00      	nop
 8006510:	feff8fff 	.word	0xfeff8fff
 8006514:	40010000 	.word	0x40010000
 8006518:	40010400 	.word	0x40010400
 800651c:	40014000 	.word	0x40014000
 8006520:	40014400 	.word	0x40014400
 8006524:	40014800 	.word	0x40014800

08006528 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006528:	b480      	push	{r7}
 800652a:	b087      	sub	sp, #28
 800652c:	af00      	add	r7, sp, #0
 800652e:	60f8      	str	r0, [r7, #12]
 8006530:	60b9      	str	r1, [r7, #8]
 8006532:	607a      	str	r2, [r7, #4]
 8006534:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	6a1b      	ldr	r3, [r3, #32]
 800653a:	f023 0201 	bic.w	r2, r3, #1
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	699b      	ldr	r3, [r3, #24]
 8006546:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	6a1b      	ldr	r3, [r3, #32]
 800654c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	4a2c      	ldr	r2, [pc, #176]	; (8006604 <TIM_TI1_SetConfig+0xdc>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d023      	beq.n	800659e <TIM_TI1_SetConfig+0x76>
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800655c:	d01f      	beq.n	800659e <TIM_TI1_SetConfig+0x76>
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	4a29      	ldr	r2, [pc, #164]	; (8006608 <TIM_TI1_SetConfig+0xe0>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d01b      	beq.n	800659e <TIM_TI1_SetConfig+0x76>
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	4a28      	ldr	r2, [pc, #160]	; (800660c <TIM_TI1_SetConfig+0xe4>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d017      	beq.n	800659e <TIM_TI1_SetConfig+0x76>
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	4a27      	ldr	r2, [pc, #156]	; (8006610 <TIM_TI1_SetConfig+0xe8>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d013      	beq.n	800659e <TIM_TI1_SetConfig+0x76>
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	4a26      	ldr	r2, [pc, #152]	; (8006614 <TIM_TI1_SetConfig+0xec>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d00f      	beq.n	800659e <TIM_TI1_SetConfig+0x76>
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	4a25      	ldr	r2, [pc, #148]	; (8006618 <TIM_TI1_SetConfig+0xf0>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d00b      	beq.n	800659e <TIM_TI1_SetConfig+0x76>
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	4a24      	ldr	r2, [pc, #144]	; (800661c <TIM_TI1_SetConfig+0xf4>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d007      	beq.n	800659e <TIM_TI1_SetConfig+0x76>
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	4a23      	ldr	r2, [pc, #140]	; (8006620 <TIM_TI1_SetConfig+0xf8>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d003      	beq.n	800659e <TIM_TI1_SetConfig+0x76>
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	4a22      	ldr	r2, [pc, #136]	; (8006624 <TIM_TI1_SetConfig+0xfc>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d101      	bne.n	80065a2 <TIM_TI1_SetConfig+0x7a>
 800659e:	2301      	movs	r3, #1
 80065a0:	e000      	b.n	80065a4 <TIM_TI1_SetConfig+0x7c>
 80065a2:	2300      	movs	r3, #0
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d008      	beq.n	80065ba <TIM_TI1_SetConfig+0x92>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	f023 0303 	bic.w	r3, r3, #3
 80065ae:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80065b0:	697a      	ldr	r2, [r7, #20]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	4313      	orrs	r3, r2
 80065b6:	617b      	str	r3, [r7, #20]
 80065b8:	e003      	b.n	80065c2 <TIM_TI1_SetConfig+0x9a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	f043 0301 	orr.w	r3, r3, #1
 80065c0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	011b      	lsls	r3, r3, #4
 80065ce:	b2db      	uxtb	r3, r3
 80065d0:	697a      	ldr	r2, [r7, #20]
 80065d2:	4313      	orrs	r3, r2
 80065d4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	f023 030a 	bic.w	r3, r3, #10
 80065dc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	f003 030a 	and.w	r3, r3, #10
 80065e4:	693a      	ldr	r2, [r7, #16]
 80065e6:	4313      	orrs	r3, r2
 80065e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	697a      	ldr	r2, [r7, #20]
 80065ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	693a      	ldr	r2, [r7, #16]
 80065f4:	621a      	str	r2, [r3, #32]
}
 80065f6:	bf00      	nop
 80065f8:	371c      	adds	r7, #28
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr
 8006602:	bf00      	nop
 8006604:	40010000 	.word	0x40010000
 8006608:	40000400 	.word	0x40000400
 800660c:	40000800 	.word	0x40000800
 8006610:	40000c00 	.word	0x40000c00
 8006614:	40010400 	.word	0x40010400
 8006618:	40001800 	.word	0x40001800
 800661c:	40014000 	.word	0x40014000
 8006620:	4000e000 	.word	0x4000e000
 8006624:	4000e400 	.word	0x4000e400

08006628 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006628:	b480      	push	{r7}
 800662a:	b087      	sub	sp, #28
 800662c:	af00      	add	r7, sp, #0
 800662e:	60f8      	str	r0, [r7, #12]
 8006630:	60b9      	str	r1, [r7, #8]
 8006632:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	6a1b      	ldr	r3, [r3, #32]
 8006638:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	6a1b      	ldr	r3, [r3, #32]
 800663e:	f023 0201 	bic.w	r2, r3, #1
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	699b      	ldr	r3, [r3, #24]
 800664a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006652:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	011b      	lsls	r3, r3, #4
 8006658:	693a      	ldr	r2, [r7, #16]
 800665a:	4313      	orrs	r3, r2
 800665c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	f023 030a 	bic.w	r3, r3, #10
 8006664:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006666:	697a      	ldr	r2, [r7, #20]
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	4313      	orrs	r3, r2
 800666c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	693a      	ldr	r2, [r7, #16]
 8006672:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	697a      	ldr	r2, [r7, #20]
 8006678:	621a      	str	r2, [r3, #32]
}
 800667a:	bf00      	nop
 800667c:	371c      	adds	r7, #28
 800667e:	46bd      	mov	sp, r7
 8006680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006684:	4770      	bx	lr

08006686 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006686:	b480      	push	{r7}
 8006688:	b087      	sub	sp, #28
 800668a:	af00      	add	r7, sp, #0
 800668c:	60f8      	str	r0, [r7, #12]
 800668e:	60b9      	str	r1, [r7, #8]
 8006690:	607a      	str	r2, [r7, #4]
 8006692:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	6a1b      	ldr	r3, [r3, #32]
 8006698:	f023 0210 	bic.w	r2, r3, #16
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	699b      	ldr	r3, [r3, #24]
 80066a4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	6a1b      	ldr	r3, [r3, #32]
 80066aa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066b2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	021b      	lsls	r3, r3, #8
 80066b8:	697a      	ldr	r2, [r7, #20]
 80066ba:	4313      	orrs	r3, r2
 80066bc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80066c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	031b      	lsls	r3, r3, #12
 80066ca:	b29b      	uxth	r3, r3
 80066cc:	697a      	ldr	r2, [r7, #20]
 80066ce:	4313      	orrs	r3, r2
 80066d0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80066d8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	011b      	lsls	r3, r3, #4
 80066de:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80066e2:	693a      	ldr	r2, [r7, #16]
 80066e4:	4313      	orrs	r3, r2
 80066e6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	697a      	ldr	r2, [r7, #20]
 80066ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	693a      	ldr	r2, [r7, #16]
 80066f2:	621a      	str	r2, [r3, #32]
}
 80066f4:	bf00      	nop
 80066f6:	371c      	adds	r7, #28
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr

08006700 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006700:	b480      	push	{r7}
 8006702:	b087      	sub	sp, #28
 8006704:	af00      	add	r7, sp, #0
 8006706:	60f8      	str	r0, [r7, #12]
 8006708:	60b9      	str	r1, [r7, #8]
 800670a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	6a1b      	ldr	r3, [r3, #32]
 8006710:	f023 0210 	bic.w	r2, r3, #16
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	699b      	ldr	r3, [r3, #24]
 800671c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	6a1b      	ldr	r3, [r3, #32]
 8006722:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800672a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	031b      	lsls	r3, r3, #12
 8006730:	697a      	ldr	r2, [r7, #20]
 8006732:	4313      	orrs	r3, r2
 8006734:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800673c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	011b      	lsls	r3, r3, #4
 8006742:	693a      	ldr	r2, [r7, #16]
 8006744:	4313      	orrs	r3, r2
 8006746:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	697a      	ldr	r2, [r7, #20]
 800674c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	693a      	ldr	r2, [r7, #16]
 8006752:	621a      	str	r2, [r3, #32]
}
 8006754:	bf00      	nop
 8006756:	371c      	adds	r7, #28
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr

08006760 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006760:	b480      	push	{r7}
 8006762:	b087      	sub	sp, #28
 8006764:	af00      	add	r7, sp, #0
 8006766:	60f8      	str	r0, [r7, #12]
 8006768:	60b9      	str	r1, [r7, #8]
 800676a:	607a      	str	r2, [r7, #4]
 800676c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	6a1b      	ldr	r3, [r3, #32]
 8006772:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	69db      	ldr	r3, [r3, #28]
 800677e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	6a1b      	ldr	r3, [r3, #32]
 8006784:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	f023 0303 	bic.w	r3, r3, #3
 800678c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800678e:	697a      	ldr	r2, [r7, #20]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	4313      	orrs	r3, r2
 8006794:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800679c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	011b      	lsls	r3, r3, #4
 80067a2:	b2db      	uxtb	r3, r3
 80067a4:	697a      	ldr	r2, [r7, #20]
 80067a6:	4313      	orrs	r3, r2
 80067a8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80067b0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	021b      	lsls	r3, r3, #8
 80067b6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80067ba:	693a      	ldr	r2, [r7, #16]
 80067bc:	4313      	orrs	r3, r2
 80067be:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	697a      	ldr	r2, [r7, #20]
 80067c4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	693a      	ldr	r2, [r7, #16]
 80067ca:	621a      	str	r2, [r3, #32]
}
 80067cc:	bf00      	nop
 80067ce:	371c      	adds	r7, #28
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr

080067d8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80067d8:	b480      	push	{r7}
 80067da:	b087      	sub	sp, #28
 80067dc:	af00      	add	r7, sp, #0
 80067de:	60f8      	str	r0, [r7, #12]
 80067e0:	60b9      	str	r1, [r7, #8]
 80067e2:	607a      	str	r2, [r7, #4]
 80067e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	6a1b      	ldr	r3, [r3, #32]
 80067ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	69db      	ldr	r3, [r3, #28]
 80067f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	6a1b      	ldr	r3, [r3, #32]
 80067fc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006804:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	021b      	lsls	r3, r3, #8
 800680a:	697a      	ldr	r2, [r7, #20]
 800680c:	4313      	orrs	r3, r2
 800680e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006816:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	031b      	lsls	r3, r3, #12
 800681c:	b29b      	uxth	r3, r3
 800681e:	697a      	ldr	r2, [r7, #20]
 8006820:	4313      	orrs	r3, r2
 8006822:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800682a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	031b      	lsls	r3, r3, #12
 8006830:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006834:	693a      	ldr	r2, [r7, #16]
 8006836:	4313      	orrs	r3, r2
 8006838:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	697a      	ldr	r2, [r7, #20]
 800683e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	693a      	ldr	r2, [r7, #16]
 8006844:	621a      	str	r2, [r3, #32]
}
 8006846:	bf00      	nop
 8006848:	371c      	adds	r7, #28
 800684a:	46bd      	mov	sp, r7
 800684c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006850:	4770      	bx	lr
	...

08006854 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006854:	b480      	push	{r7}
 8006856:	b085      	sub	sp, #20
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006864:	68fa      	ldr	r2, [r7, #12]
 8006866:	4b09      	ldr	r3, [pc, #36]	; (800688c <TIM_ITRx_SetConfig+0x38>)
 8006868:	4013      	ands	r3, r2
 800686a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800686c:	683a      	ldr	r2, [r7, #0]
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	4313      	orrs	r3, r2
 8006872:	f043 0307 	orr.w	r3, r3, #7
 8006876:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	68fa      	ldr	r2, [r7, #12]
 800687c:	609a      	str	r2, [r3, #8]
}
 800687e:	bf00      	nop
 8006880:	3714      	adds	r7, #20
 8006882:	46bd      	mov	sp, r7
 8006884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006888:	4770      	bx	lr
 800688a:	bf00      	nop
 800688c:	ffcfff8f 	.word	0xffcfff8f

08006890 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006890:	b480      	push	{r7}
 8006892:	b087      	sub	sp, #28
 8006894:	af00      	add	r7, sp, #0
 8006896:	60f8      	str	r0, [r7, #12]
 8006898:	60b9      	str	r1, [r7, #8]
 800689a:	607a      	str	r2, [r7, #4]
 800689c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	689b      	ldr	r3, [r3, #8]
 80068a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80068aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	021a      	lsls	r2, r3, #8
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	431a      	orrs	r2, r3
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	4313      	orrs	r3, r2
 80068b8:	697a      	ldr	r2, [r7, #20]
 80068ba:	4313      	orrs	r3, r2
 80068bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	697a      	ldr	r2, [r7, #20]
 80068c2:	609a      	str	r2, [r3, #8]
}
 80068c4:	bf00      	nop
 80068c6:	371c      	adds	r7, #28
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr

080068d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b087      	sub	sp, #28
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	60f8      	str	r0, [r7, #12]
 80068d8:	60b9      	str	r1, [r7, #8]
 80068da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	f003 031f 	and.w	r3, r3, #31
 80068e2:	2201      	movs	r2, #1
 80068e4:	fa02 f303 	lsl.w	r3, r2, r3
 80068e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	6a1a      	ldr	r2, [r3, #32]
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	43db      	mvns	r3, r3
 80068f2:	401a      	ands	r2, r3
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	6a1a      	ldr	r2, [r3, #32]
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	f003 031f 	and.w	r3, r3, #31
 8006902:	6879      	ldr	r1, [r7, #4]
 8006904:	fa01 f303 	lsl.w	r3, r1, r3
 8006908:	431a      	orrs	r2, r3
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	621a      	str	r2, [r3, #32]
}
 800690e:	bf00      	nop
 8006910:	371c      	adds	r7, #28
 8006912:	46bd      	mov	sp, r7
 8006914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006918:	4770      	bx	lr
	...

0800691c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800691c:	b480      	push	{r7}
 800691e:	b085      	sub	sp, #20
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800692c:	2b01      	cmp	r3, #1
 800692e:	d101      	bne.n	8006934 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006930:	2302      	movs	r3, #2
 8006932:	e077      	b.n	8006a24 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2201      	movs	r2, #1
 8006938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2202      	movs	r2, #2
 8006940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	689b      	ldr	r3, [r3, #8]
 8006952:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a35      	ldr	r2, [pc, #212]	; (8006a30 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d004      	beq.n	8006968 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a34      	ldr	r2, [pc, #208]	; (8006a34 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d108      	bne.n	800697a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800696e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	68fa      	ldr	r2, [r7, #12]
 8006976:	4313      	orrs	r3, r2
 8006978:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006980:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	68fa      	ldr	r2, [r7, #12]
 8006988:	4313      	orrs	r3, r2
 800698a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	68fa      	ldr	r2, [r7, #12]
 8006992:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a25      	ldr	r2, [pc, #148]	; (8006a30 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d02c      	beq.n	80069f8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069a6:	d027      	beq.n	80069f8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a22      	ldr	r2, [pc, #136]	; (8006a38 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d022      	beq.n	80069f8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a21      	ldr	r2, [pc, #132]	; (8006a3c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d01d      	beq.n	80069f8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a1f      	ldr	r2, [pc, #124]	; (8006a40 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d018      	beq.n	80069f8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a1a      	ldr	r2, [pc, #104]	; (8006a34 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d013      	beq.n	80069f8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a1b      	ldr	r2, [pc, #108]	; (8006a44 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d00e      	beq.n	80069f8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a1a      	ldr	r2, [pc, #104]	; (8006a48 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d009      	beq.n	80069f8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a18      	ldr	r2, [pc, #96]	; (8006a4c <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d004      	beq.n	80069f8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a17      	ldr	r2, [pc, #92]	; (8006a50 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d10c      	bne.n	8006a12 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069fe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	689b      	ldr	r3, [r3, #8]
 8006a04:	68ba      	ldr	r2, [r7, #8]
 8006a06:	4313      	orrs	r3, r2
 8006a08:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	68ba      	ldr	r2, [r7, #8]
 8006a10:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2201      	movs	r2, #1
 8006a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a22:	2300      	movs	r3, #0
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3714      	adds	r7, #20
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr
 8006a30:	40010000 	.word	0x40010000
 8006a34:	40010400 	.word	0x40010400
 8006a38:	40000400 	.word	0x40000400
 8006a3c:	40000800 	.word	0x40000800
 8006a40:	40000c00 	.word	0x40000c00
 8006a44:	40001800 	.word	0x40001800
 8006a48:	40014000 	.word	0x40014000
 8006a4c:	4000e000 	.word	0x4000e000
 8006a50:	4000e400 	.word	0x4000e400

08006a54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b083      	sub	sp, #12
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006a5c:	bf00      	nop
 8006a5e:	370c      	adds	r7, #12
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr

08006a68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b083      	sub	sp, #12
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a70:	bf00      	nop
 8006a72:	370c      	adds	r7, #12
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr

08006a7c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b083      	sub	sp, #12
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006a84:	bf00      	nop
 8006a86:	370c      	adds	r7, #12
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8e:	4770      	bx	lr

08006a90 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b082      	sub	sp, #8
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d101      	bne.n	8006aa2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	e042      	b.n	8006b28 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d106      	bne.n	8006aba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f7fb f921 	bl	8001cfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2224      	movs	r2, #36	; 0x24
 8006abe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	681a      	ldr	r2, [r3, #0]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f022 0201 	bic.w	r2, r2, #1
 8006ad0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f000 f82c 	bl	8006b30 <UART_SetConfig>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	2b01      	cmp	r3, #1
 8006adc:	d101      	bne.n	8006ae2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006ade:	2301      	movs	r3, #1
 8006ae0:	e022      	b.n	8006b28 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d002      	beq.n	8006af0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f000 fe8c 	bl	8007808 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	685a      	ldr	r2, [r3, #4]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006afe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	689a      	ldr	r2, [r3, #8]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006b0e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	681a      	ldr	r2, [r3, #0]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f042 0201 	orr.w	r2, r2, #1
 8006b1e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f000 ff13 	bl	800794c <UART_CheckIdleState>
 8006b26:	4603      	mov	r3, r0
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3708      	adds	r7, #8
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}

08006b30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b34:	b092      	sub	sp, #72	; 0x48
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	689a      	ldr	r2, [r3, #8]
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	691b      	ldr	r3, [r3, #16]
 8006b48:	431a      	orrs	r2, r3
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	695b      	ldr	r3, [r3, #20]
 8006b4e:	431a      	orrs	r2, r3
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	69db      	ldr	r3, [r3, #28]
 8006b54:	4313      	orrs	r3, r2
 8006b56:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	681a      	ldr	r2, [r3, #0]
 8006b5e:	4bbe      	ldr	r3, [pc, #760]	; (8006e58 <UART_SetConfig+0x328>)
 8006b60:	4013      	ands	r3, r2
 8006b62:	697a      	ldr	r2, [r7, #20]
 8006b64:	6812      	ldr	r2, [r2, #0]
 8006b66:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006b68:	430b      	orrs	r3, r1
 8006b6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	68da      	ldr	r2, [r3, #12]
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	430a      	orrs	r2, r1
 8006b80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	699b      	ldr	r3, [r3, #24]
 8006b86:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4ab3      	ldr	r2, [pc, #716]	; (8006e5c <UART_SetConfig+0x32c>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d004      	beq.n	8006b9c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	6a1b      	ldr	r3, [r3, #32]
 8006b96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	689a      	ldr	r2, [r3, #8]
 8006ba2:	4baf      	ldr	r3, [pc, #700]	; (8006e60 <UART_SetConfig+0x330>)
 8006ba4:	4013      	ands	r3, r2
 8006ba6:	697a      	ldr	r2, [r7, #20]
 8006ba8:	6812      	ldr	r2, [r2, #0]
 8006baa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006bac:	430b      	orrs	r3, r1
 8006bae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bb6:	f023 010f 	bic.w	r1, r3, #15
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	430a      	orrs	r2, r1
 8006bc4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4aa6      	ldr	r2, [pc, #664]	; (8006e64 <UART_SetConfig+0x334>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d177      	bne.n	8006cc0 <UART_SetConfig+0x190>
 8006bd0:	4ba5      	ldr	r3, [pc, #660]	; (8006e68 <UART_SetConfig+0x338>)
 8006bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bd4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006bd8:	2b28      	cmp	r3, #40	; 0x28
 8006bda:	d86d      	bhi.n	8006cb8 <UART_SetConfig+0x188>
 8006bdc:	a201      	add	r2, pc, #4	; (adr r2, 8006be4 <UART_SetConfig+0xb4>)
 8006bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006be2:	bf00      	nop
 8006be4:	08006c89 	.word	0x08006c89
 8006be8:	08006cb9 	.word	0x08006cb9
 8006bec:	08006cb9 	.word	0x08006cb9
 8006bf0:	08006cb9 	.word	0x08006cb9
 8006bf4:	08006cb9 	.word	0x08006cb9
 8006bf8:	08006cb9 	.word	0x08006cb9
 8006bfc:	08006cb9 	.word	0x08006cb9
 8006c00:	08006cb9 	.word	0x08006cb9
 8006c04:	08006c91 	.word	0x08006c91
 8006c08:	08006cb9 	.word	0x08006cb9
 8006c0c:	08006cb9 	.word	0x08006cb9
 8006c10:	08006cb9 	.word	0x08006cb9
 8006c14:	08006cb9 	.word	0x08006cb9
 8006c18:	08006cb9 	.word	0x08006cb9
 8006c1c:	08006cb9 	.word	0x08006cb9
 8006c20:	08006cb9 	.word	0x08006cb9
 8006c24:	08006c99 	.word	0x08006c99
 8006c28:	08006cb9 	.word	0x08006cb9
 8006c2c:	08006cb9 	.word	0x08006cb9
 8006c30:	08006cb9 	.word	0x08006cb9
 8006c34:	08006cb9 	.word	0x08006cb9
 8006c38:	08006cb9 	.word	0x08006cb9
 8006c3c:	08006cb9 	.word	0x08006cb9
 8006c40:	08006cb9 	.word	0x08006cb9
 8006c44:	08006ca1 	.word	0x08006ca1
 8006c48:	08006cb9 	.word	0x08006cb9
 8006c4c:	08006cb9 	.word	0x08006cb9
 8006c50:	08006cb9 	.word	0x08006cb9
 8006c54:	08006cb9 	.word	0x08006cb9
 8006c58:	08006cb9 	.word	0x08006cb9
 8006c5c:	08006cb9 	.word	0x08006cb9
 8006c60:	08006cb9 	.word	0x08006cb9
 8006c64:	08006ca9 	.word	0x08006ca9
 8006c68:	08006cb9 	.word	0x08006cb9
 8006c6c:	08006cb9 	.word	0x08006cb9
 8006c70:	08006cb9 	.word	0x08006cb9
 8006c74:	08006cb9 	.word	0x08006cb9
 8006c78:	08006cb9 	.word	0x08006cb9
 8006c7c:	08006cb9 	.word	0x08006cb9
 8006c80:	08006cb9 	.word	0x08006cb9
 8006c84:	08006cb1 	.word	0x08006cb1
 8006c88:	2301      	movs	r3, #1
 8006c8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c8e:	e326      	b.n	80072de <UART_SetConfig+0x7ae>
 8006c90:	2304      	movs	r3, #4
 8006c92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c96:	e322      	b.n	80072de <UART_SetConfig+0x7ae>
 8006c98:	2308      	movs	r3, #8
 8006c9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c9e:	e31e      	b.n	80072de <UART_SetConfig+0x7ae>
 8006ca0:	2310      	movs	r3, #16
 8006ca2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ca6:	e31a      	b.n	80072de <UART_SetConfig+0x7ae>
 8006ca8:	2320      	movs	r3, #32
 8006caa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cae:	e316      	b.n	80072de <UART_SetConfig+0x7ae>
 8006cb0:	2340      	movs	r3, #64	; 0x40
 8006cb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cb6:	e312      	b.n	80072de <UART_SetConfig+0x7ae>
 8006cb8:	2380      	movs	r3, #128	; 0x80
 8006cba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cbe:	e30e      	b.n	80072de <UART_SetConfig+0x7ae>
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a69      	ldr	r2, [pc, #420]	; (8006e6c <UART_SetConfig+0x33c>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d130      	bne.n	8006d2c <UART_SetConfig+0x1fc>
 8006cca:	4b67      	ldr	r3, [pc, #412]	; (8006e68 <UART_SetConfig+0x338>)
 8006ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cce:	f003 0307 	and.w	r3, r3, #7
 8006cd2:	2b05      	cmp	r3, #5
 8006cd4:	d826      	bhi.n	8006d24 <UART_SetConfig+0x1f4>
 8006cd6:	a201      	add	r2, pc, #4	; (adr r2, 8006cdc <UART_SetConfig+0x1ac>)
 8006cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cdc:	08006cf5 	.word	0x08006cf5
 8006ce0:	08006cfd 	.word	0x08006cfd
 8006ce4:	08006d05 	.word	0x08006d05
 8006ce8:	08006d0d 	.word	0x08006d0d
 8006cec:	08006d15 	.word	0x08006d15
 8006cf0:	08006d1d 	.word	0x08006d1d
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cfa:	e2f0      	b.n	80072de <UART_SetConfig+0x7ae>
 8006cfc:	2304      	movs	r3, #4
 8006cfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d02:	e2ec      	b.n	80072de <UART_SetConfig+0x7ae>
 8006d04:	2308      	movs	r3, #8
 8006d06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d0a:	e2e8      	b.n	80072de <UART_SetConfig+0x7ae>
 8006d0c:	2310      	movs	r3, #16
 8006d0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d12:	e2e4      	b.n	80072de <UART_SetConfig+0x7ae>
 8006d14:	2320      	movs	r3, #32
 8006d16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d1a:	e2e0      	b.n	80072de <UART_SetConfig+0x7ae>
 8006d1c:	2340      	movs	r3, #64	; 0x40
 8006d1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d22:	e2dc      	b.n	80072de <UART_SetConfig+0x7ae>
 8006d24:	2380      	movs	r3, #128	; 0x80
 8006d26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d2a:	e2d8      	b.n	80072de <UART_SetConfig+0x7ae>
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a4f      	ldr	r2, [pc, #316]	; (8006e70 <UART_SetConfig+0x340>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d130      	bne.n	8006d98 <UART_SetConfig+0x268>
 8006d36:	4b4c      	ldr	r3, [pc, #304]	; (8006e68 <UART_SetConfig+0x338>)
 8006d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d3a:	f003 0307 	and.w	r3, r3, #7
 8006d3e:	2b05      	cmp	r3, #5
 8006d40:	d826      	bhi.n	8006d90 <UART_SetConfig+0x260>
 8006d42:	a201      	add	r2, pc, #4	; (adr r2, 8006d48 <UART_SetConfig+0x218>)
 8006d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d48:	08006d61 	.word	0x08006d61
 8006d4c:	08006d69 	.word	0x08006d69
 8006d50:	08006d71 	.word	0x08006d71
 8006d54:	08006d79 	.word	0x08006d79
 8006d58:	08006d81 	.word	0x08006d81
 8006d5c:	08006d89 	.word	0x08006d89
 8006d60:	2300      	movs	r3, #0
 8006d62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d66:	e2ba      	b.n	80072de <UART_SetConfig+0x7ae>
 8006d68:	2304      	movs	r3, #4
 8006d6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d6e:	e2b6      	b.n	80072de <UART_SetConfig+0x7ae>
 8006d70:	2308      	movs	r3, #8
 8006d72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d76:	e2b2      	b.n	80072de <UART_SetConfig+0x7ae>
 8006d78:	2310      	movs	r3, #16
 8006d7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d7e:	e2ae      	b.n	80072de <UART_SetConfig+0x7ae>
 8006d80:	2320      	movs	r3, #32
 8006d82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d86:	e2aa      	b.n	80072de <UART_SetConfig+0x7ae>
 8006d88:	2340      	movs	r3, #64	; 0x40
 8006d8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d8e:	e2a6      	b.n	80072de <UART_SetConfig+0x7ae>
 8006d90:	2380      	movs	r3, #128	; 0x80
 8006d92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d96:	e2a2      	b.n	80072de <UART_SetConfig+0x7ae>
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a35      	ldr	r2, [pc, #212]	; (8006e74 <UART_SetConfig+0x344>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d130      	bne.n	8006e04 <UART_SetConfig+0x2d4>
 8006da2:	4b31      	ldr	r3, [pc, #196]	; (8006e68 <UART_SetConfig+0x338>)
 8006da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006da6:	f003 0307 	and.w	r3, r3, #7
 8006daa:	2b05      	cmp	r3, #5
 8006dac:	d826      	bhi.n	8006dfc <UART_SetConfig+0x2cc>
 8006dae:	a201      	add	r2, pc, #4	; (adr r2, 8006db4 <UART_SetConfig+0x284>)
 8006db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006db4:	08006dcd 	.word	0x08006dcd
 8006db8:	08006dd5 	.word	0x08006dd5
 8006dbc:	08006ddd 	.word	0x08006ddd
 8006dc0:	08006de5 	.word	0x08006de5
 8006dc4:	08006ded 	.word	0x08006ded
 8006dc8:	08006df5 	.word	0x08006df5
 8006dcc:	2300      	movs	r3, #0
 8006dce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dd2:	e284      	b.n	80072de <UART_SetConfig+0x7ae>
 8006dd4:	2304      	movs	r3, #4
 8006dd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dda:	e280      	b.n	80072de <UART_SetConfig+0x7ae>
 8006ddc:	2308      	movs	r3, #8
 8006dde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006de2:	e27c      	b.n	80072de <UART_SetConfig+0x7ae>
 8006de4:	2310      	movs	r3, #16
 8006de6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dea:	e278      	b.n	80072de <UART_SetConfig+0x7ae>
 8006dec:	2320      	movs	r3, #32
 8006dee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006df2:	e274      	b.n	80072de <UART_SetConfig+0x7ae>
 8006df4:	2340      	movs	r3, #64	; 0x40
 8006df6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dfa:	e270      	b.n	80072de <UART_SetConfig+0x7ae>
 8006dfc:	2380      	movs	r3, #128	; 0x80
 8006dfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e02:	e26c      	b.n	80072de <UART_SetConfig+0x7ae>
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a1b      	ldr	r2, [pc, #108]	; (8006e78 <UART_SetConfig+0x348>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d142      	bne.n	8006e94 <UART_SetConfig+0x364>
 8006e0e:	4b16      	ldr	r3, [pc, #88]	; (8006e68 <UART_SetConfig+0x338>)
 8006e10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e12:	f003 0307 	and.w	r3, r3, #7
 8006e16:	2b05      	cmp	r3, #5
 8006e18:	d838      	bhi.n	8006e8c <UART_SetConfig+0x35c>
 8006e1a:	a201      	add	r2, pc, #4	; (adr r2, 8006e20 <UART_SetConfig+0x2f0>)
 8006e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e20:	08006e39 	.word	0x08006e39
 8006e24:	08006e41 	.word	0x08006e41
 8006e28:	08006e49 	.word	0x08006e49
 8006e2c:	08006e51 	.word	0x08006e51
 8006e30:	08006e7d 	.word	0x08006e7d
 8006e34:	08006e85 	.word	0x08006e85
 8006e38:	2300      	movs	r3, #0
 8006e3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e3e:	e24e      	b.n	80072de <UART_SetConfig+0x7ae>
 8006e40:	2304      	movs	r3, #4
 8006e42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e46:	e24a      	b.n	80072de <UART_SetConfig+0x7ae>
 8006e48:	2308      	movs	r3, #8
 8006e4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e4e:	e246      	b.n	80072de <UART_SetConfig+0x7ae>
 8006e50:	2310      	movs	r3, #16
 8006e52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e56:	e242      	b.n	80072de <UART_SetConfig+0x7ae>
 8006e58:	cfff69f3 	.word	0xcfff69f3
 8006e5c:	58000c00 	.word	0x58000c00
 8006e60:	11fff4ff 	.word	0x11fff4ff
 8006e64:	40011000 	.word	0x40011000
 8006e68:	58024400 	.word	0x58024400
 8006e6c:	40004400 	.word	0x40004400
 8006e70:	40004800 	.word	0x40004800
 8006e74:	40004c00 	.word	0x40004c00
 8006e78:	40005000 	.word	0x40005000
 8006e7c:	2320      	movs	r3, #32
 8006e7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e82:	e22c      	b.n	80072de <UART_SetConfig+0x7ae>
 8006e84:	2340      	movs	r3, #64	; 0x40
 8006e86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e8a:	e228      	b.n	80072de <UART_SetConfig+0x7ae>
 8006e8c:	2380      	movs	r3, #128	; 0x80
 8006e8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e92:	e224      	b.n	80072de <UART_SetConfig+0x7ae>
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4ab1      	ldr	r2, [pc, #708]	; (8007160 <UART_SetConfig+0x630>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d176      	bne.n	8006f8c <UART_SetConfig+0x45c>
 8006e9e:	4bb1      	ldr	r3, [pc, #708]	; (8007164 <UART_SetConfig+0x634>)
 8006ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ea2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ea6:	2b28      	cmp	r3, #40	; 0x28
 8006ea8:	d86c      	bhi.n	8006f84 <UART_SetConfig+0x454>
 8006eaa:	a201      	add	r2, pc, #4	; (adr r2, 8006eb0 <UART_SetConfig+0x380>)
 8006eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eb0:	08006f55 	.word	0x08006f55
 8006eb4:	08006f85 	.word	0x08006f85
 8006eb8:	08006f85 	.word	0x08006f85
 8006ebc:	08006f85 	.word	0x08006f85
 8006ec0:	08006f85 	.word	0x08006f85
 8006ec4:	08006f85 	.word	0x08006f85
 8006ec8:	08006f85 	.word	0x08006f85
 8006ecc:	08006f85 	.word	0x08006f85
 8006ed0:	08006f5d 	.word	0x08006f5d
 8006ed4:	08006f85 	.word	0x08006f85
 8006ed8:	08006f85 	.word	0x08006f85
 8006edc:	08006f85 	.word	0x08006f85
 8006ee0:	08006f85 	.word	0x08006f85
 8006ee4:	08006f85 	.word	0x08006f85
 8006ee8:	08006f85 	.word	0x08006f85
 8006eec:	08006f85 	.word	0x08006f85
 8006ef0:	08006f65 	.word	0x08006f65
 8006ef4:	08006f85 	.word	0x08006f85
 8006ef8:	08006f85 	.word	0x08006f85
 8006efc:	08006f85 	.word	0x08006f85
 8006f00:	08006f85 	.word	0x08006f85
 8006f04:	08006f85 	.word	0x08006f85
 8006f08:	08006f85 	.word	0x08006f85
 8006f0c:	08006f85 	.word	0x08006f85
 8006f10:	08006f6d 	.word	0x08006f6d
 8006f14:	08006f85 	.word	0x08006f85
 8006f18:	08006f85 	.word	0x08006f85
 8006f1c:	08006f85 	.word	0x08006f85
 8006f20:	08006f85 	.word	0x08006f85
 8006f24:	08006f85 	.word	0x08006f85
 8006f28:	08006f85 	.word	0x08006f85
 8006f2c:	08006f85 	.word	0x08006f85
 8006f30:	08006f75 	.word	0x08006f75
 8006f34:	08006f85 	.word	0x08006f85
 8006f38:	08006f85 	.word	0x08006f85
 8006f3c:	08006f85 	.word	0x08006f85
 8006f40:	08006f85 	.word	0x08006f85
 8006f44:	08006f85 	.word	0x08006f85
 8006f48:	08006f85 	.word	0x08006f85
 8006f4c:	08006f85 	.word	0x08006f85
 8006f50:	08006f7d 	.word	0x08006f7d
 8006f54:	2301      	movs	r3, #1
 8006f56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f5a:	e1c0      	b.n	80072de <UART_SetConfig+0x7ae>
 8006f5c:	2304      	movs	r3, #4
 8006f5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f62:	e1bc      	b.n	80072de <UART_SetConfig+0x7ae>
 8006f64:	2308      	movs	r3, #8
 8006f66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f6a:	e1b8      	b.n	80072de <UART_SetConfig+0x7ae>
 8006f6c:	2310      	movs	r3, #16
 8006f6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f72:	e1b4      	b.n	80072de <UART_SetConfig+0x7ae>
 8006f74:	2320      	movs	r3, #32
 8006f76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f7a:	e1b0      	b.n	80072de <UART_SetConfig+0x7ae>
 8006f7c:	2340      	movs	r3, #64	; 0x40
 8006f7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f82:	e1ac      	b.n	80072de <UART_SetConfig+0x7ae>
 8006f84:	2380      	movs	r3, #128	; 0x80
 8006f86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f8a:	e1a8      	b.n	80072de <UART_SetConfig+0x7ae>
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a75      	ldr	r2, [pc, #468]	; (8007168 <UART_SetConfig+0x638>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d130      	bne.n	8006ff8 <UART_SetConfig+0x4c8>
 8006f96:	4b73      	ldr	r3, [pc, #460]	; (8007164 <UART_SetConfig+0x634>)
 8006f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f9a:	f003 0307 	and.w	r3, r3, #7
 8006f9e:	2b05      	cmp	r3, #5
 8006fa0:	d826      	bhi.n	8006ff0 <UART_SetConfig+0x4c0>
 8006fa2:	a201      	add	r2, pc, #4	; (adr r2, 8006fa8 <UART_SetConfig+0x478>)
 8006fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fa8:	08006fc1 	.word	0x08006fc1
 8006fac:	08006fc9 	.word	0x08006fc9
 8006fb0:	08006fd1 	.word	0x08006fd1
 8006fb4:	08006fd9 	.word	0x08006fd9
 8006fb8:	08006fe1 	.word	0x08006fe1
 8006fbc:	08006fe9 	.word	0x08006fe9
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fc6:	e18a      	b.n	80072de <UART_SetConfig+0x7ae>
 8006fc8:	2304      	movs	r3, #4
 8006fca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fce:	e186      	b.n	80072de <UART_SetConfig+0x7ae>
 8006fd0:	2308      	movs	r3, #8
 8006fd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fd6:	e182      	b.n	80072de <UART_SetConfig+0x7ae>
 8006fd8:	2310      	movs	r3, #16
 8006fda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fde:	e17e      	b.n	80072de <UART_SetConfig+0x7ae>
 8006fe0:	2320      	movs	r3, #32
 8006fe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fe6:	e17a      	b.n	80072de <UART_SetConfig+0x7ae>
 8006fe8:	2340      	movs	r3, #64	; 0x40
 8006fea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fee:	e176      	b.n	80072de <UART_SetConfig+0x7ae>
 8006ff0:	2380      	movs	r3, #128	; 0x80
 8006ff2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ff6:	e172      	b.n	80072de <UART_SetConfig+0x7ae>
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a5b      	ldr	r2, [pc, #364]	; (800716c <UART_SetConfig+0x63c>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d130      	bne.n	8007064 <UART_SetConfig+0x534>
 8007002:	4b58      	ldr	r3, [pc, #352]	; (8007164 <UART_SetConfig+0x634>)
 8007004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007006:	f003 0307 	and.w	r3, r3, #7
 800700a:	2b05      	cmp	r3, #5
 800700c:	d826      	bhi.n	800705c <UART_SetConfig+0x52c>
 800700e:	a201      	add	r2, pc, #4	; (adr r2, 8007014 <UART_SetConfig+0x4e4>)
 8007010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007014:	0800702d 	.word	0x0800702d
 8007018:	08007035 	.word	0x08007035
 800701c:	0800703d 	.word	0x0800703d
 8007020:	08007045 	.word	0x08007045
 8007024:	0800704d 	.word	0x0800704d
 8007028:	08007055 	.word	0x08007055
 800702c:	2300      	movs	r3, #0
 800702e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007032:	e154      	b.n	80072de <UART_SetConfig+0x7ae>
 8007034:	2304      	movs	r3, #4
 8007036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800703a:	e150      	b.n	80072de <UART_SetConfig+0x7ae>
 800703c:	2308      	movs	r3, #8
 800703e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007042:	e14c      	b.n	80072de <UART_SetConfig+0x7ae>
 8007044:	2310      	movs	r3, #16
 8007046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800704a:	e148      	b.n	80072de <UART_SetConfig+0x7ae>
 800704c:	2320      	movs	r3, #32
 800704e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007052:	e144      	b.n	80072de <UART_SetConfig+0x7ae>
 8007054:	2340      	movs	r3, #64	; 0x40
 8007056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800705a:	e140      	b.n	80072de <UART_SetConfig+0x7ae>
 800705c:	2380      	movs	r3, #128	; 0x80
 800705e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007062:	e13c      	b.n	80072de <UART_SetConfig+0x7ae>
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a41      	ldr	r2, [pc, #260]	; (8007170 <UART_SetConfig+0x640>)
 800706a:	4293      	cmp	r3, r2
 800706c:	f040 8082 	bne.w	8007174 <UART_SetConfig+0x644>
 8007070:	4b3c      	ldr	r3, [pc, #240]	; (8007164 <UART_SetConfig+0x634>)
 8007072:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007074:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007078:	2b28      	cmp	r3, #40	; 0x28
 800707a:	d86d      	bhi.n	8007158 <UART_SetConfig+0x628>
 800707c:	a201      	add	r2, pc, #4	; (adr r2, 8007084 <UART_SetConfig+0x554>)
 800707e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007082:	bf00      	nop
 8007084:	08007129 	.word	0x08007129
 8007088:	08007159 	.word	0x08007159
 800708c:	08007159 	.word	0x08007159
 8007090:	08007159 	.word	0x08007159
 8007094:	08007159 	.word	0x08007159
 8007098:	08007159 	.word	0x08007159
 800709c:	08007159 	.word	0x08007159
 80070a0:	08007159 	.word	0x08007159
 80070a4:	08007131 	.word	0x08007131
 80070a8:	08007159 	.word	0x08007159
 80070ac:	08007159 	.word	0x08007159
 80070b0:	08007159 	.word	0x08007159
 80070b4:	08007159 	.word	0x08007159
 80070b8:	08007159 	.word	0x08007159
 80070bc:	08007159 	.word	0x08007159
 80070c0:	08007159 	.word	0x08007159
 80070c4:	08007139 	.word	0x08007139
 80070c8:	08007159 	.word	0x08007159
 80070cc:	08007159 	.word	0x08007159
 80070d0:	08007159 	.word	0x08007159
 80070d4:	08007159 	.word	0x08007159
 80070d8:	08007159 	.word	0x08007159
 80070dc:	08007159 	.word	0x08007159
 80070e0:	08007159 	.word	0x08007159
 80070e4:	08007141 	.word	0x08007141
 80070e8:	08007159 	.word	0x08007159
 80070ec:	08007159 	.word	0x08007159
 80070f0:	08007159 	.word	0x08007159
 80070f4:	08007159 	.word	0x08007159
 80070f8:	08007159 	.word	0x08007159
 80070fc:	08007159 	.word	0x08007159
 8007100:	08007159 	.word	0x08007159
 8007104:	08007149 	.word	0x08007149
 8007108:	08007159 	.word	0x08007159
 800710c:	08007159 	.word	0x08007159
 8007110:	08007159 	.word	0x08007159
 8007114:	08007159 	.word	0x08007159
 8007118:	08007159 	.word	0x08007159
 800711c:	08007159 	.word	0x08007159
 8007120:	08007159 	.word	0x08007159
 8007124:	08007151 	.word	0x08007151
 8007128:	2301      	movs	r3, #1
 800712a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800712e:	e0d6      	b.n	80072de <UART_SetConfig+0x7ae>
 8007130:	2304      	movs	r3, #4
 8007132:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007136:	e0d2      	b.n	80072de <UART_SetConfig+0x7ae>
 8007138:	2308      	movs	r3, #8
 800713a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800713e:	e0ce      	b.n	80072de <UART_SetConfig+0x7ae>
 8007140:	2310      	movs	r3, #16
 8007142:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007146:	e0ca      	b.n	80072de <UART_SetConfig+0x7ae>
 8007148:	2320      	movs	r3, #32
 800714a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800714e:	e0c6      	b.n	80072de <UART_SetConfig+0x7ae>
 8007150:	2340      	movs	r3, #64	; 0x40
 8007152:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007156:	e0c2      	b.n	80072de <UART_SetConfig+0x7ae>
 8007158:	2380      	movs	r3, #128	; 0x80
 800715a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800715e:	e0be      	b.n	80072de <UART_SetConfig+0x7ae>
 8007160:	40011400 	.word	0x40011400
 8007164:	58024400 	.word	0x58024400
 8007168:	40007800 	.word	0x40007800
 800716c:	40007c00 	.word	0x40007c00
 8007170:	40011800 	.word	0x40011800
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4aad      	ldr	r2, [pc, #692]	; (8007430 <UART_SetConfig+0x900>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d176      	bne.n	800726c <UART_SetConfig+0x73c>
 800717e:	4bad      	ldr	r3, [pc, #692]	; (8007434 <UART_SetConfig+0x904>)
 8007180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007182:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007186:	2b28      	cmp	r3, #40	; 0x28
 8007188:	d86c      	bhi.n	8007264 <UART_SetConfig+0x734>
 800718a:	a201      	add	r2, pc, #4	; (adr r2, 8007190 <UART_SetConfig+0x660>)
 800718c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007190:	08007235 	.word	0x08007235
 8007194:	08007265 	.word	0x08007265
 8007198:	08007265 	.word	0x08007265
 800719c:	08007265 	.word	0x08007265
 80071a0:	08007265 	.word	0x08007265
 80071a4:	08007265 	.word	0x08007265
 80071a8:	08007265 	.word	0x08007265
 80071ac:	08007265 	.word	0x08007265
 80071b0:	0800723d 	.word	0x0800723d
 80071b4:	08007265 	.word	0x08007265
 80071b8:	08007265 	.word	0x08007265
 80071bc:	08007265 	.word	0x08007265
 80071c0:	08007265 	.word	0x08007265
 80071c4:	08007265 	.word	0x08007265
 80071c8:	08007265 	.word	0x08007265
 80071cc:	08007265 	.word	0x08007265
 80071d0:	08007245 	.word	0x08007245
 80071d4:	08007265 	.word	0x08007265
 80071d8:	08007265 	.word	0x08007265
 80071dc:	08007265 	.word	0x08007265
 80071e0:	08007265 	.word	0x08007265
 80071e4:	08007265 	.word	0x08007265
 80071e8:	08007265 	.word	0x08007265
 80071ec:	08007265 	.word	0x08007265
 80071f0:	0800724d 	.word	0x0800724d
 80071f4:	08007265 	.word	0x08007265
 80071f8:	08007265 	.word	0x08007265
 80071fc:	08007265 	.word	0x08007265
 8007200:	08007265 	.word	0x08007265
 8007204:	08007265 	.word	0x08007265
 8007208:	08007265 	.word	0x08007265
 800720c:	08007265 	.word	0x08007265
 8007210:	08007255 	.word	0x08007255
 8007214:	08007265 	.word	0x08007265
 8007218:	08007265 	.word	0x08007265
 800721c:	08007265 	.word	0x08007265
 8007220:	08007265 	.word	0x08007265
 8007224:	08007265 	.word	0x08007265
 8007228:	08007265 	.word	0x08007265
 800722c:	08007265 	.word	0x08007265
 8007230:	0800725d 	.word	0x0800725d
 8007234:	2301      	movs	r3, #1
 8007236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800723a:	e050      	b.n	80072de <UART_SetConfig+0x7ae>
 800723c:	2304      	movs	r3, #4
 800723e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007242:	e04c      	b.n	80072de <UART_SetConfig+0x7ae>
 8007244:	2308      	movs	r3, #8
 8007246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800724a:	e048      	b.n	80072de <UART_SetConfig+0x7ae>
 800724c:	2310      	movs	r3, #16
 800724e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007252:	e044      	b.n	80072de <UART_SetConfig+0x7ae>
 8007254:	2320      	movs	r3, #32
 8007256:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800725a:	e040      	b.n	80072de <UART_SetConfig+0x7ae>
 800725c:	2340      	movs	r3, #64	; 0x40
 800725e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007262:	e03c      	b.n	80072de <UART_SetConfig+0x7ae>
 8007264:	2380      	movs	r3, #128	; 0x80
 8007266:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800726a:	e038      	b.n	80072de <UART_SetConfig+0x7ae>
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a71      	ldr	r2, [pc, #452]	; (8007438 <UART_SetConfig+0x908>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d130      	bne.n	80072d8 <UART_SetConfig+0x7a8>
 8007276:	4b6f      	ldr	r3, [pc, #444]	; (8007434 <UART_SetConfig+0x904>)
 8007278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800727a:	f003 0307 	and.w	r3, r3, #7
 800727e:	2b05      	cmp	r3, #5
 8007280:	d826      	bhi.n	80072d0 <UART_SetConfig+0x7a0>
 8007282:	a201      	add	r2, pc, #4	; (adr r2, 8007288 <UART_SetConfig+0x758>)
 8007284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007288:	080072a1 	.word	0x080072a1
 800728c:	080072a9 	.word	0x080072a9
 8007290:	080072b1 	.word	0x080072b1
 8007294:	080072b9 	.word	0x080072b9
 8007298:	080072c1 	.word	0x080072c1
 800729c:	080072c9 	.word	0x080072c9
 80072a0:	2302      	movs	r3, #2
 80072a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072a6:	e01a      	b.n	80072de <UART_SetConfig+0x7ae>
 80072a8:	2304      	movs	r3, #4
 80072aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072ae:	e016      	b.n	80072de <UART_SetConfig+0x7ae>
 80072b0:	2308      	movs	r3, #8
 80072b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072b6:	e012      	b.n	80072de <UART_SetConfig+0x7ae>
 80072b8:	2310      	movs	r3, #16
 80072ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072be:	e00e      	b.n	80072de <UART_SetConfig+0x7ae>
 80072c0:	2320      	movs	r3, #32
 80072c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072c6:	e00a      	b.n	80072de <UART_SetConfig+0x7ae>
 80072c8:	2340      	movs	r3, #64	; 0x40
 80072ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072ce:	e006      	b.n	80072de <UART_SetConfig+0x7ae>
 80072d0:	2380      	movs	r3, #128	; 0x80
 80072d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072d6:	e002      	b.n	80072de <UART_SetConfig+0x7ae>
 80072d8:	2380      	movs	r3, #128	; 0x80
 80072da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a55      	ldr	r2, [pc, #340]	; (8007438 <UART_SetConfig+0x908>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	f040 80f8 	bne.w	80074da <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80072ea:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80072ee:	2b20      	cmp	r3, #32
 80072f0:	dc46      	bgt.n	8007380 <UART_SetConfig+0x850>
 80072f2:	2b02      	cmp	r3, #2
 80072f4:	db75      	blt.n	80073e2 <UART_SetConfig+0x8b2>
 80072f6:	3b02      	subs	r3, #2
 80072f8:	2b1e      	cmp	r3, #30
 80072fa:	d872      	bhi.n	80073e2 <UART_SetConfig+0x8b2>
 80072fc:	a201      	add	r2, pc, #4	; (adr r2, 8007304 <UART_SetConfig+0x7d4>)
 80072fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007302:	bf00      	nop
 8007304:	08007387 	.word	0x08007387
 8007308:	080073e3 	.word	0x080073e3
 800730c:	0800738f 	.word	0x0800738f
 8007310:	080073e3 	.word	0x080073e3
 8007314:	080073e3 	.word	0x080073e3
 8007318:	080073e3 	.word	0x080073e3
 800731c:	0800739f 	.word	0x0800739f
 8007320:	080073e3 	.word	0x080073e3
 8007324:	080073e3 	.word	0x080073e3
 8007328:	080073e3 	.word	0x080073e3
 800732c:	080073e3 	.word	0x080073e3
 8007330:	080073e3 	.word	0x080073e3
 8007334:	080073e3 	.word	0x080073e3
 8007338:	080073e3 	.word	0x080073e3
 800733c:	080073af 	.word	0x080073af
 8007340:	080073e3 	.word	0x080073e3
 8007344:	080073e3 	.word	0x080073e3
 8007348:	080073e3 	.word	0x080073e3
 800734c:	080073e3 	.word	0x080073e3
 8007350:	080073e3 	.word	0x080073e3
 8007354:	080073e3 	.word	0x080073e3
 8007358:	080073e3 	.word	0x080073e3
 800735c:	080073e3 	.word	0x080073e3
 8007360:	080073e3 	.word	0x080073e3
 8007364:	080073e3 	.word	0x080073e3
 8007368:	080073e3 	.word	0x080073e3
 800736c:	080073e3 	.word	0x080073e3
 8007370:	080073e3 	.word	0x080073e3
 8007374:	080073e3 	.word	0x080073e3
 8007378:	080073e3 	.word	0x080073e3
 800737c:	080073d5 	.word	0x080073d5
 8007380:	2b40      	cmp	r3, #64	; 0x40
 8007382:	d02a      	beq.n	80073da <UART_SetConfig+0x8aa>
 8007384:	e02d      	b.n	80073e2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007386:	f7fd f83d 	bl	8004404 <HAL_RCCEx_GetD3PCLK1Freq>
 800738a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800738c:	e02f      	b.n	80073ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800738e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007392:	4618      	mov	r0, r3
 8007394:	f7fd f84c 	bl	8004430 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800739a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800739c:	e027      	b.n	80073ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800739e:	f107 0318 	add.w	r3, r7, #24
 80073a2:	4618      	mov	r0, r3
 80073a4:	f7fd f998 	bl	80046d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80073a8:	69fb      	ldr	r3, [r7, #28]
 80073aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80073ac:	e01f      	b.n	80073ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80073ae:	4b21      	ldr	r3, [pc, #132]	; (8007434 <UART_SetConfig+0x904>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f003 0320 	and.w	r3, r3, #32
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d009      	beq.n	80073ce <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80073ba:	4b1e      	ldr	r3, [pc, #120]	; (8007434 <UART_SetConfig+0x904>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	08db      	lsrs	r3, r3, #3
 80073c0:	f003 0303 	and.w	r3, r3, #3
 80073c4:	4a1d      	ldr	r2, [pc, #116]	; (800743c <UART_SetConfig+0x90c>)
 80073c6:	fa22 f303 	lsr.w	r3, r2, r3
 80073ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80073cc:	e00f      	b.n	80073ee <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80073ce:	4b1b      	ldr	r3, [pc, #108]	; (800743c <UART_SetConfig+0x90c>)
 80073d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80073d2:	e00c      	b.n	80073ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80073d4:	4b1a      	ldr	r3, [pc, #104]	; (8007440 <UART_SetConfig+0x910>)
 80073d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80073d8:	e009      	b.n	80073ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80073e0:	e005      	b.n	80073ee <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80073e2:	2300      	movs	r3, #0
 80073e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80073e6:	2301      	movs	r3, #1
 80073e8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80073ec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80073ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	f000 81ee 	beq.w	80077d2 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073fa:	4a12      	ldr	r2, [pc, #72]	; (8007444 <UART_SetConfig+0x914>)
 80073fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007400:	461a      	mov	r2, r3
 8007402:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007404:	fbb3 f3f2 	udiv	r3, r3, r2
 8007408:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	685a      	ldr	r2, [r3, #4]
 800740e:	4613      	mov	r3, r2
 8007410:	005b      	lsls	r3, r3, #1
 8007412:	4413      	add	r3, r2
 8007414:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007416:	429a      	cmp	r2, r3
 8007418:	d305      	bcc.n	8007426 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007420:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007422:	429a      	cmp	r2, r3
 8007424:	d910      	bls.n	8007448 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8007426:	2301      	movs	r3, #1
 8007428:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800742c:	e1d1      	b.n	80077d2 <UART_SetConfig+0xca2>
 800742e:	bf00      	nop
 8007430:	40011c00 	.word	0x40011c00
 8007434:	58024400 	.word	0x58024400
 8007438:	58000c00 	.word	0x58000c00
 800743c:	03d09000 	.word	0x03d09000
 8007440:	003d0900 	.word	0x003d0900
 8007444:	08009598 	.word	0x08009598
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007448:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800744a:	2200      	movs	r2, #0
 800744c:	60bb      	str	r3, [r7, #8]
 800744e:	60fa      	str	r2, [r7, #12]
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007454:	4ac0      	ldr	r2, [pc, #768]	; (8007758 <UART_SetConfig+0xc28>)
 8007456:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800745a:	b29b      	uxth	r3, r3
 800745c:	2200      	movs	r2, #0
 800745e:	603b      	str	r3, [r7, #0]
 8007460:	607a      	str	r2, [r7, #4]
 8007462:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007466:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800746a:	f7f8 ff51 	bl	8000310 <__aeabi_uldivmod>
 800746e:	4602      	mov	r2, r0
 8007470:	460b      	mov	r3, r1
 8007472:	4610      	mov	r0, r2
 8007474:	4619      	mov	r1, r3
 8007476:	f04f 0200 	mov.w	r2, #0
 800747a:	f04f 0300 	mov.w	r3, #0
 800747e:	020b      	lsls	r3, r1, #8
 8007480:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007484:	0202      	lsls	r2, r0, #8
 8007486:	6979      	ldr	r1, [r7, #20]
 8007488:	6849      	ldr	r1, [r1, #4]
 800748a:	0849      	lsrs	r1, r1, #1
 800748c:	2000      	movs	r0, #0
 800748e:	460c      	mov	r4, r1
 8007490:	4605      	mov	r5, r0
 8007492:	eb12 0804 	adds.w	r8, r2, r4
 8007496:	eb43 0905 	adc.w	r9, r3, r5
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	2200      	movs	r2, #0
 80074a0:	469a      	mov	sl, r3
 80074a2:	4693      	mov	fp, r2
 80074a4:	4652      	mov	r2, sl
 80074a6:	465b      	mov	r3, fp
 80074a8:	4640      	mov	r0, r8
 80074aa:	4649      	mov	r1, r9
 80074ac:	f7f8 ff30 	bl	8000310 <__aeabi_uldivmod>
 80074b0:	4602      	mov	r2, r0
 80074b2:	460b      	mov	r3, r1
 80074b4:	4613      	mov	r3, r2
 80074b6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80074b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80074be:	d308      	bcc.n	80074d2 <UART_SetConfig+0x9a2>
 80074c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074c6:	d204      	bcs.n	80074d2 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80074ce:	60da      	str	r2, [r3, #12]
 80074d0:	e17f      	b.n	80077d2 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80074d2:	2301      	movs	r3, #1
 80074d4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80074d8:	e17b      	b.n	80077d2 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	69db      	ldr	r3, [r3, #28]
 80074de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074e2:	f040 80bd 	bne.w	8007660 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80074e6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80074ea:	2b20      	cmp	r3, #32
 80074ec:	dc48      	bgt.n	8007580 <UART_SetConfig+0xa50>
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	db7b      	blt.n	80075ea <UART_SetConfig+0xaba>
 80074f2:	2b20      	cmp	r3, #32
 80074f4:	d879      	bhi.n	80075ea <UART_SetConfig+0xaba>
 80074f6:	a201      	add	r2, pc, #4	; (adr r2, 80074fc <UART_SetConfig+0x9cc>)
 80074f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074fc:	08007587 	.word	0x08007587
 8007500:	0800758f 	.word	0x0800758f
 8007504:	080075eb 	.word	0x080075eb
 8007508:	080075eb 	.word	0x080075eb
 800750c:	08007597 	.word	0x08007597
 8007510:	080075eb 	.word	0x080075eb
 8007514:	080075eb 	.word	0x080075eb
 8007518:	080075eb 	.word	0x080075eb
 800751c:	080075a7 	.word	0x080075a7
 8007520:	080075eb 	.word	0x080075eb
 8007524:	080075eb 	.word	0x080075eb
 8007528:	080075eb 	.word	0x080075eb
 800752c:	080075eb 	.word	0x080075eb
 8007530:	080075eb 	.word	0x080075eb
 8007534:	080075eb 	.word	0x080075eb
 8007538:	080075eb 	.word	0x080075eb
 800753c:	080075b7 	.word	0x080075b7
 8007540:	080075eb 	.word	0x080075eb
 8007544:	080075eb 	.word	0x080075eb
 8007548:	080075eb 	.word	0x080075eb
 800754c:	080075eb 	.word	0x080075eb
 8007550:	080075eb 	.word	0x080075eb
 8007554:	080075eb 	.word	0x080075eb
 8007558:	080075eb 	.word	0x080075eb
 800755c:	080075eb 	.word	0x080075eb
 8007560:	080075eb 	.word	0x080075eb
 8007564:	080075eb 	.word	0x080075eb
 8007568:	080075eb 	.word	0x080075eb
 800756c:	080075eb 	.word	0x080075eb
 8007570:	080075eb 	.word	0x080075eb
 8007574:	080075eb 	.word	0x080075eb
 8007578:	080075eb 	.word	0x080075eb
 800757c:	080075dd 	.word	0x080075dd
 8007580:	2b40      	cmp	r3, #64	; 0x40
 8007582:	d02e      	beq.n	80075e2 <UART_SetConfig+0xab2>
 8007584:	e031      	b.n	80075ea <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007586:	f7fc f817 	bl	80035b8 <HAL_RCC_GetPCLK1Freq>
 800758a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800758c:	e033      	b.n	80075f6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800758e:	f7fc f829 	bl	80035e4 <HAL_RCC_GetPCLK2Freq>
 8007592:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007594:	e02f      	b.n	80075f6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007596:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800759a:	4618      	mov	r0, r3
 800759c:	f7fc ff48 	bl	8004430 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80075a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80075a4:	e027      	b.n	80075f6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80075a6:	f107 0318 	add.w	r3, r7, #24
 80075aa:	4618      	mov	r0, r3
 80075ac:	f7fd f894 	bl	80046d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80075b0:	69fb      	ldr	r3, [r7, #28]
 80075b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80075b4:	e01f      	b.n	80075f6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80075b6:	4b69      	ldr	r3, [pc, #420]	; (800775c <UART_SetConfig+0xc2c>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f003 0320 	and.w	r3, r3, #32
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d009      	beq.n	80075d6 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80075c2:	4b66      	ldr	r3, [pc, #408]	; (800775c <UART_SetConfig+0xc2c>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	08db      	lsrs	r3, r3, #3
 80075c8:	f003 0303 	and.w	r3, r3, #3
 80075cc:	4a64      	ldr	r2, [pc, #400]	; (8007760 <UART_SetConfig+0xc30>)
 80075ce:	fa22 f303 	lsr.w	r3, r2, r3
 80075d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80075d4:	e00f      	b.n	80075f6 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80075d6:	4b62      	ldr	r3, [pc, #392]	; (8007760 <UART_SetConfig+0xc30>)
 80075d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80075da:	e00c      	b.n	80075f6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80075dc:	4b61      	ldr	r3, [pc, #388]	; (8007764 <UART_SetConfig+0xc34>)
 80075de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80075e0:	e009      	b.n	80075f6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80075e8:	e005      	b.n	80075f6 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80075ea:	2300      	movs	r3, #0
 80075ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80075ee:	2301      	movs	r3, #1
 80075f0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80075f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80075f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	f000 80ea 	beq.w	80077d2 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007602:	4a55      	ldr	r2, [pc, #340]	; (8007758 <UART_SetConfig+0xc28>)
 8007604:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007608:	461a      	mov	r2, r3
 800760a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800760c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007610:	005a      	lsls	r2, r3, #1
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	685b      	ldr	r3, [r3, #4]
 8007616:	085b      	lsrs	r3, r3, #1
 8007618:	441a      	add	r2, r3
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007622:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007626:	2b0f      	cmp	r3, #15
 8007628:	d916      	bls.n	8007658 <UART_SetConfig+0xb28>
 800762a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800762c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007630:	d212      	bcs.n	8007658 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007634:	b29b      	uxth	r3, r3
 8007636:	f023 030f 	bic.w	r3, r3, #15
 800763a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800763c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800763e:	085b      	lsrs	r3, r3, #1
 8007640:	b29b      	uxth	r3, r3
 8007642:	f003 0307 	and.w	r3, r3, #7
 8007646:	b29a      	uxth	r2, r3
 8007648:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800764a:	4313      	orrs	r3, r2
 800764c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007654:	60da      	str	r2, [r3, #12]
 8007656:	e0bc      	b.n	80077d2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007658:	2301      	movs	r3, #1
 800765a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800765e:	e0b8      	b.n	80077d2 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007660:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007664:	2b20      	cmp	r3, #32
 8007666:	dc4b      	bgt.n	8007700 <UART_SetConfig+0xbd0>
 8007668:	2b00      	cmp	r3, #0
 800766a:	f2c0 8087 	blt.w	800777c <UART_SetConfig+0xc4c>
 800766e:	2b20      	cmp	r3, #32
 8007670:	f200 8084 	bhi.w	800777c <UART_SetConfig+0xc4c>
 8007674:	a201      	add	r2, pc, #4	; (adr r2, 800767c <UART_SetConfig+0xb4c>)
 8007676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800767a:	bf00      	nop
 800767c:	08007707 	.word	0x08007707
 8007680:	0800770f 	.word	0x0800770f
 8007684:	0800777d 	.word	0x0800777d
 8007688:	0800777d 	.word	0x0800777d
 800768c:	08007717 	.word	0x08007717
 8007690:	0800777d 	.word	0x0800777d
 8007694:	0800777d 	.word	0x0800777d
 8007698:	0800777d 	.word	0x0800777d
 800769c:	08007727 	.word	0x08007727
 80076a0:	0800777d 	.word	0x0800777d
 80076a4:	0800777d 	.word	0x0800777d
 80076a8:	0800777d 	.word	0x0800777d
 80076ac:	0800777d 	.word	0x0800777d
 80076b0:	0800777d 	.word	0x0800777d
 80076b4:	0800777d 	.word	0x0800777d
 80076b8:	0800777d 	.word	0x0800777d
 80076bc:	08007737 	.word	0x08007737
 80076c0:	0800777d 	.word	0x0800777d
 80076c4:	0800777d 	.word	0x0800777d
 80076c8:	0800777d 	.word	0x0800777d
 80076cc:	0800777d 	.word	0x0800777d
 80076d0:	0800777d 	.word	0x0800777d
 80076d4:	0800777d 	.word	0x0800777d
 80076d8:	0800777d 	.word	0x0800777d
 80076dc:	0800777d 	.word	0x0800777d
 80076e0:	0800777d 	.word	0x0800777d
 80076e4:	0800777d 	.word	0x0800777d
 80076e8:	0800777d 	.word	0x0800777d
 80076ec:	0800777d 	.word	0x0800777d
 80076f0:	0800777d 	.word	0x0800777d
 80076f4:	0800777d 	.word	0x0800777d
 80076f8:	0800777d 	.word	0x0800777d
 80076fc:	0800776f 	.word	0x0800776f
 8007700:	2b40      	cmp	r3, #64	; 0x40
 8007702:	d037      	beq.n	8007774 <UART_SetConfig+0xc44>
 8007704:	e03a      	b.n	800777c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007706:	f7fb ff57 	bl	80035b8 <HAL_RCC_GetPCLK1Freq>
 800770a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800770c:	e03c      	b.n	8007788 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800770e:	f7fb ff69 	bl	80035e4 <HAL_RCC_GetPCLK2Freq>
 8007712:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007714:	e038      	b.n	8007788 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007716:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800771a:	4618      	mov	r0, r3
 800771c:	f7fc fe88 	bl	8004430 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007722:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007724:	e030      	b.n	8007788 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007726:	f107 0318 	add.w	r3, r7, #24
 800772a:	4618      	mov	r0, r3
 800772c:	f7fc ffd4 	bl	80046d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007730:	69fb      	ldr	r3, [r7, #28]
 8007732:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007734:	e028      	b.n	8007788 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007736:	4b09      	ldr	r3, [pc, #36]	; (800775c <UART_SetConfig+0xc2c>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f003 0320 	and.w	r3, r3, #32
 800773e:	2b00      	cmp	r3, #0
 8007740:	d012      	beq.n	8007768 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007742:	4b06      	ldr	r3, [pc, #24]	; (800775c <UART_SetConfig+0xc2c>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	08db      	lsrs	r3, r3, #3
 8007748:	f003 0303 	and.w	r3, r3, #3
 800774c:	4a04      	ldr	r2, [pc, #16]	; (8007760 <UART_SetConfig+0xc30>)
 800774e:	fa22 f303 	lsr.w	r3, r2, r3
 8007752:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007754:	e018      	b.n	8007788 <UART_SetConfig+0xc58>
 8007756:	bf00      	nop
 8007758:	08009598 	.word	0x08009598
 800775c:	58024400 	.word	0x58024400
 8007760:	03d09000 	.word	0x03d09000
 8007764:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8007768:	4b24      	ldr	r3, [pc, #144]	; (80077fc <UART_SetConfig+0xccc>)
 800776a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800776c:	e00c      	b.n	8007788 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800776e:	4b24      	ldr	r3, [pc, #144]	; (8007800 <UART_SetConfig+0xcd0>)
 8007770:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007772:	e009      	b.n	8007788 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007774:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007778:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800777a:	e005      	b.n	8007788 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800777c:	2300      	movs	r3, #0
 800777e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007780:	2301      	movs	r3, #1
 8007782:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007786:	bf00      	nop
    }

    if (pclk != 0U)
 8007788:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800778a:	2b00      	cmp	r3, #0
 800778c:	d021      	beq.n	80077d2 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007792:	4a1c      	ldr	r2, [pc, #112]	; (8007804 <UART_SetConfig+0xcd4>)
 8007794:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007798:	461a      	mov	r2, r3
 800779a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800779c:	fbb3 f2f2 	udiv	r2, r3, r2
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	685b      	ldr	r3, [r3, #4]
 80077a4:	085b      	lsrs	r3, r3, #1
 80077a6:	441a      	add	r2, r3
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80077b0:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80077b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077b4:	2b0f      	cmp	r3, #15
 80077b6:	d909      	bls.n	80077cc <UART_SetConfig+0xc9c>
 80077b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077be:	d205      	bcs.n	80077cc <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80077c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077c2:	b29a      	uxth	r2, r3
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	60da      	str	r2, [r3, #12]
 80077ca:	e002      	b.n	80077d2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80077cc:	2301      	movs	r3, #1
 80077ce:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	2201      	movs	r2, #1
 80077d6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	2201      	movs	r2, #1
 80077de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	2200      	movs	r2, #0
 80077e6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	2200      	movs	r2, #0
 80077ec:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80077ee:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3748      	adds	r7, #72	; 0x48
 80077f6:	46bd      	mov	sp, r7
 80077f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80077fc:	03d09000 	.word	0x03d09000
 8007800:	003d0900 	.word	0x003d0900
 8007804:	08009598 	.word	0x08009598

08007808 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007808:	b480      	push	{r7}
 800780a:	b083      	sub	sp, #12
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007814:	f003 0301 	and.w	r3, r3, #1
 8007818:	2b00      	cmp	r3, #0
 800781a:	d00a      	beq.n	8007832 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	685b      	ldr	r3, [r3, #4]
 8007822:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	430a      	orrs	r2, r1
 8007830:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007836:	f003 0302 	and.w	r3, r3, #2
 800783a:	2b00      	cmp	r3, #0
 800783c:	d00a      	beq.n	8007854 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	430a      	orrs	r2, r1
 8007852:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007858:	f003 0304 	and.w	r3, r3, #4
 800785c:	2b00      	cmp	r3, #0
 800785e:	d00a      	beq.n	8007876 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	685b      	ldr	r3, [r3, #4]
 8007866:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	430a      	orrs	r2, r1
 8007874:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800787a:	f003 0308 	and.w	r3, r3, #8
 800787e:	2b00      	cmp	r3, #0
 8007880:	d00a      	beq.n	8007898 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	685b      	ldr	r3, [r3, #4]
 8007888:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	430a      	orrs	r2, r1
 8007896:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800789c:	f003 0310 	and.w	r3, r3, #16
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d00a      	beq.n	80078ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	689b      	ldr	r3, [r3, #8]
 80078aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	430a      	orrs	r2, r1
 80078b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078be:	f003 0320 	and.w	r3, r3, #32
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d00a      	beq.n	80078dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	689b      	ldr	r3, [r3, #8]
 80078cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	430a      	orrs	r2, r1
 80078da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d01a      	beq.n	800791e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	430a      	orrs	r2, r1
 80078fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007902:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007906:	d10a      	bne.n	800791e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	685b      	ldr	r3, [r3, #4]
 800790e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	430a      	orrs	r2, r1
 800791c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007926:	2b00      	cmp	r3, #0
 8007928:	d00a      	beq.n	8007940 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	685b      	ldr	r3, [r3, #4]
 8007930:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	430a      	orrs	r2, r1
 800793e:	605a      	str	r2, [r3, #4]
  }
}
 8007940:	bf00      	nop
 8007942:	370c      	adds	r7, #12
 8007944:	46bd      	mov	sp, r7
 8007946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794a:	4770      	bx	lr

0800794c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b086      	sub	sp, #24
 8007950:	af02      	add	r7, sp, #8
 8007952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2200      	movs	r2, #0
 8007958:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800795c:	f7fa fbe2 	bl	8002124 <HAL_GetTick>
 8007960:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f003 0308 	and.w	r3, r3, #8
 800796c:	2b08      	cmp	r3, #8
 800796e:	d10e      	bne.n	800798e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007970:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007974:	9300      	str	r3, [sp, #0]
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	2200      	movs	r2, #0
 800797a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f000 f82f 	bl	80079e2 <UART_WaitOnFlagUntilTimeout>
 8007984:	4603      	mov	r3, r0
 8007986:	2b00      	cmp	r3, #0
 8007988:	d001      	beq.n	800798e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800798a:	2303      	movs	r3, #3
 800798c:	e025      	b.n	80079da <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f003 0304 	and.w	r3, r3, #4
 8007998:	2b04      	cmp	r3, #4
 800799a:	d10e      	bne.n	80079ba <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800799c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80079a0:	9300      	str	r3, [sp, #0]
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	2200      	movs	r2, #0
 80079a6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f000 f819 	bl	80079e2 <UART_WaitOnFlagUntilTimeout>
 80079b0:	4603      	mov	r3, r0
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d001      	beq.n	80079ba <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80079b6:	2303      	movs	r3, #3
 80079b8:	e00f      	b.n	80079da <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2220      	movs	r2, #32
 80079be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2220      	movs	r2, #32
 80079c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2200      	movs	r2, #0
 80079ce:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2200      	movs	r2, #0
 80079d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80079d8:	2300      	movs	r3, #0
}
 80079da:	4618      	mov	r0, r3
 80079dc:	3710      	adds	r7, #16
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}

080079e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80079e2:	b580      	push	{r7, lr}
 80079e4:	b09c      	sub	sp, #112	; 0x70
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	60f8      	str	r0, [r7, #12]
 80079ea:	60b9      	str	r1, [r7, #8]
 80079ec:	603b      	str	r3, [r7, #0]
 80079ee:	4613      	mov	r3, r2
 80079f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079f2:	e0a9      	b.n	8007b48 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80079f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079fa:	f000 80a5 	beq.w	8007b48 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079fe:	f7fa fb91 	bl	8002124 <HAL_GetTick>
 8007a02:	4602      	mov	r2, r0
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	1ad3      	subs	r3, r2, r3
 8007a08:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007a0a:	429a      	cmp	r2, r3
 8007a0c:	d302      	bcc.n	8007a14 <UART_WaitOnFlagUntilTimeout+0x32>
 8007a0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d140      	bne.n	8007a96 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a1c:	e853 3f00 	ldrex	r3, [r3]
 8007a20:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007a22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a24:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007a28:	667b      	str	r3, [r7, #100]	; 0x64
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	461a      	mov	r2, r3
 8007a30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a32:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007a34:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a36:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007a38:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007a3a:	e841 2300 	strex	r3, r2, [r1]
 8007a3e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007a40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d1e6      	bne.n	8007a14 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	3308      	adds	r3, #8
 8007a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a50:	e853 3f00 	ldrex	r3, [r3]
 8007a54:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a58:	f023 0301 	bic.w	r3, r3, #1
 8007a5c:	663b      	str	r3, [r7, #96]	; 0x60
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	3308      	adds	r3, #8
 8007a64:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007a66:	64ba      	str	r2, [r7, #72]	; 0x48
 8007a68:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a6a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007a6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a6e:	e841 2300 	strex	r3, r2, [r1]
 8007a72:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007a74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d1e5      	bne.n	8007a46 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	2220      	movs	r2, #32
 8007a7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	2220      	movs	r2, #32
 8007a86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007a92:	2303      	movs	r3, #3
 8007a94:	e069      	b.n	8007b6a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f003 0304 	and.w	r3, r3, #4
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d051      	beq.n	8007b48 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	69db      	ldr	r3, [r3, #28]
 8007aaa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007aae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ab2:	d149      	bne.n	8007b48 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007abc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ac6:	e853 3f00 	ldrex	r3, [r3]
 8007aca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ace:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007ad2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	461a      	mov	r2, r3
 8007ada:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007adc:	637b      	str	r3, [r7, #52]	; 0x34
 8007ade:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ae0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007ae2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ae4:	e841 2300 	strex	r3, r2, [r1]
 8007ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d1e6      	bne.n	8007abe <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	3308      	adds	r3, #8
 8007af6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	e853 3f00 	ldrex	r3, [r3]
 8007afe:	613b      	str	r3, [r7, #16]
   return(result);
 8007b00:	693b      	ldr	r3, [r7, #16]
 8007b02:	f023 0301 	bic.w	r3, r3, #1
 8007b06:	66bb      	str	r3, [r7, #104]	; 0x68
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	3308      	adds	r3, #8
 8007b0e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007b10:	623a      	str	r2, [r7, #32]
 8007b12:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b14:	69f9      	ldr	r1, [r7, #28]
 8007b16:	6a3a      	ldr	r2, [r7, #32]
 8007b18:	e841 2300 	strex	r3, r2, [r1]
 8007b1c:	61bb      	str	r3, [r7, #24]
   return(result);
 8007b1e:	69bb      	ldr	r3, [r7, #24]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d1e5      	bne.n	8007af0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	2220      	movs	r2, #32
 8007b28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	2220      	movs	r2, #32
 8007b30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	2220      	movs	r2, #32
 8007b38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007b44:	2303      	movs	r3, #3
 8007b46:	e010      	b.n	8007b6a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	69da      	ldr	r2, [r3, #28]
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	4013      	ands	r3, r2
 8007b52:	68ba      	ldr	r2, [r7, #8]
 8007b54:	429a      	cmp	r2, r3
 8007b56:	bf0c      	ite	eq
 8007b58:	2301      	moveq	r3, #1
 8007b5a:	2300      	movne	r3, #0
 8007b5c:	b2db      	uxtb	r3, r3
 8007b5e:	461a      	mov	r2, r3
 8007b60:	79fb      	ldrb	r3, [r7, #7]
 8007b62:	429a      	cmp	r2, r3
 8007b64:	f43f af46 	beq.w	80079f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007b68:	2300      	movs	r3, #0
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3770      	adds	r7, #112	; 0x70
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}

08007b72 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007b72:	b480      	push	{r7}
 8007b74:	b085      	sub	sp, #20
 8007b76:	af00      	add	r7, sp, #0
 8007b78:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	d101      	bne.n	8007b88 <HAL_UARTEx_DisableFifoMode+0x16>
 8007b84:	2302      	movs	r3, #2
 8007b86:	e027      	b.n	8007bd8 <HAL_UARTEx_DisableFifoMode+0x66>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2224      	movs	r2, #36	; 0x24
 8007b94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	681a      	ldr	r2, [r3, #0]
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f022 0201 	bic.w	r2, r2, #1
 8007bae:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007bb6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	68fa      	ldr	r2, [r7, #12]
 8007bc4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2220      	movs	r2, #32
 8007bca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007bd6:	2300      	movs	r3, #0
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	3714      	adds	r7, #20
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be2:	4770      	bx	lr

08007be4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b084      	sub	sp, #16
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
 8007bec:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007bf4:	2b01      	cmp	r3, #1
 8007bf6:	d101      	bne.n	8007bfc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007bf8:	2302      	movs	r3, #2
 8007bfa:	e02d      	b.n	8007c58 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2201      	movs	r2, #1
 8007c00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2224      	movs	r2, #36	; 0x24
 8007c08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	681a      	ldr	r2, [r3, #0]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f022 0201 	bic.w	r2, r2, #1
 8007c22:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	689b      	ldr	r3, [r3, #8]
 8007c2a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	683a      	ldr	r2, [r7, #0]
 8007c34:	430a      	orrs	r2, r1
 8007c36:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f000 f84f 	bl	8007cdc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	68fa      	ldr	r2, [r7, #12]
 8007c44:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2220      	movs	r2, #32
 8007c4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2200      	movs	r2, #0
 8007c52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007c56:	2300      	movs	r3, #0
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	3710      	adds	r7, #16
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}

08007c60 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b084      	sub	sp, #16
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
 8007c68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007c70:	2b01      	cmp	r3, #1
 8007c72:	d101      	bne.n	8007c78 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007c74:	2302      	movs	r3, #2
 8007c76:	e02d      	b.n	8007cd4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2201      	movs	r2, #1
 8007c7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2224      	movs	r2, #36	; 0x24
 8007c84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	681a      	ldr	r2, [r3, #0]
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f022 0201 	bic.w	r2, r2, #1
 8007c9e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	689b      	ldr	r3, [r3, #8]
 8007ca6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	683a      	ldr	r2, [r7, #0]
 8007cb0:	430a      	orrs	r2, r1
 8007cb2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f000 f811 	bl	8007cdc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	68fa      	ldr	r2, [r7, #12]
 8007cc0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2220      	movs	r2, #32
 8007cc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007cd2:	2300      	movs	r3, #0
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	3710      	adds	r7, #16
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}

08007cdc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b085      	sub	sp, #20
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d108      	bne.n	8007cfe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2201      	movs	r2, #1
 8007cf0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007cfc:	e031      	b.n	8007d62 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007cfe:	2310      	movs	r3, #16
 8007d00:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007d02:	2310      	movs	r3, #16
 8007d04:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	689b      	ldr	r3, [r3, #8]
 8007d0c:	0e5b      	lsrs	r3, r3, #25
 8007d0e:	b2db      	uxtb	r3, r3
 8007d10:	f003 0307 	and.w	r3, r3, #7
 8007d14:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	689b      	ldr	r3, [r3, #8]
 8007d1c:	0f5b      	lsrs	r3, r3, #29
 8007d1e:	b2db      	uxtb	r3, r3
 8007d20:	f003 0307 	and.w	r3, r3, #7
 8007d24:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007d26:	7bbb      	ldrb	r3, [r7, #14]
 8007d28:	7b3a      	ldrb	r2, [r7, #12]
 8007d2a:	4911      	ldr	r1, [pc, #68]	; (8007d70 <UARTEx_SetNbDataToProcess+0x94>)
 8007d2c:	5c8a      	ldrb	r2, [r1, r2]
 8007d2e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007d32:	7b3a      	ldrb	r2, [r7, #12]
 8007d34:	490f      	ldr	r1, [pc, #60]	; (8007d74 <UARTEx_SetNbDataToProcess+0x98>)
 8007d36:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007d38:	fb93 f3f2 	sdiv	r3, r3, r2
 8007d3c:	b29a      	uxth	r2, r3
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007d44:	7bfb      	ldrb	r3, [r7, #15]
 8007d46:	7b7a      	ldrb	r2, [r7, #13]
 8007d48:	4909      	ldr	r1, [pc, #36]	; (8007d70 <UARTEx_SetNbDataToProcess+0x94>)
 8007d4a:	5c8a      	ldrb	r2, [r1, r2]
 8007d4c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007d50:	7b7a      	ldrb	r2, [r7, #13]
 8007d52:	4908      	ldr	r1, [pc, #32]	; (8007d74 <UARTEx_SetNbDataToProcess+0x98>)
 8007d54:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007d56:	fb93 f3f2 	sdiv	r3, r3, r2
 8007d5a:	b29a      	uxth	r2, r3
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007d62:	bf00      	nop
 8007d64:	3714      	adds	r7, #20
 8007d66:	46bd      	mov	sp, r7
 8007d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6c:	4770      	bx	lr
 8007d6e:	bf00      	nop
 8007d70:	080095b0 	.word	0x080095b0
 8007d74:	080095b8 	.word	0x080095b8

08007d78 <arm_mat_trans_f32>:
 8007d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d7c:	8802      	ldrh	r2, [r0, #0]
 8007d7e:	b085      	sub	sp, #20
 8007d80:	884b      	ldrh	r3, [r1, #2]
 8007d82:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8007d86:	4293      	cmp	r3, r2
 8007d88:	8844      	ldrh	r4, [r0, #2]
 8007d8a:	6848      	ldr	r0, [r1, #4]
 8007d8c:	d14e      	bne.n	8007e2c <arm_mat_trans_f32+0xb4>
 8007d8e:	f8b1 8000 	ldrh.w	r8, [r1]
 8007d92:	45a0      	cmp	r8, r4
 8007d94:	d14a      	bne.n	8007e2c <arm_mat_trans_f32+0xb4>
 8007d96:	ea4f 0998 	mov.w	r9, r8, lsr #2
 8007d9a:	f008 0803 	and.w	r8, r8, #3
 8007d9e:	009c      	lsls	r4, r3, #2
 8007da0:	4684      	mov	ip, r0
 8007da2:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8007da6:	fb09 f204 	mul.w	r2, r9, r4
 8007daa:	011d      	lsls	r5, r3, #4
 8007dac:	ea4f 1b09 	mov.w	fp, r9, lsl #4
 8007db0:	eb00 0a04 	add.w	sl, r0, r4
 8007db4:	0092      	lsls	r2, r2, #2
 8007db6:	9103      	str	r1, [sp, #12]
 8007db8:	00db      	lsls	r3, r3, #3
 8007dba:	9202      	str	r2, [sp, #8]
 8007dbc:	9301      	str	r3, [sp, #4]
 8007dbe:	4663      	mov	r3, ip
 8007dc0:	f1b9 0f00 	cmp.w	r9, #0
 8007dc4:	d01d      	beq.n	8007e02 <arm_mat_trans_f32+0x8a>
 8007dc6:	9901      	ldr	r1, [sp, #4]
 8007dc8:	f10e 0210 	add.w	r2, lr, #16
 8007dcc:	4648      	mov	r0, r9
 8007dce:	4461      	add	r1, ip
 8007dd0:	ed52 7a04 	vldr	s15, [r2, #-16]
 8007dd4:	191f      	adds	r7, r3, r4
 8007dd6:	190e      	adds	r6, r1, r4
 8007dd8:	3801      	subs	r0, #1
 8007dda:	edc3 7a00 	vstr	s15, [r3]
 8007dde:	f102 0210 	add.w	r2, r2, #16
 8007de2:	ed52 7a07 	vldr	s15, [r2, #-28]	; 0xffffffe4
 8007de6:	442b      	add	r3, r5
 8007de8:	edc7 7a00 	vstr	s15, [r7]
 8007dec:	f852 7c18 	ldr.w	r7, [r2, #-24]
 8007df0:	600f      	str	r7, [r1, #0]
 8007df2:	4429      	add	r1, r5
 8007df4:	f852 7c14 	ldr.w	r7, [r2, #-20]
 8007df8:	6037      	str	r7, [r6, #0]
 8007dfa:	d1e9      	bne.n	8007dd0 <arm_mat_trans_f32+0x58>
 8007dfc:	9b02      	ldr	r3, [sp, #8]
 8007dfe:	44de      	add	lr, fp
 8007e00:	4463      	add	r3, ip
 8007e02:	f1b8 0f00 	cmp.w	r8, #0
 8007e06:	d009      	beq.n	8007e1c <arm_mat_trans_f32+0xa4>
 8007e08:	4642      	mov	r2, r8
 8007e0a:	4671      	mov	r1, lr
 8007e0c:	f851 0b04 	ldr.w	r0, [r1], #4
 8007e10:	3a01      	subs	r2, #1
 8007e12:	6018      	str	r0, [r3, #0]
 8007e14:	4423      	add	r3, r4
 8007e16:	d1f9      	bne.n	8007e0c <arm_mat_trans_f32+0x94>
 8007e18:	9b03      	ldr	r3, [sp, #12]
 8007e1a:	449e      	add	lr, r3
 8007e1c:	f10c 0c04 	add.w	ip, ip, #4
 8007e20:	45d4      	cmp	ip, sl
 8007e22:	d1cc      	bne.n	8007dbe <arm_mat_trans_f32+0x46>
 8007e24:	2000      	movs	r0, #0
 8007e26:	b005      	add	sp, #20
 8007e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e2c:	f06f 0002 	mvn.w	r0, #2
 8007e30:	e7f9      	b.n	8007e26 <arm_mat_trans_f32+0xae>
 8007e32:	bf00      	nop

08007e34 <arm_mat_sub_f32>:
 8007e34:	b4f0      	push	{r4, r5, r6, r7}
 8007e36:	6803      	ldr	r3, [r0, #0]
 8007e38:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8007e3c:	6856      	ldr	r6, [r2, #4]
 8007e3e:	e9d1 4700 	ldrd	r4, r7, [r1]
 8007e42:	42a3      	cmp	r3, r4
 8007e44:	d15d      	bne.n	8007f02 <arm_mat_sub_f32+0xce>
 8007e46:	6812      	ldr	r2, [r2, #0]
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d15a      	bne.n	8007f02 <arm_mat_sub_f32+0xce>
 8007e4c:	8803      	ldrh	r3, [r0, #0]
 8007e4e:	8844      	ldrh	r4, [r0, #2]
 8007e50:	fb04 f403 	mul.w	r4, r4, r3
 8007e54:	08a5      	lsrs	r5, r4, #2
 8007e56:	d032      	beq.n	8007ebe <arm_mat_sub_f32+0x8a>
 8007e58:	f10c 0110 	add.w	r1, ip, #16
 8007e5c:	f107 0210 	add.w	r2, r7, #16
 8007e60:	f106 0310 	add.w	r3, r6, #16
 8007e64:	4628      	mov	r0, r5
 8007e66:	ed12 7a04 	vldr	s14, [r2, #-16]
 8007e6a:	3801      	subs	r0, #1
 8007e6c:	ed51 7a04 	vldr	s15, [r1, #-16]
 8007e70:	f102 0210 	add.w	r2, r2, #16
 8007e74:	f101 0110 	add.w	r1, r1, #16
 8007e78:	f103 0310 	add.w	r3, r3, #16
 8007e7c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007e80:	ed43 7a08 	vstr	s15, [r3, #-32]	; 0xffffffe0
 8007e84:	ed12 7a07 	vldr	s14, [r2, #-28]	; 0xffffffe4
 8007e88:	ed51 7a07 	vldr	s15, [r1, #-28]	; 0xffffffe4
 8007e8c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007e90:	ed43 7a07 	vstr	s15, [r3, #-28]	; 0xffffffe4
 8007e94:	ed12 7a06 	vldr	s14, [r2, #-24]	; 0xffffffe8
 8007e98:	ed51 7a06 	vldr	s15, [r1, #-24]	; 0xffffffe8
 8007e9c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007ea0:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 8007ea4:	ed51 7a05 	vldr	s15, [r1, #-20]	; 0xffffffec
 8007ea8:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 8007eac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007eb0:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 8007eb4:	d1d7      	bne.n	8007e66 <arm_mat_sub_f32+0x32>
 8007eb6:	012b      	lsls	r3, r5, #4
 8007eb8:	449c      	add	ip, r3
 8007eba:	441f      	add	r7, r3
 8007ebc:	441e      	add	r6, r3
 8007ebe:	f014 0403 	ands.w	r4, r4, #3
 8007ec2:	d01b      	beq.n	8007efc <arm_mat_sub_f32+0xc8>
 8007ec4:	eddc 7a00 	vldr	s15, [ip]
 8007ec8:	3c01      	subs	r4, #1
 8007eca:	ed97 7a00 	vldr	s14, [r7]
 8007ece:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007ed2:	edc6 7a00 	vstr	s15, [r6]
 8007ed6:	d011      	beq.n	8007efc <arm_mat_sub_f32+0xc8>
 8007ed8:	eddc 7a01 	vldr	s15, [ip, #4]
 8007edc:	2c01      	cmp	r4, #1
 8007ede:	ed97 7a01 	vldr	s14, [r7, #4]
 8007ee2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007ee6:	edc6 7a01 	vstr	s15, [r6, #4]
 8007eea:	d007      	beq.n	8007efc <arm_mat_sub_f32+0xc8>
 8007eec:	eddc 7a02 	vldr	s15, [ip, #8]
 8007ef0:	ed97 7a02 	vldr	s14, [r7, #8]
 8007ef4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007ef8:	edc6 7a02 	vstr	s15, [r6, #8]
 8007efc:	2000      	movs	r0, #0
 8007efe:	bcf0      	pop	{r4, r5, r6, r7}
 8007f00:	4770      	bx	lr
 8007f02:	f06f 0002 	mvn.w	r0, #2
 8007f06:	e7fa      	b.n	8007efe <arm_mat_sub_f32+0xca>

08007f08 <arm_mat_mult_f32>:
 8007f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f0c:	8845      	ldrh	r5, [r0, #2]
 8007f0e:	b08b      	sub	sp, #44	; 0x2c
 8007f10:	880b      	ldrh	r3, [r1, #0]
 8007f12:	8806      	ldrh	r6, [r0, #0]
 8007f14:	42ab      	cmp	r3, r5
 8007f16:	9109      	str	r1, [sp, #36]	; 0x24
 8007f18:	6847      	ldr	r7, [r0, #4]
 8007f1a:	9604      	str	r6, [sp, #16]
 8007f1c:	6848      	ldr	r0, [r1, #4]
 8007f1e:	6854      	ldr	r4, [r2, #4]
 8007f20:	8849      	ldrh	r1, [r1, #2]
 8007f22:	f040 808d 	bne.w	8008040 <arm_mat_mult_f32+0x138>
 8007f26:	8815      	ldrh	r5, [r2, #0]
 8007f28:	42b5      	cmp	r5, r6
 8007f2a:	f040 8089 	bne.w	8008040 <arm_mat_mult_f32+0x138>
 8007f2e:	8852      	ldrh	r2, [r2, #2]
 8007f30:	428a      	cmp	r2, r1
 8007f32:	f040 8085 	bne.w	8008040 <arm_mat_mult_f32+0x138>
 8007f36:	ea4f 0893 	mov.w	r8, r3, lsr #2
 8007f3a:	1d01      	adds	r1, r0, #4
 8007f3c:	0116      	lsls	r6, r2, #4
 8007f3e:	f003 0903 	and.w	r9, r3, #3
 8007f42:	9108      	str	r1, [sp, #32]
 8007f44:	0095      	lsls	r5, r2, #2
 8007f46:	fb06 f108 	mul.w	r1, r6, r8
 8007f4a:	ebc2 7c82 	rsb	ip, r2, r2, lsl #30
 8007f4e:	009b      	lsls	r3, r3, #2
 8007f50:	f107 0b10 	add.w	fp, r7, #16
 8007f54:	9103      	str	r1, [sp, #12]
 8007f56:	eb07 1108 	add.w	r1, r7, r8, lsl #4
 8007f5a:	00d2      	lsls	r2, r2, #3
 8007f5c:	eb04 0a05 	add.w	sl, r4, r5
 8007f60:	9101      	str	r1, [sp, #4]
 8007f62:	ea4f 018c 	mov.w	r1, ip, lsl #2
 8007f66:	9202      	str	r2, [sp, #8]
 8007f68:	9107      	str	r1, [sp, #28]
 8007f6a:	9306      	str	r3, [sp, #24]
 8007f6c:	f1ab 0310 	sub.w	r3, fp, #16
 8007f70:	f8dd e020 	ldr.w	lr, [sp, #32]
 8007f74:	9305      	str	r3, [sp, #20]
 8007f76:	9b07      	ldr	r3, [sp, #28]
 8007f78:	eb03 0c0a 	add.w	ip, r3, sl
 8007f7c:	f1b8 0f00 	cmp.w	r8, #0
 8007f80:	d056      	beq.n	8008030 <arm_mat_mult_f32+0x128>
 8007f82:	9b02      	ldr	r3, [sp, #8]
 8007f84:	4644      	mov	r4, r8
 8007f86:	4602      	mov	r2, r0
 8007f88:	eddf 7a30 	vldr	s15, [pc, #192]	; 800804c <arm_mat_mult_f32+0x144>
 8007f8c:	18c1      	adds	r1, r0, r3
 8007f8e:	465b      	mov	r3, fp
 8007f90:	edd2 6a00 	vldr	s13, [r2]
 8007f94:	1957      	adds	r7, r2, r5
 8007f96:	ed13 7a04 	vldr	s14, [r3, #-16]
 8007f9a:	3c01      	subs	r4, #1
 8007f9c:	ed53 5a03 	vldr	s11, [r3, #-12]
 8007fa0:	4432      	add	r2, r6
 8007fa2:	ee27 7a26 	vmul.f32	s14, s14, s13
 8007fa6:	ed97 6a00 	vldr	s12, [r7]
 8007faa:	ed53 6a02 	vldr	s13, [r3, #-8]
 8007fae:	eb01 0705 	add.w	r7, r1, r5
 8007fb2:	ee26 6a25 	vmul.f32	s12, s12, s11
 8007fb6:	ed91 5a00 	vldr	s10, [r1]
 8007fba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007fbe:	edd7 5a00 	vldr	s11, [r7]
 8007fc2:	ee26 7a85 	vmul.f32	s14, s13, s10
 8007fc6:	ed53 6a01 	vldr	s13, [r3, #-4]
 8007fca:	4431      	add	r1, r6
 8007fcc:	f103 0310 	add.w	r3, r3, #16
 8007fd0:	ee76 7a27 	vadd.f32	s15, s12, s15
 8007fd4:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8007fd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007fdc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fe0:	d1d6      	bne.n	8007f90 <arm_mat_mult_f32+0x88>
 8007fe2:	9b03      	ldr	r3, [sp, #12]
 8007fe4:	9a01      	ldr	r2, [sp, #4]
 8007fe6:	4418      	add	r0, r3
 8007fe8:	f1b9 0f00 	cmp.w	r9, #0
 8007fec:	d00b      	beq.n	8008006 <arm_mat_mult_f32+0xfe>
 8007fee:	464b      	mov	r3, r9
 8007ff0:	edd0 6a00 	vldr	s13, [r0]
 8007ff4:	3b01      	subs	r3, #1
 8007ff6:	ecb2 7a01 	vldmia	r2!, {s14}
 8007ffa:	4428      	add	r0, r5
 8007ffc:	ee27 7a26 	vmul.f32	s14, s14, s13
 8008000:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008004:	d1f4      	bne.n	8007ff0 <arm_mat_mult_f32+0xe8>
 8008006:	ecec 7a01 	vstmia	ip!, {s15}
 800800a:	45d4      	cmp	ip, sl
 800800c:	4670      	mov	r0, lr
 800800e:	f10e 0e04 	add.w	lr, lr, #4
 8008012:	d1b3      	bne.n	8007f7c <arm_mat_mult_f32+0x74>
 8008014:	9a01      	ldr	r2, [sp, #4]
 8008016:	44aa      	add	sl, r5
 8008018:	9b06      	ldr	r3, [sp, #24]
 800801a:	4611      	mov	r1, r2
 800801c:	449b      	add	fp, r3
 800801e:	4419      	add	r1, r3
 8008020:	9b04      	ldr	r3, [sp, #16]
 8008022:	3b01      	subs	r3, #1
 8008024:	9101      	str	r1, [sp, #4]
 8008026:	9304      	str	r3, [sp, #16]
 8008028:	d006      	beq.n	8008038 <arm_mat_mult_f32+0x130>
 800802a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800802c:	6858      	ldr	r0, [r3, #4]
 800802e:	e79d      	b.n	8007f6c <arm_mat_mult_f32+0x64>
 8008030:	9a05      	ldr	r2, [sp, #20]
 8008032:	eddf 7a06 	vldr	s15, [pc, #24]	; 800804c <arm_mat_mult_f32+0x144>
 8008036:	e7d7      	b.n	8007fe8 <arm_mat_mult_f32+0xe0>
 8008038:	4618      	mov	r0, r3
 800803a:	b00b      	add	sp, #44	; 0x2c
 800803c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008040:	f06f 0002 	mvn.w	r0, #2
 8008044:	b00b      	add	sp, #44	; 0x2c
 8008046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800804a:	bf00      	nop
 800804c:	00000000 	.word	0x00000000

08008050 <arm_mat_init_f32>:
 8008050:	8001      	strh	r1, [r0, #0]
 8008052:	8042      	strh	r2, [r0, #2]
 8008054:	6043      	str	r3, [r0, #4]
 8008056:	4770      	bx	lr

08008058 <arm_mat_add_f32>:
 8008058:	b4f0      	push	{r4, r5, r6, r7}
 800805a:	6803      	ldr	r3, [r0, #0]
 800805c:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8008060:	6856      	ldr	r6, [r2, #4]
 8008062:	e9d1 4700 	ldrd	r4, r7, [r1]
 8008066:	42a3      	cmp	r3, r4
 8008068:	d15d      	bne.n	8008126 <arm_mat_add_f32+0xce>
 800806a:	6812      	ldr	r2, [r2, #0]
 800806c:	4293      	cmp	r3, r2
 800806e:	d15a      	bne.n	8008126 <arm_mat_add_f32+0xce>
 8008070:	8803      	ldrh	r3, [r0, #0]
 8008072:	8844      	ldrh	r4, [r0, #2]
 8008074:	fb04 f403 	mul.w	r4, r4, r3
 8008078:	08a5      	lsrs	r5, r4, #2
 800807a:	d032      	beq.n	80080e2 <arm_mat_add_f32+0x8a>
 800807c:	f10c 0110 	add.w	r1, ip, #16
 8008080:	f107 0210 	add.w	r2, r7, #16
 8008084:	f106 0310 	add.w	r3, r6, #16
 8008088:	4628      	mov	r0, r5
 800808a:	ed12 7a04 	vldr	s14, [r2, #-16]
 800808e:	3801      	subs	r0, #1
 8008090:	ed51 7a04 	vldr	s15, [r1, #-16]
 8008094:	f102 0210 	add.w	r2, r2, #16
 8008098:	f101 0110 	add.w	r1, r1, #16
 800809c:	f103 0310 	add.w	r3, r3, #16
 80080a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80080a4:	ed43 7a08 	vstr	s15, [r3, #-32]	; 0xffffffe0
 80080a8:	ed12 7a07 	vldr	s14, [r2, #-28]	; 0xffffffe4
 80080ac:	ed51 7a07 	vldr	s15, [r1, #-28]	; 0xffffffe4
 80080b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80080b4:	ed43 7a07 	vstr	s15, [r3, #-28]	; 0xffffffe4
 80080b8:	ed12 7a06 	vldr	s14, [r2, #-24]	; 0xffffffe8
 80080bc:	ed51 7a06 	vldr	s15, [r1, #-24]	; 0xffffffe8
 80080c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80080c4:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 80080c8:	ed51 7a05 	vldr	s15, [r1, #-20]	; 0xffffffec
 80080cc:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 80080d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80080d4:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 80080d8:	d1d7      	bne.n	800808a <arm_mat_add_f32+0x32>
 80080da:	012b      	lsls	r3, r5, #4
 80080dc:	449c      	add	ip, r3
 80080de:	441f      	add	r7, r3
 80080e0:	441e      	add	r6, r3
 80080e2:	f014 0403 	ands.w	r4, r4, #3
 80080e6:	d01b      	beq.n	8008120 <arm_mat_add_f32+0xc8>
 80080e8:	edd7 7a00 	vldr	s15, [r7]
 80080ec:	3c01      	subs	r4, #1
 80080ee:	ed9c 7a00 	vldr	s14, [ip]
 80080f2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80080f6:	edc6 7a00 	vstr	s15, [r6]
 80080fa:	d011      	beq.n	8008120 <arm_mat_add_f32+0xc8>
 80080fc:	eddc 7a01 	vldr	s15, [ip, #4]
 8008100:	2c01      	cmp	r4, #1
 8008102:	ed97 7a01 	vldr	s14, [r7, #4]
 8008106:	ee77 7a87 	vadd.f32	s15, s15, s14
 800810a:	edc6 7a01 	vstr	s15, [r6, #4]
 800810e:	d007      	beq.n	8008120 <arm_mat_add_f32+0xc8>
 8008110:	eddc 7a02 	vldr	s15, [ip, #8]
 8008114:	ed97 7a02 	vldr	s14, [r7, #8]
 8008118:	ee77 7a87 	vadd.f32	s15, s15, s14
 800811c:	edc6 7a02 	vstr	s15, [r6, #8]
 8008120:	2000      	movs	r0, #0
 8008122:	bcf0      	pop	{r4, r5, r6, r7}
 8008124:	4770      	bx	lr
 8008126:	f06f 0002 	mvn.w	r0, #2
 800812a:	e7fa      	b.n	8008122 <arm_mat_add_f32+0xca>

0800812c <__errno>:
 800812c:	4b01      	ldr	r3, [pc, #4]	; (8008134 <__errno+0x8>)
 800812e:	6818      	ldr	r0, [r3, #0]
 8008130:	4770      	bx	lr
 8008132:	bf00      	nop
 8008134:	2400001c 	.word	0x2400001c

08008138 <__libc_init_array>:
 8008138:	b570      	push	{r4, r5, r6, lr}
 800813a:	4d0d      	ldr	r5, [pc, #52]	; (8008170 <__libc_init_array+0x38>)
 800813c:	4c0d      	ldr	r4, [pc, #52]	; (8008174 <__libc_init_array+0x3c>)
 800813e:	1b64      	subs	r4, r4, r5
 8008140:	10a4      	asrs	r4, r4, #2
 8008142:	2600      	movs	r6, #0
 8008144:	42a6      	cmp	r6, r4
 8008146:	d109      	bne.n	800815c <__libc_init_array+0x24>
 8008148:	4d0b      	ldr	r5, [pc, #44]	; (8008178 <__libc_init_array+0x40>)
 800814a:	4c0c      	ldr	r4, [pc, #48]	; (800817c <__libc_init_array+0x44>)
 800814c:	f001 fa0e 	bl	800956c <_init>
 8008150:	1b64      	subs	r4, r4, r5
 8008152:	10a4      	asrs	r4, r4, #2
 8008154:	2600      	movs	r6, #0
 8008156:	42a6      	cmp	r6, r4
 8008158:	d105      	bne.n	8008166 <__libc_init_array+0x2e>
 800815a:	bd70      	pop	{r4, r5, r6, pc}
 800815c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008160:	4798      	blx	r3
 8008162:	3601      	adds	r6, #1
 8008164:	e7ee      	b.n	8008144 <__libc_init_array+0xc>
 8008166:	f855 3b04 	ldr.w	r3, [r5], #4
 800816a:	4798      	blx	r3
 800816c:	3601      	adds	r6, #1
 800816e:	e7f2      	b.n	8008156 <__libc_init_array+0x1e>
 8008170:	0800b058 	.word	0x0800b058
 8008174:	0800b058 	.word	0x0800b058
 8008178:	0800b058 	.word	0x0800b058
 800817c:	0800b05c 	.word	0x0800b05c

08008180 <malloc>:
 8008180:	4b02      	ldr	r3, [pc, #8]	; (800818c <malloc+0xc>)
 8008182:	4601      	mov	r1, r0
 8008184:	6818      	ldr	r0, [r3, #0]
 8008186:	f000 b82b 	b.w	80081e0 <_malloc_r>
 800818a:	bf00      	nop
 800818c:	2400001c 	.word	0x2400001c

08008190 <memset>:
 8008190:	4402      	add	r2, r0
 8008192:	4603      	mov	r3, r0
 8008194:	4293      	cmp	r3, r2
 8008196:	d100      	bne.n	800819a <memset+0xa>
 8008198:	4770      	bx	lr
 800819a:	f803 1b01 	strb.w	r1, [r3], #1
 800819e:	e7f9      	b.n	8008194 <memset+0x4>

080081a0 <sbrk_aligned>:
 80081a0:	b570      	push	{r4, r5, r6, lr}
 80081a2:	4e0e      	ldr	r6, [pc, #56]	; (80081dc <sbrk_aligned+0x3c>)
 80081a4:	460c      	mov	r4, r1
 80081a6:	6831      	ldr	r1, [r6, #0]
 80081a8:	4605      	mov	r5, r0
 80081aa:	b911      	cbnz	r1, 80081b2 <sbrk_aligned+0x12>
 80081ac:	f000 f88c 	bl	80082c8 <_sbrk_r>
 80081b0:	6030      	str	r0, [r6, #0]
 80081b2:	4621      	mov	r1, r4
 80081b4:	4628      	mov	r0, r5
 80081b6:	f000 f887 	bl	80082c8 <_sbrk_r>
 80081ba:	1c43      	adds	r3, r0, #1
 80081bc:	d00a      	beq.n	80081d4 <sbrk_aligned+0x34>
 80081be:	1cc4      	adds	r4, r0, #3
 80081c0:	f024 0403 	bic.w	r4, r4, #3
 80081c4:	42a0      	cmp	r0, r4
 80081c6:	d007      	beq.n	80081d8 <sbrk_aligned+0x38>
 80081c8:	1a21      	subs	r1, r4, r0
 80081ca:	4628      	mov	r0, r5
 80081cc:	f000 f87c 	bl	80082c8 <_sbrk_r>
 80081d0:	3001      	adds	r0, #1
 80081d2:	d101      	bne.n	80081d8 <sbrk_aligned+0x38>
 80081d4:	f04f 34ff 	mov.w	r4, #4294967295
 80081d8:	4620      	mov	r0, r4
 80081da:	bd70      	pop	{r4, r5, r6, pc}
 80081dc:	240003e0 	.word	0x240003e0

080081e0 <_malloc_r>:
 80081e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081e4:	1ccd      	adds	r5, r1, #3
 80081e6:	f025 0503 	bic.w	r5, r5, #3
 80081ea:	3508      	adds	r5, #8
 80081ec:	2d0c      	cmp	r5, #12
 80081ee:	bf38      	it	cc
 80081f0:	250c      	movcc	r5, #12
 80081f2:	2d00      	cmp	r5, #0
 80081f4:	4607      	mov	r7, r0
 80081f6:	db01      	blt.n	80081fc <_malloc_r+0x1c>
 80081f8:	42a9      	cmp	r1, r5
 80081fa:	d905      	bls.n	8008208 <_malloc_r+0x28>
 80081fc:	230c      	movs	r3, #12
 80081fe:	603b      	str	r3, [r7, #0]
 8008200:	2600      	movs	r6, #0
 8008202:	4630      	mov	r0, r6
 8008204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008208:	4e2e      	ldr	r6, [pc, #184]	; (80082c4 <_malloc_r+0xe4>)
 800820a:	f000 f86d 	bl	80082e8 <__malloc_lock>
 800820e:	6833      	ldr	r3, [r6, #0]
 8008210:	461c      	mov	r4, r3
 8008212:	bb34      	cbnz	r4, 8008262 <_malloc_r+0x82>
 8008214:	4629      	mov	r1, r5
 8008216:	4638      	mov	r0, r7
 8008218:	f7ff ffc2 	bl	80081a0 <sbrk_aligned>
 800821c:	1c43      	adds	r3, r0, #1
 800821e:	4604      	mov	r4, r0
 8008220:	d14d      	bne.n	80082be <_malloc_r+0xde>
 8008222:	6834      	ldr	r4, [r6, #0]
 8008224:	4626      	mov	r6, r4
 8008226:	2e00      	cmp	r6, #0
 8008228:	d140      	bne.n	80082ac <_malloc_r+0xcc>
 800822a:	6823      	ldr	r3, [r4, #0]
 800822c:	4631      	mov	r1, r6
 800822e:	4638      	mov	r0, r7
 8008230:	eb04 0803 	add.w	r8, r4, r3
 8008234:	f000 f848 	bl	80082c8 <_sbrk_r>
 8008238:	4580      	cmp	r8, r0
 800823a:	d13a      	bne.n	80082b2 <_malloc_r+0xd2>
 800823c:	6821      	ldr	r1, [r4, #0]
 800823e:	3503      	adds	r5, #3
 8008240:	1a6d      	subs	r5, r5, r1
 8008242:	f025 0503 	bic.w	r5, r5, #3
 8008246:	3508      	adds	r5, #8
 8008248:	2d0c      	cmp	r5, #12
 800824a:	bf38      	it	cc
 800824c:	250c      	movcc	r5, #12
 800824e:	4629      	mov	r1, r5
 8008250:	4638      	mov	r0, r7
 8008252:	f7ff ffa5 	bl	80081a0 <sbrk_aligned>
 8008256:	3001      	adds	r0, #1
 8008258:	d02b      	beq.n	80082b2 <_malloc_r+0xd2>
 800825a:	6823      	ldr	r3, [r4, #0]
 800825c:	442b      	add	r3, r5
 800825e:	6023      	str	r3, [r4, #0]
 8008260:	e00e      	b.n	8008280 <_malloc_r+0xa0>
 8008262:	6822      	ldr	r2, [r4, #0]
 8008264:	1b52      	subs	r2, r2, r5
 8008266:	d41e      	bmi.n	80082a6 <_malloc_r+0xc6>
 8008268:	2a0b      	cmp	r2, #11
 800826a:	d916      	bls.n	800829a <_malloc_r+0xba>
 800826c:	1961      	adds	r1, r4, r5
 800826e:	42a3      	cmp	r3, r4
 8008270:	6025      	str	r5, [r4, #0]
 8008272:	bf18      	it	ne
 8008274:	6059      	strne	r1, [r3, #4]
 8008276:	6863      	ldr	r3, [r4, #4]
 8008278:	bf08      	it	eq
 800827a:	6031      	streq	r1, [r6, #0]
 800827c:	5162      	str	r2, [r4, r5]
 800827e:	604b      	str	r3, [r1, #4]
 8008280:	4638      	mov	r0, r7
 8008282:	f104 060b 	add.w	r6, r4, #11
 8008286:	f000 f835 	bl	80082f4 <__malloc_unlock>
 800828a:	f026 0607 	bic.w	r6, r6, #7
 800828e:	1d23      	adds	r3, r4, #4
 8008290:	1af2      	subs	r2, r6, r3
 8008292:	d0b6      	beq.n	8008202 <_malloc_r+0x22>
 8008294:	1b9b      	subs	r3, r3, r6
 8008296:	50a3      	str	r3, [r4, r2]
 8008298:	e7b3      	b.n	8008202 <_malloc_r+0x22>
 800829a:	6862      	ldr	r2, [r4, #4]
 800829c:	42a3      	cmp	r3, r4
 800829e:	bf0c      	ite	eq
 80082a0:	6032      	streq	r2, [r6, #0]
 80082a2:	605a      	strne	r2, [r3, #4]
 80082a4:	e7ec      	b.n	8008280 <_malloc_r+0xa0>
 80082a6:	4623      	mov	r3, r4
 80082a8:	6864      	ldr	r4, [r4, #4]
 80082aa:	e7b2      	b.n	8008212 <_malloc_r+0x32>
 80082ac:	4634      	mov	r4, r6
 80082ae:	6876      	ldr	r6, [r6, #4]
 80082b0:	e7b9      	b.n	8008226 <_malloc_r+0x46>
 80082b2:	230c      	movs	r3, #12
 80082b4:	603b      	str	r3, [r7, #0]
 80082b6:	4638      	mov	r0, r7
 80082b8:	f000 f81c 	bl	80082f4 <__malloc_unlock>
 80082bc:	e7a1      	b.n	8008202 <_malloc_r+0x22>
 80082be:	6025      	str	r5, [r4, #0]
 80082c0:	e7de      	b.n	8008280 <_malloc_r+0xa0>
 80082c2:	bf00      	nop
 80082c4:	240003dc 	.word	0x240003dc

080082c8 <_sbrk_r>:
 80082c8:	b538      	push	{r3, r4, r5, lr}
 80082ca:	4d06      	ldr	r5, [pc, #24]	; (80082e4 <_sbrk_r+0x1c>)
 80082cc:	2300      	movs	r3, #0
 80082ce:	4604      	mov	r4, r0
 80082d0:	4608      	mov	r0, r1
 80082d2:	602b      	str	r3, [r5, #0]
 80082d4:	f7f9 fdc8 	bl	8001e68 <_sbrk>
 80082d8:	1c43      	adds	r3, r0, #1
 80082da:	d102      	bne.n	80082e2 <_sbrk_r+0x1a>
 80082dc:	682b      	ldr	r3, [r5, #0]
 80082de:	b103      	cbz	r3, 80082e2 <_sbrk_r+0x1a>
 80082e0:	6023      	str	r3, [r4, #0]
 80082e2:	bd38      	pop	{r3, r4, r5, pc}
 80082e4:	240003e4 	.word	0x240003e4

080082e8 <__malloc_lock>:
 80082e8:	4801      	ldr	r0, [pc, #4]	; (80082f0 <__malloc_lock+0x8>)
 80082ea:	f000 b809 	b.w	8008300 <__retarget_lock_acquire_recursive>
 80082ee:	bf00      	nop
 80082f0:	240003e8 	.word	0x240003e8

080082f4 <__malloc_unlock>:
 80082f4:	4801      	ldr	r0, [pc, #4]	; (80082fc <__malloc_unlock+0x8>)
 80082f6:	f000 b804 	b.w	8008302 <__retarget_lock_release_recursive>
 80082fa:	bf00      	nop
 80082fc:	240003e8 	.word	0x240003e8

08008300 <__retarget_lock_acquire_recursive>:
 8008300:	4770      	bx	lr

08008302 <__retarget_lock_release_recursive>:
 8008302:	4770      	bx	lr

08008304 <checkint>:
 8008304:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008308:	f240 33fe 	movw	r3, #1022	; 0x3fe
 800830c:	429a      	cmp	r2, r3
 800830e:	b570      	push	{r4, r5, r6, lr}
 8008310:	dd2a      	ble.n	8008368 <checkint+0x64>
 8008312:	f240 4333 	movw	r3, #1075	; 0x433
 8008316:	429a      	cmp	r2, r3
 8008318:	dc24      	bgt.n	8008364 <checkint+0x60>
 800831a:	1a9b      	subs	r3, r3, r2
 800831c:	f1a3 0620 	sub.w	r6, r3, #32
 8008320:	f04f 32ff 	mov.w	r2, #4294967295
 8008324:	fa02 f403 	lsl.w	r4, r2, r3
 8008328:	fa02 f606 	lsl.w	r6, r2, r6
 800832c:	f1c3 0520 	rsb	r5, r3, #32
 8008330:	fa22 f505 	lsr.w	r5, r2, r5
 8008334:	4334      	orrs	r4, r6
 8008336:	432c      	orrs	r4, r5
 8008338:	409a      	lsls	r2, r3
 800833a:	ea20 0202 	bic.w	r2, r0, r2
 800833e:	ea21 0404 	bic.w	r4, r1, r4
 8008342:	4322      	orrs	r2, r4
 8008344:	f1a3 0420 	sub.w	r4, r3, #32
 8008348:	f1c3 0220 	rsb	r2, r3, #32
 800834c:	d10c      	bne.n	8008368 <checkint+0x64>
 800834e:	40d8      	lsrs	r0, r3
 8008350:	fa01 f302 	lsl.w	r3, r1, r2
 8008354:	4318      	orrs	r0, r3
 8008356:	40e1      	lsrs	r1, r4
 8008358:	4308      	orrs	r0, r1
 800835a:	f000 0001 	and.w	r0, r0, #1
 800835e:	f1d0 0002 	rsbs	r0, r0, #2
 8008362:	bd70      	pop	{r4, r5, r6, pc}
 8008364:	2002      	movs	r0, #2
 8008366:	e7fc      	b.n	8008362 <checkint+0x5e>
 8008368:	2000      	movs	r0, #0
 800836a:	e7fa      	b.n	8008362 <checkint+0x5e>
 800836c:	0000      	movs	r0, r0
	...

08008370 <pow>:
 8008370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008374:	ee10 4a90 	vmov	r4, s1
 8008378:	ed2d 8b0a 	vpush	{d8-d12}
 800837c:	ea4f 5a14 	mov.w	sl, r4, lsr #20
 8008380:	ee11 7a90 	vmov	r7, s3
 8008384:	f10a 32ff 	add.w	r2, sl, #4294967295
 8008388:	f240 73fd 	movw	r3, #2045	; 0x7fd
 800838c:	429a      	cmp	r2, r3
 800838e:	ee10 6a10 	vmov	r6, s0
 8008392:	ee11 0a10 	vmov	r0, s2
 8008396:	b086      	sub	sp, #24
 8008398:	46d4      	mov	ip, sl
 800839a:	ea4f 5517 	mov.w	r5, r7, lsr #20
 800839e:	d806      	bhi.n	80083ae <pow+0x3e>
 80083a0:	f3c5 030a 	ubfx	r3, r5, #0, #11
 80083a4:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 80083a8:	2b7f      	cmp	r3, #127	; 0x7f
 80083aa:	f240 8156 	bls.w	800865a <pow+0x2ea>
 80083ae:	1802      	adds	r2, r0, r0
 80083b0:	eb47 0107 	adc.w	r1, r7, r7
 80083b4:	f06f 0e01 	mvn.w	lr, #1
 80083b8:	f112 39ff 	adds.w	r9, r2, #4294967295
 80083bc:	f141 38ff 	adc.w	r8, r1, #4294967295
 80083c0:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 80083c4:	45ce      	cmp	lr, r9
 80083c6:	eb73 0808 	sbcs.w	r8, r3, r8
 80083ca:	d23f      	bcs.n	800844c <pow+0xdc>
 80083cc:	ea52 0301 	orrs.w	r3, r2, r1
 80083d0:	f04f 0300 	mov.w	r3, #0
 80083d4:	d10c      	bne.n	80083f0 <pow+0x80>
 80083d6:	19b6      	adds	r6, r6, r6
 80083d8:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 80083dc:	4164      	adcs	r4, r4
 80083de:	42b3      	cmp	r3, r6
 80083e0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80083e4:	41a3      	sbcs	r3, r4
 80083e6:	f0c0 808c 	bcc.w	8008502 <pow+0x192>
 80083ea:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80083ee:	e028      	b.n	8008442 <pow+0xd2>
 80083f0:	4da3      	ldr	r5, [pc, #652]	; (8008680 <pow+0x310>)
 80083f2:	42ac      	cmp	r4, r5
 80083f4:	bf08      	it	eq
 80083f6:	429e      	cmpeq	r6, r3
 80083f8:	d107      	bne.n	800840a <pow+0x9a>
 80083fa:	1800      	adds	r0, r0, r0
 80083fc:	f487 2700 	eor.w	r7, r7, #524288	; 0x80000
 8008400:	417f      	adcs	r7, r7
 8008402:	4283      	cmp	r3, r0
 8008404:	4b9f      	ldr	r3, [pc, #636]	; (8008684 <pow+0x314>)
 8008406:	41bb      	sbcs	r3, r7
 8008408:	e7ed      	b.n	80083e6 <pow+0x76>
 800840a:	19b6      	adds	r6, r6, r6
 800840c:	489e      	ldr	r0, [pc, #632]	; (8008688 <pow+0x318>)
 800840e:	4164      	adcs	r4, r4
 8008410:	42b3      	cmp	r3, r6
 8008412:	eb70 0504 	sbcs.w	r5, r0, r4
 8008416:	d374      	bcc.n	8008502 <pow+0x192>
 8008418:	4281      	cmp	r1, r0
 800841a:	bf08      	it	eq
 800841c:	429a      	cmpeq	r2, r3
 800841e:	d170      	bne.n	8008502 <pow+0x192>
 8008420:	4a9a      	ldr	r2, [pc, #616]	; (800868c <pow+0x31c>)
 8008422:	4294      	cmp	r4, r2
 8008424:	bf08      	it	eq
 8008426:	429e      	cmpeq	r6, r3
 8008428:	d0df      	beq.n	80083ea <pow+0x7a>
 800842a:	4294      	cmp	r4, r2
 800842c:	ea6f 0707 	mvn.w	r7, r7
 8008430:	bf34      	ite	cc
 8008432:	2400      	movcc	r4, #0
 8008434:	2401      	movcs	r4, #1
 8008436:	0fff      	lsrs	r7, r7, #31
 8008438:	42bc      	cmp	r4, r7
 800843a:	f040 81d9 	bne.w	80087f0 <pow+0x480>
 800843e:	ee21 0b01 	vmul.f64	d0, d1, d1
 8008442:	b006      	add	sp, #24
 8008444:	ecbd 8b0a 	vpop	{d8-d12}
 8008448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800844c:	eb16 0806 	adds.w	r8, r6, r6
 8008450:	eb44 0904 	adc.w	r9, r4, r4
 8008454:	f118 31ff 	adds.w	r1, r8, #4294967295
 8008458:	f169 0200 	sbc.w	r2, r9, #0
 800845c:	458e      	cmp	lr, r1
 800845e:	4193      	sbcs	r3, r2
 8008460:	d223      	bcs.n	80084aa <pow+0x13a>
 8008462:	ee20 0b00 	vmul.f64	d0, d0, d0
 8008466:	2c00      	cmp	r4, #0
 8008468:	da12      	bge.n	8008490 <pow+0x120>
 800846a:	4639      	mov	r1, r7
 800846c:	f7ff ff4a 	bl	8008304 <checkint>
 8008470:	2801      	cmp	r0, #1
 8008472:	d10d      	bne.n	8008490 <pow+0x120>
 8008474:	eeb1 0b40 	vneg.f64	d0, d0
 8008478:	ea58 0309 	orrs.w	r3, r8, r9
 800847c:	d10a      	bne.n	8008494 <pow+0x124>
 800847e:	2f00      	cmp	r7, #0
 8008480:	dadf      	bge.n	8008442 <pow+0xd2>
 8008482:	b006      	add	sp, #24
 8008484:	ecbd 8b0a 	vpop	{d8-d12}
 8008488:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800848c:	f000 bf20 	b.w	80092d0 <__math_divzero>
 8008490:	2000      	movs	r0, #0
 8008492:	e7f1      	b.n	8008478 <pow+0x108>
 8008494:	2f00      	cmp	r7, #0
 8008496:	dad4      	bge.n	8008442 <pow+0xd2>
 8008498:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800849c:	ee86 7b00 	vdiv.f64	d7, d6, d0
 80084a0:	ed8d 7b00 	vstr	d7, [sp]
 80084a4:	ed9d 0b00 	vldr	d0, [sp]
 80084a8:	e7cb      	b.n	8008442 <pow+0xd2>
 80084aa:	2c00      	cmp	r4, #0
 80084ac:	da2c      	bge.n	8008508 <pow+0x198>
 80084ae:	4639      	mov	r1, r7
 80084b0:	f7ff ff28 	bl	8008304 <checkint>
 80084b4:	b930      	cbnz	r0, 80084c4 <pow+0x154>
 80084b6:	b006      	add	sp, #24
 80084b8:	ecbd 8b0a 	vpop	{d8-d12}
 80084bc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084c0:	f000 bf1e 	b.w	8009300 <__math_invalid>
 80084c4:	2801      	cmp	r0, #1
 80084c6:	bf14      	ite	ne
 80084c8:	2000      	movne	r0, #0
 80084ca:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 80084ce:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80084d2:	f3ca 0c0a 	ubfx	ip, sl, #0, #11
 80084d6:	f3c5 020a 	ubfx	r2, r5, #0, #11
 80084da:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 80084de:	2b7f      	cmp	r3, #127	; 0x7f
 80084e0:	d92d      	bls.n	800853e <pow+0x1ce>
 80084e2:	4b67      	ldr	r3, [pc, #412]	; (8008680 <pow+0x310>)
 80084e4:	2000      	movs	r0, #0
 80084e6:	429c      	cmp	r4, r3
 80084e8:	bf08      	it	eq
 80084ea:	4286      	cmpeq	r6, r0
 80084ec:	f43f af7d 	beq.w	80083ea <pow+0x7a>
 80084f0:	f240 31bd 	movw	r1, #957	; 0x3bd
 80084f4:	428a      	cmp	r2, r1
 80084f6:	d80c      	bhi.n	8008512 <pow+0x1a2>
 80084f8:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80084fc:	42b0      	cmp	r0, r6
 80084fe:	41a3      	sbcs	r3, r4
 8008500:	d204      	bcs.n	800850c <pow+0x19c>
 8008502:	ee31 0b00 	vadd.f64	d0, d1, d0
 8008506:	e79c      	b.n	8008442 <pow+0xd2>
 8008508:	2000      	movs	r0, #0
 800850a:	e7e4      	b.n	80084d6 <pow+0x166>
 800850c:	ee30 0b41 	vsub.f64	d0, d0, d1
 8008510:	e797      	b.n	8008442 <pow+0xd2>
 8008512:	2e01      	cmp	r6, #1
 8008514:	eb74 0303 	sbcs.w	r3, r4, r3
 8008518:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800851c:	bf34      	ite	cc
 800851e:	2301      	movcc	r3, #1
 8008520:	2300      	movcs	r3, #0
 8008522:	4295      	cmp	r5, r2
 8008524:	bf8c      	ite	hi
 8008526:	2500      	movhi	r5, #0
 8008528:	2501      	movls	r5, #1
 800852a:	42ab      	cmp	r3, r5
 800852c:	f000 809d 	beq.w	800866a <pow+0x2fa>
 8008530:	b006      	add	sp, #24
 8008532:	ecbd 8b0a 	vpop	{d8-d12}
 8008536:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800853a:	f000 bec1 	b.w	80092c0 <__math_oflow>
 800853e:	f1bc 0f00 	cmp.w	ip, #0
 8008542:	d10b      	bne.n	800855c <pow+0x1ec>
 8008544:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 8008678 <pow+0x308>
 8008548:	ee20 7b07 	vmul.f64	d7, d0, d7
 800854c:	ec53 2b17 	vmov	r2, r3, d7
 8008550:	ee17 6a10 	vmov	r6, s14
 8008554:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8008558:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 800855c:	4b4c      	ldr	r3, [pc, #304]	; (8008690 <pow+0x320>)
 800855e:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8008562:	4423      	add	r3, r4
 8008564:	f3c3 3246 	ubfx	r2, r3, #13, #7
 8008568:	1519      	asrs	r1, r3, #20
 800856a:	0d1b      	lsrs	r3, r3, #20
 800856c:	051b      	lsls	r3, r3, #20
 800856e:	eba4 0903 	sub.w	r9, r4, r3
 8008572:	4b48      	ldr	r3, [pc, #288]	; (8008694 <pow+0x324>)
 8008574:	ee04 1a10 	vmov	s8, r1
 8008578:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 800857c:	f1b6 0800 	subs.w	r8, r6, #0
 8008580:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 8008584:	ec49 8b15 	vmov	d5, r8, r9
 8008588:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 800858c:	eea5 6b07 	vfma.f64	d6, d5, d7
 8008590:	ed93 7b00 	vldr	d7, [r3]
 8008594:	ed93 5b02 	vldr	d5, [r3, #8]
 8008598:	eeb8 4bc4 	vcvt.f64.s32	d4, s8
 800859c:	eea4 2b07 	vfma.f64	d2, d4, d7
 80085a0:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 80085a4:	ee36 ab02 	vadd.f64	d10, d6, d2
 80085a8:	ee32 2b4a 	vsub.f64	d2, d2, d10
 80085ac:	eea4 7b05 	vfma.f64	d7, d4, d5
 80085b0:	ed93 5b04 	vldr	d5, [r3, #16]
 80085b4:	ee32 2b06 	vadd.f64	d2, d2, d6
 80085b8:	ee37 7b02 	vadd.f64	d7, d7, d2
 80085bc:	ee26 5b05 	vmul.f64	d5, d6, d5
 80085c0:	ed93 4b08 	vldr	d4, [r3, #32]
 80085c4:	ee26 0b05 	vmul.f64	d0, d6, d5
 80085c8:	eeb0 9b40 	vmov.f64	d9, d0
 80085cc:	ee95 9b06 	vfnms.f64	d9, d5, d6
 80085d0:	ed93 5b06 	vldr	d5, [r3, #24]
 80085d4:	ee3a 8b00 	vadd.f64	d8, d10, d0
 80085d8:	ee26 bb00 	vmul.f64	d11, d6, d0
 80085dc:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 80085e0:	eea6 5b04 	vfma.f64	d5, d6, d4
 80085e4:	ee3a ab48 	vsub.f64	d10, d10, d8
 80085e8:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 80085ec:	ee37 9b09 	vadd.f64	d9, d7, d9
 80085f0:	ee3a ab00 	vadd.f64	d10, d10, d0
 80085f4:	eea6 4b03 	vfma.f64	d4, d6, d3
 80085f8:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 80085fc:	ee39 ab0a 	vadd.f64	d10, d9, d10
 8008600:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 8008604:	eea6 3b0c 	vfma.f64	d3, d6, d12
 8008608:	eea0 4b03 	vfma.f64	d4, d0, d3
 800860c:	eea0 5b04 	vfma.f64	d5, d0, d4
 8008610:	eeab ab05 	vfma.f64	d10, d11, d5
 8008614:	ee38 6b0a 	vadd.f64	d6, d8, d10
 8008618:	ee21 7b06 	vmul.f64	d7, d1, d6
 800861c:	ee17 3a90 	vmov	r3, s15
 8008620:	eeb0 5b47 	vmov.f64	d5, d7
 8008624:	f3c3 560a 	ubfx	r6, r3, #20, #11
 8008628:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 800862c:	18b2      	adds	r2, r6, r2
 800862e:	2a3e      	cmp	r2, #62	; 0x3e
 8008630:	ee91 5b06 	vfnms.f64	d5, d1, d6
 8008634:	ee38 8b46 	vsub.f64	d8, d8, d6
 8008638:	ee38 ab0a 	vadd.f64	d10, d8, d10
 800863c:	eea1 5b0a 	vfma.f64	d5, d1, d10
 8008640:	d92b      	bls.n	800869a <pow+0x32a>
 8008642:	2a00      	cmp	r2, #0
 8008644:	da0b      	bge.n	800865e <pow+0x2ee>
 8008646:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800864a:	ee37 0b00 	vadd.f64	d0, d7, d0
 800864e:	2800      	cmp	r0, #0
 8008650:	f43f aef7 	beq.w	8008442 <pow+0xd2>
 8008654:	eeb1 0b40 	vneg.f64	d0, d0
 8008658:	e6f3      	b.n	8008442 <pow+0xd2>
 800865a:	2000      	movs	r0, #0
 800865c:	e77e      	b.n	800855c <pow+0x1ec>
 800865e:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 8008662:	d919      	bls.n	8008698 <pow+0x328>
 8008664:	2b00      	cmp	r3, #0
 8008666:	f6bf af63 	bge.w	8008530 <pow+0x1c0>
 800866a:	b006      	add	sp, #24
 800866c:	ecbd 8b0a 	vpop	{d8-d12}
 8008670:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008674:	f000 be1c 	b.w	80092b0 <__math_uflow>
 8008678:	00000000 	.word	0x00000000
 800867c:	43300000 	.word	0x43300000
 8008680:	3ff00000 	.word	0x3ff00000
 8008684:	fff00000 	.word	0xfff00000
 8008688:	ffe00000 	.word	0xffe00000
 800868c:	7fe00000 	.word	0x7fe00000
 8008690:	c0196aab 	.word	0xc0196aab
 8008694:	080095c0 	.word	0x080095c0
 8008698:	2600      	movs	r6, #0
 800869a:	495d      	ldr	r1, [pc, #372]	; (8008810 <pow+0x4a0>)
 800869c:	ed91 4b02 	vldr	d4, [r1, #8]
 80086a0:	ed91 3b00 	vldr	d3, [r1]
 80086a4:	eeb0 6b44 	vmov.f64	d6, d4
 80086a8:	eea7 6b03 	vfma.f64	d6, d7, d3
 80086ac:	ee16 5a10 	vmov	r5, s12
 80086b0:	ee36 6b44 	vsub.f64	d6, d6, d4
 80086b4:	ed91 4b04 	vldr	d4, [r1, #16]
 80086b8:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 80086bc:	eea6 7b04 	vfma.f64	d7, d6, d4
 80086c0:	eeb0 0b47 	vmov.f64	d0, d7
 80086c4:	ed91 7b06 	vldr	d7, [r1, #24]
 80086c8:	18dc      	adds	r4, r3, r3
 80086ca:	f104 030f 	add.w	r3, r4, #15
 80086ce:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 80086d2:	eea6 0b07 	vfma.f64	d0, d6, d7
 80086d6:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 80086da:	ee35 0b00 	vadd.f64	d0, d5, d0
 80086de:	ee20 6b00 	vmul.f64	d6, d0, d0
 80086e2:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 80086e6:	ed91 5b08 	vldr	d5, [r1, #32]
 80086ea:	ee30 7b07 	vadd.f64	d7, d0, d7
 80086ee:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 80086f2:	eea0 5b04 	vfma.f64	d5, d0, d4
 80086f6:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 80086fa:	eea6 7b05 	vfma.f64	d7, d6, d5
 80086fe:	ee26 6b06 	vmul.f64	d6, d6, d6
 8008702:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 8008706:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 800870a:	f8d2 e004 	ldr.w	lr, [r2, #4]
 800870e:	eea0 5b04 	vfma.f64	d5, d0, d4
 8008712:	1940      	adds	r0, r0, r5
 8008714:	2700      	movs	r7, #0
 8008716:	eb17 020c 	adds.w	r2, r7, ip
 800871a:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 800871e:	eea6 7b05 	vfma.f64	d7, d6, d5
 8008722:	2e00      	cmp	r6, #0
 8008724:	d15f      	bne.n	80087e6 <pow+0x476>
 8008726:	42bd      	cmp	r5, r7
 8008728:	db13      	blt.n	8008752 <pow+0x3e2>
 800872a:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 800872e:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 8008732:	4610      	mov	r0, r2
 8008734:	ec41 0b10 	vmov	d0, r0, r1
 8008738:	eea7 0b00 	vfma.f64	d0, d7, d0
 800873c:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80087f8 <pow+0x488>
 8008740:	ee20 0b07 	vmul.f64	d0, d0, d7
 8008744:	b006      	add	sp, #24
 8008746:	ecbd 8b0a 	vpop	{d8-d12}
 800874a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800874e:	f000 bdef 	b.w	8009330 <__math_check_oflow>
 8008752:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8008756:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 800875a:	4610      	mov	r0, r2
 800875c:	ec41 0b15 	vmov	d5, r0, r1
 8008760:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8008764:	ee27 6b05 	vmul.f64	d6, d7, d5
 8008768:	ee35 7b06 	vadd.f64	d7, d5, d6
 800876c:	eeb0 3bc7 	vabs.f64	d3, d7
 8008770:	eeb4 3bc4 	vcmpe.f64	d3, d4
 8008774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008778:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8008800 <pow+0x490>
 800877c:	d52a      	bpl.n	80087d4 <pow+0x464>
 800877e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8008782:	ee35 5b47 	vsub.f64	d5, d5, d7
 8008786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800878a:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 800878e:	ee35 6b06 	vadd.f64	d6, d5, d6
 8008792:	bf48      	it	mi
 8008794:	eeb0 4b43 	vmovmi.f64	d4, d3
 8008798:	ee37 3b04 	vadd.f64	d3, d7, d4
 800879c:	ee34 5b43 	vsub.f64	d5, d4, d3
 80087a0:	ee35 7b07 	vadd.f64	d7, d5, d7
 80087a4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80087a8:	ee37 7b03 	vadd.f64	d7, d7, d3
 80087ac:	ee37 7b44 	vsub.f64	d7, d7, d4
 80087b0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80087b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087b8:	d104      	bne.n	80087c4 <pow+0x454>
 80087ba:	4632      	mov	r2, r6
 80087bc:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 80087c0:	ec43 2b17 	vmov	d7, r2, r3
 80087c4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80087c8:	ed9d 6b02 	vldr	d6, [sp, #8]
 80087cc:	ee26 6b00 	vmul.f64	d6, d6, d0
 80087d0:	ed8d 6b04 	vstr	d6, [sp, #16]
 80087d4:	ee27 0b00 	vmul.f64	d0, d7, d0
 80087d8:	b006      	add	sp, #24
 80087da:	ecbd 8b0a 	vpop	{d8-d12}
 80087de:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087e2:	f000 bd9c 	b.w	800931e <__math_check_uflow>
 80087e6:	ec43 2b10 	vmov	d0, r2, r3
 80087ea:	eea7 0b00 	vfma.f64	d0, d7, d0
 80087ee:	e628      	b.n	8008442 <pow+0xd2>
 80087f0:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8008808 <pow+0x498>
 80087f4:	e625      	b.n	8008442 <pow+0xd2>
 80087f6:	bf00      	nop
 80087f8:	00000000 	.word	0x00000000
 80087fc:	7f000000 	.word	0x7f000000
 8008800:	00000000 	.word	0x00000000
 8008804:	00100000 	.word	0x00100000
	...
 8008810:	0800a790 	.word	0x0800a790

08008814 <round>:
 8008814:	ee10 1a90 	vmov	r1, s1
 8008818:	f3c1 500a 	ubfx	r0, r1, #20, #11
 800881c:	f2a0 32ff 	subw	r2, r0, #1023	; 0x3ff
 8008820:	2a13      	cmp	r2, #19
 8008822:	b510      	push	{r4, lr}
 8008824:	ee10 3a10 	vmov	r3, s0
 8008828:	dc19      	bgt.n	800885e <round+0x4a>
 800882a:	2a00      	cmp	r2, #0
 800882c:	da09      	bge.n	8008842 <round+0x2e>
 800882e:	3201      	adds	r2, #1
 8008830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008834:	d103      	bne.n	800883e <round+0x2a>
 8008836:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800883a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800883e:	2000      	movs	r0, #0
 8008840:	e026      	b.n	8008890 <round+0x7c>
 8008842:	4816      	ldr	r0, [pc, #88]	; (800889c <round+0x88>)
 8008844:	4110      	asrs	r0, r2
 8008846:	ea01 0400 	and.w	r4, r1, r0
 800884a:	4323      	orrs	r3, r4
 800884c:	d00e      	beq.n	800886c <round+0x58>
 800884e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008852:	fa43 f202 	asr.w	r2, r3, r2
 8008856:	4411      	add	r1, r2
 8008858:	ea21 0100 	bic.w	r1, r1, r0
 800885c:	e7ef      	b.n	800883e <round+0x2a>
 800885e:	2a33      	cmp	r2, #51	; 0x33
 8008860:	dd05      	ble.n	800886e <round+0x5a>
 8008862:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8008866:	d101      	bne.n	800886c <round+0x58>
 8008868:	ee30 0b00 	vadd.f64	d0, d0, d0
 800886c:	bd10      	pop	{r4, pc}
 800886e:	f2a0 4413 	subw	r4, r0, #1043	; 0x413
 8008872:	f04f 30ff 	mov.w	r0, #4294967295
 8008876:	40e0      	lsrs	r0, r4
 8008878:	4203      	tst	r3, r0
 800887a:	d0f7      	beq.n	800886c <round+0x58>
 800887c:	2401      	movs	r4, #1
 800887e:	f1c2 0233 	rsb	r2, r2, #51	; 0x33
 8008882:	fa04 f202 	lsl.w	r2, r4, r2
 8008886:	189b      	adds	r3, r3, r2
 8008888:	bf28      	it	cs
 800888a:	1909      	addcs	r1, r1, r4
 800888c:	ea23 0000 	bic.w	r0, r3, r0
 8008890:	460b      	mov	r3, r1
 8008892:	4602      	mov	r2, r0
 8008894:	ec43 2b10 	vmov	d0, r2, r3
 8008898:	e7e8      	b.n	800886c <round+0x58>
 800889a:	bf00      	nop
 800889c:	000fffff 	.word	0x000fffff

080088a0 <sin>:
 80088a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80088a2:	eeb0 7b40 	vmov.f64	d7, d0
 80088a6:	ee17 3a90 	vmov	r3, s15
 80088aa:	4a21      	ldr	r2, [pc, #132]	; (8008930 <sin+0x90>)
 80088ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80088b0:	4293      	cmp	r3, r2
 80088b2:	dc07      	bgt.n	80088c4 <sin+0x24>
 80088b4:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8008928 <sin+0x88>
 80088b8:	2000      	movs	r0, #0
 80088ba:	b005      	add	sp, #20
 80088bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80088c0:	f000 bc82 	b.w	80091c8 <__kernel_sin>
 80088c4:	4a1b      	ldr	r2, [pc, #108]	; (8008934 <sin+0x94>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	dd04      	ble.n	80088d4 <sin+0x34>
 80088ca:	ee30 0b40 	vsub.f64	d0, d0, d0
 80088ce:	b005      	add	sp, #20
 80088d0:	f85d fb04 	ldr.w	pc, [sp], #4
 80088d4:	4668      	mov	r0, sp
 80088d6:	f000 f82f 	bl	8008938 <__ieee754_rem_pio2>
 80088da:	f000 0003 	and.w	r0, r0, #3
 80088de:	2801      	cmp	r0, #1
 80088e0:	d00a      	beq.n	80088f8 <sin+0x58>
 80088e2:	2802      	cmp	r0, #2
 80088e4:	d00f      	beq.n	8008906 <sin+0x66>
 80088e6:	b9c0      	cbnz	r0, 800891a <sin+0x7a>
 80088e8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80088ec:	ed9d 0b00 	vldr	d0, [sp]
 80088f0:	2001      	movs	r0, #1
 80088f2:	f000 fc69 	bl	80091c8 <__kernel_sin>
 80088f6:	e7ea      	b.n	80088ce <sin+0x2e>
 80088f8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80088fc:	ed9d 0b00 	vldr	d0, [sp]
 8008900:	f000 f95e 	bl	8008bc0 <__kernel_cos>
 8008904:	e7e3      	b.n	80088ce <sin+0x2e>
 8008906:	ed9d 1b02 	vldr	d1, [sp, #8]
 800890a:	ed9d 0b00 	vldr	d0, [sp]
 800890e:	2001      	movs	r0, #1
 8008910:	f000 fc5a 	bl	80091c8 <__kernel_sin>
 8008914:	eeb1 0b40 	vneg.f64	d0, d0
 8008918:	e7d9      	b.n	80088ce <sin+0x2e>
 800891a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800891e:	ed9d 0b00 	vldr	d0, [sp]
 8008922:	f000 f94d 	bl	8008bc0 <__kernel_cos>
 8008926:	e7f5      	b.n	8008914 <sin+0x74>
	...
 8008930:	3fe921fb 	.word	0x3fe921fb
 8008934:	7fefffff 	.word	0x7fefffff

08008938 <__ieee754_rem_pio2>:
 8008938:	b570      	push	{r4, r5, r6, lr}
 800893a:	eeb0 7b40 	vmov.f64	d7, d0
 800893e:	ee17 5a90 	vmov	r5, s15
 8008942:	4b99      	ldr	r3, [pc, #612]	; (8008ba8 <__ieee754_rem_pio2+0x270>)
 8008944:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008948:	429e      	cmp	r6, r3
 800894a:	b088      	sub	sp, #32
 800894c:	4604      	mov	r4, r0
 800894e:	dc07      	bgt.n	8008960 <__ieee754_rem_pio2+0x28>
 8008950:	2200      	movs	r2, #0
 8008952:	2300      	movs	r3, #0
 8008954:	ed84 0b00 	vstr	d0, [r4]
 8008958:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800895c:	2000      	movs	r0, #0
 800895e:	e01b      	b.n	8008998 <__ieee754_rem_pio2+0x60>
 8008960:	4b92      	ldr	r3, [pc, #584]	; (8008bac <__ieee754_rem_pio2+0x274>)
 8008962:	429e      	cmp	r6, r3
 8008964:	dc3b      	bgt.n	80089de <__ieee754_rem_pio2+0xa6>
 8008966:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 800896a:	2d00      	cmp	r5, #0
 800896c:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 8008b68 <__ieee754_rem_pio2+0x230>
 8008970:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 8008974:	dd19      	ble.n	80089aa <__ieee754_rem_pio2+0x72>
 8008976:	ee30 7b46 	vsub.f64	d7, d0, d6
 800897a:	429e      	cmp	r6, r3
 800897c:	d00e      	beq.n	800899c <__ieee754_rem_pio2+0x64>
 800897e:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8008b70 <__ieee754_rem_pio2+0x238>
 8008982:	ee37 5b46 	vsub.f64	d5, d7, d6
 8008986:	ee37 7b45 	vsub.f64	d7, d7, d5
 800898a:	ed84 5b00 	vstr	d5, [r4]
 800898e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008992:	ed84 7b02 	vstr	d7, [r4, #8]
 8008996:	2001      	movs	r0, #1
 8008998:	b008      	add	sp, #32
 800899a:	bd70      	pop	{r4, r5, r6, pc}
 800899c:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8008b78 <__ieee754_rem_pio2+0x240>
 80089a0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80089a4:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8008b80 <__ieee754_rem_pio2+0x248>
 80089a8:	e7eb      	b.n	8008982 <__ieee754_rem_pio2+0x4a>
 80089aa:	429e      	cmp	r6, r3
 80089ac:	ee30 7b06 	vadd.f64	d7, d0, d6
 80089b0:	d00e      	beq.n	80089d0 <__ieee754_rem_pio2+0x98>
 80089b2:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 8008b70 <__ieee754_rem_pio2+0x238>
 80089b6:	ee37 5b06 	vadd.f64	d5, d7, d6
 80089ba:	ee37 7b45 	vsub.f64	d7, d7, d5
 80089be:	ed84 5b00 	vstr	d5, [r4]
 80089c2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80089c6:	f04f 30ff 	mov.w	r0, #4294967295
 80089ca:	ed84 7b02 	vstr	d7, [r4, #8]
 80089ce:	e7e3      	b.n	8008998 <__ieee754_rem_pio2+0x60>
 80089d0:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8008b78 <__ieee754_rem_pio2+0x240>
 80089d4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80089d8:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8008b80 <__ieee754_rem_pio2+0x248>
 80089dc:	e7eb      	b.n	80089b6 <__ieee754_rem_pio2+0x7e>
 80089de:	4b74      	ldr	r3, [pc, #464]	; (8008bb0 <__ieee754_rem_pio2+0x278>)
 80089e0:	429e      	cmp	r6, r3
 80089e2:	dc70      	bgt.n	8008ac6 <__ieee754_rem_pio2+0x18e>
 80089e4:	f000 fcb8 	bl	8009358 <fabs>
 80089e8:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80089ec:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8008b88 <__ieee754_rem_pio2+0x250>
 80089f0:	eea0 7b06 	vfma.f64	d7, d0, d6
 80089f4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80089f8:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80089fc:	ee17 0a90 	vmov	r0, s15
 8008a00:	eeb1 4b45 	vneg.f64	d4, d5
 8008a04:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8008b68 <__ieee754_rem_pio2+0x230>
 8008a08:	eea5 0b47 	vfms.f64	d0, d5, d7
 8008a0c:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8008b70 <__ieee754_rem_pio2+0x238>
 8008a10:	281f      	cmp	r0, #31
 8008a12:	ee25 7b07 	vmul.f64	d7, d5, d7
 8008a16:	ee30 6b47 	vsub.f64	d6, d0, d7
 8008a1a:	dc08      	bgt.n	8008a2e <__ieee754_rem_pio2+0xf6>
 8008a1c:	4b65      	ldr	r3, [pc, #404]	; (8008bb4 <__ieee754_rem_pio2+0x27c>)
 8008a1e:	1e42      	subs	r2, r0, #1
 8008a20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a24:	42b3      	cmp	r3, r6
 8008a26:	d002      	beq.n	8008a2e <__ieee754_rem_pio2+0xf6>
 8008a28:	ed84 6b00 	vstr	d6, [r4]
 8008a2c:	e026      	b.n	8008a7c <__ieee754_rem_pio2+0x144>
 8008a2e:	ee16 3a90 	vmov	r3, s13
 8008a32:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8008a36:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8008a3a:	2b10      	cmp	r3, #16
 8008a3c:	ea4f 5226 	mov.w	r2, r6, asr #20
 8008a40:	ddf2      	ble.n	8008a28 <__ieee754_rem_pio2+0xf0>
 8008a42:	eeb0 6b40 	vmov.f64	d6, d0
 8008a46:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 8008b78 <__ieee754_rem_pio2+0x240>
 8008a4a:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 8008b80 <__ieee754_rem_pio2+0x248>
 8008a4e:	eea4 6b07 	vfma.f64	d6, d4, d7
 8008a52:	ee30 0b46 	vsub.f64	d0, d0, d6
 8008a56:	eea4 0b07 	vfma.f64	d0, d4, d7
 8008a5a:	eeb0 7b40 	vmov.f64	d7, d0
 8008a5e:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8008a62:	ee36 3b47 	vsub.f64	d3, d6, d7
 8008a66:	ee13 3a90 	vmov	r3, s7
 8008a6a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8008a6e:	1ad3      	subs	r3, r2, r3
 8008a70:	2b31      	cmp	r3, #49	; 0x31
 8008a72:	dc17      	bgt.n	8008aa4 <__ieee754_rem_pio2+0x16c>
 8008a74:	eeb0 0b46 	vmov.f64	d0, d6
 8008a78:	ed84 3b00 	vstr	d3, [r4]
 8008a7c:	ed94 6b00 	vldr	d6, [r4]
 8008a80:	2d00      	cmp	r5, #0
 8008a82:	ee30 0b46 	vsub.f64	d0, d0, d6
 8008a86:	ee30 0b47 	vsub.f64	d0, d0, d7
 8008a8a:	ed84 0b02 	vstr	d0, [r4, #8]
 8008a8e:	da83      	bge.n	8008998 <__ieee754_rem_pio2+0x60>
 8008a90:	eeb1 6b46 	vneg.f64	d6, d6
 8008a94:	eeb1 0b40 	vneg.f64	d0, d0
 8008a98:	ed84 6b00 	vstr	d6, [r4]
 8008a9c:	ed84 0b02 	vstr	d0, [r4, #8]
 8008aa0:	4240      	negs	r0, r0
 8008aa2:	e779      	b.n	8008998 <__ieee754_rem_pio2+0x60>
 8008aa4:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 8008b90 <__ieee754_rem_pio2+0x258>
 8008aa8:	eeb0 0b46 	vmov.f64	d0, d6
 8008aac:	eea4 0b03 	vfma.f64	d0, d4, d3
 8008ab0:	ee36 7b40 	vsub.f64	d7, d6, d0
 8008ab4:	ed9f 6b38 	vldr	d6, [pc, #224]	; 8008b98 <__ieee754_rem_pio2+0x260>
 8008ab8:	eea4 7b03 	vfma.f64	d7, d4, d3
 8008abc:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8008ac0:	ee30 6b47 	vsub.f64	d6, d0, d7
 8008ac4:	e7b0      	b.n	8008a28 <__ieee754_rem_pio2+0xf0>
 8008ac6:	4b3c      	ldr	r3, [pc, #240]	; (8008bb8 <__ieee754_rem_pio2+0x280>)
 8008ac8:	429e      	cmp	r6, r3
 8008aca:	dd06      	ble.n	8008ada <__ieee754_rem_pio2+0x1a2>
 8008acc:	ee30 7b40 	vsub.f64	d7, d0, d0
 8008ad0:	ed80 7b02 	vstr	d7, [r0, #8]
 8008ad4:	ed80 7b00 	vstr	d7, [r0]
 8008ad8:	e740      	b.n	800895c <__ieee754_rem_pio2+0x24>
 8008ada:	1532      	asrs	r2, r6, #20
 8008adc:	ee10 0a10 	vmov	r0, s0
 8008ae0:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8008ae4:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8008ae8:	ec41 0b17 	vmov	d7, r0, r1
 8008aec:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8008af0:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 8008ba0 <__ieee754_rem_pio2+0x268>
 8008af4:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8008af8:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008afc:	ed8d 6b02 	vstr	d6, [sp, #8]
 8008b00:	ee27 7b05 	vmul.f64	d7, d7, d5
 8008b04:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8008b08:	a902      	add	r1, sp, #8
 8008b0a:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8008b0e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008b12:	ed8d 6b04 	vstr	d6, [sp, #16]
 8008b16:	ee27 7b05 	vmul.f64	d7, d7, d5
 8008b1a:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008b1e:	2603      	movs	r6, #3
 8008b20:	4608      	mov	r0, r1
 8008b22:	ed91 7b04 	vldr	d7, [r1, #16]
 8008b26:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008b2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b2e:	4633      	mov	r3, r6
 8008b30:	f1a1 0108 	sub.w	r1, r1, #8
 8008b34:	f106 36ff 	add.w	r6, r6, #4294967295
 8008b38:	d0f3      	beq.n	8008b22 <__ieee754_rem_pio2+0x1ea>
 8008b3a:	4920      	ldr	r1, [pc, #128]	; (8008bbc <__ieee754_rem_pio2+0x284>)
 8008b3c:	9101      	str	r1, [sp, #4]
 8008b3e:	2102      	movs	r1, #2
 8008b40:	9100      	str	r1, [sp, #0]
 8008b42:	4621      	mov	r1, r4
 8008b44:	f000 f8a8 	bl	8008c98 <__kernel_rem_pio2>
 8008b48:	2d00      	cmp	r5, #0
 8008b4a:	f6bf af25 	bge.w	8008998 <__ieee754_rem_pio2+0x60>
 8008b4e:	ed94 7b00 	vldr	d7, [r4]
 8008b52:	eeb1 7b47 	vneg.f64	d7, d7
 8008b56:	ed84 7b00 	vstr	d7, [r4]
 8008b5a:	ed94 7b02 	vldr	d7, [r4, #8]
 8008b5e:	eeb1 7b47 	vneg.f64	d7, d7
 8008b62:	ed84 7b02 	vstr	d7, [r4, #8]
 8008b66:	e79b      	b.n	8008aa0 <__ieee754_rem_pio2+0x168>
 8008b68:	54400000 	.word	0x54400000
 8008b6c:	3ff921fb 	.word	0x3ff921fb
 8008b70:	1a626331 	.word	0x1a626331
 8008b74:	3dd0b461 	.word	0x3dd0b461
 8008b78:	1a600000 	.word	0x1a600000
 8008b7c:	3dd0b461 	.word	0x3dd0b461
 8008b80:	2e037073 	.word	0x2e037073
 8008b84:	3ba3198a 	.word	0x3ba3198a
 8008b88:	6dc9c883 	.word	0x6dc9c883
 8008b8c:	3fe45f30 	.word	0x3fe45f30
 8008b90:	2e000000 	.word	0x2e000000
 8008b94:	3ba3198a 	.word	0x3ba3198a
 8008b98:	252049c1 	.word	0x252049c1
 8008b9c:	397b839a 	.word	0x397b839a
 8008ba0:	00000000 	.word	0x00000000
 8008ba4:	41700000 	.word	0x41700000
 8008ba8:	3fe921fb 	.word	0x3fe921fb
 8008bac:	4002d97b 	.word	0x4002d97b
 8008bb0:	413921fb 	.word	0x413921fb
 8008bb4:	0800a608 	.word	0x0800a608
 8008bb8:	7fefffff 	.word	0x7fefffff
 8008bbc:	0800a688 	.word	0x0800a688

08008bc0 <__kernel_cos>:
 8008bc0:	ee10 1a90 	vmov	r1, s1
 8008bc4:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8008bc8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008bcc:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8008bd0:	da05      	bge.n	8008bde <__kernel_cos+0x1e>
 8008bd2:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8008bd6:	ee17 3a90 	vmov	r3, s15
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d03d      	beq.n	8008c5a <__kernel_cos+0x9a>
 8008bde:	ee20 3b00 	vmul.f64	d3, d0, d0
 8008be2:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8008c60 <__kernel_cos+0xa0>
 8008be6:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8008c68 <__kernel_cos+0xa8>
 8008bea:	eea3 6b07 	vfma.f64	d6, d3, d7
 8008bee:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8008c70 <__kernel_cos+0xb0>
 8008bf2:	eea6 7b03 	vfma.f64	d7, d6, d3
 8008bf6:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8008c78 <__kernel_cos+0xb8>
 8008bfa:	eea7 6b03 	vfma.f64	d6, d7, d3
 8008bfe:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8008c80 <__kernel_cos+0xc0>
 8008c02:	4b23      	ldr	r3, [pc, #140]	; (8008c90 <__kernel_cos+0xd0>)
 8008c04:	eea6 7b03 	vfma.f64	d7, d6, d3
 8008c08:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8008c88 <__kernel_cos+0xc8>
 8008c0c:	4299      	cmp	r1, r3
 8008c0e:	eea7 6b03 	vfma.f64	d6, d7, d3
 8008c12:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8008c16:	ee26 5b03 	vmul.f64	d5, d6, d3
 8008c1a:	ee23 7b07 	vmul.f64	d7, d3, d7
 8008c1e:	ee21 6b40 	vnmul.f64	d6, d1, d0
 8008c22:	eea3 6b05 	vfma.f64	d6, d3, d5
 8008c26:	dc04      	bgt.n	8008c32 <__kernel_cos+0x72>
 8008c28:	ee37 6b46 	vsub.f64	d6, d7, d6
 8008c2c:	ee34 0b46 	vsub.f64	d0, d4, d6
 8008c30:	4770      	bx	lr
 8008c32:	4b18      	ldr	r3, [pc, #96]	; (8008c94 <__kernel_cos+0xd4>)
 8008c34:	4299      	cmp	r1, r3
 8008c36:	dc0d      	bgt.n	8008c54 <__kernel_cos+0x94>
 8008c38:	2200      	movs	r2, #0
 8008c3a:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 8008c3e:	ec43 2b15 	vmov	d5, r2, r3
 8008c42:	ee34 0b45 	vsub.f64	d0, d4, d5
 8008c46:	ee37 7b45 	vsub.f64	d7, d7, d5
 8008c4a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008c4e:	ee30 0b47 	vsub.f64	d0, d0, d7
 8008c52:	4770      	bx	lr
 8008c54:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8008c58:	e7f3      	b.n	8008c42 <__kernel_cos+0x82>
 8008c5a:	eeb0 0b44 	vmov.f64	d0, d4
 8008c5e:	4770      	bx	lr
 8008c60:	be8838d4 	.word	0xbe8838d4
 8008c64:	bda8fae9 	.word	0xbda8fae9
 8008c68:	bdb4b1c4 	.word	0xbdb4b1c4
 8008c6c:	3e21ee9e 	.word	0x3e21ee9e
 8008c70:	809c52ad 	.word	0x809c52ad
 8008c74:	be927e4f 	.word	0xbe927e4f
 8008c78:	19cb1590 	.word	0x19cb1590
 8008c7c:	3efa01a0 	.word	0x3efa01a0
 8008c80:	16c15177 	.word	0x16c15177
 8008c84:	bf56c16c 	.word	0xbf56c16c
 8008c88:	5555554c 	.word	0x5555554c
 8008c8c:	3fa55555 	.word	0x3fa55555
 8008c90:	3fd33332 	.word	0x3fd33332
 8008c94:	3fe90000 	.word	0x3fe90000

08008c98 <__kernel_rem_pio2>:
 8008c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c9c:	ed2d 8b06 	vpush	{d8-d10}
 8008ca0:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 8008ca4:	460f      	mov	r7, r1
 8008ca6:	9002      	str	r0, [sp, #8]
 8008ca8:	49c5      	ldr	r1, [pc, #788]	; (8008fc0 <__kernel_rem_pio2+0x328>)
 8008caa:	98a2      	ldr	r0, [sp, #648]	; 0x288
 8008cac:	f8dd e28c 	ldr.w	lr, [sp, #652]	; 0x28c
 8008cb0:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 8008cb4:	9301      	str	r3, [sp, #4]
 8008cb6:	f112 0f14 	cmn.w	r2, #20
 8008cba:	bfa8      	it	ge
 8008cbc:	2018      	movge	r0, #24
 8008cbe:	f103 31ff 	add.w	r1, r3, #4294967295
 8008cc2:	bfb8      	it	lt
 8008cc4:	2000      	movlt	r0, #0
 8008cc6:	f06f 0417 	mvn.w	r4, #23
 8008cca:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 8008fa8 <__kernel_rem_pio2+0x310>
 8008cce:	bfa4      	itt	ge
 8008cd0:	f1a2 0a03 	subge.w	sl, r2, #3
 8008cd4:	fb9a f0f0 	sdivge	r0, sl, r0
 8008cd8:	fb00 4404 	mla	r4, r0, r4, r4
 8008cdc:	1a46      	subs	r6, r0, r1
 8008cde:	4414      	add	r4, r2
 8008ce0:	eb09 0c01 	add.w	ip, r9, r1
 8008ce4:	ad1a      	add	r5, sp, #104	; 0x68
 8008ce6:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
 8008cea:	2200      	movs	r2, #0
 8008cec:	4562      	cmp	r2, ip
 8008cee:	dd10      	ble.n	8008d12 <__kernel_rem_pio2+0x7a>
 8008cf0:	9a01      	ldr	r2, [sp, #4]
 8008cf2:	ab1a      	add	r3, sp, #104	; 0x68
 8008cf4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8008cf8:	f50d 7ad4 	add.w	sl, sp, #424	; 0x1a8
 8008cfc:	f04f 0c00 	mov.w	ip, #0
 8008d00:	45cc      	cmp	ip, r9
 8008d02:	dc26      	bgt.n	8008d52 <__kernel_rem_pio2+0xba>
 8008d04:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 8008fa8 <__kernel_rem_pio2+0x310>
 8008d08:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8008d0c:	4616      	mov	r6, r2
 8008d0e:	2500      	movs	r5, #0
 8008d10:	e015      	b.n	8008d3e <__kernel_rem_pio2+0xa6>
 8008d12:	42d6      	cmn	r6, r2
 8008d14:	d409      	bmi.n	8008d2a <__kernel_rem_pio2+0x92>
 8008d16:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
 8008d1a:	ee07 3a90 	vmov	s15, r3
 8008d1e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008d22:	eca5 7b02 	vstmia	r5!, {d7}
 8008d26:	3201      	adds	r2, #1
 8008d28:	e7e0      	b.n	8008cec <__kernel_rem_pio2+0x54>
 8008d2a:	eeb0 7b46 	vmov.f64	d7, d6
 8008d2e:	e7f8      	b.n	8008d22 <__kernel_rem_pio2+0x8a>
 8008d30:	ecb8 5b02 	vldmia	r8!, {d5}
 8008d34:	ed96 6b00 	vldr	d6, [r6]
 8008d38:	3501      	adds	r5, #1
 8008d3a:	eea5 7b06 	vfma.f64	d7, d5, d6
 8008d3e:	428d      	cmp	r5, r1
 8008d40:	f1a6 0608 	sub.w	r6, r6, #8
 8008d44:	ddf4      	ble.n	8008d30 <__kernel_rem_pio2+0x98>
 8008d46:	ecaa 7b02 	vstmia	sl!, {d7}
 8008d4a:	f10c 0c01 	add.w	ip, ip, #1
 8008d4e:	3208      	adds	r2, #8
 8008d50:	e7d6      	b.n	8008d00 <__kernel_rem_pio2+0x68>
 8008d52:	ab06      	add	r3, sp, #24
 8008d54:	ed9f 9b96 	vldr	d9, [pc, #600]	; 8008fb0 <__kernel_rem_pio2+0x318>
 8008d58:	ed9f ab97 	vldr	d10, [pc, #604]	; 8008fb8 <__kernel_rem_pio2+0x320>
 8008d5c:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8008d60:	9303      	str	r3, [sp, #12]
 8008d62:	eb0e 0a80 	add.w	sl, lr, r0, lsl #2
 8008d66:	464d      	mov	r5, r9
 8008d68:	00eb      	lsls	r3, r5, #3
 8008d6a:	9304      	str	r3, [sp, #16]
 8008d6c:	ab92      	add	r3, sp, #584	; 0x248
 8008d6e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8008d72:	f10d 0b18 	add.w	fp, sp, #24
 8008d76:	ab6a      	add	r3, sp, #424	; 0x1a8
 8008d78:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 8008d7c:	465e      	mov	r6, fp
 8008d7e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8008d82:	4628      	mov	r0, r5
 8008d84:	2800      	cmp	r0, #0
 8008d86:	f1a2 0208 	sub.w	r2, r2, #8
 8008d8a:	dc4c      	bgt.n	8008e26 <__kernel_rem_pio2+0x18e>
 8008d8c:	4620      	mov	r0, r4
 8008d8e:	9105      	str	r1, [sp, #20]
 8008d90:	f000 fb62 	bl	8009458 <scalbn>
 8008d94:	eeb0 8b40 	vmov.f64	d8, d0
 8008d98:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 8008d9c:	ee28 0b00 	vmul.f64	d0, d8, d0
 8008da0:	f000 fae6 	bl	8009370 <floor>
 8008da4:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8008da8:	eea0 8b47 	vfms.f64	d8, d0, d7
 8008dac:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8008db0:	2c00      	cmp	r4, #0
 8008db2:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 8008db6:	ee17 8a90 	vmov	r8, s15
 8008dba:	ee38 8b40 	vsub.f64	d8, d8, d0
 8008dbe:	9905      	ldr	r1, [sp, #20]
 8008dc0:	dd43      	ble.n	8008e4a <__kernel_rem_pio2+0x1b2>
 8008dc2:	1e68      	subs	r0, r5, #1
 8008dc4:	ab06      	add	r3, sp, #24
 8008dc6:	f1c4 0c18 	rsb	ip, r4, #24
 8008dca:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8008dce:	fa46 f20c 	asr.w	r2, r6, ip
 8008dd2:	4490      	add	r8, r2
 8008dd4:	fa02 f20c 	lsl.w	r2, r2, ip
 8008dd8:	1ab6      	subs	r6, r6, r2
 8008dda:	f1c4 0217 	rsb	r2, r4, #23
 8008dde:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 8008de2:	4116      	asrs	r6, r2
 8008de4:	2e00      	cmp	r6, #0
 8008de6:	dd3f      	ble.n	8008e68 <__kernel_rem_pio2+0x1d0>
 8008de8:	f04f 0c00 	mov.w	ip, #0
 8008dec:	f108 0801 	add.w	r8, r8, #1
 8008df0:	4660      	mov	r0, ip
 8008df2:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 8008df6:	4565      	cmp	r5, ip
 8008df8:	dc6e      	bgt.n	8008ed8 <__kernel_rem_pio2+0x240>
 8008dfa:	2c00      	cmp	r4, #0
 8008dfc:	dd04      	ble.n	8008e08 <__kernel_rem_pio2+0x170>
 8008dfe:	2c01      	cmp	r4, #1
 8008e00:	d07f      	beq.n	8008f02 <__kernel_rem_pio2+0x26a>
 8008e02:	2c02      	cmp	r4, #2
 8008e04:	f000 8087 	beq.w	8008f16 <__kernel_rem_pio2+0x27e>
 8008e08:	2e02      	cmp	r6, #2
 8008e0a:	d12d      	bne.n	8008e68 <__kernel_rem_pio2+0x1d0>
 8008e0c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8008e10:	ee30 8b48 	vsub.f64	d8, d0, d8
 8008e14:	b340      	cbz	r0, 8008e68 <__kernel_rem_pio2+0x1d0>
 8008e16:	4620      	mov	r0, r4
 8008e18:	9105      	str	r1, [sp, #20]
 8008e1a:	f000 fb1d 	bl	8009458 <scalbn>
 8008e1e:	9905      	ldr	r1, [sp, #20]
 8008e20:	ee38 8b40 	vsub.f64	d8, d8, d0
 8008e24:	e020      	b.n	8008e68 <__kernel_rem_pio2+0x1d0>
 8008e26:	ee20 7b09 	vmul.f64	d7, d0, d9
 8008e2a:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8008e2e:	3801      	subs	r0, #1
 8008e30:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8008e34:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8008e38:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8008e3c:	eca6 0a01 	vstmia	r6!, {s0}
 8008e40:	ed92 0b00 	vldr	d0, [r2]
 8008e44:	ee37 0b00 	vadd.f64	d0, d7, d0
 8008e48:	e79c      	b.n	8008d84 <__kernel_rem_pio2+0xec>
 8008e4a:	d105      	bne.n	8008e58 <__kernel_rem_pio2+0x1c0>
 8008e4c:	1e6a      	subs	r2, r5, #1
 8008e4e:	ab06      	add	r3, sp, #24
 8008e50:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8008e54:	15f6      	asrs	r6, r6, #23
 8008e56:	e7c5      	b.n	8008de4 <__kernel_rem_pio2+0x14c>
 8008e58:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8008e5c:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8008e60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e64:	da36      	bge.n	8008ed4 <__kernel_rem_pio2+0x23c>
 8008e66:	2600      	movs	r6, #0
 8008e68:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008e6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e70:	f040 80aa 	bne.w	8008fc8 <__kernel_rem_pio2+0x330>
 8008e74:	f105 3bff 	add.w	fp, r5, #4294967295
 8008e78:	4658      	mov	r0, fp
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	4548      	cmp	r0, r9
 8008e7e:	da52      	bge.n	8008f26 <__kernel_rem_pio2+0x28e>
 8008e80:	2a00      	cmp	r2, #0
 8008e82:	f000 8081 	beq.w	8008f88 <__kernel_rem_pio2+0x2f0>
 8008e86:	ab06      	add	r3, sp, #24
 8008e88:	3c18      	subs	r4, #24
 8008e8a:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	f000 8087 	beq.w	8008fa2 <__kernel_rem_pio2+0x30a>
 8008e94:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8008e98:	4620      	mov	r0, r4
 8008e9a:	f000 fadd 	bl	8009458 <scalbn>
 8008e9e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008ea2:	ed9f 6b43 	vldr	d6, [pc, #268]	; 8008fb0 <__kernel_rem_pio2+0x318>
 8008ea6:	a96a      	add	r1, sp, #424	; 0x1a8
 8008ea8:	f103 0208 	add.w	r2, r3, #8
 8008eac:	1888      	adds	r0, r1, r2
 8008eae:	4659      	mov	r1, fp
 8008eb0:	2900      	cmp	r1, #0
 8008eb2:	f280 80b7 	bge.w	8009024 <__kernel_rem_pio2+0x38c>
 8008eb6:	4659      	mov	r1, fp
 8008eb8:	2900      	cmp	r1, #0
 8008eba:	f2c0 80d5 	blt.w	8009068 <__kernel_rem_pio2+0x3d0>
 8008ebe:	a86a      	add	r0, sp, #424	; 0x1a8
 8008ec0:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
 8008ec4:	ed9f 7b38 	vldr	d7, [pc, #224]	; 8008fa8 <__kernel_rem_pio2+0x310>
 8008ec8:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 8008fc4 <__kernel_rem_pio2+0x32c>
 8008ecc:	2400      	movs	r4, #0
 8008ece:	ebab 0001 	sub.w	r0, fp, r1
 8008ed2:	e0be      	b.n	8009052 <__kernel_rem_pio2+0x3ba>
 8008ed4:	2602      	movs	r6, #2
 8008ed6:	e787      	b.n	8008de8 <__kernel_rem_pio2+0x150>
 8008ed8:	f8db 2000 	ldr.w	r2, [fp]
 8008edc:	b958      	cbnz	r0, 8008ef6 <__kernel_rem_pio2+0x25e>
 8008ede:	b122      	cbz	r2, 8008eea <__kernel_rem_pio2+0x252>
 8008ee0:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 8008ee4:	f8cb 2000 	str.w	r2, [fp]
 8008ee8:	2201      	movs	r2, #1
 8008eea:	f10c 0c01 	add.w	ip, ip, #1
 8008eee:	f10b 0b04 	add.w	fp, fp, #4
 8008ef2:	4610      	mov	r0, r2
 8008ef4:	e77f      	b.n	8008df6 <__kernel_rem_pio2+0x15e>
 8008ef6:	ebae 0202 	sub.w	r2, lr, r2
 8008efa:	f8cb 2000 	str.w	r2, [fp]
 8008efe:	4602      	mov	r2, r0
 8008f00:	e7f3      	b.n	8008eea <__kernel_rem_pio2+0x252>
 8008f02:	f105 3cff 	add.w	ip, r5, #4294967295
 8008f06:	ab06      	add	r3, sp, #24
 8008f08:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8008f0c:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8008f10:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 8008f14:	e778      	b.n	8008e08 <__kernel_rem_pio2+0x170>
 8008f16:	f105 3cff 	add.w	ip, r5, #4294967295
 8008f1a:	ab06      	add	r3, sp, #24
 8008f1c:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8008f20:	f3c2 0215 	ubfx	r2, r2, #0, #22
 8008f24:	e7f4      	b.n	8008f10 <__kernel_rem_pio2+0x278>
 8008f26:	ab06      	add	r3, sp, #24
 8008f28:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008f2c:	3801      	subs	r0, #1
 8008f2e:	431a      	orrs	r2, r3
 8008f30:	e7a4      	b.n	8008e7c <__kernel_rem_pio2+0x1e4>
 8008f32:	f10c 0c01 	add.w	ip, ip, #1
 8008f36:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 8008f3a:	2800      	cmp	r0, #0
 8008f3c:	d0f9      	beq.n	8008f32 <__kernel_rem_pio2+0x29a>
 8008f3e:	9b04      	ldr	r3, [sp, #16]
 8008f40:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8008f44:	eb0d 0203 	add.w	r2, sp, r3
 8008f48:	9b01      	ldr	r3, [sp, #4]
 8008f4a:	18e8      	adds	r0, r5, r3
 8008f4c:	ab1a      	add	r3, sp, #104	; 0x68
 8008f4e:	1c6e      	adds	r6, r5, #1
 8008f50:	3a98      	subs	r2, #152	; 0x98
 8008f52:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8008f56:	4465      	add	r5, ip
 8008f58:	42b5      	cmp	r5, r6
 8008f5a:	f6ff af05 	blt.w	8008d68 <__kernel_rem_pio2+0xd0>
 8008f5e:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
 8008f62:	f8dd e008 	ldr.w	lr, [sp, #8]
 8008f66:	ee07 3a90 	vmov	s15, r3
 8008f6a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008f6e:	f04f 0c00 	mov.w	ip, #0
 8008f72:	eca0 7b02 	vstmia	r0!, {d7}
 8008f76:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8008fa8 <__kernel_rem_pio2+0x310>
 8008f7a:	4680      	mov	r8, r0
 8008f7c:	458c      	cmp	ip, r1
 8008f7e:	dd07      	ble.n	8008f90 <__kernel_rem_pio2+0x2f8>
 8008f80:	eca2 7b02 	vstmia	r2!, {d7}
 8008f84:	3601      	adds	r6, #1
 8008f86:	e7e7      	b.n	8008f58 <__kernel_rem_pio2+0x2c0>
 8008f88:	9a03      	ldr	r2, [sp, #12]
 8008f8a:	f04f 0c01 	mov.w	ip, #1
 8008f8e:	e7d2      	b.n	8008f36 <__kernel_rem_pio2+0x29e>
 8008f90:	ecbe 5b02 	vldmia	lr!, {d5}
 8008f94:	ed38 6b02 	vldmdb	r8!, {d6}
 8008f98:	f10c 0c01 	add.w	ip, ip, #1
 8008f9c:	eea5 7b06 	vfma.f64	d7, d5, d6
 8008fa0:	e7ec      	b.n	8008f7c <__kernel_rem_pio2+0x2e4>
 8008fa2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008fa6:	e76e      	b.n	8008e86 <__kernel_rem_pio2+0x1ee>
	...
 8008fb4:	3e700000 	.word	0x3e700000
 8008fb8:	00000000 	.word	0x00000000
 8008fbc:	41700000 	.word	0x41700000
 8008fc0:	0800b040 	.word	0x0800b040
 8008fc4:	0800b000 	.word	0x0800b000
 8008fc8:	4260      	negs	r0, r4
 8008fca:	eeb0 0b48 	vmov.f64	d0, d8
 8008fce:	f000 fa43 	bl	8009458 <scalbn>
 8008fd2:	ed9f 6b77 	vldr	d6, [pc, #476]	; 80091b0 <__kernel_rem_pio2+0x518>
 8008fd6:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8008fda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fde:	db18      	blt.n	8009012 <__kernel_rem_pio2+0x37a>
 8008fe0:	ed9f 7b75 	vldr	d7, [pc, #468]	; 80091b8 <__kernel_rem_pio2+0x520>
 8008fe4:	ee20 7b07 	vmul.f64	d7, d0, d7
 8008fe8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8008fec:	aa06      	add	r2, sp, #24
 8008fee:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8008ff2:	eea5 0b46 	vfms.f64	d0, d5, d6
 8008ff6:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8008ffa:	f105 0b01 	add.w	fp, r5, #1
 8008ffe:	ee10 3a10 	vmov	r3, s0
 8009002:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8009006:	ee17 3a10 	vmov	r3, s14
 800900a:	3418      	adds	r4, #24
 800900c:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 8009010:	e740      	b.n	8008e94 <__kernel_rem_pio2+0x1fc>
 8009012:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8009016:	aa06      	add	r2, sp, #24
 8009018:	ee10 3a10 	vmov	r3, s0
 800901c:	46ab      	mov	fp, r5
 800901e:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8009022:	e737      	b.n	8008e94 <__kernel_rem_pio2+0x1fc>
 8009024:	ac06      	add	r4, sp, #24
 8009026:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
 800902a:	9401      	str	r4, [sp, #4]
 800902c:	ee07 4a90 	vmov	s15, r4
 8009030:	3901      	subs	r1, #1
 8009032:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009036:	ee27 7b00 	vmul.f64	d7, d7, d0
 800903a:	ee20 0b06 	vmul.f64	d0, d0, d6
 800903e:	ed20 7b02 	vstmdb	r0!, {d7}
 8009042:	e735      	b.n	8008eb0 <__kernel_rem_pio2+0x218>
 8009044:	ecbc 5b02 	vldmia	ip!, {d5}
 8009048:	ecb5 6b02 	vldmia	r5!, {d6}
 800904c:	3401      	adds	r4, #1
 800904e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8009052:	454c      	cmp	r4, r9
 8009054:	dc01      	bgt.n	800905a <__kernel_rem_pio2+0x3c2>
 8009056:	4284      	cmp	r4, r0
 8009058:	ddf4      	ble.n	8009044 <__kernel_rem_pio2+0x3ac>
 800905a:	ac42      	add	r4, sp, #264	; 0x108
 800905c:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8009060:	ed80 7b00 	vstr	d7, [r0]
 8009064:	3901      	subs	r1, #1
 8009066:	e727      	b.n	8008eb8 <__kernel_rem_pio2+0x220>
 8009068:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800906a:	2902      	cmp	r1, #2
 800906c:	dc0a      	bgt.n	8009084 <__kernel_rem_pio2+0x3ec>
 800906e:	2900      	cmp	r1, #0
 8009070:	dc2c      	bgt.n	80090cc <__kernel_rem_pio2+0x434>
 8009072:	d045      	beq.n	8009100 <__kernel_rem_pio2+0x468>
 8009074:	f008 0007 	and.w	r0, r8, #7
 8009078:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 800907c:	ecbd 8b06 	vpop	{d8-d10}
 8009080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009084:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 8009086:	2a03      	cmp	r2, #3
 8009088:	d1f4      	bne.n	8009074 <__kernel_rem_pio2+0x3dc>
 800908a:	aa42      	add	r2, sp, #264	; 0x108
 800908c:	4413      	add	r3, r2
 800908e:	461a      	mov	r2, r3
 8009090:	4619      	mov	r1, r3
 8009092:	4658      	mov	r0, fp
 8009094:	2800      	cmp	r0, #0
 8009096:	f1a1 0108 	sub.w	r1, r1, #8
 800909a:	dc54      	bgt.n	8009146 <__kernel_rem_pio2+0x4ae>
 800909c:	4659      	mov	r1, fp
 800909e:	2901      	cmp	r1, #1
 80090a0:	f1a2 0208 	sub.w	r2, r2, #8
 80090a4:	dc5f      	bgt.n	8009166 <__kernel_rem_pio2+0x4ce>
 80090a6:	ed9f 7b46 	vldr	d7, [pc, #280]	; 80091c0 <__kernel_rem_pio2+0x528>
 80090aa:	3308      	adds	r3, #8
 80090ac:	f1bb 0f01 	cmp.w	fp, #1
 80090b0:	dc69      	bgt.n	8009186 <__kernel_rem_pio2+0x4ee>
 80090b2:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 80090b6:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 80090ba:	2e00      	cmp	r6, #0
 80090bc:	d16a      	bne.n	8009194 <__kernel_rem_pio2+0x4fc>
 80090be:	ed87 5b00 	vstr	d5, [r7]
 80090c2:	ed87 6b02 	vstr	d6, [r7, #8]
 80090c6:	ed87 7b04 	vstr	d7, [r7, #16]
 80090ca:	e7d3      	b.n	8009074 <__kernel_rem_pio2+0x3dc>
 80090cc:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 80091c0 <__kernel_rem_pio2+0x528>
 80090d0:	ab42      	add	r3, sp, #264	; 0x108
 80090d2:	441a      	add	r2, r3
 80090d4:	465b      	mov	r3, fp
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	da26      	bge.n	8009128 <__kernel_rem_pio2+0x490>
 80090da:	b35e      	cbz	r6, 8009134 <__kernel_rem_pio2+0x49c>
 80090dc:	eeb1 7b46 	vneg.f64	d7, d6
 80090e0:	ed87 7b00 	vstr	d7, [r7]
 80090e4:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 80090e8:	aa44      	add	r2, sp, #272	; 0x110
 80090ea:	2301      	movs	r3, #1
 80090ec:	ee37 7b46 	vsub.f64	d7, d7, d6
 80090f0:	459b      	cmp	fp, r3
 80090f2:	da22      	bge.n	800913a <__kernel_rem_pio2+0x4a2>
 80090f4:	b10e      	cbz	r6, 80090fa <__kernel_rem_pio2+0x462>
 80090f6:	eeb1 7b47 	vneg.f64	d7, d7
 80090fa:	ed87 7b02 	vstr	d7, [r7, #8]
 80090fe:	e7b9      	b.n	8009074 <__kernel_rem_pio2+0x3dc>
 8009100:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 80091c0 <__kernel_rem_pio2+0x528>
 8009104:	ab42      	add	r3, sp, #264	; 0x108
 8009106:	441a      	add	r2, r3
 8009108:	f1bb 0f00 	cmp.w	fp, #0
 800910c:	da05      	bge.n	800911a <__kernel_rem_pio2+0x482>
 800910e:	b10e      	cbz	r6, 8009114 <__kernel_rem_pio2+0x47c>
 8009110:	eeb1 7b47 	vneg.f64	d7, d7
 8009114:	ed87 7b00 	vstr	d7, [r7]
 8009118:	e7ac      	b.n	8009074 <__kernel_rem_pio2+0x3dc>
 800911a:	ed32 6b02 	vldmdb	r2!, {d6}
 800911e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009122:	ee37 7b06 	vadd.f64	d7, d7, d6
 8009126:	e7ef      	b.n	8009108 <__kernel_rem_pio2+0x470>
 8009128:	ed32 7b02 	vldmdb	r2!, {d7}
 800912c:	3b01      	subs	r3, #1
 800912e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8009132:	e7d0      	b.n	80090d6 <__kernel_rem_pio2+0x43e>
 8009134:	eeb0 7b46 	vmov.f64	d7, d6
 8009138:	e7d2      	b.n	80090e0 <__kernel_rem_pio2+0x448>
 800913a:	ecb2 6b02 	vldmia	r2!, {d6}
 800913e:	3301      	adds	r3, #1
 8009140:	ee37 7b06 	vadd.f64	d7, d7, d6
 8009144:	e7d4      	b.n	80090f0 <__kernel_rem_pio2+0x458>
 8009146:	ed91 7b00 	vldr	d7, [r1]
 800914a:	ed91 5b02 	vldr	d5, [r1, #8]
 800914e:	3801      	subs	r0, #1
 8009150:	ee37 6b05 	vadd.f64	d6, d7, d5
 8009154:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009158:	ed81 6b00 	vstr	d6, [r1]
 800915c:	ee37 7b05 	vadd.f64	d7, d7, d5
 8009160:	ed81 7b02 	vstr	d7, [r1, #8]
 8009164:	e796      	b.n	8009094 <__kernel_rem_pio2+0x3fc>
 8009166:	ed92 7b00 	vldr	d7, [r2]
 800916a:	ed92 5b02 	vldr	d5, [r2, #8]
 800916e:	3901      	subs	r1, #1
 8009170:	ee37 6b05 	vadd.f64	d6, d7, d5
 8009174:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009178:	ed82 6b00 	vstr	d6, [r2]
 800917c:	ee37 7b05 	vadd.f64	d7, d7, d5
 8009180:	ed82 7b02 	vstr	d7, [r2, #8]
 8009184:	e78b      	b.n	800909e <__kernel_rem_pio2+0x406>
 8009186:	ed33 6b02 	vldmdb	r3!, {d6}
 800918a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800918e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8009192:	e78b      	b.n	80090ac <__kernel_rem_pio2+0x414>
 8009194:	eeb1 5b45 	vneg.f64	d5, d5
 8009198:	eeb1 6b46 	vneg.f64	d6, d6
 800919c:	ed87 5b00 	vstr	d5, [r7]
 80091a0:	eeb1 7b47 	vneg.f64	d7, d7
 80091a4:	ed87 6b02 	vstr	d6, [r7, #8]
 80091a8:	e78d      	b.n	80090c6 <__kernel_rem_pio2+0x42e>
 80091aa:	bf00      	nop
 80091ac:	f3af 8000 	nop.w
 80091b0:	00000000 	.word	0x00000000
 80091b4:	41700000 	.word	0x41700000
 80091b8:	00000000 	.word	0x00000000
 80091bc:	3e700000 	.word	0x3e700000
	...

080091c8 <__kernel_sin>:
 80091c8:	ee10 3a90 	vmov	r3, s1
 80091cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80091d0:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80091d4:	da04      	bge.n	80091e0 <__kernel_sin+0x18>
 80091d6:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 80091da:	ee17 3a90 	vmov	r3, s15
 80091de:	b35b      	cbz	r3, 8009238 <__kernel_sin+0x70>
 80091e0:	ee20 6b00 	vmul.f64	d6, d0, d0
 80091e4:	ee20 5b06 	vmul.f64	d5, d0, d6
 80091e8:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8009240 <__kernel_sin+0x78>
 80091ec:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8009248 <__kernel_sin+0x80>
 80091f0:	eea6 4b07 	vfma.f64	d4, d6, d7
 80091f4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8009250 <__kernel_sin+0x88>
 80091f8:	eea4 7b06 	vfma.f64	d7, d4, d6
 80091fc:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8009258 <__kernel_sin+0x90>
 8009200:	eea7 4b06 	vfma.f64	d4, d7, d6
 8009204:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8009260 <__kernel_sin+0x98>
 8009208:	eea4 7b06 	vfma.f64	d7, d4, d6
 800920c:	b930      	cbnz	r0, 800921c <__kernel_sin+0x54>
 800920e:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8009268 <__kernel_sin+0xa0>
 8009212:	eea6 4b07 	vfma.f64	d4, d6, d7
 8009216:	eea4 0b05 	vfma.f64	d0, d4, d5
 800921a:	4770      	bx	lr
 800921c:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8009220:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8009224:	eea1 7b04 	vfma.f64	d7, d1, d4
 8009228:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800922c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8009270 <__kernel_sin+0xa8>
 8009230:	eea5 1b07 	vfma.f64	d1, d5, d7
 8009234:	ee30 0b41 	vsub.f64	d0, d0, d1
 8009238:	4770      	bx	lr
 800923a:	bf00      	nop
 800923c:	f3af 8000 	nop.w
 8009240:	5acfd57c 	.word	0x5acfd57c
 8009244:	3de5d93a 	.word	0x3de5d93a
 8009248:	8a2b9ceb 	.word	0x8a2b9ceb
 800924c:	be5ae5e6 	.word	0xbe5ae5e6
 8009250:	57b1fe7d 	.word	0x57b1fe7d
 8009254:	3ec71de3 	.word	0x3ec71de3
 8009258:	19c161d5 	.word	0x19c161d5
 800925c:	bf2a01a0 	.word	0xbf2a01a0
 8009260:	1110f8a6 	.word	0x1110f8a6
 8009264:	3f811111 	.word	0x3f811111
 8009268:	55555549 	.word	0x55555549
 800926c:	bfc55555 	.word	0xbfc55555
 8009270:	55555549 	.word	0x55555549
 8009274:	3fc55555 	.word	0x3fc55555

08009278 <with_errno>:
 8009278:	b513      	push	{r0, r1, r4, lr}
 800927a:	4604      	mov	r4, r0
 800927c:	ed8d 0b00 	vstr	d0, [sp]
 8009280:	f7fe ff54 	bl	800812c <__errno>
 8009284:	ed9d 0b00 	vldr	d0, [sp]
 8009288:	6004      	str	r4, [r0, #0]
 800928a:	b002      	add	sp, #8
 800928c:	bd10      	pop	{r4, pc}

0800928e <xflow>:
 800928e:	b082      	sub	sp, #8
 8009290:	b158      	cbz	r0, 80092aa <xflow+0x1c>
 8009292:	eeb1 7b40 	vneg.f64	d7, d0
 8009296:	ed8d 7b00 	vstr	d7, [sp]
 800929a:	ed9d 7b00 	vldr	d7, [sp]
 800929e:	2022      	movs	r0, #34	; 0x22
 80092a0:	ee20 0b07 	vmul.f64	d0, d0, d7
 80092a4:	b002      	add	sp, #8
 80092a6:	f7ff bfe7 	b.w	8009278 <with_errno>
 80092aa:	eeb0 7b40 	vmov.f64	d7, d0
 80092ae:	e7f2      	b.n	8009296 <xflow+0x8>

080092b0 <__math_uflow>:
 80092b0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80092b8 <__math_uflow+0x8>
 80092b4:	f7ff bfeb 	b.w	800928e <xflow>
 80092b8:	00000000 	.word	0x00000000
 80092bc:	10000000 	.word	0x10000000

080092c0 <__math_oflow>:
 80092c0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80092c8 <__math_oflow+0x8>
 80092c4:	f7ff bfe3 	b.w	800928e <xflow>
 80092c8:	00000000 	.word	0x00000000
 80092cc:	70000000 	.word	0x70000000

080092d0 <__math_divzero>:
 80092d0:	b082      	sub	sp, #8
 80092d2:	2800      	cmp	r0, #0
 80092d4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80092d8:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 80092dc:	fe06 7b07 	vseleq.f64	d7, d6, d7
 80092e0:	ed8d 7b00 	vstr	d7, [sp]
 80092e4:	ed9d 0b00 	vldr	d0, [sp]
 80092e8:	ed9f 7b03 	vldr	d7, [pc, #12]	; 80092f8 <__math_divzero+0x28>
 80092ec:	2022      	movs	r0, #34	; 0x22
 80092ee:	ee80 0b07 	vdiv.f64	d0, d0, d7
 80092f2:	b002      	add	sp, #8
 80092f4:	f7ff bfc0 	b.w	8009278 <with_errno>
	...

08009300 <__math_invalid>:
 8009300:	eeb0 7b40 	vmov.f64	d7, d0
 8009304:	eeb4 7b47 	vcmp.f64	d7, d7
 8009308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800930c:	ee30 6b40 	vsub.f64	d6, d0, d0
 8009310:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8009314:	d602      	bvs.n	800931c <__math_invalid+0x1c>
 8009316:	2021      	movs	r0, #33	; 0x21
 8009318:	f7ff bfae 	b.w	8009278 <with_errno>
 800931c:	4770      	bx	lr

0800931e <__math_check_uflow>:
 800931e:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8009322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009326:	d102      	bne.n	800932e <__math_check_uflow+0x10>
 8009328:	2022      	movs	r0, #34	; 0x22
 800932a:	f7ff bfa5 	b.w	8009278 <with_errno>
 800932e:	4770      	bx	lr

08009330 <__math_check_oflow>:
 8009330:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8009350 <__math_check_oflow+0x20>
 8009334:	eeb0 7bc0 	vabs.f64	d7, d0
 8009338:	eeb4 7b46 	vcmp.f64	d7, d6
 800933c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009340:	dd02      	ble.n	8009348 <__math_check_oflow+0x18>
 8009342:	2022      	movs	r0, #34	; 0x22
 8009344:	f7ff bf98 	b.w	8009278 <with_errno>
 8009348:	4770      	bx	lr
 800934a:	bf00      	nop
 800934c:	f3af 8000 	nop.w
 8009350:	ffffffff 	.word	0xffffffff
 8009354:	7fefffff 	.word	0x7fefffff

08009358 <fabs>:
 8009358:	ec51 0b10 	vmov	r0, r1, d0
 800935c:	ee10 2a10 	vmov	r2, s0
 8009360:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009364:	ec43 2b10 	vmov	d0, r2, r3
 8009368:	4770      	bx	lr
 800936a:	0000      	movs	r0, r0
 800936c:	0000      	movs	r0, r0
	...

08009370 <floor>:
 8009370:	ee10 1a90 	vmov	r1, s1
 8009374:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009378:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800937c:	2b13      	cmp	r3, #19
 800937e:	b530      	push	{r4, r5, lr}
 8009380:	ee10 0a10 	vmov	r0, s0
 8009384:	ee10 5a10 	vmov	r5, s0
 8009388:	dc31      	bgt.n	80093ee <floor+0x7e>
 800938a:	2b00      	cmp	r3, #0
 800938c:	da15      	bge.n	80093ba <floor+0x4a>
 800938e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8009448 <floor+0xd8>
 8009392:	ee30 0b07 	vadd.f64	d0, d0, d7
 8009396:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800939a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800939e:	dd07      	ble.n	80093b0 <floor+0x40>
 80093a0:	2900      	cmp	r1, #0
 80093a2:	da4e      	bge.n	8009442 <floor+0xd2>
 80093a4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80093a8:	4318      	orrs	r0, r3
 80093aa:	d001      	beq.n	80093b0 <floor+0x40>
 80093ac:	4928      	ldr	r1, [pc, #160]	; (8009450 <floor+0xe0>)
 80093ae:	2000      	movs	r0, #0
 80093b0:	460b      	mov	r3, r1
 80093b2:	4602      	mov	r2, r0
 80093b4:	ec43 2b10 	vmov	d0, r2, r3
 80093b8:	e020      	b.n	80093fc <floor+0x8c>
 80093ba:	4a26      	ldr	r2, [pc, #152]	; (8009454 <floor+0xe4>)
 80093bc:	411a      	asrs	r2, r3
 80093be:	ea01 0402 	and.w	r4, r1, r2
 80093c2:	4304      	orrs	r4, r0
 80093c4:	d01a      	beq.n	80093fc <floor+0x8c>
 80093c6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8009448 <floor+0xd8>
 80093ca:	ee30 0b07 	vadd.f64	d0, d0, d7
 80093ce:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80093d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093d6:	ddeb      	ble.n	80093b0 <floor+0x40>
 80093d8:	2900      	cmp	r1, #0
 80093da:	bfbe      	ittt	lt
 80093dc:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 80093e0:	fa40 f303 	asrlt.w	r3, r0, r3
 80093e4:	18c9      	addlt	r1, r1, r3
 80093e6:	ea21 0102 	bic.w	r1, r1, r2
 80093ea:	2000      	movs	r0, #0
 80093ec:	e7e0      	b.n	80093b0 <floor+0x40>
 80093ee:	2b33      	cmp	r3, #51	; 0x33
 80093f0:	dd05      	ble.n	80093fe <floor+0x8e>
 80093f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80093f6:	d101      	bne.n	80093fc <floor+0x8c>
 80093f8:	ee30 0b00 	vadd.f64	d0, d0, d0
 80093fc:	bd30      	pop	{r4, r5, pc}
 80093fe:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8009402:	f04f 32ff 	mov.w	r2, #4294967295
 8009406:	40e2      	lsrs	r2, r4
 8009408:	4202      	tst	r2, r0
 800940a:	d0f7      	beq.n	80093fc <floor+0x8c>
 800940c:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8009448 <floor+0xd8>
 8009410:	ee30 0b07 	vadd.f64	d0, d0, d7
 8009414:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8009418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800941c:	ddc8      	ble.n	80093b0 <floor+0x40>
 800941e:	2900      	cmp	r1, #0
 8009420:	da02      	bge.n	8009428 <floor+0xb8>
 8009422:	2b14      	cmp	r3, #20
 8009424:	d103      	bne.n	800942e <floor+0xbe>
 8009426:	3101      	adds	r1, #1
 8009428:	ea20 0002 	bic.w	r0, r0, r2
 800942c:	e7c0      	b.n	80093b0 <floor+0x40>
 800942e:	2401      	movs	r4, #1
 8009430:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8009434:	fa04 f303 	lsl.w	r3, r4, r3
 8009438:	4418      	add	r0, r3
 800943a:	42a8      	cmp	r0, r5
 800943c:	bf38      	it	cc
 800943e:	1909      	addcc	r1, r1, r4
 8009440:	e7f2      	b.n	8009428 <floor+0xb8>
 8009442:	2000      	movs	r0, #0
 8009444:	4601      	mov	r1, r0
 8009446:	e7b3      	b.n	80093b0 <floor+0x40>
 8009448:	8800759c 	.word	0x8800759c
 800944c:	7e37e43c 	.word	0x7e37e43c
 8009450:	bff00000 	.word	0xbff00000
 8009454:	000fffff 	.word	0x000fffff

08009458 <scalbn>:
 8009458:	ee10 1a90 	vmov	r1, s1
 800945c:	b510      	push	{r4, lr}
 800945e:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8009462:	b98c      	cbnz	r4, 8009488 <scalbn+0x30>
 8009464:	ee10 3a10 	vmov	r3, s0
 8009468:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800946c:	430b      	orrs	r3, r1
 800946e:	d011      	beq.n	8009494 <scalbn+0x3c>
 8009470:	ed9f 7b31 	vldr	d7, [pc, #196]	; 8009538 <scalbn+0xe0>
 8009474:	4b3c      	ldr	r3, [pc, #240]	; (8009568 <scalbn+0x110>)
 8009476:	ee20 0b07 	vmul.f64	d0, d0, d7
 800947a:	4298      	cmp	r0, r3
 800947c:	da0b      	bge.n	8009496 <scalbn+0x3e>
 800947e:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8009540 <scalbn+0xe8>
 8009482:	ee20 0b07 	vmul.f64	d0, d0, d7
 8009486:	e005      	b.n	8009494 <scalbn+0x3c>
 8009488:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800948c:	429c      	cmp	r4, r3
 800948e:	d107      	bne.n	80094a0 <scalbn+0x48>
 8009490:	ee30 0b00 	vadd.f64	d0, d0, d0
 8009494:	bd10      	pop	{r4, pc}
 8009496:	ee10 1a90 	vmov	r1, s1
 800949a:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800949e:	3c36      	subs	r4, #54	; 0x36
 80094a0:	4404      	add	r4, r0
 80094a2:	f240 73fe 	movw	r3, #2046	; 0x7fe
 80094a6:	429c      	cmp	r4, r3
 80094a8:	dd0d      	ble.n	80094c6 <scalbn+0x6e>
 80094aa:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8009548 <scalbn+0xf0>
 80094ae:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8009550 <scalbn+0xf8>
 80094b2:	eeb0 6b47 	vmov.f64	d6, d7
 80094b6:	ee10 3a90 	vmov	r3, s1
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	fe27 7b05 	vselge.f64	d7, d7, d5
 80094c0:	ee27 0b06 	vmul.f64	d0, d7, d6
 80094c4:	e7e6      	b.n	8009494 <scalbn+0x3c>
 80094c6:	2c00      	cmp	r4, #0
 80094c8:	dd0a      	ble.n	80094e0 <scalbn+0x88>
 80094ca:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 80094ce:	ec53 2b10 	vmov	r2, r3, d0
 80094d2:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 80094d6:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 80094da:	ec43 2b10 	vmov	d0, r2, r3
 80094de:	e7d9      	b.n	8009494 <scalbn+0x3c>
 80094e0:	f114 0f35 	cmn.w	r4, #53	; 0x35
 80094e4:	da19      	bge.n	800951a <scalbn+0xc2>
 80094e6:	f24c 3350 	movw	r3, #50000	; 0xc350
 80094ea:	4298      	cmp	r0, r3
 80094ec:	ee10 3a90 	vmov	r3, s1
 80094f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80094f4:	dd09      	ble.n	800950a <scalbn+0xb2>
 80094f6:	ed9f 0b14 	vldr	d0, [pc, #80]	; 8009548 <scalbn+0xf0>
 80094fa:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8009550 <scalbn+0xf8>
 80094fe:	eeb0 7b40 	vmov.f64	d7, d0
 8009502:	2b00      	cmp	r3, #0
 8009504:	fe00 0b06 	vseleq.f64	d0, d0, d6
 8009508:	e7bb      	b.n	8009482 <scalbn+0x2a>
 800950a:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 8009540 <scalbn+0xe8>
 800950e:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8009558 <scalbn+0x100>
 8009512:	eeb0 7b40 	vmov.f64	d7, d0
 8009516:	2b00      	cmp	r3, #0
 8009518:	e7f4      	b.n	8009504 <scalbn+0xac>
 800951a:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 800951e:	ec53 2b10 	vmov	r2, r3, d0
 8009522:	3436      	adds	r4, #54	; 0x36
 8009524:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8009528:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 800952c:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8009560 <scalbn+0x108>
 8009530:	ec43 2b10 	vmov	d0, r2, r3
 8009534:	e7a5      	b.n	8009482 <scalbn+0x2a>
 8009536:	bf00      	nop
 8009538:	00000000 	.word	0x00000000
 800953c:	43500000 	.word	0x43500000
 8009540:	c2f8f359 	.word	0xc2f8f359
 8009544:	01a56e1f 	.word	0x01a56e1f
 8009548:	8800759c 	.word	0x8800759c
 800954c:	7e37e43c 	.word	0x7e37e43c
 8009550:	8800759c 	.word	0x8800759c
 8009554:	fe37e43c 	.word	0xfe37e43c
 8009558:	c2f8f359 	.word	0xc2f8f359
 800955c:	81a56e1f 	.word	0x81a56e1f
 8009560:	00000000 	.word	0x00000000
 8009564:	3c900000 	.word	0x3c900000
 8009568:	ffff3cb0 	.word	0xffff3cb0

0800956c <_init>:
 800956c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800956e:	bf00      	nop
 8009570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009572:	bc08      	pop	{r3}
 8009574:	469e      	mov	lr, r3
 8009576:	4770      	bx	lr

08009578 <_fini>:
 8009578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800957a:	bf00      	nop
 800957c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800957e:	bc08      	pop	{r3}
 8009580:	469e      	mov	lr, r3
 8009582:	4770      	bx	lr
