
Data Acqu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b5c  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000290  08008e30  08008e30  00018e30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080090c0  080090c0  000190c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080090c8  080090c8  000190c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080090cc  080090cc  000190cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000088  24000000  080090d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000003cc  24000088  08009158  00020088  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  24000454  08009158  00020454  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001ecab  00000000  00000000  000200b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002c97  00000000  00000000  0003ed61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001040  00000000  00000000  000419f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000f78  00000000  00000000  00042a38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00032fe5  00000000  00000000  000439b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00014348  00000000  00000000  00076995  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014d343  00000000  00000000  0008acdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001d8020  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004fac  00000000  00000000  001d8074  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000088 	.word	0x24000088
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08008e14 	.word	0x08008e14

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400008c 	.word	0x2400008c
 800030c:	08008e14 	.word	0x08008e14

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b96e 	b.w	8000614 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	468c      	mov	ip, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	f040 8083 	bne.w	8000466 <__udivmoddi4+0x116>
 8000360:	428a      	cmp	r2, r1
 8000362:	4617      	mov	r7, r2
 8000364:	d947      	bls.n	80003f6 <__udivmoddi4+0xa6>
 8000366:	fab2 f282 	clz	r2, r2
 800036a:	b142      	cbz	r2, 800037e <__udivmoddi4+0x2e>
 800036c:	f1c2 0020 	rsb	r0, r2, #32
 8000370:	fa24 f000 	lsr.w	r0, r4, r0
 8000374:	4091      	lsls	r1, r2
 8000376:	4097      	lsls	r7, r2
 8000378:	ea40 0c01 	orr.w	ip, r0, r1
 800037c:	4094      	lsls	r4, r2
 800037e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000382:	0c23      	lsrs	r3, r4, #16
 8000384:	fbbc f6f8 	udiv	r6, ip, r8
 8000388:	fa1f fe87 	uxth.w	lr, r7
 800038c:	fb08 c116 	mls	r1, r8, r6, ip
 8000390:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000394:	fb06 f10e 	mul.w	r1, r6, lr
 8000398:	4299      	cmp	r1, r3
 800039a:	d909      	bls.n	80003b0 <__udivmoddi4+0x60>
 800039c:	18fb      	adds	r3, r7, r3
 800039e:	f106 30ff 	add.w	r0, r6, #4294967295
 80003a2:	f080 8119 	bcs.w	80005d8 <__udivmoddi4+0x288>
 80003a6:	4299      	cmp	r1, r3
 80003a8:	f240 8116 	bls.w	80005d8 <__udivmoddi4+0x288>
 80003ac:	3e02      	subs	r6, #2
 80003ae:	443b      	add	r3, r7
 80003b0:	1a5b      	subs	r3, r3, r1
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x8c>
 80003c8:	193c      	adds	r4, r7, r4
 80003ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ce:	f080 8105 	bcs.w	80005dc <__udivmoddi4+0x28c>
 80003d2:	45a6      	cmp	lr, r4
 80003d4:	f240 8102 	bls.w	80005dc <__udivmoddi4+0x28c>
 80003d8:	3802      	subs	r0, #2
 80003da:	443c      	add	r4, r7
 80003dc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e0:	eba4 040e 	sub.w	r4, r4, lr
 80003e4:	2600      	movs	r6, #0
 80003e6:	b11d      	cbz	r5, 80003f0 <__udivmoddi4+0xa0>
 80003e8:	40d4      	lsrs	r4, r2
 80003ea:	2300      	movs	r3, #0
 80003ec:	e9c5 4300 	strd	r4, r3, [r5]
 80003f0:	4631      	mov	r1, r6
 80003f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f6:	b902      	cbnz	r2, 80003fa <__udivmoddi4+0xaa>
 80003f8:	deff      	udf	#255	; 0xff
 80003fa:	fab2 f282 	clz	r2, r2
 80003fe:	2a00      	cmp	r2, #0
 8000400:	d150      	bne.n	80004a4 <__udivmoddi4+0x154>
 8000402:	1bcb      	subs	r3, r1, r7
 8000404:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000408:	fa1f f887 	uxth.w	r8, r7
 800040c:	2601      	movs	r6, #1
 800040e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000412:	0c21      	lsrs	r1, r4, #16
 8000414:	fb0e 331c 	mls	r3, lr, ip, r3
 8000418:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800041c:	fb08 f30c 	mul.w	r3, r8, ip
 8000420:	428b      	cmp	r3, r1
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0xe4>
 8000424:	1879      	adds	r1, r7, r1
 8000426:	f10c 30ff 	add.w	r0, ip, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0xe2>
 800042c:	428b      	cmp	r3, r1
 800042e:	f200 80e9 	bhi.w	8000604 <__udivmoddi4+0x2b4>
 8000432:	4684      	mov	ip, r0
 8000434:	1ac9      	subs	r1, r1, r3
 8000436:	b2a3      	uxth	r3, r4
 8000438:	fbb1 f0fe 	udiv	r0, r1, lr
 800043c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000440:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000444:	fb08 f800 	mul.w	r8, r8, r0
 8000448:	45a0      	cmp	r8, r4
 800044a:	d907      	bls.n	800045c <__udivmoddi4+0x10c>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x10a>
 8000454:	45a0      	cmp	r8, r4
 8000456:	f200 80d9 	bhi.w	800060c <__udivmoddi4+0x2bc>
 800045a:	4618      	mov	r0, r3
 800045c:	eba4 0408 	sub.w	r4, r4, r8
 8000460:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000464:	e7bf      	b.n	80003e6 <__udivmoddi4+0x96>
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0x12e>
 800046a:	2d00      	cmp	r5, #0
 800046c:	f000 80b1 	beq.w	80005d2 <__udivmoddi4+0x282>
 8000470:	2600      	movs	r6, #0
 8000472:	e9c5 0100 	strd	r0, r1, [r5]
 8000476:	4630      	mov	r0, r6
 8000478:	4631      	mov	r1, r6
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f683 	clz	r6, r3
 8000482:	2e00      	cmp	r6, #0
 8000484:	d14a      	bne.n	800051c <__udivmoddi4+0x1cc>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0x140>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80b8 	bhi.w	8000600 <__udivmoddi4+0x2b0>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0103 	sbc.w	r1, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	468c      	mov	ip, r1
 800049a:	2d00      	cmp	r5, #0
 800049c:	d0a8      	beq.n	80003f0 <__udivmoddi4+0xa0>
 800049e:	e9c5 4c00 	strd	r4, ip, [r5]
 80004a2:	e7a5      	b.n	80003f0 <__udivmoddi4+0xa0>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f603 	lsr.w	r6, r0, r3
 80004ac:	4097      	lsls	r7, r2
 80004ae:	fa01 f002 	lsl.w	r0, r1, r2
 80004b2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b6:	40d9      	lsrs	r1, r3
 80004b8:	4330      	orrs	r0, r6
 80004ba:	0c03      	lsrs	r3, r0, #16
 80004bc:	fbb1 f6fe 	udiv	r6, r1, lr
 80004c0:	fa1f f887 	uxth.w	r8, r7
 80004c4:	fb0e 1116 	mls	r1, lr, r6, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb06 f108 	mul.w	r1, r6, r8
 80004d0:	4299      	cmp	r1, r3
 80004d2:	fa04 f402 	lsl.w	r4, r4, r2
 80004d6:	d909      	bls.n	80004ec <__udivmoddi4+0x19c>
 80004d8:	18fb      	adds	r3, r7, r3
 80004da:	f106 3cff 	add.w	ip, r6, #4294967295
 80004de:	f080 808d 	bcs.w	80005fc <__udivmoddi4+0x2ac>
 80004e2:	4299      	cmp	r1, r3
 80004e4:	f240 808a 	bls.w	80005fc <__udivmoddi4+0x2ac>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	443b      	add	r3, r7
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b281      	uxth	r1, r0
 80004f0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004f4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fc:	fb00 f308 	mul.w	r3, r0, r8
 8000500:	428b      	cmp	r3, r1
 8000502:	d907      	bls.n	8000514 <__udivmoddi4+0x1c4>
 8000504:	1879      	adds	r1, r7, r1
 8000506:	f100 3cff 	add.w	ip, r0, #4294967295
 800050a:	d273      	bcs.n	80005f4 <__udivmoddi4+0x2a4>
 800050c:	428b      	cmp	r3, r1
 800050e:	d971      	bls.n	80005f4 <__udivmoddi4+0x2a4>
 8000510:	3802      	subs	r0, #2
 8000512:	4439      	add	r1, r7
 8000514:	1acb      	subs	r3, r1, r3
 8000516:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800051a:	e778      	b.n	800040e <__udivmoddi4+0xbe>
 800051c:	f1c6 0c20 	rsb	ip, r6, #32
 8000520:	fa03 f406 	lsl.w	r4, r3, r6
 8000524:	fa22 f30c 	lsr.w	r3, r2, ip
 8000528:	431c      	orrs	r4, r3
 800052a:	fa20 f70c 	lsr.w	r7, r0, ip
 800052e:	fa01 f306 	lsl.w	r3, r1, r6
 8000532:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000536:	fa21 f10c 	lsr.w	r1, r1, ip
 800053a:	431f      	orrs	r7, r3
 800053c:	0c3b      	lsrs	r3, r7, #16
 800053e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000542:	fa1f f884 	uxth.w	r8, r4
 8000546:	fb0e 1119 	mls	r1, lr, r9, r1
 800054a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800054e:	fb09 fa08 	mul.w	sl, r9, r8
 8000552:	458a      	cmp	sl, r1
 8000554:	fa02 f206 	lsl.w	r2, r2, r6
 8000558:	fa00 f306 	lsl.w	r3, r0, r6
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x220>
 800055e:	1861      	adds	r1, r4, r1
 8000560:	f109 30ff 	add.w	r0, r9, #4294967295
 8000564:	d248      	bcs.n	80005f8 <__udivmoddi4+0x2a8>
 8000566:	458a      	cmp	sl, r1
 8000568:	d946      	bls.n	80005f8 <__udivmoddi4+0x2a8>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4421      	add	r1, r4
 8000570:	eba1 010a 	sub.w	r1, r1, sl
 8000574:	b2bf      	uxth	r7, r7
 8000576:	fbb1 f0fe 	udiv	r0, r1, lr
 800057a:	fb0e 1110 	mls	r1, lr, r0, r1
 800057e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000582:	fb00 f808 	mul.w	r8, r0, r8
 8000586:	45b8      	cmp	r8, r7
 8000588:	d907      	bls.n	800059a <__udivmoddi4+0x24a>
 800058a:	19e7      	adds	r7, r4, r7
 800058c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000590:	d22e      	bcs.n	80005f0 <__udivmoddi4+0x2a0>
 8000592:	45b8      	cmp	r8, r7
 8000594:	d92c      	bls.n	80005f0 <__udivmoddi4+0x2a0>
 8000596:	3802      	subs	r0, #2
 8000598:	4427      	add	r7, r4
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	eba7 0708 	sub.w	r7, r7, r8
 80005a2:	fba0 8902 	umull	r8, r9, r0, r2
 80005a6:	454f      	cmp	r7, r9
 80005a8:	46c6      	mov	lr, r8
 80005aa:	4649      	mov	r1, r9
 80005ac:	d31a      	bcc.n	80005e4 <__udivmoddi4+0x294>
 80005ae:	d017      	beq.n	80005e0 <__udivmoddi4+0x290>
 80005b0:	b15d      	cbz	r5, 80005ca <__udivmoddi4+0x27a>
 80005b2:	ebb3 020e 	subs.w	r2, r3, lr
 80005b6:	eb67 0701 	sbc.w	r7, r7, r1
 80005ba:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005be:	40f2      	lsrs	r2, r6
 80005c0:	ea4c 0202 	orr.w	r2, ip, r2
 80005c4:	40f7      	lsrs	r7, r6
 80005c6:	e9c5 2700 	strd	r2, r7, [r5]
 80005ca:	2600      	movs	r6, #0
 80005cc:	4631      	mov	r1, r6
 80005ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d2:	462e      	mov	r6, r5
 80005d4:	4628      	mov	r0, r5
 80005d6:	e70b      	b.n	80003f0 <__udivmoddi4+0xa0>
 80005d8:	4606      	mov	r6, r0
 80005da:	e6e9      	b.n	80003b0 <__udivmoddi4+0x60>
 80005dc:	4618      	mov	r0, r3
 80005de:	e6fd      	b.n	80003dc <__udivmoddi4+0x8c>
 80005e0:	4543      	cmp	r3, r8
 80005e2:	d2e5      	bcs.n	80005b0 <__udivmoddi4+0x260>
 80005e4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005e8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ec:	3801      	subs	r0, #1
 80005ee:	e7df      	b.n	80005b0 <__udivmoddi4+0x260>
 80005f0:	4608      	mov	r0, r1
 80005f2:	e7d2      	b.n	800059a <__udivmoddi4+0x24a>
 80005f4:	4660      	mov	r0, ip
 80005f6:	e78d      	b.n	8000514 <__udivmoddi4+0x1c4>
 80005f8:	4681      	mov	r9, r0
 80005fa:	e7b9      	b.n	8000570 <__udivmoddi4+0x220>
 80005fc:	4666      	mov	r6, ip
 80005fe:	e775      	b.n	80004ec <__udivmoddi4+0x19c>
 8000600:	4630      	mov	r0, r6
 8000602:	e74a      	b.n	800049a <__udivmoddi4+0x14a>
 8000604:	f1ac 0c02 	sub.w	ip, ip, #2
 8000608:	4439      	add	r1, r7
 800060a:	e713      	b.n	8000434 <__udivmoddi4+0xe4>
 800060c:	3802      	subs	r0, #2
 800060e:	443c      	add	r4, r7
 8000610:	e724      	b.n	800045c <__udivmoddi4+0x10c>
 8000612:	bf00      	nop

08000614 <__aeabi_idiv0>:
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop

08000618 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	initialise_monitor_handles();
 800061e:	f007 fa2f 	bl	8007a80 <initialise_monitor_handles>


		out_speed = (float*) malloc (1000*sizeof(float));
 8000622:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000626:	f007 fbad 	bl	8007d84 <malloc>
 800062a:	4603      	mov	r3, r0
 800062c:	461a      	mov	r2, r3
 800062e:	4b38      	ldr	r3, [pc, #224]	; (8000710 <main+0xf8>)
 8000630:	601a      	str	r2, [r3, #0]
		IN = (float*) malloc (1000*sizeof(float));
 8000632:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000636:	f007 fba5 	bl	8007d84 <malloc>
 800063a:	4603      	mov	r3, r0
 800063c:	461a      	mov	r2, r3
 800063e:	4b35      	ldr	r3, [pc, #212]	; (8000714 <main+0xfc>)
 8000640:	601a      	str	r2, [r3, #0]
		Position = (float*) malloc (1000*sizeof(float));
 8000642:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000646:	f007 fb9d 	bl	8007d84 <malloc>
 800064a:	4603      	mov	r3, r0
 800064c:	461a      	mov	r2, r3
 800064e:	4b32      	ldr	r3, [pc, #200]	; (8000718 <main+0x100>)
 8000650:	601a      	str	r2, [r3, #0]

		__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4, ccr_reg);
 8000652:	4b32      	ldr	r3, [pc, #200]	; (800071c <main+0x104>)
 8000654:	681a      	ldr	r2, [r3, #0]
 8000656:	4b32      	ldr	r3, [pc, #200]	; (8000720 <main+0x108>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	641a      	str	r2, [r3, #64]	; 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800065c:	f001 f94c 	bl	80018f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000660:	f000 f86a 	bl	8000738 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000664:	f000 fbae 	bl	8000dc4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000668:	f000 fb58 	bl	8000d1c <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 800066c:	f000 fba2 	bl	8000db4 <MX_USB_OTG_HS_USB_Init>
  MX_TIM4_Init();
 8000670:	f000 f976 	bl	8000960 <MX_TIM4_Init>
  MX_TIM3_Init();
 8000674:	f000 f91e 	bl	80008b4 <MX_TIM3_Init>
  MX_TIM8_Init();
 8000678:	f000 fa3a 	bl	8000af0 <MX_TIM8_Init>
  MX_TIM2_Init();
 800067c:	f000 f8cc 	bl	8000818 <MX_TIM2_Init>
  MX_TIM5_Init();
 8000680:	f000 f9e6 	bl	8000a50 <MX_TIM5_Init>
  MX_TIM23_Init();
 8000684:	f000 faac 	bl	8000be0 <MX_TIM23_Init>
  MX_TIM24_Init();
 8000688:	f000 fafa 	bl	8000c80 <MX_TIM24_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_RESET);
 800068c:	2200      	movs	r2, #0
 800068e:	2101      	movs	r1, #1
 8000690:	4824      	ldr	r0, [pc, #144]	; (8000724 <main+0x10c>)
 8000692:	f001 fc7b 	bl	8001f8c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_2,GPIO_PIN_SET);
 8000696:	2201      	movs	r2, #1
 8000698:	2104      	movs	r1, #4
 800069a:	4822      	ldr	r0, [pc, #136]	; (8000724 <main+0x10c>)
 800069c:	f001 fc76 	bl	8001f8c <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_4);
 80006a0:	210c      	movs	r1, #12
 80006a2:	481f      	ldr	r0, [pc, #124]	; (8000720 <main+0x108>)
 80006a4:	f004 f87e 	bl	80047a4 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 80006a8:	213c      	movs	r1, #60	; 0x3c
 80006aa:	481f      	ldr	r0, [pc, #124]	; (8000728 <main+0x110>)
 80006ac:	f004 fbb0 	bl	8004e10 <HAL_TIM_Encoder_Start>
  HAL_TIM_IC_Start (&htim8,TIM_CHANNEL_3);
 80006b0:	2108      	movs	r1, #8
 80006b2:	481e      	ldr	r0, [pc, #120]	; (800072c <main+0x114>)
 80006b4:	f004 f9f4 	bl	8004aa0 <HAL_TIM_IC_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 80006b8:	481d      	ldr	r0, [pc, #116]	; (8000730 <main+0x118>)
 80006ba:	f003 ff8b 	bl	80045d4 <HAL_TIM_Base_Start_IT>
  //HAL_TIM_Base_Start_IT(&htim23);

  int CCR_old =0;
 80006be:	2300      	movs	r3, #0
 80006c0:	60fb      	str	r3, [r7, #12]
  int CCR_new = 0;
 80006c2:	2300      	movs	r3, #0
 80006c4:	60bb      	str	r3, [r7, #8]

  while (1)
  {

	    while(! (__HAL_TIM_GET_FLAG(&htim8,TIM_FLAG_CC3))) {}
 80006c6:	bf00      	nop
 80006c8:	4b18      	ldr	r3, [pc, #96]	; (800072c <main+0x114>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	691b      	ldr	r3, [r3, #16]
 80006ce:	f003 0308 	and.w	r3, r3, #8
 80006d2:	2b08      	cmp	r3, #8
 80006d4:	d1f8      	bne.n	80006c8 <main+0xb0>
		  CCR_new = __HAL_TIM_GET_COMPARE(&htim8,TIM_CHANNEL_3);
 80006d6:	4b15      	ldr	r3, [pc, #84]	; (800072c <main+0x114>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80006dc:	60bb      	str	r3, [r7, #8]
		  int diff = CCR_new - CCR_old;
 80006de:	68ba      	ldr	r2, [r7, #8]
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	1ad3      	subs	r3, r2, r3
 80006e4:	607b      	str	r3, [r7, #4]
		  CCR_old = CCR_new;
 80006e6:	68bb      	ldr	r3, [r7, #8]
 80006e8:	60fb      	str	r3, [r7, #12]
		  speed = 154.2746392/ diff; // Rad/s
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	ee07 3a90 	vmov	s15, r3
 80006f0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80006f4:	ed9f 5b04 	vldr	d5, [pc, #16]	; 8000708 <main+0xf0>
 80006f8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80006fc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000700:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <main+0x11c>)
 8000702:	edc3 7a00 	vstr	s15, [r3]
  {
 8000706:	e7de      	b.n	80006c6 <main+0xae>
 8000708:	d825c663 	.word	0xd825c663
 800070c:	406348c9 	.word	0x406348c9
 8000710:	24000438 	.word	0x24000438
 8000714:	2400043c 	.word	0x2400043c
 8000718:	240001cc 	.word	0x240001cc
 800071c:	240000b8 	.word	0x240000b8
 8000720:	2400021c 	.word	0x2400021c
 8000724:	58020800 	.word	0x58020800
 8000728:	24000348 	.word	0x24000348
 800072c:	240001d0 	.word	0x240001d0
 8000730:	240003a0 	.word	0x240003a0
 8000734:	240000a4 	.word	0x240000a4

08000738 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b09c      	sub	sp, #112	; 0x70
 800073c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800073e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000742:	224c      	movs	r2, #76	; 0x4c
 8000744:	2100      	movs	r1, #0
 8000746:	4618      	mov	r0, r3
 8000748:	f007 fb24 	bl	8007d94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800074c:	1d3b      	adds	r3, r7, #4
 800074e:	2220      	movs	r2, #32
 8000750:	2100      	movs	r1, #0
 8000752:	4618      	mov	r0, r3
 8000754:	f007 fb1e 	bl	8007d94 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000758:	2002      	movs	r0, #2
 800075a:	f001 fc55 	bl	8002008 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800075e:	2300      	movs	r3, #0
 8000760:	603b      	str	r3, [r7, #0]
 8000762:	4b2c      	ldr	r3, [pc, #176]	; (8000814 <SystemClock_Config+0xdc>)
 8000764:	699b      	ldr	r3, [r3, #24]
 8000766:	4a2b      	ldr	r2, [pc, #172]	; (8000814 <SystemClock_Config+0xdc>)
 8000768:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800076c:	6193      	str	r3, [r2, #24]
 800076e:	4b29      	ldr	r3, [pc, #164]	; (8000814 <SystemClock_Config+0xdc>)
 8000770:	699b      	ldr	r3, [r3, #24]
 8000772:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000776:	603b      	str	r3, [r7, #0]
 8000778:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800077a:	bf00      	nop
 800077c:	4b25      	ldr	r3, [pc, #148]	; (8000814 <SystemClock_Config+0xdc>)
 800077e:	699b      	ldr	r3, [r3, #24]
 8000780:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000784:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000788:	d1f8      	bne.n	800077c <SystemClock_Config+0x44>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800078a:	2321      	movs	r3, #33	; 0x21
 800078c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800078e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000792:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000794:	2301      	movs	r3, #1
 8000796:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000798:	2302      	movs	r3, #2
 800079a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800079c:	2302      	movs	r3, #2
 800079e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007a0:	2304      	movs	r3, #4
 80007a2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 80007a4:	f240 1313 	movw	r3, #275	; 0x113
 80007a8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80007aa:	2301      	movs	r3, #1
 80007ac:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007ae:	2304      	movs	r3, #4
 80007b0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007b2:	2302      	movs	r3, #2
 80007b4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80007b6:	2304      	movs	r3, #4
 80007b8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007ba:	2300      	movs	r3, #0
 80007bc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007be:	2300      	movs	r3, #0
 80007c0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007c6:	4618      	mov	r0, r3
 80007c8:	f001 fc58 	bl	800207c <HAL_RCC_OscConfig>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80007d2:	f000 fd89 	bl	80012e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d6:	233f      	movs	r3, #63	; 0x3f
 80007d8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007da:	2303      	movs	r3, #3
 80007dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007de:	2300      	movs	r3, #0
 80007e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80007e2:	2308      	movs	r3, #8
 80007e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007e6:	2340      	movs	r3, #64	; 0x40
 80007e8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007ea:	2340      	movs	r3, #64	; 0x40
 80007ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007f2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007f4:	2340      	movs	r3, #64	; 0x40
 80007f6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007f8:	1d3b      	adds	r3, r7, #4
 80007fa:	2103      	movs	r1, #3
 80007fc:	4618      	mov	r0, r3
 80007fe:	f001 ffe9 	bl	80027d4 <HAL_RCC_ClockConfig>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000808:	f000 fd6e 	bl	80012e8 <Error_Handler>
  }
}
 800080c:	bf00      	nop
 800080e:	3770      	adds	r7, #112	; 0x70
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	58024800 	.word	0x58024800

08000818 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b088      	sub	sp, #32
 800081c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800081e:	f107 0310 	add.w	r3, r7, #16
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	605a      	str	r2, [r3, #4]
 8000828:	609a      	str	r2, [r3, #8]
 800082a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800082c:	1d3b      	adds	r3, r7, #4
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	605a      	str	r2, [r3, #4]
 8000834:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000836:	4b1e      	ldr	r3, [pc, #120]	; (80008b0 <MX_TIM2_Init+0x98>)
 8000838:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800083c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 999;
 800083e:	4b1c      	ldr	r3, [pc, #112]	; (80008b0 <MX_TIM2_Init+0x98>)
 8000840:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000844:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000846:	4b1a      	ldr	r3, [pc, #104]	; (80008b0 <MX_TIM2_Init+0x98>)
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2749;
 800084c:	4b18      	ldr	r3, [pc, #96]	; (80008b0 <MX_TIM2_Init+0x98>)
 800084e:	f640 22bd 	movw	r2, #2749	; 0xabd
 8000852:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000854:	4b16      	ldr	r3, [pc, #88]	; (80008b0 <MX_TIM2_Init+0x98>)
 8000856:	2200      	movs	r2, #0
 8000858:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800085a:	4b15      	ldr	r3, [pc, #84]	; (80008b0 <MX_TIM2_Init+0x98>)
 800085c:	2200      	movs	r2, #0
 800085e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000860:	4813      	ldr	r0, [pc, #76]	; (80008b0 <MX_TIM2_Init+0x98>)
 8000862:	f003 fe5f 	bl	8004524 <HAL_TIM_Base_Init>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 800086c:	f000 fd3c 	bl	80012e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000870:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000874:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000876:	f107 0310 	add.w	r3, r7, #16
 800087a:	4619      	mov	r1, r3
 800087c:	480c      	ldr	r0, [pc, #48]	; (80008b0 <MX_TIM2_Init+0x98>)
 800087e:	f004 fe25 	bl	80054cc <HAL_TIM_ConfigClockSource>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000888:	f000 fd2e 	bl	80012e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800088c:	2300      	movs	r3, #0
 800088e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000890:	2300      	movs	r3, #0
 8000892:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000894:	1d3b      	adds	r3, r7, #4
 8000896:	4619      	mov	r1, r3
 8000898:	4805      	ldr	r0, [pc, #20]	; (80008b0 <MX_TIM2_Init+0x98>)
 800089a:	f005 fcad 	bl	80061f8 <HAL_TIMEx_MasterConfigSynchronization>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80008a4:	f000 fd20 	bl	80012e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008a8:	bf00      	nop
 80008aa:	3720      	adds	r7, #32
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	240003a0 	.word	0x240003a0

080008b4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b08c      	sub	sp, #48	; 0x30
 80008b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80008ba:	f107 030c 	add.w	r3, r7, #12
 80008be:	2224      	movs	r2, #36	; 0x24
 80008c0:	2100      	movs	r1, #0
 80008c2:	4618      	mov	r0, r3
 80008c4:	f007 fa66 	bl	8007d94 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008c8:	463b      	mov	r3, r7
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
 80008ce:	605a      	str	r2, [r3, #4]
 80008d0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008d2:	4b21      	ldr	r3, [pc, #132]	; (8000958 <MX_TIM3_Init+0xa4>)
 80008d4:	4a21      	ldr	r2, [pc, #132]	; (800095c <MX_TIM3_Init+0xa8>)
 80008d6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80008d8:	4b1f      	ldr	r3, [pc, #124]	; (8000958 <MX_TIM3_Init+0xa4>)
 80008da:	2200      	movs	r2, #0
 80008dc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008de:	4b1e      	ldr	r3, [pc, #120]	; (8000958 <MX_TIM3_Init+0xa4>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65531;
 80008e4:	4b1c      	ldr	r3, [pc, #112]	; (8000958 <MX_TIM3_Init+0xa4>)
 80008e6:	f64f 72fb 	movw	r2, #65531	; 0xfffb
 80008ea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ec:	4b1a      	ldr	r3, [pc, #104]	; (8000958 <MX_TIM3_Init+0xa4>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008f2:	4b19      	ldr	r3, [pc, #100]	; (8000958 <MX_TIM3_Init+0xa4>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80008f8:	2303      	movs	r3, #3
 80008fa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80008fc:	2300      	movs	r3, #0
 80008fe:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000900:	2301      	movs	r3, #1
 8000902:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000904:	2300      	movs	r3, #0
 8000906:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000908:	230a      	movs	r3, #10
 800090a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800090c:	2300      	movs	r3, #0
 800090e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000910:	2301      	movs	r3, #1
 8000912:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000914:	2300      	movs	r3, #0
 8000916:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8000918:	230a      	movs	r3, #10
 800091a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800091c:	f107 030c 	add.w	r3, r7, #12
 8000920:	4619      	mov	r1, r3
 8000922:	480d      	ldr	r0, [pc, #52]	; (8000958 <MX_TIM3_Init+0xa4>)
 8000924:	f004 f9ce 	bl	8004cc4 <HAL_TIM_Encoder_Init>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800092e:	f000 fcdb 	bl	80012e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000932:	2300      	movs	r3, #0
 8000934:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000936:	2300      	movs	r3, #0
 8000938:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800093a:	463b      	mov	r3, r7
 800093c:	4619      	mov	r1, r3
 800093e:	4806      	ldr	r0, [pc, #24]	; (8000958 <MX_TIM3_Init+0xa4>)
 8000940:	f005 fc5a 	bl	80061f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800094a:	f000 fccd 	bl	80012e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800094e:	bf00      	nop
 8000950:	3730      	adds	r7, #48	; 0x30
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	24000348 	.word	0x24000348
 800095c:	40000400 	.word	0x40000400

08000960 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b08e      	sub	sp, #56	; 0x38
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000966:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	605a      	str	r2, [r3, #4]
 8000970:	609a      	str	r2, [r3, #8]
 8000972:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000974:	f107 031c 	add.w	r3, r7, #28
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	605a      	str	r2, [r3, #4]
 800097e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000980:	463b      	mov	r3, r7
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
 8000986:	605a      	str	r2, [r3, #4]
 8000988:	609a      	str	r2, [r3, #8]
 800098a:	60da      	str	r2, [r3, #12]
 800098c:	611a      	str	r2, [r3, #16]
 800098e:	615a      	str	r2, [r3, #20]
 8000990:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000992:	4b2d      	ldr	r3, [pc, #180]	; (8000a48 <MX_TIM4_Init+0xe8>)
 8000994:	4a2d      	ldr	r2, [pc, #180]	; (8000a4c <MX_TIM4_Init+0xec>)
 8000996:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 99;
 8000998:	4b2b      	ldr	r3, [pc, #172]	; (8000a48 <MX_TIM4_Init+0xe8>)
 800099a:	2263      	movs	r2, #99	; 0x63
 800099c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800099e:	4b2a      	ldr	r3, [pc, #168]	; (8000a48 <MX_TIM4_Init+0xe8>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80009a4:	4b28      	ldr	r3, [pc, #160]	; (8000a48 <MX_TIM4_Init+0xe8>)
 80009a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009aa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ac:	4b26      	ldr	r3, [pc, #152]	; (8000a48 <MX_TIM4_Init+0xe8>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009b2:	4b25      	ldr	r3, [pc, #148]	; (8000a48 <MX_TIM4_Init+0xe8>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80009b8:	4823      	ldr	r0, [pc, #140]	; (8000a48 <MX_TIM4_Init+0xe8>)
 80009ba:	f003 fdb3 	bl	8004524 <HAL_TIM_Base_Init>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80009c4:	f000 fc90 	bl	80012e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009cc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80009ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009d2:	4619      	mov	r1, r3
 80009d4:	481c      	ldr	r0, [pc, #112]	; (8000a48 <MX_TIM4_Init+0xe8>)
 80009d6:	f004 fd79 	bl	80054cc <HAL_TIM_ConfigClockSource>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80009e0:	f000 fc82 	bl	80012e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80009e4:	4818      	ldr	r0, [pc, #96]	; (8000a48 <MX_TIM4_Init+0xe8>)
 80009e6:	f003 fe7b 	bl	80046e0 <HAL_TIM_PWM_Init>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80009f0:	f000 fc7a 	bl	80012e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009f4:	2300      	movs	r3, #0
 80009f6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009f8:	2300      	movs	r3, #0
 80009fa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80009fc:	f107 031c 	add.w	r3, r7, #28
 8000a00:	4619      	mov	r1, r3
 8000a02:	4811      	ldr	r0, [pc, #68]	; (8000a48 <MX_TIM4_Init+0xe8>)
 8000a04:	f005 fbf8 	bl	80061f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000a0e:	f000 fc6b 	bl	80012e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a12:	2360      	movs	r3, #96	; 0x60
 8000a14:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 4999;
 8000a16:	f241 3387 	movw	r3, #4999	; 0x1387
 8000a1a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a20:	2300      	movs	r3, #0
 8000a22:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a24:	463b      	mov	r3, r7
 8000a26:	220c      	movs	r2, #12
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4807      	ldr	r0, [pc, #28]	; (8000a48 <MX_TIM4_Init+0xe8>)
 8000a2c:	f004 fc3a 	bl	80052a4 <HAL_TIM_PWM_ConfigChannel>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8000a36:	f000 fc57 	bl	80012e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000a3a:	4803      	ldr	r0, [pc, #12]	; (8000a48 <MX_TIM4_Init+0xe8>)
 8000a3c:	f000 fd92 	bl	8001564 <HAL_TIM_MspPostInit>

}
 8000a40:	bf00      	nop
 8000a42:	3738      	adds	r7, #56	; 0x38
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	2400021c 	.word	0x2400021c
 8000a4c:	40000800 	.word	0x40000800

08000a50 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b088      	sub	sp, #32
 8000a54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a56:	f107 0310 	add.w	r3, r7, #16
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	601a      	str	r2, [r3, #0]
 8000a5e:	605a      	str	r2, [r3, #4]
 8000a60:	609a      	str	r2, [r3, #8]
 8000a62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a64:	1d3b      	adds	r3, r7, #4
 8000a66:	2200      	movs	r2, #0
 8000a68:	601a      	str	r2, [r3, #0]
 8000a6a:	605a      	str	r2, [r3, #4]
 8000a6c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000a6e:	4b1d      	ldr	r3, [pc, #116]	; (8000ae4 <MX_TIM5_Init+0x94>)
 8000a70:	4a1d      	ldr	r2, [pc, #116]	; (8000ae8 <MX_TIM5_Init+0x98>)
 8000a72:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 5499;
 8000a74:	4b1b      	ldr	r3, [pc, #108]	; (8000ae4 <MX_TIM5_Init+0x94>)
 8000a76:	f241 527b 	movw	r2, #5499	; 0x157b
 8000a7a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a7c:	4b19      	ldr	r3, [pc, #100]	; (8000ae4 <MX_TIM5_Init+0x94>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 99999;
 8000a82:	4b18      	ldr	r3, [pc, #96]	; (8000ae4 <MX_TIM5_Init+0x94>)
 8000a84:	4a19      	ldr	r2, [pc, #100]	; (8000aec <MX_TIM5_Init+0x9c>)
 8000a86:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a88:	4b16      	ldr	r3, [pc, #88]	; (8000ae4 <MX_TIM5_Init+0x94>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a8e:	4b15      	ldr	r3, [pc, #84]	; (8000ae4 <MX_TIM5_Init+0x94>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000a94:	4813      	ldr	r0, [pc, #76]	; (8000ae4 <MX_TIM5_Init+0x94>)
 8000a96:	f003 fd45 	bl	8004524 <HAL_TIM_Base_Init>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000aa0:	f000 fc22 	bl	80012e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aa4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aa8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000aaa:	f107 0310 	add.w	r3, r7, #16
 8000aae:	4619      	mov	r1, r3
 8000ab0:	480c      	ldr	r0, [pc, #48]	; (8000ae4 <MX_TIM5_Init+0x94>)
 8000ab2:	f004 fd0b 	bl	80054cc <HAL_TIM_ConfigClockSource>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000abc:	f000 fc14 	bl	80012e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000ac8:	1d3b      	adds	r3, r7, #4
 8000aca:	4619      	mov	r1, r3
 8000acc:	4805      	ldr	r0, [pc, #20]	; (8000ae4 <MX_TIM5_Init+0x94>)
 8000ace:	f005 fb93 	bl	80061f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000ad8:	f000 fc06 	bl	80012e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000adc:	bf00      	nop
 8000ade:	3720      	adds	r7, #32
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	240002fc 	.word	0x240002fc
 8000ae8:	40000c00 	.word	0x40000c00
 8000aec:	0001869f 	.word	0x0001869f

08000af0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b08c      	sub	sp, #48	; 0x30
 8000af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000af6:	f107 0320 	add.w	r3, r7, #32
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	605a      	str	r2, [r3, #4]
 8000b00:	609a      	str	r2, [r3, #8]
 8000b02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b04:	f107 0314 	add.w	r3, r7, #20
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000b10:	1d3b      	adds	r3, r7, #4
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
 8000b16:	605a      	str	r2, [r3, #4]
 8000b18:	609a      	str	r2, [r3, #8]
 8000b1a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000b1c:	4b2e      	ldr	r3, [pc, #184]	; (8000bd8 <MX_TIM8_Init+0xe8>)
 8000b1e:	4a2f      	ldr	r2, [pc, #188]	; (8000bdc <MX_TIM8_Init+0xec>)
 8000b20:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 9999;
 8000b22:	4b2d      	ldr	r3, [pc, #180]	; (8000bd8 <MX_TIM8_Init+0xe8>)
 8000b24:	f242 720f 	movw	r2, #9999	; 0x270f
 8000b28:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b2a:	4b2b      	ldr	r3, [pc, #172]	; (8000bd8 <MX_TIM8_Init+0xe8>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000b30:	4b29      	ldr	r3, [pc, #164]	; (8000bd8 <MX_TIM8_Init+0xe8>)
 8000b32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b36:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b38:	4b27      	ldr	r3, [pc, #156]	; (8000bd8 <MX_TIM8_Init+0xe8>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 10;
 8000b3e:	4b26      	ldr	r3, [pc, #152]	; (8000bd8 <MX_TIM8_Init+0xe8>)
 8000b40:	220a      	movs	r2, #10
 8000b42:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b44:	4b24      	ldr	r3, [pc, #144]	; (8000bd8 <MX_TIM8_Init+0xe8>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000b4a:	4823      	ldr	r0, [pc, #140]	; (8000bd8 <MX_TIM8_Init+0xe8>)
 8000b4c:	f003 fcea 	bl	8004524 <HAL_TIM_Base_Init>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_TIM8_Init+0x6a>
  {
    Error_Handler();
 8000b56:	f000 fbc7 	bl	80012e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b5e:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000b60:	f107 0320 	add.w	r3, r7, #32
 8000b64:	4619      	mov	r1, r3
 8000b66:	481c      	ldr	r0, [pc, #112]	; (8000bd8 <MX_TIM8_Init+0xe8>)
 8000b68:	f004 fcb0 	bl	80054cc <HAL_TIM_ConfigClockSource>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_TIM8_Init+0x86>
  {
    Error_Handler();
 8000b72:	f000 fbb9 	bl	80012e8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 8000b76:	4818      	ldr	r0, [pc, #96]	; (8000bd8 <MX_TIM8_Init+0xe8>)
 8000b78:	f003 ff30 	bl	80049dc <HAL_TIM_IC_Init>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8000b82:	f000 fbb1 	bl	80012e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b86:	2300      	movs	r3, #0
 8000b88:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000b92:	f107 0314 	add.w	r3, r7, #20
 8000b96:	4619      	mov	r1, r3
 8000b98:	480f      	ldr	r0, [pc, #60]	; (8000bd8 <MX_TIM8_Init+0xe8>)
 8000b9a:	f005 fb2d 	bl	80061f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_TIM8_Init+0xb8>
  {
    Error_Handler();
 8000ba4:	f000 fba0 	bl	80012e8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000bac:	2301      	movs	r3, #1
 8000bae:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 10;
 8000bb4:	230a      	movs	r3, #10
 8000bb6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000bb8:	1d3b      	adds	r3, r7, #4
 8000bba:	2208      	movs	r2, #8
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4806      	ldr	r0, [pc, #24]	; (8000bd8 <MX_TIM8_Init+0xe8>)
 8000bc0:	f004 fad3 	bl	800516a <HAL_TIM_IC_ConfigChannel>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <MX_TIM8_Init+0xde>
  {
    Error_Handler();
 8000bca:	f000 fb8d 	bl	80012e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000bce:	bf00      	nop
 8000bd0:	3730      	adds	r7, #48	; 0x30
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	240001d0 	.word	0x240001d0
 8000bdc:	40010400 	.word	0x40010400

08000be0 <MX_TIM23_Init>:
  * @brief TIM23 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM23_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b088      	sub	sp, #32
 8000be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000be6:	f107 0310 	add.w	r3, r7, #16
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	605a      	str	r2, [r3, #4]
 8000bf0:	609a      	str	r2, [r3, #8]
 8000bf2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bf4:	1d3b      	adds	r3, r7, #4
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	601a      	str	r2, [r3, #0]
 8000bfa:	605a      	str	r2, [r3, #4]
 8000bfc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 8000bfe:	4b1e      	ldr	r3, [pc, #120]	; (8000c78 <MX_TIM23_Init+0x98>)
 8000c00:	4a1e      	ldr	r2, [pc, #120]	; (8000c7c <MX_TIM23_Init+0x9c>)
 8000c02:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 549;
 8000c04:	4b1c      	ldr	r3, [pc, #112]	; (8000c78 <MX_TIM23_Init+0x98>)
 8000c06:	f240 2225 	movw	r2, #549	; 0x225
 8000c0a:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c0c:	4b1a      	ldr	r3, [pc, #104]	; (8000c78 <MX_TIM23_Init+0x98>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 9999;
 8000c12:	4b19      	ldr	r3, [pc, #100]	; (8000c78 <MX_TIM23_Init+0x98>)
 8000c14:	f242 720f 	movw	r2, #9999	; 0x270f
 8000c18:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c1a:	4b17      	ldr	r3, [pc, #92]	; (8000c78 <MX_TIM23_Init+0x98>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c20:	4b15      	ldr	r3, [pc, #84]	; (8000c78 <MX_TIM23_Init+0x98>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim23) != HAL_OK)
 8000c26:	4814      	ldr	r0, [pc, #80]	; (8000c78 <MX_TIM23_Init+0x98>)
 8000c28:	f003 fc7c 	bl	8004524 <HAL_TIM_Base_Init>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_TIM23_Init+0x56>
  {
    Error_Handler();
 8000c32:	f000 fb59 	bl	80012e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c3a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim23, &sClockSourceConfig) != HAL_OK)
 8000c3c:	f107 0310 	add.w	r3, r7, #16
 8000c40:	4619      	mov	r1, r3
 8000c42:	480d      	ldr	r0, [pc, #52]	; (8000c78 <MX_TIM23_Init+0x98>)
 8000c44:	f004 fc42 	bl	80054cc <HAL_TIM_ConfigClockSource>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_TIM23_Init+0x72>
  {
    Error_Handler();
 8000c4e:	f000 fb4b 	bl	80012e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c52:	2300      	movs	r3, #0
 8000c54:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c56:	2300      	movs	r3, #0
 8000c58:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 8000c5a:	1d3b      	adds	r3, r7, #4
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4806      	ldr	r0, [pc, #24]	; (8000c78 <MX_TIM23_Init+0x98>)
 8000c60:	f005 faca 	bl	80061f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <MX_TIM23_Init+0x8e>
  {
    Error_Handler();
 8000c6a:	f000 fb3d 	bl	80012e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 8000c6e:	bf00      	nop
 8000c70:	3720      	adds	r7, #32
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	240003ec 	.word	0x240003ec
 8000c7c:	4000e000 	.word	0x4000e000

08000c80 <MX_TIM24_Init>:
  * @brief TIM24 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM24_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b088      	sub	sp, #32
 8000c84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM24_Init 0 */

  /* USER CODE END TIM24_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c86:	f107 0310 	add.w	r3, r7, #16
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
 8000c8e:	605a      	str	r2, [r3, #4]
 8000c90:	609a      	str	r2, [r3, #8]
 8000c92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c94:	1d3b      	adds	r3, r7, #4
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	605a      	str	r2, [r3, #4]
 8000c9c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM24_Init 1 */

  /* USER CODE END TIM24_Init 1 */
  htim24.Instance = TIM24;
 8000c9e:	4b1d      	ldr	r3, [pc, #116]	; (8000d14 <MX_TIM24_Init+0x94>)
 8000ca0:	4a1d      	ldr	r2, [pc, #116]	; (8000d18 <MX_TIM24_Init+0x98>)
 8000ca2:	601a      	str	r2, [r3, #0]
  htim24.Init.Prescaler = 65530;
 8000ca4:	4b1b      	ldr	r3, [pc, #108]	; (8000d14 <MX_TIM24_Init+0x94>)
 8000ca6:	f64f 72fa 	movw	r2, #65530	; 0xfffa
 8000caa:	605a      	str	r2, [r3, #4]
  htim24.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cac:	4b19      	ldr	r3, [pc, #100]	; (8000d14 <MX_TIM24_Init+0x94>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	609a      	str	r2, [r3, #8]
  htim24.Init.Period = 14;
 8000cb2:	4b18      	ldr	r3, [pc, #96]	; (8000d14 <MX_TIM24_Init+0x94>)
 8000cb4:	220e      	movs	r2, #14
 8000cb6:	60da      	str	r2, [r3, #12]
  htim24.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cb8:	4b16      	ldr	r3, [pc, #88]	; (8000d14 <MX_TIM24_Init+0x94>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	611a      	str	r2, [r3, #16]
  htim24.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cbe:	4b15      	ldr	r3, [pc, #84]	; (8000d14 <MX_TIM24_Init+0x94>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim24) != HAL_OK)
 8000cc4:	4813      	ldr	r0, [pc, #76]	; (8000d14 <MX_TIM24_Init+0x94>)
 8000cc6:	f003 fc2d 	bl	8004524 <HAL_TIM_Base_Init>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_TIM24_Init+0x54>
  {
    Error_Handler();
 8000cd0:	f000 fb0a 	bl	80012e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cd8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim24, &sClockSourceConfig) != HAL_OK)
 8000cda:	f107 0310 	add.w	r3, r7, #16
 8000cde:	4619      	mov	r1, r3
 8000ce0:	480c      	ldr	r0, [pc, #48]	; (8000d14 <MX_TIM24_Init+0x94>)
 8000ce2:	f004 fbf3 	bl	80054cc <HAL_TIM_ConfigClockSource>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_TIM24_Init+0x70>
  {
    Error_Handler();
 8000cec:	f000 fafc 	bl	80012e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim24, &sMasterConfig) != HAL_OK)
 8000cf8:	1d3b      	adds	r3, r7, #4
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4805      	ldr	r0, [pc, #20]	; (8000d14 <MX_TIM24_Init+0x94>)
 8000cfe:	f005 fa7b 	bl	80061f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_TIM24_Init+0x8c>
  {
    Error_Handler();
 8000d08:	f000 faee 	bl	80012e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM24_Init 2 */

  /* USER CODE END TIM24_Init 2 */

}
 8000d0c:	bf00      	nop
 8000d0e:	3720      	adds	r7, #32
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	24000180 	.word	0x24000180
 8000d18:	4000e400 	.word	0x4000e400

08000d1c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d20:	4b22      	ldr	r3, [pc, #136]	; (8000dac <MX_USART3_UART_Init+0x90>)
 8000d22:	4a23      	ldr	r2, [pc, #140]	; (8000db0 <MX_USART3_UART_Init+0x94>)
 8000d24:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d26:	4b21      	ldr	r3, [pc, #132]	; (8000dac <MX_USART3_UART_Init+0x90>)
 8000d28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d2c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d2e:	4b1f      	ldr	r3, [pc, #124]	; (8000dac <MX_USART3_UART_Init+0x90>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d34:	4b1d      	ldr	r3, [pc, #116]	; (8000dac <MX_USART3_UART_Init+0x90>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d3a:	4b1c      	ldr	r3, [pc, #112]	; (8000dac <MX_USART3_UART_Init+0x90>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d40:	4b1a      	ldr	r3, [pc, #104]	; (8000dac <MX_USART3_UART_Init+0x90>)
 8000d42:	220c      	movs	r2, #12
 8000d44:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d46:	4b19      	ldr	r3, [pc, #100]	; (8000dac <MX_USART3_UART_Init+0x90>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d4c:	4b17      	ldr	r3, [pc, #92]	; (8000dac <MX_USART3_UART_Init+0x90>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d52:	4b16      	ldr	r3, [pc, #88]	; (8000dac <MX_USART3_UART_Init+0x90>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d58:	4b14      	ldr	r3, [pc, #80]	; (8000dac <MX_USART3_UART_Init+0x90>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d5e:	4b13      	ldr	r3, [pc, #76]	; (8000dac <MX_USART3_UART_Init+0x90>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d64:	4811      	ldr	r0, [pc, #68]	; (8000dac <MX_USART3_UART_Init+0x90>)
 8000d66:	f005 fb01 	bl	800636c <HAL_UART_Init>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000d70:	f000 faba 	bl	80012e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d74:	2100      	movs	r1, #0
 8000d76:	480d      	ldr	r0, [pc, #52]	; (8000dac <MX_USART3_UART_Init+0x90>)
 8000d78:	f006 fb94 	bl	80074a4 <HAL_UARTEx_SetTxFifoThreshold>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000d82:	f000 fab1 	bl	80012e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d86:	2100      	movs	r1, #0
 8000d88:	4808      	ldr	r0, [pc, #32]	; (8000dac <MX_USART3_UART_Init+0x90>)
 8000d8a:	f006 fbc9 	bl	8007520 <HAL_UARTEx_SetRxFifoThreshold>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000d94:	f000 faa8 	bl	80012e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000d98:	4804      	ldr	r0, [pc, #16]	; (8000dac <MX_USART3_UART_Init+0x90>)
 8000d9a:	f006 fb4a 	bl	8007432 <HAL_UARTEx_DisableFifoMode>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000da4:	f000 faa0 	bl	80012e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000da8:	bf00      	nop
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	24000268 	.word	0x24000268
 8000db0:	40004800 	.word	0x40004800

08000db4 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000db8:	bf00      	nop
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
	...

08000dc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b08c      	sub	sp, #48	; 0x30
 8000dc8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dca:	f107 031c 	add.w	r3, r7, #28
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	605a      	str	r2, [r3, #4]
 8000dd4:	609a      	str	r2, [r3, #8]
 8000dd6:	60da      	str	r2, [r3, #12]
 8000dd8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dda:	4ba8      	ldr	r3, [pc, #672]	; (800107c <MX_GPIO_Init+0x2b8>)
 8000ddc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000de0:	4aa6      	ldr	r2, [pc, #664]	; (800107c <MX_GPIO_Init+0x2b8>)
 8000de2:	f043 0304 	orr.w	r3, r3, #4
 8000de6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dea:	4ba4      	ldr	r3, [pc, #656]	; (800107c <MX_GPIO_Init+0x2b8>)
 8000dec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000df0:	f003 0304 	and.w	r3, r3, #4
 8000df4:	61bb      	str	r3, [r7, #24]
 8000df6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000df8:	4ba0      	ldr	r3, [pc, #640]	; (800107c <MX_GPIO_Init+0x2b8>)
 8000dfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dfe:	4a9f      	ldr	r2, [pc, #636]	; (800107c <MX_GPIO_Init+0x2b8>)
 8000e00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e04:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e08:	4b9c      	ldr	r3, [pc, #624]	; (800107c <MX_GPIO_Init+0x2b8>)
 8000e0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e12:	617b      	str	r3, [r7, #20]
 8000e14:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e16:	4b99      	ldr	r3, [pc, #612]	; (800107c <MX_GPIO_Init+0x2b8>)
 8000e18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e1c:	4a97      	ldr	r2, [pc, #604]	; (800107c <MX_GPIO_Init+0x2b8>)
 8000e1e:	f043 0301 	orr.w	r3, r3, #1
 8000e22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e26:	4b95      	ldr	r3, [pc, #596]	; (800107c <MX_GPIO_Init+0x2b8>)
 8000e28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e2c:	f003 0301 	and.w	r3, r3, #1
 8000e30:	613b      	str	r3, [r7, #16]
 8000e32:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e34:	4b91      	ldr	r3, [pc, #580]	; (800107c <MX_GPIO_Init+0x2b8>)
 8000e36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e3a:	4a90      	ldr	r2, [pc, #576]	; (800107c <MX_GPIO_Init+0x2b8>)
 8000e3c:	f043 0302 	orr.w	r3, r3, #2
 8000e40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e44:	4b8d      	ldr	r3, [pc, #564]	; (800107c <MX_GPIO_Init+0x2b8>)
 8000e46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e4a:	f003 0302 	and.w	r3, r3, #2
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e52:	4b8a      	ldr	r3, [pc, #552]	; (800107c <MX_GPIO_Init+0x2b8>)
 8000e54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e58:	4a88      	ldr	r2, [pc, #544]	; (800107c <MX_GPIO_Init+0x2b8>)
 8000e5a:	f043 0308 	orr.w	r3, r3, #8
 8000e5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e62:	4b86      	ldr	r3, [pc, #536]	; (800107c <MX_GPIO_Init+0x2b8>)
 8000e64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e68:	f003 0308 	and.w	r3, r3, #8
 8000e6c:	60bb      	str	r3, [r7, #8]
 8000e6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e70:	4b82      	ldr	r3, [pc, #520]	; (800107c <MX_GPIO_Init+0x2b8>)
 8000e72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e76:	4a81      	ldr	r2, [pc, #516]	; (800107c <MX_GPIO_Init+0x2b8>)
 8000e78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e80:	4b7e      	ldr	r3, [pc, #504]	; (800107c <MX_GPIO_Init+0x2b8>)
 8000e82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e8a:	607b      	str	r3, [r7, #4]
 8000e8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e8e:	4b7b      	ldr	r3, [pc, #492]	; (800107c <MX_GPIO_Init+0x2b8>)
 8000e90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e94:	4a79      	ldr	r2, [pc, #484]	; (800107c <MX_GPIO_Init+0x2b8>)
 8000e96:	f043 0310 	orr.w	r3, r3, #16
 8000e9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e9e:	4b77      	ldr	r3, [pc, #476]	; (800107c <MX_GPIO_Init+0x2b8>)
 8000ea0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ea4:	f003 0310 	and.w	r3, r3, #16
 8000ea8:	603b      	str	r3, [r7, #0]
 8000eaa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(C0_GPIO_Port, C0_Pin, GPIO_PIN_RESET);
 8000eac:	2200      	movs	r2, #0
 8000eae:	2101      	movs	r1, #1
 8000eb0:	4873      	ldr	r0, [pc, #460]	; (8001080 <MX_GPIO_Init+0x2bc>)
 8000eb2:	f001 f86b 	bl	8001f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(C2_GPIO_Port, C2_Pin, GPIO_PIN_SET);
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	2104      	movs	r1, #4
 8000eba:	4871      	ldr	r0, [pc, #452]	; (8001080 <MX_GPIO_Init+0x2bc>)
 8000ebc:	f001 f866 	bl	8001f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ec6:	486f      	ldr	r0, [pc, #444]	; (8001084 <MX_GPIO_Init+0x2c0>)
 8000ec8:	f001 f860 	bl	8001f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ed2:	486d      	ldr	r0, [pc, #436]	; (8001088 <MX_GPIO_Init+0x2c4>)
 8000ed4:	f001 f85a 	bl	8001f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	2102      	movs	r1, #2
 8000edc:	486b      	ldr	r0, [pc, #428]	; (800108c <MX_GPIO_Init+0x2c8>)
 8000ede:	f001 f855 	bl	8001f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : C13_Pin */
  GPIO_InitStruct.Pin = C13_Pin;
 8000ee2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ee6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ee8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000eec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(C13_GPIO_Port, &GPIO_InitStruct);
 8000ef2:	f107 031c 	add.w	r3, r7, #28
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4861      	ldr	r0, [pc, #388]	; (8001080 <MX_GPIO_Init+0x2bc>)
 8000efa:	f000 fe9f 	bl	8001c3c <HAL_GPIO_Init>

  /*Configure GPIO pins : C0_Pin C2_Pin */
  GPIO_InitStruct.Pin = C0_Pin|C2_Pin;
 8000efe:	2305      	movs	r3, #5
 8000f00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f02:	2301      	movs	r3, #1
 8000f04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f06:	2300      	movs	r3, #0
 8000f08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f0e:	f107 031c 	add.w	r3, r7, #28
 8000f12:	4619      	mov	r1, r3
 8000f14:	485a      	ldr	r0, [pc, #360]	; (8001080 <MX_GPIO_Init+0x2bc>)
 8000f16:	f000 fe91 	bl	8001c3c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000f1a:	2332      	movs	r3, #50	; 0x32
 8000f1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f26:	2300      	movs	r3, #0
 8000f28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f2a:	230b      	movs	r3, #11
 8000f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f2e:	f107 031c 	add.w	r3, r7, #28
 8000f32:	4619      	mov	r1, r3
 8000f34:	4852      	ldr	r0, [pc, #328]	; (8001080 <MX_GPIO_Init+0x2bc>)
 8000f36:	f000 fe81 	bl	8001c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : C3_Pin */
  GPIO_InitStruct.Pin = C3_Pin;
 8000f3a:	2308      	movs	r3, #8
 8000f3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(C3_GPIO_Port, &GPIO_InitStruct);
 8000f46:	f107 031c 	add.w	r3, r7, #28
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	484c      	ldr	r0, [pc, #304]	; (8001080 <MX_GPIO_Init+0x2bc>)
 8000f4e:	f000 fe75 	bl	8001c3c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000f52:	2384      	movs	r3, #132	; 0x84
 8000f54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f56:	2302      	movs	r3, #2
 8000f58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f62:	230b      	movs	r3, #11
 8000f64:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f66:	f107 031c 	add.w	r3, r7, #28
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4848      	ldr	r0, [pc, #288]	; (8001090 <MX_GPIO_Init+0x2cc>)
 8000f6e:	f000 fe65 	bl	8001c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000f72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f80:	2300      	movs	r3, #0
 8000f82:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f84:	230b      	movs	r3, #11
 8000f86:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000f88:	f107 031c 	add.w	r3, r7, #28
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	483d      	ldr	r0, [pc, #244]	; (8001084 <MX_GPIO_Init+0x2c0>)
 8000f90:	f000 fe54 	bl	8001c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000f94:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000fa6:	f107 031c 	add.w	r3, r7, #28
 8000faa:	4619      	mov	r1, r3
 8000fac:	4835      	ldr	r0, [pc, #212]	; (8001084 <MX_GPIO_Init+0x2c0>)
 8000fae:	f000 fe45 	bl	8001c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000fb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000fc4:	f107 031c 	add.w	r3, r7, #28
 8000fc8:	4619      	mov	r1, r3
 8000fca:	482f      	ldr	r0, [pc, #188]	; (8001088 <MX_GPIO_Init+0x2c4>)
 8000fcc:	f000 fe36 	bl	8001c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000fd0:	2380      	movs	r3, #128	; 0x80
 8000fd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fd4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000fd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000fde:	f107 031c 	add.w	r3, r7, #28
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	482b      	ldr	r0, [pc, #172]	; (8001094 <MX_GPIO_Init+0x2d0>)
 8000fe6:	f000 fe29 	bl	8001c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000fea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ff8:	f107 031c 	add.w	r3, r7, #28
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4824      	ldr	r0, [pc, #144]	; (8001090 <MX_GPIO_Init+0x2cc>)
 8001000:	f000 fe1c 	bl	8001c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8001004:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001008:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100a:	2302      	movs	r3, #2
 800100c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100e:	2300      	movs	r3, #0
 8001010:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001012:	2300      	movs	r3, #0
 8001014:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8001016:	230a      	movs	r3, #10
 8001018:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 800101a:	f107 031c 	add.w	r3, r7, #28
 800101e:	4619      	mov	r1, r3
 8001020:	481b      	ldr	r0, [pc, #108]	; (8001090 <MX_GPIO_Init+0x2cc>)
 8001022:	f000 fe0b 	bl	8001c3c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001026:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800102a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102c:	2302      	movs	r3, #2
 800102e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	2300      	movs	r3, #0
 8001032:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001034:	2300      	movs	r3, #0
 8001036:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001038:	230b      	movs	r3, #11
 800103a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800103c:	f107 031c 	add.w	r3, r7, #28
 8001040:	4619      	mov	r1, r3
 8001042:	4814      	ldr	r0, [pc, #80]	; (8001094 <MX_GPIO_Init+0x2d0>)
 8001044:	f000 fdfa 	bl	8001c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8001048:	2302      	movs	r3, #2
 800104a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800104c:	2301      	movs	r3, #1
 800104e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	2300      	movs	r3, #0
 8001052:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001054:	2300      	movs	r3, #0
 8001056:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8001058:	f107 031c 	add.w	r3, r7, #28
 800105c:	4619      	mov	r1, r3
 800105e:	480b      	ldr	r0, [pc, #44]	; (800108c <MX_GPIO_Init+0x2c8>)
 8001060:	f000 fdec 	bl	8001c3c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001064:	2200      	movs	r2, #0
 8001066:	2100      	movs	r1, #0
 8001068:	2028      	movs	r0, #40	; 0x28
 800106a:	f000 fdb2 	bl	8001bd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800106e:	2028      	movs	r0, #40	; 0x28
 8001070:	f000 fdc9 	bl	8001c06 <HAL_NVIC_EnableIRQ>

}
 8001074:	bf00      	nop
 8001076:	3730      	adds	r7, #48	; 0x30
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	58024400 	.word	0x58024400
 8001080:	58020800 	.word	0x58020800
 8001084:	58020400 	.word	0x58020400
 8001088:	58020c00 	.word	0x58020c00
 800108c:	58021000 	.word	0x58021000
 8001090:	58020000 	.word	0x58020000
 8001094:	58021800 	.word	0x58021800

08001098 <pulses>:
/* USER CODE BEGIN 4 */
int i = 0;
int old_pulse = 0 ;
int New_pulse = 0 ;
int pulses(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0

	if (New_pulse < old_pulse)
 800109c:	4b1a      	ldr	r3, [pc, #104]	; (8001108 <pulses+0x70>)
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	4b1a      	ldr	r3, [pc, #104]	; (800110c <pulses+0x74>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	da04      	bge.n	80010b2 <pulses+0x1a>
	{
		i++;
 80010a8:	4b19      	ldr	r3, [pc, #100]	; (8001110 <pulses+0x78>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	3301      	adds	r3, #1
 80010ae:	4a18      	ldr	r2, [pc, #96]	; (8001110 <pulses+0x78>)
 80010b0:	6013      	str	r3, [r2, #0]
	}
	New_pulse = i*65532 + __HAL_TIM_GET_COUNTER(&htim3);
 80010b2:	4b17      	ldr	r3, [pc, #92]	; (8001110 <pulses+0x78>)
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	4613      	mov	r3, r2
 80010b8:	039b      	lsls	r3, r3, #14
 80010ba:	1a9b      	subs	r3, r3, r2
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	461a      	mov	r2, r3
 80010c0:	4b14      	ldr	r3, [pc, #80]	; (8001114 <pulses+0x7c>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c6:	4413      	add	r3, r2
 80010c8:	461a      	mov	r2, r3
 80010ca:	4b0f      	ldr	r3, [pc, #60]	; (8001108 <pulses+0x70>)
 80010cc:	601a      	str	r2, [r3, #0]
	old_pulse = New_pulse;
 80010ce:	4b0e      	ldr	r3, [pc, #56]	; (8001108 <pulses+0x70>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a0e      	ldr	r2, [pc, #56]	; (800110c <pulses+0x74>)
 80010d4:	6013      	str	r3, [r2, #0]
	return (((2*M_PI)/1120) * New_pulse);
 80010d6:	4b0c      	ldr	r3, [pc, #48]	; (8001108 <pulses+0x70>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	ee07 3a90 	vmov	s15, r3
 80010de:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80010e2:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8001100 <pulses+0x68>
 80010e6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80010ea:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80010ee:	ee17 3a90 	vmov	r3, s15

}
 80010f2:	4618      	mov	r0, r3
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	f3af 8000 	nop.w
 8001100:	62fc8100 	.word	0x62fc8100
 8001104:	3f76fa7f 	.word	0x3f76fa7f
 8001108:	240000c4 	.word	0x240000c4
 800110c:	240000c0 	.word	0x240000c0
 8001110:	240000bc 	.word	0x240000bc
 8001114:	24000348 	.word	0x24000348

08001118 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	ed2d 8b02 	vpush	{d8}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]

	Pulses = pulses();
 8001124:	f7ff ffb8 	bl	8001098 <pulses>
 8001128:	4603      	mov	r3, r0
 800112a:	4a67      	ldr	r2, [pc, #412]	; (80012c8 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 800112c:	6013      	str	r3, [r2, #0]




	DutyC =  (((2.2*sin(3.123*(double)(N/Fe)) + 2.3)/4.9) + ((1.7*sin(5.73*(double)(N/Fe)) + 1.8)/3.5) + ((1.4*sin(2.39*(double)(N/Fe)) + 1.4)/2.8))/3;
 800112e:	4b67      	ldr	r3, [pc, #412]	; (80012cc <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001130:	edd3 6a00 	vldr	s13, [r3]
 8001134:	4b66      	ldr	r3, [pc, #408]	; (80012d0 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001136:	ed93 7a00 	vldr	s14, [r3]
 800113a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800113e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001142:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 8001278 <HAL_TIM_PeriodElapsedCallback+0x160>
 8001146:	ee27 7b06 	vmul.f64	d7, d7, d6
 800114a:	eeb0 0b47 	vmov.f64	d0, d7
 800114e:	f007 f883 	bl	8008258 <sin>
 8001152:	eeb0 7b40 	vmov.f64	d7, d0
 8001156:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 8001280 <HAL_TIM_PeriodElapsedCallback+0x168>
 800115a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800115e:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 8001288 <HAL_TIM_PeriodElapsedCallback+0x170>
 8001162:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001166:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 8001290 <HAL_TIM_PeriodElapsedCallback+0x178>
 800116a:	ee87 8b06 	vdiv.f64	d8, d7, d6
 800116e:	4b57      	ldr	r3, [pc, #348]	; (80012cc <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001170:	edd3 6a00 	vldr	s13, [r3]
 8001174:	4b56      	ldr	r3, [pc, #344]	; (80012d0 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001176:	ed93 7a00 	vldr	s14, [r3]
 800117a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800117e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001182:	ed9f 6b45 	vldr	d6, [pc, #276]	; 8001298 <HAL_TIM_PeriodElapsedCallback+0x180>
 8001186:	ee27 7b06 	vmul.f64	d7, d7, d6
 800118a:	eeb0 0b47 	vmov.f64	d0, d7
 800118e:	f007 f863 	bl	8008258 <sin>
 8001192:	eeb0 7b40 	vmov.f64	d7, d0
 8001196:	ed9f 6b42 	vldr	d6, [pc, #264]	; 80012a0 <HAL_TIM_PeriodElapsedCallback+0x188>
 800119a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800119e:	ed9f 6b42 	vldr	d6, [pc, #264]	; 80012a8 <HAL_TIM_PeriodElapsedCallback+0x190>
 80011a2:	ee37 6b06 	vadd.f64	d6, d7, d6
 80011a6:	eeb0 5b0c 	vmov.f64	d5, #12	; 0x40600000  3.5
 80011aa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80011ae:	ee38 8b07 	vadd.f64	d8, d8, d7
 80011b2:	4b46      	ldr	r3, [pc, #280]	; (80012cc <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80011b4:	edd3 6a00 	vldr	s13, [r3]
 80011b8:	4b45      	ldr	r3, [pc, #276]	; (80012d0 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80011ba:	ed93 7a00 	vldr	s14, [r3]
 80011be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011c2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011c6:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 80012b0 <HAL_TIM_PeriodElapsedCallback+0x198>
 80011ca:	ee27 7b06 	vmul.f64	d7, d7, d6
 80011ce:	eeb0 0b47 	vmov.f64	d0, d7
 80011d2:	f007 f841 	bl	8008258 <sin>
 80011d6:	eeb0 7b40 	vmov.f64	d7, d0
 80011da:	ed9f 6b37 	vldr	d6, [pc, #220]	; 80012b8 <HAL_TIM_PeriodElapsedCallback+0x1a0>
 80011de:	ee27 7b06 	vmul.f64	d7, d7, d6
 80011e2:	ed9f 6b35 	vldr	d6, [pc, #212]	; 80012b8 <HAL_TIM_PeriodElapsedCallback+0x1a0>
 80011e6:	ee37 6b06 	vadd.f64	d6, d7, d6
 80011ea:	ed9f 5b35 	vldr	d5, [pc, #212]	; 80012c0 <HAL_TIM_PeriodElapsedCallback+0x1a8>
 80011ee:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80011f2:	ee38 6b07 	vadd.f64	d6, d8, d7
 80011f6:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 80011fa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80011fe:	4b35      	ldr	r3, [pc, #212]	; (80012d4 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8001200:	ed83 7b00 	vstr	d7, [r3]
	input_val =  DutyC * 12 ;
 8001204:	4b33      	ldr	r3, [pc, #204]	; (80012d4 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8001206:	ed93 7b00 	vldr	d7, [r3]
 800120a:	eeb2 6b08 	vmov.f64	d6, #40	; 0x41400000  12.0
 800120e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001212:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001216:	4b30      	ldr	r3, [pc, #192]	; (80012d8 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8001218:	edc3 7a00 	vstr	s15, [r3]
	ccr_reg = (int) round ( DutyC * ARR ) ;
 800121c:	4b2f      	ldr	r3, [pc, #188]	; (80012dc <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	ee07 3a90 	vmov	s15, r3
 8001224:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001228:	4b2a      	ldr	r3, [pc, #168]	; (80012d4 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 800122a:	ed93 7b00 	vldr	d7, [r3]
 800122e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001232:	eeb0 0b47 	vmov.f64	d0, d7
 8001236:	f006 ffc7 	bl	80081c8 <round>
 800123a:	eeb0 7b40 	vmov.f64	d7, d0
 800123e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001242:	ee17 2a90 	vmov	r2, s15
 8001246:	4b26      	ldr	r3, [pc, #152]	; (80012e0 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001248:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4, ccr_reg);
 800124a:	4b25      	ldr	r3, [pc, #148]	; (80012e0 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	4b25      	ldr	r3, [pc, #148]	; (80012e4 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	641a      	str	r2, [r3, #64]	; 0x40

	N++;
 8001254:	4b1d      	ldr	r3, [pc, #116]	; (80012cc <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001256:	edd3 7a00 	vldr	s15, [r3]
 800125a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800125e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001262:	4b1a      	ldr	r3, [pc, #104]	; (80012cc <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001264:	edc3 7a00 	vstr	s15, [r3]


}
 8001268:	bf00      	nop
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	ecbd 8b02 	vpop	{d8}
 8001272:	bd80      	pop	{r7, pc}
 8001274:	f3af 8000 	nop.w
 8001278:	6c8b4396 	.word	0x6c8b4396
 800127c:	4008fbe7 	.word	0x4008fbe7
 8001280:	9999999a 	.word	0x9999999a
 8001284:	40019999 	.word	0x40019999
 8001288:	66666666 	.word	0x66666666
 800128c:	40026666 	.word	0x40026666
 8001290:	9999999a 	.word	0x9999999a
 8001294:	40139999 	.word	0x40139999
 8001298:	1eb851ec 	.word	0x1eb851ec
 800129c:	4016eb85 	.word	0x4016eb85
 80012a0:	33333333 	.word	0x33333333
 80012a4:	3ffb3333 	.word	0x3ffb3333
 80012a8:	cccccccd 	.word	0xcccccccd
 80012ac:	3ffccccc 	.word	0x3ffccccc
 80012b0:	51eb851f 	.word	0x51eb851f
 80012b4:	40031eb8 	.word	0x40031eb8
 80012b8:	66666666 	.word	0x66666666
 80012bc:	3ff66666 	.word	0x3ff66666
 80012c0:	66666666 	.word	0x66666666
 80012c4:	40066666 	.word	0x40066666
 80012c8:	2400039c 	.word	0x2400039c
 80012cc:	24000000 	.word	0x24000000
 80012d0:	24000004 	.word	0x24000004
 80012d4:	240000b0 	.word	0x240000b0
 80012d8:	240000a8 	.word	0x240000a8
 80012dc:	24000008 	.word	0x24000008
 80012e0:	240000b8 	.word	0x240000b8
 80012e4:	2400021c 	.word	0x2400021c

080012e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012ec:	b672      	cpsid	i
}
 80012ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012f0:	e7fe      	b.n	80012f0 <Error_Handler+0x8>
	...

080012f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012fa:	4b0a      	ldr	r3, [pc, #40]	; (8001324 <HAL_MspInit+0x30>)
 80012fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001300:	4a08      	ldr	r2, [pc, #32]	; (8001324 <HAL_MspInit+0x30>)
 8001302:	f043 0302 	orr.w	r3, r3, #2
 8001306:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800130a:	4b06      	ldr	r3, [pc, #24]	; (8001324 <HAL_MspInit+0x30>)
 800130c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001310:	f003 0302 	and.w	r3, r3, #2
 8001314:	607b      	str	r3, [r7, #4]
 8001316:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001318:	bf00      	nop
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr
 8001324:	58024400 	.word	0x58024400

08001328 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b08e      	sub	sp, #56	; 0x38
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001330:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	60da      	str	r2, [r3, #12]
 800133e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001348:	d117      	bne.n	800137a <HAL_TIM_Base_MspInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800134a:	4b5a      	ldr	r3, [pc, #360]	; (80014b4 <HAL_TIM_Base_MspInit+0x18c>)
 800134c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001350:	4a58      	ldr	r2, [pc, #352]	; (80014b4 <HAL_TIM_Base_MspInit+0x18c>)
 8001352:	f043 0301 	orr.w	r3, r3, #1
 8001356:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800135a:	4b56      	ldr	r3, [pc, #344]	; (80014b4 <HAL_TIM_Base_MspInit+0x18c>)
 800135c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001360:	f003 0301 	and.w	r3, r3, #1
 8001364:	623b      	str	r3, [r7, #32]
 8001366:	6a3b      	ldr	r3, [r7, #32]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001368:	2200      	movs	r2, #0
 800136a:	2100      	movs	r1, #0
 800136c:	201c      	movs	r0, #28
 800136e:	f000 fc30 	bl	8001bd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001372:	201c      	movs	r0, #28
 8001374:	f000 fc47 	bl	8001c06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM24_MspInit 1 */

  /* USER CODE END TIM24_MspInit 1 */
  }

}
 8001378:	e097      	b.n	80014aa <HAL_TIM_Base_MspInit+0x182>
  else if(htim_base->Instance==TIM4)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a4e      	ldr	r2, [pc, #312]	; (80014b8 <HAL_TIM_Base_MspInit+0x190>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d10f      	bne.n	80013a4 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001384:	4b4b      	ldr	r3, [pc, #300]	; (80014b4 <HAL_TIM_Base_MspInit+0x18c>)
 8001386:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800138a:	4a4a      	ldr	r2, [pc, #296]	; (80014b4 <HAL_TIM_Base_MspInit+0x18c>)
 800138c:	f043 0304 	orr.w	r3, r3, #4
 8001390:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001394:	4b47      	ldr	r3, [pc, #284]	; (80014b4 <HAL_TIM_Base_MspInit+0x18c>)
 8001396:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800139a:	f003 0304 	and.w	r3, r3, #4
 800139e:	61fb      	str	r3, [r7, #28]
 80013a0:	69fb      	ldr	r3, [r7, #28]
}
 80013a2:	e082      	b.n	80014aa <HAL_TIM_Base_MspInit+0x182>
  else if(htim_base->Instance==TIM5)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a44      	ldr	r2, [pc, #272]	; (80014bc <HAL_TIM_Base_MspInit+0x194>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d10f      	bne.n	80013ce <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80013ae:	4b41      	ldr	r3, [pc, #260]	; (80014b4 <HAL_TIM_Base_MspInit+0x18c>)
 80013b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80013b4:	4a3f      	ldr	r2, [pc, #252]	; (80014b4 <HAL_TIM_Base_MspInit+0x18c>)
 80013b6:	f043 0308 	orr.w	r3, r3, #8
 80013ba:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80013be:	4b3d      	ldr	r3, [pc, #244]	; (80014b4 <HAL_TIM_Base_MspInit+0x18c>)
 80013c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80013c4:	f003 0308 	and.w	r3, r3, #8
 80013c8:	61bb      	str	r3, [r7, #24]
 80013ca:	69bb      	ldr	r3, [r7, #24]
}
 80013cc:	e06d      	b.n	80014aa <HAL_TIM_Base_MspInit+0x182>
  else if(htim_base->Instance==TIM8)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a3b      	ldr	r2, [pc, #236]	; (80014c0 <HAL_TIM_Base_MspInit+0x198>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d12f      	bne.n	8001438 <HAL_TIM_Base_MspInit+0x110>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80013d8:	4b36      	ldr	r3, [pc, #216]	; (80014b4 <HAL_TIM_Base_MspInit+0x18c>)
 80013da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80013de:	4a35      	ldr	r2, [pc, #212]	; (80014b4 <HAL_TIM_Base_MspInit+0x18c>)
 80013e0:	f043 0302 	orr.w	r3, r3, #2
 80013e4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80013e8:	4b32      	ldr	r3, [pc, #200]	; (80014b4 <HAL_TIM_Base_MspInit+0x18c>)
 80013ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80013ee:	f003 0302 	and.w	r3, r3, #2
 80013f2:	617b      	str	r3, [r7, #20]
 80013f4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013f6:	4b2f      	ldr	r3, [pc, #188]	; (80014b4 <HAL_TIM_Base_MspInit+0x18c>)
 80013f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013fc:	4a2d      	ldr	r2, [pc, #180]	; (80014b4 <HAL_TIM_Base_MspInit+0x18c>)
 80013fe:	f043 0304 	orr.w	r3, r3, #4
 8001402:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001406:	4b2b      	ldr	r3, [pc, #172]	; (80014b4 <HAL_TIM_Base_MspInit+0x18c>)
 8001408:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800140c:	f003 0304 	and.w	r3, r3, #4
 8001410:	613b      	str	r3, [r7, #16]
 8001412:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001414:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001418:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141a:	2302      	movs	r3, #2
 800141c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001422:	2300      	movs	r3, #0
 8001424:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001426:	2303      	movs	r3, #3
 8001428:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800142a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800142e:	4619      	mov	r1, r3
 8001430:	4824      	ldr	r0, [pc, #144]	; (80014c4 <HAL_TIM_Base_MspInit+0x19c>)
 8001432:	f000 fc03 	bl	8001c3c <HAL_GPIO_Init>
}
 8001436:	e038      	b.n	80014aa <HAL_TIM_Base_MspInit+0x182>
  else if(htim_base->Instance==TIM23)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a22      	ldr	r2, [pc, #136]	; (80014c8 <HAL_TIM_Base_MspInit+0x1a0>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d117      	bne.n	8001472 <HAL_TIM_Base_MspInit+0x14a>
    __HAL_RCC_TIM23_CLK_ENABLE();
 8001442:	4b1c      	ldr	r3, [pc, #112]	; (80014b4 <HAL_TIM_Base_MspInit+0x18c>)
 8001444:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001448:	4a1a      	ldr	r2, [pc, #104]	; (80014b4 <HAL_TIM_Base_MspInit+0x18c>)
 800144a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800144e:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001452:	4b18      	ldr	r3, [pc, #96]	; (80014b4 <HAL_TIM_Base_MspInit+0x18c>)
 8001454:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001458:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM23_IRQn, 0, 0);
 8001460:	2200      	movs	r2, #0
 8001462:	2100      	movs	r1, #0
 8001464:	20a1      	movs	r0, #161	; 0xa1
 8001466:	f000 fbb4 	bl	8001bd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM23_IRQn);
 800146a:	20a1      	movs	r0, #161	; 0xa1
 800146c:	f000 fbcb 	bl	8001c06 <HAL_NVIC_EnableIRQ>
}
 8001470:	e01b      	b.n	80014aa <HAL_TIM_Base_MspInit+0x182>
  else if(htim_base->Instance==TIM24)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a15      	ldr	r2, [pc, #84]	; (80014cc <HAL_TIM_Base_MspInit+0x1a4>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d116      	bne.n	80014aa <HAL_TIM_Base_MspInit+0x182>
    __HAL_RCC_TIM24_CLK_ENABLE();
 800147c:	4b0d      	ldr	r3, [pc, #52]	; (80014b4 <HAL_TIM_Base_MspInit+0x18c>)
 800147e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001482:	4a0c      	ldr	r2, [pc, #48]	; (80014b4 <HAL_TIM_Base_MspInit+0x18c>)
 8001484:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001488:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800148c:	4b09      	ldr	r3, [pc, #36]	; (80014b4 <HAL_TIM_Base_MspInit+0x18c>)
 800148e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001496:	60bb      	str	r3, [r7, #8]
 8001498:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM24_IRQn, 0, 0);
 800149a:	2200      	movs	r2, #0
 800149c:	2100      	movs	r1, #0
 800149e:	20a2      	movs	r0, #162	; 0xa2
 80014a0:	f000 fb97 	bl	8001bd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM24_IRQn);
 80014a4:	20a2      	movs	r0, #162	; 0xa2
 80014a6:	f000 fbae 	bl	8001c06 <HAL_NVIC_EnableIRQ>
}
 80014aa:	bf00      	nop
 80014ac:	3738      	adds	r7, #56	; 0x38
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	58024400 	.word	0x58024400
 80014b8:	40000800 	.word	0x40000800
 80014bc:	40000c00 	.word	0x40000c00
 80014c0:	40010400 	.word	0x40010400
 80014c4:	58020800 	.word	0x58020800
 80014c8:	4000e000 	.word	0x4000e000
 80014cc:	4000e400 	.word	0x4000e400

080014d0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b08a      	sub	sp, #40	; 0x28
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d8:	f107 0314 	add.w	r3, r7, #20
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	605a      	str	r2, [r3, #4]
 80014e2:	609a      	str	r2, [r3, #8]
 80014e4:	60da      	str	r2, [r3, #12]
 80014e6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a1a      	ldr	r2, [pc, #104]	; (8001558 <HAL_TIM_Encoder_MspInit+0x88>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d12d      	bne.n	800154e <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014f2:	4b1a      	ldr	r3, [pc, #104]	; (800155c <HAL_TIM_Encoder_MspInit+0x8c>)
 80014f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014f8:	4a18      	ldr	r2, [pc, #96]	; (800155c <HAL_TIM_Encoder_MspInit+0x8c>)
 80014fa:	f043 0302 	orr.w	r3, r3, #2
 80014fe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001502:	4b16      	ldr	r3, [pc, #88]	; (800155c <HAL_TIM_Encoder_MspInit+0x8c>)
 8001504:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001508:	f003 0302 	and.w	r3, r3, #2
 800150c:	613b      	str	r3, [r7, #16]
 800150e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001510:	4b12      	ldr	r3, [pc, #72]	; (800155c <HAL_TIM_Encoder_MspInit+0x8c>)
 8001512:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001516:	4a11      	ldr	r2, [pc, #68]	; (800155c <HAL_TIM_Encoder_MspInit+0x8c>)
 8001518:	f043 0302 	orr.w	r3, r3, #2
 800151c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001520:	4b0e      	ldr	r3, [pc, #56]	; (800155c <HAL_TIM_Encoder_MspInit+0x8c>)
 8001522:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4(NJTRST)     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800152e:	2330      	movs	r3, #48	; 0x30
 8001530:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001532:	2302      	movs	r3, #2
 8001534:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001536:	2300      	movs	r3, #0
 8001538:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153a:	2300      	movs	r3, #0
 800153c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800153e:	2302      	movs	r3, #2
 8001540:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001542:	f107 0314 	add.w	r3, r7, #20
 8001546:	4619      	mov	r1, r3
 8001548:	4805      	ldr	r0, [pc, #20]	; (8001560 <HAL_TIM_Encoder_MspInit+0x90>)
 800154a:	f000 fb77 	bl	8001c3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800154e:	bf00      	nop
 8001550:	3728      	adds	r7, #40	; 0x28
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	40000400 	.word	0x40000400
 800155c:	58024400 	.word	0x58024400
 8001560:	58020400 	.word	0x58020400

08001564 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b088      	sub	sp, #32
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800156c:	f107 030c 	add.w	r3, r7, #12
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	605a      	str	r2, [r3, #4]
 8001576:	609a      	str	r2, [r3, #8]
 8001578:	60da      	str	r2, [r3, #12]
 800157a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a13      	ldr	r2, [pc, #76]	; (80015d0 <HAL_TIM_MspPostInit+0x6c>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d11f      	bne.n	80015c6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001586:	4b13      	ldr	r3, [pc, #76]	; (80015d4 <HAL_TIM_MspPostInit+0x70>)
 8001588:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800158c:	4a11      	ldr	r2, [pc, #68]	; (80015d4 <HAL_TIM_MspPostInit+0x70>)
 800158e:	f043 0308 	orr.w	r3, r3, #8
 8001592:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001596:	4b0f      	ldr	r3, [pc, #60]	; (80015d4 <HAL_TIM_MspPostInit+0x70>)
 8001598:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800159c:	f003 0308 	and.w	r3, r3, #8
 80015a0:	60bb      	str	r3, [r7, #8]
 80015a2:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80015a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80015a8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015aa:	2302      	movs	r3, #2
 80015ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ae:	2300      	movs	r3, #0
 80015b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b2:	2300      	movs	r3, #0
 80015b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80015b6:	2302      	movs	r3, #2
 80015b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015ba:	f107 030c 	add.w	r3, r7, #12
 80015be:	4619      	mov	r1, r3
 80015c0:	4805      	ldr	r0, [pc, #20]	; (80015d8 <HAL_TIM_MspPostInit+0x74>)
 80015c2:	f000 fb3b 	bl	8001c3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80015c6:	bf00      	nop
 80015c8:	3720      	adds	r7, #32
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40000800 	.word	0x40000800
 80015d4:	58024400 	.word	0x58024400
 80015d8:	58020c00 	.word	0x58020c00

080015dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b0b6      	sub	sp, #216	; 0xd8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	605a      	str	r2, [r3, #4]
 80015ee:	609a      	str	r2, [r3, #8]
 80015f0:	60da      	str	r2, [r3, #12]
 80015f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015f4:	f107 0310 	add.w	r3, r7, #16
 80015f8:	22b4      	movs	r2, #180	; 0xb4
 80015fa:	2100      	movs	r1, #0
 80015fc:	4618      	mov	r0, r3
 80015fe:	f006 fbc9 	bl	8007d94 <memset>
  if(huart->Instance==USART3)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a25      	ldr	r2, [pc, #148]	; (800169c <HAL_UART_MspInit+0xc0>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d142      	bne.n	8001692 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800160c:	2302      	movs	r3, #2
 800160e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001610:	2300      	movs	r3, #0
 8001612:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001616:	f107 0310 	add.w	r3, r7, #16
 800161a:	4618      	mov	r0, r3
 800161c:	f001 fc66 	bl	8002eec <HAL_RCCEx_PeriphCLKConfig>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001626:	f7ff fe5f 	bl	80012e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800162a:	4b1d      	ldr	r3, [pc, #116]	; (80016a0 <HAL_UART_MspInit+0xc4>)
 800162c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001630:	4a1b      	ldr	r2, [pc, #108]	; (80016a0 <HAL_UART_MspInit+0xc4>)
 8001632:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001636:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800163a:	4b19      	ldr	r3, [pc, #100]	; (80016a0 <HAL_UART_MspInit+0xc4>)
 800163c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001640:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001644:	60fb      	str	r3, [r7, #12]
 8001646:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001648:	4b15      	ldr	r3, [pc, #84]	; (80016a0 <HAL_UART_MspInit+0xc4>)
 800164a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800164e:	4a14      	ldr	r2, [pc, #80]	; (80016a0 <HAL_UART_MspInit+0xc4>)
 8001650:	f043 0308 	orr.w	r3, r3, #8
 8001654:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001658:	4b11      	ldr	r3, [pc, #68]	; (80016a0 <HAL_UART_MspInit+0xc4>)
 800165a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800165e:	f003 0308 	and.w	r3, r3, #8
 8001662:	60bb      	str	r3, [r7, #8]
 8001664:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8001666:	f44f 7340 	mov.w	r3, #768	; 0x300
 800166a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166e:	2302      	movs	r3, #2
 8001670:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001674:	2300      	movs	r3, #0
 8001676:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167a:	2300      	movs	r3, #0
 800167c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001680:	2307      	movs	r3, #7
 8001682:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001686:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800168a:	4619      	mov	r1, r3
 800168c:	4805      	ldr	r0, [pc, #20]	; (80016a4 <HAL_UART_MspInit+0xc8>)
 800168e:	f000 fad5 	bl	8001c3c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001692:	bf00      	nop
 8001694:	37d8      	adds	r7, #216	; 0xd8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	40004800 	.word	0x40004800
 80016a0:	58024400 	.word	0x58024400
 80016a4:	58020c00 	.word	0x58020c00

080016a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016ac:	e7fe      	b.n	80016ac <NMI_Handler+0x4>

080016ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016ae:	b480      	push	{r7}
 80016b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016b2:	e7fe      	b.n	80016b2 <HardFault_Handler+0x4>

080016b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016b8:	e7fe      	b.n	80016b8 <MemManage_Handler+0x4>

080016ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016ba:	b480      	push	{r7}
 80016bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016be:	e7fe      	b.n	80016be <BusFault_Handler+0x4>

080016c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016c4:	e7fe      	b.n	80016c4 <UsageFault_Handler+0x4>

080016c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016c6:	b480      	push	{r7}
 80016c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016ca:	bf00      	nop
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016d8:	bf00      	nop
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr

080016e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016e2:	b480      	push	{r7}
 80016e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016e6:	bf00      	nop
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016f4:	f000 f972 	bl	80019dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016f8:	bf00      	nop
 80016fa:	bd80      	pop	{r7, pc}

080016fc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001700:	4802      	ldr	r0, [pc, #8]	; (800170c <TIM2_IRQHandler+0x10>)
 8001702:	f003 fc13 	bl	8004f2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	240003a0 	.word	0x240003a0

08001710 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001714:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001718:	f000 fc51 	bl	8001fbe <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800171c:	bf00      	nop
 800171e:	bd80      	pop	{r7, pc}

08001720 <TIM23_IRQHandler>:

/**
  * @brief This function handles TIM23 global interrupt.
  */
void TIM23_IRQHandler(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM23_IRQn 0 */

  /* USER CODE END TIM23_IRQn 0 */
  HAL_TIM_IRQHandler(&htim23);
 8001724:	4802      	ldr	r0, [pc, #8]	; (8001730 <TIM23_IRQHandler+0x10>)
 8001726:	f003 fc01 	bl	8004f2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM23_IRQn 1 */

  /* USER CODE END TIM23_IRQn 1 */
}
 800172a:	bf00      	nop
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	240003ec 	.word	0x240003ec

08001734 <TIM24_IRQHandler>:

/**
  * @brief This function handles TIM24 global interrupt.
  */
void TIM24_IRQHandler(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM24_IRQn 0 */

  /* USER CODE END TIM24_IRQn 0 */
  HAL_TIM_IRQHandler(&htim24);
 8001738:	4802      	ldr	r0, [pc, #8]	; (8001744 <TIM24_IRQHandler+0x10>)
 800173a:	f003 fbf7 	bl	8004f2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM24_IRQn 1 */

  /* USER CODE END TIM24_IRQn 1 */
}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	24000180 	.word	0x24000180

08001748 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b086      	sub	sp, #24
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001750:	4a14      	ldr	r2, [pc, #80]	; (80017a4 <_sbrk+0x5c>)
 8001752:	4b15      	ldr	r3, [pc, #84]	; (80017a8 <_sbrk+0x60>)
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800175c:	4b13      	ldr	r3, [pc, #76]	; (80017ac <_sbrk+0x64>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d102      	bne.n	800176a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001764:	4b11      	ldr	r3, [pc, #68]	; (80017ac <_sbrk+0x64>)
 8001766:	4a12      	ldr	r2, [pc, #72]	; (80017b0 <_sbrk+0x68>)
 8001768:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800176a:	4b10      	ldr	r3, [pc, #64]	; (80017ac <_sbrk+0x64>)
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4413      	add	r3, r2
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	429a      	cmp	r2, r3
 8001776:	d207      	bcs.n	8001788 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001778:	f006 f9e0 	bl	8007b3c <__errno>
 800177c:	4603      	mov	r3, r0
 800177e:	220c      	movs	r2, #12
 8001780:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001782:	f04f 33ff 	mov.w	r3, #4294967295
 8001786:	e009      	b.n	800179c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001788:	4b08      	ldr	r3, [pc, #32]	; (80017ac <_sbrk+0x64>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800178e:	4b07      	ldr	r3, [pc, #28]	; (80017ac <_sbrk+0x64>)
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4413      	add	r3, r2
 8001796:	4a05      	ldr	r2, [pc, #20]	; (80017ac <_sbrk+0x64>)
 8001798:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800179a:	68fb      	ldr	r3, [r7, #12]
}
 800179c:	4618      	mov	r0, r3
 800179e:	3718      	adds	r7, #24
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	24050000 	.word	0x24050000
 80017a8:	00000400 	.word	0x00000400
 80017ac:	240000c8 	.word	0x240000c8
 80017b0:	24000458 	.word	0x24000458

080017b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80017b8:	4b32      	ldr	r3, [pc, #200]	; (8001884 <SystemInit+0xd0>)
 80017ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017be:	4a31      	ldr	r2, [pc, #196]	; (8001884 <SystemInit+0xd0>)
 80017c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80017c8:	4b2f      	ldr	r3, [pc, #188]	; (8001888 <SystemInit+0xd4>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 030f 	and.w	r3, r3, #15
 80017d0:	2b06      	cmp	r3, #6
 80017d2:	d807      	bhi.n	80017e4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80017d4:	4b2c      	ldr	r3, [pc, #176]	; (8001888 <SystemInit+0xd4>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f023 030f 	bic.w	r3, r3, #15
 80017dc:	4a2a      	ldr	r2, [pc, #168]	; (8001888 <SystemInit+0xd4>)
 80017de:	f043 0307 	orr.w	r3, r3, #7
 80017e2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80017e4:	4b29      	ldr	r3, [pc, #164]	; (800188c <SystemInit+0xd8>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a28      	ldr	r2, [pc, #160]	; (800188c <SystemInit+0xd8>)
 80017ea:	f043 0301 	orr.w	r3, r3, #1
 80017ee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80017f0:	4b26      	ldr	r3, [pc, #152]	; (800188c <SystemInit+0xd8>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80017f6:	4b25      	ldr	r3, [pc, #148]	; (800188c <SystemInit+0xd8>)
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	4924      	ldr	r1, [pc, #144]	; (800188c <SystemInit+0xd8>)
 80017fc:	4b24      	ldr	r3, [pc, #144]	; (8001890 <SystemInit+0xdc>)
 80017fe:	4013      	ands	r3, r2
 8001800:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001802:	4b21      	ldr	r3, [pc, #132]	; (8001888 <SystemInit+0xd4>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0308 	and.w	r3, r3, #8
 800180a:	2b00      	cmp	r3, #0
 800180c:	d007      	beq.n	800181e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800180e:	4b1e      	ldr	r3, [pc, #120]	; (8001888 <SystemInit+0xd4>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f023 030f 	bic.w	r3, r3, #15
 8001816:	4a1c      	ldr	r2, [pc, #112]	; (8001888 <SystemInit+0xd4>)
 8001818:	f043 0307 	orr.w	r3, r3, #7
 800181c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800181e:	4b1b      	ldr	r3, [pc, #108]	; (800188c <SystemInit+0xd8>)
 8001820:	2200      	movs	r2, #0
 8001822:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001824:	4b19      	ldr	r3, [pc, #100]	; (800188c <SystemInit+0xd8>)
 8001826:	2200      	movs	r2, #0
 8001828:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800182a:	4b18      	ldr	r3, [pc, #96]	; (800188c <SystemInit+0xd8>)
 800182c:	2200      	movs	r2, #0
 800182e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001830:	4b16      	ldr	r3, [pc, #88]	; (800188c <SystemInit+0xd8>)
 8001832:	4a18      	ldr	r2, [pc, #96]	; (8001894 <SystemInit+0xe0>)
 8001834:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001836:	4b15      	ldr	r3, [pc, #84]	; (800188c <SystemInit+0xd8>)
 8001838:	4a17      	ldr	r2, [pc, #92]	; (8001898 <SystemInit+0xe4>)
 800183a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800183c:	4b13      	ldr	r3, [pc, #76]	; (800188c <SystemInit+0xd8>)
 800183e:	4a17      	ldr	r2, [pc, #92]	; (800189c <SystemInit+0xe8>)
 8001840:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001842:	4b12      	ldr	r3, [pc, #72]	; (800188c <SystemInit+0xd8>)
 8001844:	2200      	movs	r2, #0
 8001846:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001848:	4b10      	ldr	r3, [pc, #64]	; (800188c <SystemInit+0xd8>)
 800184a:	4a14      	ldr	r2, [pc, #80]	; (800189c <SystemInit+0xe8>)
 800184c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800184e:	4b0f      	ldr	r3, [pc, #60]	; (800188c <SystemInit+0xd8>)
 8001850:	2200      	movs	r2, #0
 8001852:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001854:	4b0d      	ldr	r3, [pc, #52]	; (800188c <SystemInit+0xd8>)
 8001856:	4a11      	ldr	r2, [pc, #68]	; (800189c <SystemInit+0xe8>)
 8001858:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800185a:	4b0c      	ldr	r3, [pc, #48]	; (800188c <SystemInit+0xd8>)
 800185c:	2200      	movs	r2, #0
 800185e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001860:	4b0a      	ldr	r3, [pc, #40]	; (800188c <SystemInit+0xd8>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a09      	ldr	r2, [pc, #36]	; (800188c <SystemInit+0xd8>)
 8001866:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800186a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800186c:	4b07      	ldr	r3, [pc, #28]	; (800188c <SystemInit+0xd8>)
 800186e:	2200      	movs	r2, #0
 8001870:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001872:	4b0b      	ldr	r3, [pc, #44]	; (80018a0 <SystemInit+0xec>)
 8001874:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001878:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 800187a:	bf00      	nop
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	e000ed00 	.word	0xe000ed00
 8001888:	52002000 	.word	0x52002000
 800188c:	58024400 	.word	0x58024400
 8001890:	eaf6ed7f 	.word	0xeaf6ed7f
 8001894:	02020200 	.word	0x02020200
 8001898:	01ff0000 	.word	0x01ff0000
 800189c:	01010280 	.word	0x01010280
 80018a0:	52004000 	.word	0x52004000

080018a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80018a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018dc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80018a8:	f7ff ff84 	bl	80017b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018ac:	480c      	ldr	r0, [pc, #48]	; (80018e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018ae:	490d      	ldr	r1, [pc, #52]	; (80018e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018b0:	4a0d      	ldr	r2, [pc, #52]	; (80018e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018b4:	e002      	b.n	80018bc <LoopCopyDataInit>

080018b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018ba:	3304      	adds	r3, #4

080018bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018c0:	d3f9      	bcc.n	80018b6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018c2:	4a0a      	ldr	r2, [pc, #40]	; (80018ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018c4:	4c0a      	ldr	r4, [pc, #40]	; (80018f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80018c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018c8:	e001      	b.n	80018ce <LoopFillZerobss>

080018ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018cc:	3204      	adds	r2, #4

080018ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018d0:	d3fb      	bcc.n	80018ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018d2:	f006 fa2f 	bl	8007d34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018d6:	f7fe fe9f 	bl	8000618 <main>
  bx  lr
 80018da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018dc:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80018e0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80018e4:	24000088 	.word	0x24000088
  ldr r2, =_sidata
 80018e8:	080090d0 	.word	0x080090d0
  ldr r2, =_sbss
 80018ec:	24000088 	.word	0x24000088
  ldr r4, =_ebss
 80018f0:	24000454 	.word	0x24000454

080018f4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018f4:	e7fe      	b.n	80018f4 <ADC3_IRQHandler>
	...

080018f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018fe:	2003      	movs	r0, #3
 8001900:	f000 f95c 	bl	8001bbc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001904:	f001 f91c 	bl	8002b40 <HAL_RCC_GetSysClockFreq>
 8001908:	4602      	mov	r2, r0
 800190a:	4b15      	ldr	r3, [pc, #84]	; (8001960 <HAL_Init+0x68>)
 800190c:	699b      	ldr	r3, [r3, #24]
 800190e:	0a1b      	lsrs	r3, r3, #8
 8001910:	f003 030f 	and.w	r3, r3, #15
 8001914:	4913      	ldr	r1, [pc, #76]	; (8001964 <HAL_Init+0x6c>)
 8001916:	5ccb      	ldrb	r3, [r1, r3]
 8001918:	f003 031f 	and.w	r3, r3, #31
 800191c:	fa22 f303 	lsr.w	r3, r2, r3
 8001920:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001922:	4b0f      	ldr	r3, [pc, #60]	; (8001960 <HAL_Init+0x68>)
 8001924:	699b      	ldr	r3, [r3, #24]
 8001926:	f003 030f 	and.w	r3, r3, #15
 800192a:	4a0e      	ldr	r2, [pc, #56]	; (8001964 <HAL_Init+0x6c>)
 800192c:	5cd3      	ldrb	r3, [r2, r3]
 800192e:	f003 031f 	and.w	r3, r3, #31
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	fa22 f303 	lsr.w	r3, r2, r3
 8001938:	4a0b      	ldr	r2, [pc, #44]	; (8001968 <HAL_Init+0x70>)
 800193a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800193c:	4a0b      	ldr	r2, [pc, #44]	; (800196c <HAL_Init+0x74>)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001942:	2000      	movs	r0, #0
 8001944:	f000 f814 	bl	8001970 <HAL_InitTick>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e002      	b.n	8001958 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001952:	f7ff fccf 	bl	80012f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001956:	2300      	movs	r3, #0
}
 8001958:	4618      	mov	r0, r3
 800195a:	3708      	adds	r7, #8
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	58024400 	.word	0x58024400
 8001964:	08008e30 	.word	0x08008e30
 8001968:	24000010 	.word	0x24000010
 800196c:	2400000c 	.word	0x2400000c

08001970 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001978:	4b15      	ldr	r3, [pc, #84]	; (80019d0 <HAL_InitTick+0x60>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d101      	bne.n	8001984 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	e021      	b.n	80019c8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001984:	4b13      	ldr	r3, [pc, #76]	; (80019d4 <HAL_InitTick+0x64>)
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	4b11      	ldr	r3, [pc, #68]	; (80019d0 <HAL_InitTick+0x60>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	4619      	mov	r1, r3
 800198e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001992:	fbb3 f3f1 	udiv	r3, r3, r1
 8001996:	fbb2 f3f3 	udiv	r3, r2, r3
 800199a:	4618      	mov	r0, r3
 800199c:	f000 f941 	bl	8001c22 <HAL_SYSTICK_Config>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e00e      	b.n	80019c8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2b0f      	cmp	r3, #15
 80019ae:	d80a      	bhi.n	80019c6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019b0:	2200      	movs	r2, #0
 80019b2:	6879      	ldr	r1, [r7, #4]
 80019b4:	f04f 30ff 	mov.w	r0, #4294967295
 80019b8:	f000 f90b 	bl	8001bd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019bc:	4a06      	ldr	r2, [pc, #24]	; (80019d8 <HAL_InitTick+0x68>)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019c2:	2300      	movs	r3, #0
 80019c4:	e000      	b.n	80019c8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3708      	adds	r7, #8
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	24000018 	.word	0x24000018
 80019d4:	2400000c 	.word	0x2400000c
 80019d8:	24000014 	.word	0x24000014

080019dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019e0:	4b06      	ldr	r3, [pc, #24]	; (80019fc <HAL_IncTick+0x20>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	461a      	mov	r2, r3
 80019e6:	4b06      	ldr	r3, [pc, #24]	; (8001a00 <HAL_IncTick+0x24>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4413      	add	r3, r2
 80019ec:	4a04      	ldr	r2, [pc, #16]	; (8001a00 <HAL_IncTick+0x24>)
 80019ee:	6013      	str	r3, [r2, #0]
}
 80019f0:	bf00      	nop
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	24000018 	.word	0x24000018
 8001a00:	24000440 	.word	0x24000440

08001a04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  return uwTick;
 8001a08:	4b03      	ldr	r3, [pc, #12]	; (8001a18 <HAL_GetTick+0x14>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	24000440 	.word	0x24000440

08001a1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b085      	sub	sp, #20
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f003 0307 	and.w	r3, r3, #7
 8001a2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a2c:	4b0b      	ldr	r3, [pc, #44]	; (8001a5c <__NVIC_SetPriorityGrouping+0x40>)
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a32:	68ba      	ldr	r2, [r7, #8]
 8001a34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a38:	4013      	ands	r3, r2
 8001a3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001a44:	4b06      	ldr	r3, [pc, #24]	; (8001a60 <__NVIC_SetPriorityGrouping+0x44>)
 8001a46:	4313      	orrs	r3, r2
 8001a48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a4a:	4a04      	ldr	r2, [pc, #16]	; (8001a5c <__NVIC_SetPriorityGrouping+0x40>)
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	60d3      	str	r3, [r2, #12]
}
 8001a50:	bf00      	nop
 8001a52:	3714      	adds	r7, #20
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr
 8001a5c:	e000ed00 	.word	0xe000ed00
 8001a60:	05fa0000 	.word	0x05fa0000

08001a64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a68:	4b04      	ldr	r3, [pc, #16]	; (8001a7c <__NVIC_GetPriorityGrouping+0x18>)
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	0a1b      	lsrs	r3, r3, #8
 8001a6e:	f003 0307 	and.w	r3, r3, #7
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr
 8001a7c:	e000ed00 	.word	0xe000ed00

08001a80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	4603      	mov	r3, r0
 8001a88:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001a8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	db0b      	blt.n	8001aaa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a92:	88fb      	ldrh	r3, [r7, #6]
 8001a94:	f003 021f 	and.w	r2, r3, #31
 8001a98:	4907      	ldr	r1, [pc, #28]	; (8001ab8 <__NVIC_EnableIRQ+0x38>)
 8001a9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a9e:	095b      	lsrs	r3, r3, #5
 8001aa0:	2001      	movs	r0, #1
 8001aa2:	fa00 f202 	lsl.w	r2, r0, r2
 8001aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001aaa:	bf00      	nop
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	e000e100 	.word	0xe000e100

08001abc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	6039      	str	r1, [r7, #0]
 8001ac6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001ac8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	db0a      	blt.n	8001ae6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	b2da      	uxtb	r2, r3
 8001ad4:	490c      	ldr	r1, [pc, #48]	; (8001b08 <__NVIC_SetPriority+0x4c>)
 8001ad6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ada:	0112      	lsls	r2, r2, #4
 8001adc:	b2d2      	uxtb	r2, r2
 8001ade:	440b      	add	r3, r1
 8001ae0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ae4:	e00a      	b.n	8001afc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	b2da      	uxtb	r2, r3
 8001aea:	4908      	ldr	r1, [pc, #32]	; (8001b0c <__NVIC_SetPriority+0x50>)
 8001aec:	88fb      	ldrh	r3, [r7, #6]
 8001aee:	f003 030f 	and.w	r3, r3, #15
 8001af2:	3b04      	subs	r3, #4
 8001af4:	0112      	lsls	r2, r2, #4
 8001af6:	b2d2      	uxtb	r2, r2
 8001af8:	440b      	add	r3, r1
 8001afa:	761a      	strb	r2, [r3, #24]
}
 8001afc:	bf00      	nop
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr
 8001b08:	e000e100 	.word	0xe000e100
 8001b0c:	e000ed00 	.word	0xe000ed00

08001b10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b089      	sub	sp, #36	; 0x24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	60f8      	str	r0, [r7, #12]
 8001b18:	60b9      	str	r1, [r7, #8]
 8001b1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f003 0307 	and.w	r3, r3, #7
 8001b22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	f1c3 0307 	rsb	r3, r3, #7
 8001b2a:	2b04      	cmp	r3, #4
 8001b2c:	bf28      	it	cs
 8001b2e:	2304      	movcs	r3, #4
 8001b30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	3304      	adds	r3, #4
 8001b36:	2b06      	cmp	r3, #6
 8001b38:	d902      	bls.n	8001b40 <NVIC_EncodePriority+0x30>
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	3b03      	subs	r3, #3
 8001b3e:	e000      	b.n	8001b42 <NVIC_EncodePriority+0x32>
 8001b40:	2300      	movs	r3, #0
 8001b42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b44:	f04f 32ff 	mov.w	r2, #4294967295
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4e:	43da      	mvns	r2, r3
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	401a      	ands	r2, r3
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b58:	f04f 31ff 	mov.w	r1, #4294967295
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b62:	43d9      	mvns	r1, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b68:	4313      	orrs	r3, r2
         );
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3724      	adds	r7, #36	; 0x24
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
	...

08001b78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	3b01      	subs	r3, #1
 8001b84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b88:	d301      	bcc.n	8001b8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e00f      	b.n	8001bae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b8e:	4a0a      	ldr	r2, [pc, #40]	; (8001bb8 <SysTick_Config+0x40>)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	3b01      	subs	r3, #1
 8001b94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b96:	210f      	movs	r1, #15
 8001b98:	f04f 30ff 	mov.w	r0, #4294967295
 8001b9c:	f7ff ff8e 	bl	8001abc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ba0:	4b05      	ldr	r3, [pc, #20]	; (8001bb8 <SysTick_Config+0x40>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ba6:	4b04      	ldr	r3, [pc, #16]	; (8001bb8 <SysTick_Config+0x40>)
 8001ba8:	2207      	movs	r2, #7
 8001baa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	e000e010 	.word	0xe000e010

08001bbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f7ff ff29 	bl	8001a1c <__NVIC_SetPriorityGrouping>
}
 8001bca:	bf00      	nop
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b086      	sub	sp, #24
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	4603      	mov	r3, r0
 8001bda:	60b9      	str	r1, [r7, #8]
 8001bdc:	607a      	str	r2, [r7, #4]
 8001bde:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001be0:	f7ff ff40 	bl	8001a64 <__NVIC_GetPriorityGrouping>
 8001be4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	68b9      	ldr	r1, [r7, #8]
 8001bea:	6978      	ldr	r0, [r7, #20]
 8001bec:	f7ff ff90 	bl	8001b10 <NVIC_EncodePriority>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001bf6:	4611      	mov	r1, r2
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff ff5f 	bl	8001abc <__NVIC_SetPriority>
}
 8001bfe:	bf00      	nop
 8001c00:	3718      	adds	r7, #24
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b082      	sub	sp, #8
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c10:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7ff ff33 	bl	8001a80 <__NVIC_EnableIRQ>
}
 8001c1a:	bf00      	nop
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b082      	sub	sp, #8
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f7ff ffa4 	bl	8001b78 <SysTick_Config>
 8001c30:	4603      	mov	r3, r0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3708      	adds	r7, #8
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
	...

08001c3c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b089      	sub	sp, #36	; 0x24
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001c46:	2300      	movs	r3, #0
 8001c48:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001c4a:	4b86      	ldr	r3, [pc, #536]	; (8001e64 <HAL_GPIO_Init+0x228>)
 8001c4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001c4e:	e18c      	b.n	8001f6a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	2101      	movs	r1, #1
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	fa01 f303 	lsl.w	r3, r1, r3
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	f000 817e 	beq.w	8001f64 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f003 0303 	and.w	r3, r3, #3
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d005      	beq.n	8001c80 <HAL_GPIO_Init+0x44>
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f003 0303 	and.w	r3, r3, #3
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d130      	bne.n	8001ce2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	2203      	movs	r2, #3
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	43db      	mvns	r3, r3
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	4013      	ands	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	68da      	ldr	r2, [r3, #12]
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	005b      	lsls	r3, r3, #1
 8001ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbe:	43db      	mvns	r3, r3
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	091b      	lsrs	r3, r3, #4
 8001ccc:	f003 0201 	and.w	r2, r3, #1
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd6:	69ba      	ldr	r2, [r7, #24]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f003 0303 	and.w	r3, r3, #3
 8001cea:	2b03      	cmp	r3, #3
 8001cec:	d017      	beq.n	8001d1e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	005b      	lsls	r3, r3, #1
 8001cf8:	2203      	movs	r2, #3
 8001cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfe:	43db      	mvns	r3, r3
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	4013      	ands	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	689a      	ldr	r2, [r3, #8]
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f003 0303 	and.w	r3, r3, #3
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d123      	bne.n	8001d72 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	08da      	lsrs	r2, r3, #3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	3208      	adds	r2, #8
 8001d32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	f003 0307 	and.w	r3, r3, #7
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	220f      	movs	r2, #15
 8001d42:	fa02 f303 	lsl.w	r3, r2, r3
 8001d46:	43db      	mvns	r3, r3
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	691a      	ldr	r2, [r3, #16]
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	f003 0307 	and.w	r3, r3, #7
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	08da      	lsrs	r2, r3, #3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	3208      	adds	r2, #8
 8001d6c:	69b9      	ldr	r1, [r7, #24]
 8001d6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	2203      	movs	r2, #3
 8001d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d82:	43db      	mvns	r3, r3
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	4013      	ands	r3, r2
 8001d88:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f003 0203 	and.w	r2, r3, #3
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	69ba      	ldr	r2, [r7, #24]
 8001da4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	f000 80d8 	beq.w	8001f64 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001db4:	4b2c      	ldr	r3, [pc, #176]	; (8001e68 <HAL_GPIO_Init+0x22c>)
 8001db6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001dba:	4a2b      	ldr	r2, [pc, #172]	; (8001e68 <HAL_GPIO_Init+0x22c>)
 8001dbc:	f043 0302 	orr.w	r3, r3, #2
 8001dc0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001dc4:	4b28      	ldr	r3, [pc, #160]	; (8001e68 <HAL_GPIO_Init+0x22c>)
 8001dc6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	60fb      	str	r3, [r7, #12]
 8001dd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dd2:	4a26      	ldr	r2, [pc, #152]	; (8001e6c <HAL_GPIO_Init+0x230>)
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	089b      	lsrs	r3, r3, #2
 8001dd8:	3302      	adds	r3, #2
 8001dda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	f003 0303 	and.w	r3, r3, #3
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	220f      	movs	r2, #15
 8001dea:	fa02 f303 	lsl.w	r3, r2, r3
 8001dee:	43db      	mvns	r3, r3
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	4013      	ands	r3, r2
 8001df4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a1d      	ldr	r2, [pc, #116]	; (8001e70 <HAL_GPIO_Init+0x234>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d04a      	beq.n	8001e94 <HAL_GPIO_Init+0x258>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a1c      	ldr	r2, [pc, #112]	; (8001e74 <HAL_GPIO_Init+0x238>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d02b      	beq.n	8001e5e <HAL_GPIO_Init+0x222>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a1b      	ldr	r2, [pc, #108]	; (8001e78 <HAL_GPIO_Init+0x23c>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d025      	beq.n	8001e5a <HAL_GPIO_Init+0x21e>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a1a      	ldr	r2, [pc, #104]	; (8001e7c <HAL_GPIO_Init+0x240>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d01f      	beq.n	8001e56 <HAL_GPIO_Init+0x21a>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a19      	ldr	r2, [pc, #100]	; (8001e80 <HAL_GPIO_Init+0x244>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d019      	beq.n	8001e52 <HAL_GPIO_Init+0x216>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a18      	ldr	r2, [pc, #96]	; (8001e84 <HAL_GPIO_Init+0x248>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d013      	beq.n	8001e4e <HAL_GPIO_Init+0x212>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a17      	ldr	r2, [pc, #92]	; (8001e88 <HAL_GPIO_Init+0x24c>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d00d      	beq.n	8001e4a <HAL_GPIO_Init+0x20e>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a16      	ldr	r2, [pc, #88]	; (8001e8c <HAL_GPIO_Init+0x250>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d007      	beq.n	8001e46 <HAL_GPIO_Init+0x20a>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a15      	ldr	r2, [pc, #84]	; (8001e90 <HAL_GPIO_Init+0x254>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d101      	bne.n	8001e42 <HAL_GPIO_Init+0x206>
 8001e3e:	2309      	movs	r3, #9
 8001e40:	e029      	b.n	8001e96 <HAL_GPIO_Init+0x25a>
 8001e42:	230a      	movs	r3, #10
 8001e44:	e027      	b.n	8001e96 <HAL_GPIO_Init+0x25a>
 8001e46:	2307      	movs	r3, #7
 8001e48:	e025      	b.n	8001e96 <HAL_GPIO_Init+0x25a>
 8001e4a:	2306      	movs	r3, #6
 8001e4c:	e023      	b.n	8001e96 <HAL_GPIO_Init+0x25a>
 8001e4e:	2305      	movs	r3, #5
 8001e50:	e021      	b.n	8001e96 <HAL_GPIO_Init+0x25a>
 8001e52:	2304      	movs	r3, #4
 8001e54:	e01f      	b.n	8001e96 <HAL_GPIO_Init+0x25a>
 8001e56:	2303      	movs	r3, #3
 8001e58:	e01d      	b.n	8001e96 <HAL_GPIO_Init+0x25a>
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	e01b      	b.n	8001e96 <HAL_GPIO_Init+0x25a>
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e019      	b.n	8001e96 <HAL_GPIO_Init+0x25a>
 8001e62:	bf00      	nop
 8001e64:	58000080 	.word	0x58000080
 8001e68:	58024400 	.word	0x58024400
 8001e6c:	58000400 	.word	0x58000400
 8001e70:	58020000 	.word	0x58020000
 8001e74:	58020400 	.word	0x58020400
 8001e78:	58020800 	.word	0x58020800
 8001e7c:	58020c00 	.word	0x58020c00
 8001e80:	58021000 	.word	0x58021000
 8001e84:	58021400 	.word	0x58021400
 8001e88:	58021800 	.word	0x58021800
 8001e8c:	58021c00 	.word	0x58021c00
 8001e90:	58022400 	.word	0x58022400
 8001e94:	2300      	movs	r3, #0
 8001e96:	69fa      	ldr	r2, [r7, #28]
 8001e98:	f002 0203 	and.w	r2, r2, #3
 8001e9c:	0092      	lsls	r2, r2, #2
 8001e9e:	4093      	lsls	r3, r2
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ea6:	4938      	ldr	r1, [pc, #224]	; (8001f88 <HAL_GPIO_Init+0x34c>)
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	089b      	lsrs	r3, r3, #2
 8001eac:	3302      	adds	r3, #2
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001eb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	43db      	mvns	r3, r3
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d003      	beq.n	8001eda <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001eda:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001ee2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	43db      	mvns	r3, r3
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d003      	beq.n	8001f08 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001f08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	43db      	mvns	r3, r3
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d003      	beq.n	8001f34 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	69ba      	ldr	r2, [r7, #24]
 8001f38:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	43db      	mvns	r3, r3
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	4013      	ands	r3, r2
 8001f48:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d003      	beq.n	8001f5e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	3301      	adds	r3, #1
 8001f68:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	fa22 f303 	lsr.w	r3, r2, r3
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	f47f ae6b 	bne.w	8001c50 <HAL_GPIO_Init+0x14>
  }
}
 8001f7a:	bf00      	nop
 8001f7c:	bf00      	nop
 8001f7e:	3724      	adds	r7, #36	; 0x24
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr
 8001f88:	58000400 	.word	0x58000400

08001f8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	460b      	mov	r3, r1
 8001f96:	807b      	strh	r3, [r7, #2]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f9c:	787b      	ldrb	r3, [r7, #1]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d003      	beq.n	8001faa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fa2:	887a      	ldrh	r2, [r7, #2]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001fa8:	e003      	b.n	8001fb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001faa:	887b      	ldrh	r3, [r7, #2]
 8001fac:	041a      	lsls	r2, r3, #16
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	619a      	str	r2, [r3, #24]
}
 8001fb2:	bf00      	nop
 8001fb4:	370c      	adds	r7, #12
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr

08001fbe <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001fbe:	b580      	push	{r7, lr}
 8001fc0:	b082      	sub	sp, #8
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8001fc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fcc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001fd0:	88fb      	ldrh	r3, [r7, #6]
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d008      	beq.n	8001fea <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001fd8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fdc:	88fb      	ldrh	r3, [r7, #6]
 8001fde:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001fe2:	88fb      	ldrh	r3, [r7, #6]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f000 f804 	bl	8001ff2 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8001fea:	bf00      	nop
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	b083      	sub	sp, #12
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001ffc:	bf00      	nop
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002010:	4b19      	ldr	r3, [pc, #100]	; (8002078 <HAL_PWREx_ConfigSupply+0x70>)
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	f003 0304 	and.w	r3, r3, #4
 8002018:	2b04      	cmp	r3, #4
 800201a:	d00a      	beq.n	8002032 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800201c:	4b16      	ldr	r3, [pc, #88]	; (8002078 <HAL_PWREx_ConfigSupply+0x70>)
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	f003 0307 	and.w	r3, r3, #7
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	429a      	cmp	r2, r3
 8002028:	d001      	beq.n	800202e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e01f      	b.n	800206e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800202e:	2300      	movs	r3, #0
 8002030:	e01d      	b.n	800206e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002032:	4b11      	ldr	r3, [pc, #68]	; (8002078 <HAL_PWREx_ConfigSupply+0x70>)
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	f023 0207 	bic.w	r2, r3, #7
 800203a:	490f      	ldr	r1, [pc, #60]	; (8002078 <HAL_PWREx_ConfigSupply+0x70>)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4313      	orrs	r3, r2
 8002040:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002042:	f7ff fcdf 	bl	8001a04 <HAL_GetTick>
 8002046:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002048:	e009      	b.n	800205e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800204a:	f7ff fcdb 	bl	8001a04 <HAL_GetTick>
 800204e:	4602      	mov	r2, r0
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002058:	d901      	bls.n	800205e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e007      	b.n	800206e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800205e:	4b06      	ldr	r3, [pc, #24]	; (8002078 <HAL_PWREx_ConfigSupply+0x70>)
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002066:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800206a:	d1ee      	bne.n	800204a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3710      	adds	r7, #16
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	58024800 	.word	0x58024800

0800207c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b08c      	sub	sp, #48	; 0x30
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d101      	bne.n	800208e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e397      	b.n	80027be <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0301 	and.w	r3, r3, #1
 8002096:	2b00      	cmp	r3, #0
 8002098:	f000 8087 	beq.w	80021aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800209c:	4b9e      	ldr	r3, [pc, #632]	; (8002318 <HAL_RCC_OscConfig+0x29c>)
 800209e:	691b      	ldr	r3, [r3, #16]
 80020a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80020a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80020a6:	4b9c      	ldr	r3, [pc, #624]	; (8002318 <HAL_RCC_OscConfig+0x29c>)
 80020a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020aa:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80020ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020ae:	2b10      	cmp	r3, #16
 80020b0:	d007      	beq.n	80020c2 <HAL_RCC_OscConfig+0x46>
 80020b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020b4:	2b18      	cmp	r3, #24
 80020b6:	d110      	bne.n	80020da <HAL_RCC_OscConfig+0x5e>
 80020b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ba:	f003 0303 	and.w	r3, r3, #3
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d10b      	bne.n	80020da <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020c2:	4b95      	ldr	r3, [pc, #596]	; (8002318 <HAL_RCC_OscConfig+0x29c>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d06c      	beq.n	80021a8 <HAL_RCC_OscConfig+0x12c>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d168      	bne.n	80021a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e371      	b.n	80027be <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020e2:	d106      	bne.n	80020f2 <HAL_RCC_OscConfig+0x76>
 80020e4:	4b8c      	ldr	r3, [pc, #560]	; (8002318 <HAL_RCC_OscConfig+0x29c>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a8b      	ldr	r2, [pc, #556]	; (8002318 <HAL_RCC_OscConfig+0x29c>)
 80020ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020ee:	6013      	str	r3, [r2, #0]
 80020f0:	e02e      	b.n	8002150 <HAL_RCC_OscConfig+0xd4>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d10c      	bne.n	8002114 <HAL_RCC_OscConfig+0x98>
 80020fa:	4b87      	ldr	r3, [pc, #540]	; (8002318 <HAL_RCC_OscConfig+0x29c>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a86      	ldr	r2, [pc, #536]	; (8002318 <HAL_RCC_OscConfig+0x29c>)
 8002100:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002104:	6013      	str	r3, [r2, #0]
 8002106:	4b84      	ldr	r3, [pc, #528]	; (8002318 <HAL_RCC_OscConfig+0x29c>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a83      	ldr	r2, [pc, #524]	; (8002318 <HAL_RCC_OscConfig+0x29c>)
 800210c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002110:	6013      	str	r3, [r2, #0]
 8002112:	e01d      	b.n	8002150 <HAL_RCC_OscConfig+0xd4>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800211c:	d10c      	bne.n	8002138 <HAL_RCC_OscConfig+0xbc>
 800211e:	4b7e      	ldr	r3, [pc, #504]	; (8002318 <HAL_RCC_OscConfig+0x29c>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a7d      	ldr	r2, [pc, #500]	; (8002318 <HAL_RCC_OscConfig+0x29c>)
 8002124:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002128:	6013      	str	r3, [r2, #0]
 800212a:	4b7b      	ldr	r3, [pc, #492]	; (8002318 <HAL_RCC_OscConfig+0x29c>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a7a      	ldr	r2, [pc, #488]	; (8002318 <HAL_RCC_OscConfig+0x29c>)
 8002130:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002134:	6013      	str	r3, [r2, #0]
 8002136:	e00b      	b.n	8002150 <HAL_RCC_OscConfig+0xd4>
 8002138:	4b77      	ldr	r3, [pc, #476]	; (8002318 <HAL_RCC_OscConfig+0x29c>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a76      	ldr	r2, [pc, #472]	; (8002318 <HAL_RCC_OscConfig+0x29c>)
 800213e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002142:	6013      	str	r3, [r2, #0]
 8002144:	4b74      	ldr	r3, [pc, #464]	; (8002318 <HAL_RCC_OscConfig+0x29c>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a73      	ldr	r2, [pc, #460]	; (8002318 <HAL_RCC_OscConfig+0x29c>)
 800214a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800214e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d013      	beq.n	8002180 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002158:	f7ff fc54 	bl	8001a04 <HAL_GetTick>
 800215c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800215e:	e008      	b.n	8002172 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002160:	f7ff fc50 	bl	8001a04 <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	2b64      	cmp	r3, #100	; 0x64
 800216c:	d901      	bls.n	8002172 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e325      	b.n	80027be <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002172:	4b69      	ldr	r3, [pc, #420]	; (8002318 <HAL_RCC_OscConfig+0x29c>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d0f0      	beq.n	8002160 <HAL_RCC_OscConfig+0xe4>
 800217e:	e014      	b.n	80021aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002180:	f7ff fc40 	bl	8001a04 <HAL_GetTick>
 8002184:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002186:	e008      	b.n	800219a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002188:	f7ff fc3c 	bl	8001a04 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b64      	cmp	r3, #100	; 0x64
 8002194:	d901      	bls.n	800219a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e311      	b.n	80027be <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800219a:	4b5f      	ldr	r3, [pc, #380]	; (8002318 <HAL_RCC_OscConfig+0x29c>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d1f0      	bne.n	8002188 <HAL_RCC_OscConfig+0x10c>
 80021a6:	e000      	b.n	80021aa <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0302 	and.w	r3, r3, #2
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	f000 808a 	beq.w	80022cc <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021b8:	4b57      	ldr	r3, [pc, #348]	; (8002318 <HAL_RCC_OscConfig+0x29c>)
 80021ba:	691b      	ldr	r3, [r3, #16]
 80021bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80021c0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80021c2:	4b55      	ldr	r3, [pc, #340]	; (8002318 <HAL_RCC_OscConfig+0x29c>)
 80021c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80021c8:	6a3b      	ldr	r3, [r7, #32]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d007      	beq.n	80021de <HAL_RCC_OscConfig+0x162>
 80021ce:	6a3b      	ldr	r3, [r7, #32]
 80021d0:	2b18      	cmp	r3, #24
 80021d2:	d137      	bne.n	8002244 <HAL_RCC_OscConfig+0x1c8>
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	f003 0303 	and.w	r3, r3, #3
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d132      	bne.n	8002244 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021de:	4b4e      	ldr	r3, [pc, #312]	; (8002318 <HAL_RCC_OscConfig+0x29c>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0304 	and.w	r3, r3, #4
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d005      	beq.n	80021f6 <HAL_RCC_OscConfig+0x17a>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	68db      	ldr	r3, [r3, #12]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d101      	bne.n	80021f6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e2e3      	b.n	80027be <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80021f6:	4b48      	ldr	r3, [pc, #288]	; (8002318 <HAL_RCC_OscConfig+0x29c>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f023 0219 	bic.w	r2, r3, #25
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	4945      	ldr	r1, [pc, #276]	; (8002318 <HAL_RCC_OscConfig+0x29c>)
 8002204:	4313      	orrs	r3, r2
 8002206:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002208:	f7ff fbfc 	bl	8001a04 <HAL_GetTick>
 800220c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800220e:	e008      	b.n	8002222 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002210:	f7ff fbf8 	bl	8001a04 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b02      	cmp	r3, #2
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e2cd      	b.n	80027be <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002222:	4b3d      	ldr	r3, [pc, #244]	; (8002318 <HAL_RCC_OscConfig+0x29c>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0304 	and.w	r3, r3, #4
 800222a:	2b00      	cmp	r3, #0
 800222c:	d0f0      	beq.n	8002210 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800222e:	4b3a      	ldr	r3, [pc, #232]	; (8002318 <HAL_RCC_OscConfig+0x29c>)
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	061b      	lsls	r3, r3, #24
 800223c:	4936      	ldr	r1, [pc, #216]	; (8002318 <HAL_RCC_OscConfig+0x29c>)
 800223e:	4313      	orrs	r3, r2
 8002240:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002242:	e043      	b.n	80022cc <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d026      	beq.n	800229a <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800224c:	4b32      	ldr	r3, [pc, #200]	; (8002318 <HAL_RCC_OscConfig+0x29c>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f023 0219 	bic.w	r2, r3, #25
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	492f      	ldr	r1, [pc, #188]	; (8002318 <HAL_RCC_OscConfig+0x29c>)
 800225a:	4313      	orrs	r3, r2
 800225c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800225e:	f7ff fbd1 	bl	8001a04 <HAL_GetTick>
 8002262:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002264:	e008      	b.n	8002278 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002266:	f7ff fbcd 	bl	8001a04 <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	2b02      	cmp	r3, #2
 8002272:	d901      	bls.n	8002278 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e2a2      	b.n	80027be <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002278:	4b27      	ldr	r3, [pc, #156]	; (8002318 <HAL_RCC_OscConfig+0x29c>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0304 	and.w	r3, r3, #4
 8002280:	2b00      	cmp	r3, #0
 8002282:	d0f0      	beq.n	8002266 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002284:	4b24      	ldr	r3, [pc, #144]	; (8002318 <HAL_RCC_OscConfig+0x29c>)
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	691b      	ldr	r3, [r3, #16]
 8002290:	061b      	lsls	r3, r3, #24
 8002292:	4921      	ldr	r1, [pc, #132]	; (8002318 <HAL_RCC_OscConfig+0x29c>)
 8002294:	4313      	orrs	r3, r2
 8002296:	604b      	str	r3, [r1, #4]
 8002298:	e018      	b.n	80022cc <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800229a:	4b1f      	ldr	r3, [pc, #124]	; (8002318 <HAL_RCC_OscConfig+0x29c>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a1e      	ldr	r2, [pc, #120]	; (8002318 <HAL_RCC_OscConfig+0x29c>)
 80022a0:	f023 0301 	bic.w	r3, r3, #1
 80022a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a6:	f7ff fbad 	bl	8001a04 <HAL_GetTick>
 80022aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80022ac:	e008      	b.n	80022c0 <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022ae:	f7ff fba9 	bl	8001a04 <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d901      	bls.n	80022c0 <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e27e      	b.n	80027be <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80022c0:	4b15      	ldr	r3, [pc, #84]	; (8002318 <HAL_RCC_OscConfig+0x29c>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0304 	and.w	r3, r3, #4
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d1f0      	bne.n	80022ae <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0310 	and.w	r3, r3, #16
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d06d      	beq.n	80023b4 <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022d8:	4b0f      	ldr	r3, [pc, #60]	; (8002318 <HAL_RCC_OscConfig+0x29c>)
 80022da:	691b      	ldr	r3, [r3, #16]
 80022dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80022e0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80022e2:	4b0d      	ldr	r3, [pc, #52]	; (8002318 <HAL_RCC_OscConfig+0x29c>)
 80022e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e6:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80022e8:	69bb      	ldr	r3, [r7, #24]
 80022ea:	2b08      	cmp	r3, #8
 80022ec:	d007      	beq.n	80022fe <HAL_RCC_OscConfig+0x282>
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	2b18      	cmp	r3, #24
 80022f2:	d11e      	bne.n	8002332 <HAL_RCC_OscConfig+0x2b6>
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	f003 0303 	and.w	r3, r3, #3
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d119      	bne.n	8002332 <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80022fe:	4b06      	ldr	r3, [pc, #24]	; (8002318 <HAL_RCC_OscConfig+0x29c>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002306:	2b00      	cmp	r3, #0
 8002308:	d008      	beq.n	800231c <HAL_RCC_OscConfig+0x2a0>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	69db      	ldr	r3, [r3, #28]
 800230e:	2b80      	cmp	r3, #128	; 0x80
 8002310:	d004      	beq.n	800231c <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e253      	b.n	80027be <HAL_RCC_OscConfig+0x742>
 8002316:	bf00      	nop
 8002318:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800231c:	4ba3      	ldr	r3, [pc, #652]	; (80025ac <HAL_RCC_OscConfig+0x530>)
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6a1b      	ldr	r3, [r3, #32]
 8002328:	061b      	lsls	r3, r3, #24
 800232a:	49a0      	ldr	r1, [pc, #640]	; (80025ac <HAL_RCC_OscConfig+0x530>)
 800232c:	4313      	orrs	r3, r2
 800232e:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002330:	e040      	b.n	80023b4 <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	69db      	ldr	r3, [r3, #28]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d023      	beq.n	8002382 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800233a:	4b9c      	ldr	r3, [pc, #624]	; (80025ac <HAL_RCC_OscConfig+0x530>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a9b      	ldr	r2, [pc, #620]	; (80025ac <HAL_RCC_OscConfig+0x530>)
 8002340:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002344:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002346:	f7ff fb5d 	bl	8001a04 <HAL_GetTick>
 800234a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800234c:	e008      	b.n	8002360 <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800234e:	f7ff fb59 	bl	8001a04 <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	2b02      	cmp	r3, #2
 800235a:	d901      	bls.n	8002360 <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e22e      	b.n	80027be <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002360:	4b92      	ldr	r3, [pc, #584]	; (80025ac <HAL_RCC_OscConfig+0x530>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002368:	2b00      	cmp	r3, #0
 800236a:	d0f0      	beq.n	800234e <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800236c:	4b8f      	ldr	r3, [pc, #572]	; (80025ac <HAL_RCC_OscConfig+0x530>)
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6a1b      	ldr	r3, [r3, #32]
 8002378:	061b      	lsls	r3, r3, #24
 800237a:	498c      	ldr	r1, [pc, #560]	; (80025ac <HAL_RCC_OscConfig+0x530>)
 800237c:	4313      	orrs	r3, r2
 800237e:	60cb      	str	r3, [r1, #12]
 8002380:	e018      	b.n	80023b4 <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002382:	4b8a      	ldr	r3, [pc, #552]	; (80025ac <HAL_RCC_OscConfig+0x530>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a89      	ldr	r2, [pc, #548]	; (80025ac <HAL_RCC_OscConfig+0x530>)
 8002388:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800238c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800238e:	f7ff fb39 	bl	8001a04 <HAL_GetTick>
 8002392:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002394:	e008      	b.n	80023a8 <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002396:	f7ff fb35 	bl	8001a04 <HAL_GetTick>
 800239a:	4602      	mov	r2, r0
 800239c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d901      	bls.n	80023a8 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	e20a      	b.n	80027be <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80023a8:	4b80      	ldr	r3, [pc, #512]	; (80025ac <HAL_RCC_OscConfig+0x530>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d1f0      	bne.n	8002396 <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0308 	and.w	r3, r3, #8
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d036      	beq.n	800242e <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	695b      	ldr	r3, [r3, #20]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d019      	beq.n	80023fc <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023c8:	4b78      	ldr	r3, [pc, #480]	; (80025ac <HAL_RCC_OscConfig+0x530>)
 80023ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023cc:	4a77      	ldr	r2, [pc, #476]	; (80025ac <HAL_RCC_OscConfig+0x530>)
 80023ce:	f043 0301 	orr.w	r3, r3, #1
 80023d2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023d4:	f7ff fb16 	bl	8001a04 <HAL_GetTick>
 80023d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80023da:	e008      	b.n	80023ee <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023dc:	f7ff fb12 	bl	8001a04 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e1e7      	b.n	80027be <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80023ee:	4b6f      	ldr	r3, [pc, #444]	; (80025ac <HAL_RCC_OscConfig+0x530>)
 80023f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d0f0      	beq.n	80023dc <HAL_RCC_OscConfig+0x360>
 80023fa:	e018      	b.n	800242e <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023fc:	4b6b      	ldr	r3, [pc, #428]	; (80025ac <HAL_RCC_OscConfig+0x530>)
 80023fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002400:	4a6a      	ldr	r2, [pc, #424]	; (80025ac <HAL_RCC_OscConfig+0x530>)
 8002402:	f023 0301 	bic.w	r3, r3, #1
 8002406:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002408:	f7ff fafc 	bl	8001a04 <HAL_GetTick>
 800240c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800240e:	e008      	b.n	8002422 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002410:	f7ff faf8 	bl	8001a04 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b02      	cmp	r3, #2
 800241c:	d901      	bls.n	8002422 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e1cd      	b.n	80027be <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002422:	4b62      	ldr	r3, [pc, #392]	; (80025ac <HAL_RCC_OscConfig+0x530>)
 8002424:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	2b00      	cmp	r3, #0
 800242c:	d1f0      	bne.n	8002410 <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0320 	and.w	r3, r3, #32
 8002436:	2b00      	cmp	r3, #0
 8002438:	d036      	beq.n	80024a8 <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	699b      	ldr	r3, [r3, #24]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d019      	beq.n	8002476 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002442:	4b5a      	ldr	r3, [pc, #360]	; (80025ac <HAL_RCC_OscConfig+0x530>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a59      	ldr	r2, [pc, #356]	; (80025ac <HAL_RCC_OscConfig+0x530>)
 8002448:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800244c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800244e:	f7ff fad9 	bl	8001a04 <HAL_GetTick>
 8002452:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002454:	e008      	b.n	8002468 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002456:	f7ff fad5 	bl	8001a04 <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	2b02      	cmp	r3, #2
 8002462:	d901      	bls.n	8002468 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e1aa      	b.n	80027be <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002468:	4b50      	ldr	r3, [pc, #320]	; (80025ac <HAL_RCC_OscConfig+0x530>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d0f0      	beq.n	8002456 <HAL_RCC_OscConfig+0x3da>
 8002474:	e018      	b.n	80024a8 <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002476:	4b4d      	ldr	r3, [pc, #308]	; (80025ac <HAL_RCC_OscConfig+0x530>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a4c      	ldr	r2, [pc, #304]	; (80025ac <HAL_RCC_OscConfig+0x530>)
 800247c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002480:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002482:	f7ff fabf 	bl	8001a04 <HAL_GetTick>
 8002486:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002488:	e008      	b.n	800249c <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800248a:	f7ff fabb 	bl	8001a04 <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	2b02      	cmp	r3, #2
 8002496:	d901      	bls.n	800249c <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	e190      	b.n	80027be <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800249c:	4b43      	ldr	r3, [pc, #268]	; (80025ac <HAL_RCC_OscConfig+0x530>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d1f0      	bne.n	800248a <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0304 	and.w	r3, r3, #4
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	f000 8085 	beq.w	80025c0 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80024b6:	4b3e      	ldr	r3, [pc, #248]	; (80025b0 <HAL_RCC_OscConfig+0x534>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a3d      	ldr	r2, [pc, #244]	; (80025b0 <HAL_RCC_OscConfig+0x534>)
 80024bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024c0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80024c2:	f7ff fa9f 	bl	8001a04 <HAL_GetTick>
 80024c6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80024c8:	e008      	b.n	80024dc <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80024ca:	f7ff fa9b 	bl	8001a04 <HAL_GetTick>
 80024ce:	4602      	mov	r2, r0
 80024d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	2b64      	cmp	r3, #100	; 0x64
 80024d6:	d901      	bls.n	80024dc <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 80024d8:	2303      	movs	r3, #3
 80024da:	e170      	b.n	80027be <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80024dc:	4b34      	ldr	r3, [pc, #208]	; (80025b0 <HAL_RCC_OscConfig+0x534>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d0f0      	beq.n	80024ca <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d106      	bne.n	80024fe <HAL_RCC_OscConfig+0x482>
 80024f0:	4b2e      	ldr	r3, [pc, #184]	; (80025ac <HAL_RCC_OscConfig+0x530>)
 80024f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024f4:	4a2d      	ldr	r2, [pc, #180]	; (80025ac <HAL_RCC_OscConfig+0x530>)
 80024f6:	f043 0301 	orr.w	r3, r3, #1
 80024fa:	6713      	str	r3, [r2, #112]	; 0x70
 80024fc:	e02d      	b.n	800255a <HAL_RCC_OscConfig+0x4de>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d10c      	bne.n	8002520 <HAL_RCC_OscConfig+0x4a4>
 8002506:	4b29      	ldr	r3, [pc, #164]	; (80025ac <HAL_RCC_OscConfig+0x530>)
 8002508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800250a:	4a28      	ldr	r2, [pc, #160]	; (80025ac <HAL_RCC_OscConfig+0x530>)
 800250c:	f023 0301 	bic.w	r3, r3, #1
 8002510:	6713      	str	r3, [r2, #112]	; 0x70
 8002512:	4b26      	ldr	r3, [pc, #152]	; (80025ac <HAL_RCC_OscConfig+0x530>)
 8002514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002516:	4a25      	ldr	r2, [pc, #148]	; (80025ac <HAL_RCC_OscConfig+0x530>)
 8002518:	f023 0304 	bic.w	r3, r3, #4
 800251c:	6713      	str	r3, [r2, #112]	; 0x70
 800251e:	e01c      	b.n	800255a <HAL_RCC_OscConfig+0x4de>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	2b05      	cmp	r3, #5
 8002526:	d10c      	bne.n	8002542 <HAL_RCC_OscConfig+0x4c6>
 8002528:	4b20      	ldr	r3, [pc, #128]	; (80025ac <HAL_RCC_OscConfig+0x530>)
 800252a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800252c:	4a1f      	ldr	r2, [pc, #124]	; (80025ac <HAL_RCC_OscConfig+0x530>)
 800252e:	f043 0304 	orr.w	r3, r3, #4
 8002532:	6713      	str	r3, [r2, #112]	; 0x70
 8002534:	4b1d      	ldr	r3, [pc, #116]	; (80025ac <HAL_RCC_OscConfig+0x530>)
 8002536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002538:	4a1c      	ldr	r2, [pc, #112]	; (80025ac <HAL_RCC_OscConfig+0x530>)
 800253a:	f043 0301 	orr.w	r3, r3, #1
 800253e:	6713      	str	r3, [r2, #112]	; 0x70
 8002540:	e00b      	b.n	800255a <HAL_RCC_OscConfig+0x4de>
 8002542:	4b1a      	ldr	r3, [pc, #104]	; (80025ac <HAL_RCC_OscConfig+0x530>)
 8002544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002546:	4a19      	ldr	r2, [pc, #100]	; (80025ac <HAL_RCC_OscConfig+0x530>)
 8002548:	f023 0301 	bic.w	r3, r3, #1
 800254c:	6713      	str	r3, [r2, #112]	; 0x70
 800254e:	4b17      	ldr	r3, [pc, #92]	; (80025ac <HAL_RCC_OscConfig+0x530>)
 8002550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002552:	4a16      	ldr	r2, [pc, #88]	; (80025ac <HAL_RCC_OscConfig+0x530>)
 8002554:	f023 0304 	bic.w	r3, r3, #4
 8002558:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d015      	beq.n	800258e <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002562:	f7ff fa4f 	bl	8001a04 <HAL_GetTick>
 8002566:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002568:	e00a      	b.n	8002580 <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800256a:	f7ff fa4b 	bl	8001a04 <HAL_GetTick>
 800256e:	4602      	mov	r2, r0
 8002570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	f241 3288 	movw	r2, #5000	; 0x1388
 8002578:	4293      	cmp	r3, r2
 800257a:	d901      	bls.n	8002580 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e11e      	b.n	80027be <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002580:	4b0a      	ldr	r3, [pc, #40]	; (80025ac <HAL_RCC_OscConfig+0x530>)
 8002582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002584:	f003 0302 	and.w	r3, r3, #2
 8002588:	2b00      	cmp	r3, #0
 800258a:	d0ee      	beq.n	800256a <HAL_RCC_OscConfig+0x4ee>
 800258c:	e018      	b.n	80025c0 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800258e:	f7ff fa39 	bl	8001a04 <HAL_GetTick>
 8002592:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002594:	e00e      	b.n	80025b4 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002596:	f7ff fa35 	bl	8001a04 <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d905      	bls.n	80025b4 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e108      	b.n	80027be <HAL_RCC_OscConfig+0x742>
 80025ac:	58024400 	.word	0x58024400
 80025b0:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80025b4:	4b84      	ldr	r3, [pc, #528]	; (80027c8 <HAL_RCC_OscConfig+0x74c>)
 80025b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025b8:	f003 0302 	and.w	r3, r3, #2
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d1ea      	bne.n	8002596 <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	f000 80f9 	beq.w	80027bc <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80025ca:	4b7f      	ldr	r3, [pc, #508]	; (80027c8 <HAL_RCC_OscConfig+0x74c>)
 80025cc:	691b      	ldr	r3, [r3, #16]
 80025ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80025d2:	2b18      	cmp	r3, #24
 80025d4:	f000 80b4 	beq.w	8002740 <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025dc:	2b02      	cmp	r3, #2
 80025de:	f040 8095 	bne.w	800270c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025e2:	4b79      	ldr	r3, [pc, #484]	; (80027c8 <HAL_RCC_OscConfig+0x74c>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a78      	ldr	r2, [pc, #480]	; (80027c8 <HAL_RCC_OscConfig+0x74c>)
 80025e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ee:	f7ff fa09 	bl	8001a04 <HAL_GetTick>
 80025f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80025f4:	e008      	b.n	8002608 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025f6:	f7ff fa05 	bl	8001a04 <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	2b02      	cmp	r3, #2
 8002602:	d901      	bls.n	8002608 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	e0da      	b.n	80027be <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002608:	4b6f      	ldr	r3, [pc, #444]	; (80027c8 <HAL_RCC_OscConfig+0x74c>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d1f0      	bne.n	80025f6 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002614:	4b6c      	ldr	r3, [pc, #432]	; (80027c8 <HAL_RCC_OscConfig+0x74c>)
 8002616:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002618:	4b6c      	ldr	r3, [pc, #432]	; (80027cc <HAL_RCC_OscConfig+0x750>)
 800261a:	4013      	ands	r3, r2
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002624:	0112      	lsls	r2, r2, #4
 8002626:	430a      	orrs	r2, r1
 8002628:	4967      	ldr	r1, [pc, #412]	; (80027c8 <HAL_RCC_OscConfig+0x74c>)
 800262a:	4313      	orrs	r3, r2
 800262c:	628b      	str	r3, [r1, #40]	; 0x28
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002632:	3b01      	subs	r3, #1
 8002634:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800263c:	3b01      	subs	r3, #1
 800263e:	025b      	lsls	r3, r3, #9
 8002640:	b29b      	uxth	r3, r3
 8002642:	431a      	orrs	r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002648:	3b01      	subs	r3, #1
 800264a:	041b      	lsls	r3, r3, #16
 800264c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002650:	431a      	orrs	r2, r3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002656:	3b01      	subs	r3, #1
 8002658:	061b      	lsls	r3, r3, #24
 800265a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800265e:	495a      	ldr	r1, [pc, #360]	; (80027c8 <HAL_RCC_OscConfig+0x74c>)
 8002660:	4313      	orrs	r3, r2
 8002662:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002664:	4b58      	ldr	r3, [pc, #352]	; (80027c8 <HAL_RCC_OscConfig+0x74c>)
 8002666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002668:	4a57      	ldr	r2, [pc, #348]	; (80027c8 <HAL_RCC_OscConfig+0x74c>)
 800266a:	f023 0301 	bic.w	r3, r3, #1
 800266e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002670:	4b55      	ldr	r3, [pc, #340]	; (80027c8 <HAL_RCC_OscConfig+0x74c>)
 8002672:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002674:	4b56      	ldr	r3, [pc, #344]	; (80027d0 <HAL_RCC_OscConfig+0x754>)
 8002676:	4013      	ands	r3, r2
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800267c:	00d2      	lsls	r2, r2, #3
 800267e:	4952      	ldr	r1, [pc, #328]	; (80027c8 <HAL_RCC_OscConfig+0x74c>)
 8002680:	4313      	orrs	r3, r2
 8002682:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002684:	4b50      	ldr	r3, [pc, #320]	; (80027c8 <HAL_RCC_OscConfig+0x74c>)
 8002686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002688:	f023 020c 	bic.w	r2, r3, #12
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002690:	494d      	ldr	r1, [pc, #308]	; (80027c8 <HAL_RCC_OscConfig+0x74c>)
 8002692:	4313      	orrs	r3, r2
 8002694:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002696:	4b4c      	ldr	r3, [pc, #304]	; (80027c8 <HAL_RCC_OscConfig+0x74c>)
 8002698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800269a:	f023 0202 	bic.w	r2, r3, #2
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a2:	4949      	ldr	r1, [pc, #292]	; (80027c8 <HAL_RCC_OscConfig+0x74c>)
 80026a4:	4313      	orrs	r3, r2
 80026a6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80026a8:	4b47      	ldr	r3, [pc, #284]	; (80027c8 <HAL_RCC_OscConfig+0x74c>)
 80026aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ac:	4a46      	ldr	r2, [pc, #280]	; (80027c8 <HAL_RCC_OscConfig+0x74c>)
 80026ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026b4:	4b44      	ldr	r3, [pc, #272]	; (80027c8 <HAL_RCC_OscConfig+0x74c>)
 80026b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b8:	4a43      	ldr	r2, [pc, #268]	; (80027c8 <HAL_RCC_OscConfig+0x74c>)
 80026ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80026c0:	4b41      	ldr	r3, [pc, #260]	; (80027c8 <HAL_RCC_OscConfig+0x74c>)
 80026c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c4:	4a40      	ldr	r2, [pc, #256]	; (80027c8 <HAL_RCC_OscConfig+0x74c>)
 80026c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80026cc:	4b3e      	ldr	r3, [pc, #248]	; (80027c8 <HAL_RCC_OscConfig+0x74c>)
 80026ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d0:	4a3d      	ldr	r2, [pc, #244]	; (80027c8 <HAL_RCC_OscConfig+0x74c>)
 80026d2:	f043 0301 	orr.w	r3, r3, #1
 80026d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026d8:	4b3b      	ldr	r3, [pc, #236]	; (80027c8 <HAL_RCC_OscConfig+0x74c>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a3a      	ldr	r2, [pc, #232]	; (80027c8 <HAL_RCC_OscConfig+0x74c>)
 80026de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e4:	f7ff f98e 	bl	8001a04 <HAL_GetTick>
 80026e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80026ea:	e008      	b.n	80026fe <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026ec:	f7ff f98a 	bl	8001a04 <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e05f      	b.n	80027be <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80026fe:	4b32      	ldr	r3, [pc, #200]	; (80027c8 <HAL_RCC_OscConfig+0x74c>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d0f0      	beq.n	80026ec <HAL_RCC_OscConfig+0x670>
 800270a:	e057      	b.n	80027bc <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800270c:	4b2e      	ldr	r3, [pc, #184]	; (80027c8 <HAL_RCC_OscConfig+0x74c>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a2d      	ldr	r2, [pc, #180]	; (80027c8 <HAL_RCC_OscConfig+0x74c>)
 8002712:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002716:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002718:	f7ff f974 	bl	8001a04 <HAL_GetTick>
 800271c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800271e:	e008      	b.n	8002732 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002720:	f7ff f970 	bl	8001a04 <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	2b02      	cmp	r3, #2
 800272c:	d901      	bls.n	8002732 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e045      	b.n	80027be <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002732:	4b25      	ldr	r3, [pc, #148]	; (80027c8 <HAL_RCC_OscConfig+0x74c>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d1f0      	bne.n	8002720 <HAL_RCC_OscConfig+0x6a4>
 800273e:	e03d      	b.n	80027bc <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002740:	4b21      	ldr	r3, [pc, #132]	; (80027c8 <HAL_RCC_OscConfig+0x74c>)
 8002742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002744:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002746:	4b20      	ldr	r3, [pc, #128]	; (80027c8 <HAL_RCC_OscConfig+0x74c>)
 8002748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002750:	2b01      	cmp	r3, #1
 8002752:	d031      	beq.n	80027b8 <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	f003 0203 	and.w	r2, r3, #3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800275e:	429a      	cmp	r2, r3
 8002760:	d12a      	bne.n	80027b8 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	091b      	lsrs	r3, r3, #4
 8002766:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800276e:	429a      	cmp	r2, r3
 8002770:	d122      	bne.n	80027b8 <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800277e:	429a      	cmp	r2, r3
 8002780:	d11a      	bne.n	80027b8 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	0a5b      	lsrs	r3, r3, #9
 8002786:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800278e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002790:	429a      	cmp	r2, r3
 8002792:	d111      	bne.n	80027b8 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	0c1b      	lsrs	r3, r3, #16
 8002798:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027a0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d108      	bne.n	80027b8 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	0e1b      	lsrs	r3, r3, #24
 80027aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027b2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d001      	beq.n	80027bc <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e000      	b.n	80027be <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3730      	adds	r7, #48	; 0x30
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	58024400 	.word	0x58024400
 80027cc:	fffffc0c 	.word	0xfffffc0c
 80027d0:	ffff0007 	.word	0xffff0007

080027d4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b086      	sub	sp, #24
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d101      	bne.n	80027e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e19c      	b.n	8002b22 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027e8:	4b8a      	ldr	r3, [pc, #552]	; (8002a14 <HAL_RCC_ClockConfig+0x240>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 030f 	and.w	r3, r3, #15
 80027f0:	683a      	ldr	r2, [r7, #0]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d910      	bls.n	8002818 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027f6:	4b87      	ldr	r3, [pc, #540]	; (8002a14 <HAL_RCC_ClockConfig+0x240>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f023 020f 	bic.w	r2, r3, #15
 80027fe:	4985      	ldr	r1, [pc, #532]	; (8002a14 <HAL_RCC_ClockConfig+0x240>)
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	4313      	orrs	r3, r2
 8002804:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002806:	4b83      	ldr	r3, [pc, #524]	; (8002a14 <HAL_RCC_ClockConfig+0x240>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 030f 	and.w	r3, r3, #15
 800280e:	683a      	ldr	r2, [r7, #0]
 8002810:	429a      	cmp	r2, r3
 8002812:	d001      	beq.n	8002818 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e184      	b.n	8002b22 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0304 	and.w	r3, r3, #4
 8002820:	2b00      	cmp	r3, #0
 8002822:	d010      	beq.n	8002846 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	691a      	ldr	r2, [r3, #16]
 8002828:	4b7b      	ldr	r3, [pc, #492]	; (8002a18 <HAL_RCC_ClockConfig+0x244>)
 800282a:	699b      	ldr	r3, [r3, #24]
 800282c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002830:	429a      	cmp	r2, r3
 8002832:	d908      	bls.n	8002846 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002834:	4b78      	ldr	r3, [pc, #480]	; (8002a18 <HAL_RCC_ClockConfig+0x244>)
 8002836:	699b      	ldr	r3, [r3, #24]
 8002838:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	691b      	ldr	r3, [r3, #16]
 8002840:	4975      	ldr	r1, [pc, #468]	; (8002a18 <HAL_RCC_ClockConfig+0x244>)
 8002842:	4313      	orrs	r3, r2
 8002844:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0308 	and.w	r3, r3, #8
 800284e:	2b00      	cmp	r3, #0
 8002850:	d010      	beq.n	8002874 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	695a      	ldr	r2, [r3, #20]
 8002856:	4b70      	ldr	r3, [pc, #448]	; (8002a18 <HAL_RCC_ClockConfig+0x244>)
 8002858:	69db      	ldr	r3, [r3, #28]
 800285a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800285e:	429a      	cmp	r2, r3
 8002860:	d908      	bls.n	8002874 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002862:	4b6d      	ldr	r3, [pc, #436]	; (8002a18 <HAL_RCC_ClockConfig+0x244>)
 8002864:	69db      	ldr	r3, [r3, #28]
 8002866:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	695b      	ldr	r3, [r3, #20]
 800286e:	496a      	ldr	r1, [pc, #424]	; (8002a18 <HAL_RCC_ClockConfig+0x244>)
 8002870:	4313      	orrs	r3, r2
 8002872:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0310 	and.w	r3, r3, #16
 800287c:	2b00      	cmp	r3, #0
 800287e:	d010      	beq.n	80028a2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	699a      	ldr	r2, [r3, #24]
 8002884:	4b64      	ldr	r3, [pc, #400]	; (8002a18 <HAL_RCC_ClockConfig+0x244>)
 8002886:	69db      	ldr	r3, [r3, #28]
 8002888:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800288c:	429a      	cmp	r2, r3
 800288e:	d908      	bls.n	80028a2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002890:	4b61      	ldr	r3, [pc, #388]	; (8002a18 <HAL_RCC_ClockConfig+0x244>)
 8002892:	69db      	ldr	r3, [r3, #28]
 8002894:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	699b      	ldr	r3, [r3, #24]
 800289c:	495e      	ldr	r1, [pc, #376]	; (8002a18 <HAL_RCC_ClockConfig+0x244>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0320 	and.w	r3, r3, #32
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d010      	beq.n	80028d0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	69da      	ldr	r2, [r3, #28]
 80028b2:	4b59      	ldr	r3, [pc, #356]	; (8002a18 <HAL_RCC_ClockConfig+0x244>)
 80028b4:	6a1b      	ldr	r3, [r3, #32]
 80028b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d908      	bls.n	80028d0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80028be:	4b56      	ldr	r3, [pc, #344]	; (8002a18 <HAL_RCC_ClockConfig+0x244>)
 80028c0:	6a1b      	ldr	r3, [r3, #32]
 80028c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	69db      	ldr	r3, [r3, #28]
 80028ca:	4953      	ldr	r1, [pc, #332]	; (8002a18 <HAL_RCC_ClockConfig+0x244>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0302 	and.w	r3, r3, #2
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d010      	beq.n	80028fe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	68da      	ldr	r2, [r3, #12]
 80028e0:	4b4d      	ldr	r3, [pc, #308]	; (8002a18 <HAL_RCC_ClockConfig+0x244>)
 80028e2:	699b      	ldr	r3, [r3, #24]
 80028e4:	f003 030f 	and.w	r3, r3, #15
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d908      	bls.n	80028fe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028ec:	4b4a      	ldr	r3, [pc, #296]	; (8002a18 <HAL_RCC_ClockConfig+0x244>)
 80028ee:	699b      	ldr	r3, [r3, #24]
 80028f0:	f023 020f 	bic.w	r2, r3, #15
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	4947      	ldr	r1, [pc, #284]	; (8002a18 <HAL_RCC_ClockConfig+0x244>)
 80028fa:	4313      	orrs	r3, r2
 80028fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0301 	and.w	r3, r3, #1
 8002906:	2b00      	cmp	r3, #0
 8002908:	d055      	beq.n	80029b6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800290a:	4b43      	ldr	r3, [pc, #268]	; (8002a18 <HAL_RCC_ClockConfig+0x244>)
 800290c:	699b      	ldr	r3, [r3, #24]
 800290e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	4940      	ldr	r1, [pc, #256]	; (8002a18 <HAL_RCC_ClockConfig+0x244>)
 8002918:	4313      	orrs	r3, r2
 800291a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	2b02      	cmp	r3, #2
 8002922:	d107      	bne.n	8002934 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002924:	4b3c      	ldr	r3, [pc, #240]	; (8002a18 <HAL_RCC_ClockConfig+0x244>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d121      	bne.n	8002974 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e0f6      	b.n	8002b22 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	2b03      	cmp	r3, #3
 800293a:	d107      	bne.n	800294c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800293c:	4b36      	ldr	r3, [pc, #216]	; (8002a18 <HAL_RCC_ClockConfig+0x244>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d115      	bne.n	8002974 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e0ea      	b.n	8002b22 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	2b01      	cmp	r3, #1
 8002952:	d107      	bne.n	8002964 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002954:	4b30      	ldr	r3, [pc, #192]	; (8002a18 <HAL_RCC_ClockConfig+0x244>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800295c:	2b00      	cmp	r3, #0
 800295e:	d109      	bne.n	8002974 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e0de      	b.n	8002b22 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002964:	4b2c      	ldr	r3, [pc, #176]	; (8002a18 <HAL_RCC_ClockConfig+0x244>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0304 	and.w	r3, r3, #4
 800296c:	2b00      	cmp	r3, #0
 800296e:	d101      	bne.n	8002974 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e0d6      	b.n	8002b22 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002974:	4b28      	ldr	r3, [pc, #160]	; (8002a18 <HAL_RCC_ClockConfig+0x244>)
 8002976:	691b      	ldr	r3, [r3, #16]
 8002978:	f023 0207 	bic.w	r2, r3, #7
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	4925      	ldr	r1, [pc, #148]	; (8002a18 <HAL_RCC_ClockConfig+0x244>)
 8002982:	4313      	orrs	r3, r2
 8002984:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002986:	f7ff f83d 	bl	8001a04 <HAL_GetTick>
 800298a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800298c:	e00a      	b.n	80029a4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800298e:	f7ff f839 	bl	8001a04 <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	f241 3288 	movw	r2, #5000	; 0x1388
 800299c:	4293      	cmp	r3, r2
 800299e:	d901      	bls.n	80029a4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e0be      	b.n	8002b22 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029a4:	4b1c      	ldr	r3, [pc, #112]	; (8002a18 <HAL_RCC_ClockConfig+0x244>)
 80029a6:	691b      	ldr	r3, [r3, #16]
 80029a8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	00db      	lsls	r3, r3, #3
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d1eb      	bne.n	800298e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0302 	and.w	r3, r3, #2
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d010      	beq.n	80029e4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	68da      	ldr	r2, [r3, #12]
 80029c6:	4b14      	ldr	r3, [pc, #80]	; (8002a18 <HAL_RCC_ClockConfig+0x244>)
 80029c8:	699b      	ldr	r3, [r3, #24]
 80029ca:	f003 030f 	and.w	r3, r3, #15
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d208      	bcs.n	80029e4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029d2:	4b11      	ldr	r3, [pc, #68]	; (8002a18 <HAL_RCC_ClockConfig+0x244>)
 80029d4:	699b      	ldr	r3, [r3, #24]
 80029d6:	f023 020f 	bic.w	r2, r3, #15
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	490e      	ldr	r1, [pc, #56]	; (8002a18 <HAL_RCC_ClockConfig+0x244>)
 80029e0:	4313      	orrs	r3, r2
 80029e2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029e4:	4b0b      	ldr	r3, [pc, #44]	; (8002a14 <HAL_RCC_ClockConfig+0x240>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 030f 	and.w	r3, r3, #15
 80029ec:	683a      	ldr	r2, [r7, #0]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d214      	bcs.n	8002a1c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029f2:	4b08      	ldr	r3, [pc, #32]	; (8002a14 <HAL_RCC_ClockConfig+0x240>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f023 020f 	bic.w	r2, r3, #15
 80029fa:	4906      	ldr	r1, [pc, #24]	; (8002a14 <HAL_RCC_ClockConfig+0x240>)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a02:	4b04      	ldr	r3, [pc, #16]	; (8002a14 <HAL_RCC_ClockConfig+0x240>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 030f 	and.w	r3, r3, #15
 8002a0a:	683a      	ldr	r2, [r7, #0]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d005      	beq.n	8002a1c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e086      	b.n	8002b22 <HAL_RCC_ClockConfig+0x34e>
 8002a14:	52002000 	.word	0x52002000
 8002a18:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0304 	and.w	r3, r3, #4
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d010      	beq.n	8002a4a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	691a      	ldr	r2, [r3, #16]
 8002a2c:	4b3f      	ldr	r3, [pc, #252]	; (8002b2c <HAL_RCC_ClockConfig+0x358>)
 8002a2e:	699b      	ldr	r3, [r3, #24]
 8002a30:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d208      	bcs.n	8002a4a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002a38:	4b3c      	ldr	r3, [pc, #240]	; (8002b2c <HAL_RCC_ClockConfig+0x358>)
 8002a3a:	699b      	ldr	r3, [r3, #24]
 8002a3c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	691b      	ldr	r3, [r3, #16]
 8002a44:	4939      	ldr	r1, [pc, #228]	; (8002b2c <HAL_RCC_ClockConfig+0x358>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0308 	and.w	r3, r3, #8
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d010      	beq.n	8002a78 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	695a      	ldr	r2, [r3, #20]
 8002a5a:	4b34      	ldr	r3, [pc, #208]	; (8002b2c <HAL_RCC_ClockConfig+0x358>)
 8002a5c:	69db      	ldr	r3, [r3, #28]
 8002a5e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d208      	bcs.n	8002a78 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002a66:	4b31      	ldr	r3, [pc, #196]	; (8002b2c <HAL_RCC_ClockConfig+0x358>)
 8002a68:	69db      	ldr	r3, [r3, #28]
 8002a6a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	492e      	ldr	r1, [pc, #184]	; (8002b2c <HAL_RCC_ClockConfig+0x358>)
 8002a74:	4313      	orrs	r3, r2
 8002a76:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0310 	and.w	r3, r3, #16
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d010      	beq.n	8002aa6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	699a      	ldr	r2, [r3, #24]
 8002a88:	4b28      	ldr	r3, [pc, #160]	; (8002b2c <HAL_RCC_ClockConfig+0x358>)
 8002a8a:	69db      	ldr	r3, [r3, #28]
 8002a8c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d208      	bcs.n	8002aa6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002a94:	4b25      	ldr	r3, [pc, #148]	; (8002b2c <HAL_RCC_ClockConfig+0x358>)
 8002a96:	69db      	ldr	r3, [r3, #28]
 8002a98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	699b      	ldr	r3, [r3, #24]
 8002aa0:	4922      	ldr	r1, [pc, #136]	; (8002b2c <HAL_RCC_ClockConfig+0x358>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0320 	and.w	r3, r3, #32
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d010      	beq.n	8002ad4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	69da      	ldr	r2, [r3, #28]
 8002ab6:	4b1d      	ldr	r3, [pc, #116]	; (8002b2c <HAL_RCC_ClockConfig+0x358>)
 8002ab8:	6a1b      	ldr	r3, [r3, #32]
 8002aba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d208      	bcs.n	8002ad4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002ac2:	4b1a      	ldr	r3, [pc, #104]	; (8002b2c <HAL_RCC_ClockConfig+0x358>)
 8002ac4:	6a1b      	ldr	r3, [r3, #32]
 8002ac6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	69db      	ldr	r3, [r3, #28]
 8002ace:	4917      	ldr	r1, [pc, #92]	; (8002b2c <HAL_RCC_ClockConfig+0x358>)
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002ad4:	f000 f834 	bl	8002b40 <HAL_RCC_GetSysClockFreq>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	4b14      	ldr	r3, [pc, #80]	; (8002b2c <HAL_RCC_ClockConfig+0x358>)
 8002adc:	699b      	ldr	r3, [r3, #24]
 8002ade:	0a1b      	lsrs	r3, r3, #8
 8002ae0:	f003 030f 	and.w	r3, r3, #15
 8002ae4:	4912      	ldr	r1, [pc, #72]	; (8002b30 <HAL_RCC_ClockConfig+0x35c>)
 8002ae6:	5ccb      	ldrb	r3, [r1, r3]
 8002ae8:	f003 031f 	and.w	r3, r3, #31
 8002aec:	fa22 f303 	lsr.w	r3, r2, r3
 8002af0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002af2:	4b0e      	ldr	r3, [pc, #56]	; (8002b2c <HAL_RCC_ClockConfig+0x358>)
 8002af4:	699b      	ldr	r3, [r3, #24]
 8002af6:	f003 030f 	and.w	r3, r3, #15
 8002afa:	4a0d      	ldr	r2, [pc, #52]	; (8002b30 <HAL_RCC_ClockConfig+0x35c>)
 8002afc:	5cd3      	ldrb	r3, [r2, r3]
 8002afe:	f003 031f 	and.w	r3, r3, #31
 8002b02:	693a      	ldr	r2, [r7, #16]
 8002b04:	fa22 f303 	lsr.w	r3, r2, r3
 8002b08:	4a0a      	ldr	r2, [pc, #40]	; (8002b34 <HAL_RCC_ClockConfig+0x360>)
 8002b0a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002b0c:	4a0a      	ldr	r2, [pc, #40]	; (8002b38 <HAL_RCC_ClockConfig+0x364>)
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002b12:	4b0a      	ldr	r3, [pc, #40]	; (8002b3c <HAL_RCC_ClockConfig+0x368>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7fe ff2a 	bl	8001970 <HAL_InitTick>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3718      	adds	r7, #24
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	58024400 	.word	0x58024400
 8002b30:	08008e30 	.word	0x08008e30
 8002b34:	24000010 	.word	0x24000010
 8002b38:	2400000c 	.word	0x2400000c
 8002b3c:	24000014 	.word	0x24000014

08002b40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b089      	sub	sp, #36	; 0x24
 8002b44:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b46:	4bb3      	ldr	r3, [pc, #716]	; (8002e14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b4e:	2b18      	cmp	r3, #24
 8002b50:	f200 8155 	bhi.w	8002dfe <HAL_RCC_GetSysClockFreq+0x2be>
 8002b54:	a201      	add	r2, pc, #4	; (adr r2, 8002b5c <HAL_RCC_GetSysClockFreq+0x1c>)
 8002b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b5a:	bf00      	nop
 8002b5c:	08002bc1 	.word	0x08002bc1
 8002b60:	08002dff 	.word	0x08002dff
 8002b64:	08002dff 	.word	0x08002dff
 8002b68:	08002dff 	.word	0x08002dff
 8002b6c:	08002dff 	.word	0x08002dff
 8002b70:	08002dff 	.word	0x08002dff
 8002b74:	08002dff 	.word	0x08002dff
 8002b78:	08002dff 	.word	0x08002dff
 8002b7c:	08002be7 	.word	0x08002be7
 8002b80:	08002dff 	.word	0x08002dff
 8002b84:	08002dff 	.word	0x08002dff
 8002b88:	08002dff 	.word	0x08002dff
 8002b8c:	08002dff 	.word	0x08002dff
 8002b90:	08002dff 	.word	0x08002dff
 8002b94:	08002dff 	.word	0x08002dff
 8002b98:	08002dff 	.word	0x08002dff
 8002b9c:	08002bed 	.word	0x08002bed
 8002ba0:	08002dff 	.word	0x08002dff
 8002ba4:	08002dff 	.word	0x08002dff
 8002ba8:	08002dff 	.word	0x08002dff
 8002bac:	08002dff 	.word	0x08002dff
 8002bb0:	08002dff 	.word	0x08002dff
 8002bb4:	08002dff 	.word	0x08002dff
 8002bb8:	08002dff 	.word	0x08002dff
 8002bbc:	08002bf3 	.word	0x08002bf3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002bc0:	4b94      	ldr	r3, [pc, #592]	; (8002e14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0320 	and.w	r3, r3, #32
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d009      	beq.n	8002be0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002bcc:	4b91      	ldr	r3, [pc, #580]	; (8002e14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	08db      	lsrs	r3, r3, #3
 8002bd2:	f003 0303 	and.w	r3, r3, #3
 8002bd6:	4a90      	ldr	r2, [pc, #576]	; (8002e18 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002bd8:	fa22 f303 	lsr.w	r3, r2, r3
 8002bdc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002bde:	e111      	b.n	8002e04 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002be0:	4b8d      	ldr	r3, [pc, #564]	; (8002e18 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002be2:	61bb      	str	r3, [r7, #24]
    break;
 8002be4:	e10e      	b.n	8002e04 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002be6:	4b8d      	ldr	r3, [pc, #564]	; (8002e1c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002be8:	61bb      	str	r3, [r7, #24]
    break;
 8002bea:	e10b      	b.n	8002e04 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002bec:	4b8c      	ldr	r3, [pc, #560]	; (8002e20 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002bee:	61bb      	str	r3, [r7, #24]
    break;
 8002bf0:	e108      	b.n	8002e04 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002bf2:	4b88      	ldr	r3, [pc, #544]	; (8002e14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf6:	f003 0303 	and.w	r3, r3, #3
 8002bfa:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002bfc:	4b85      	ldr	r3, [pc, #532]	; (8002e14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c00:	091b      	lsrs	r3, r3, #4
 8002c02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c06:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002c08:	4b82      	ldr	r3, [pc, #520]	; (8002e14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c0c:	f003 0301 	and.w	r3, r3, #1
 8002c10:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002c12:	4b80      	ldr	r3, [pc, #512]	; (8002e14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c16:	08db      	lsrs	r3, r3, #3
 8002c18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002c1c:	68fa      	ldr	r2, [r7, #12]
 8002c1e:	fb02 f303 	mul.w	r3, r2, r3
 8002c22:	ee07 3a90 	vmov	s15, r3
 8002c26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c2a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	f000 80e1 	beq.w	8002df8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	f000 8083 	beq.w	8002d44 <HAL_RCC_GetSysClockFreq+0x204>
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	f200 80a1 	bhi.w	8002d88 <HAL_RCC_GetSysClockFreq+0x248>
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d003      	beq.n	8002c54 <HAL_RCC_GetSysClockFreq+0x114>
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d056      	beq.n	8002d00 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002c52:	e099      	b.n	8002d88 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002c54:	4b6f      	ldr	r3, [pc, #444]	; (8002e14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0320 	and.w	r3, r3, #32
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d02d      	beq.n	8002cbc <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002c60:	4b6c      	ldr	r3, [pc, #432]	; (8002e14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	08db      	lsrs	r3, r3, #3
 8002c66:	f003 0303 	and.w	r3, r3, #3
 8002c6a:	4a6b      	ldr	r2, [pc, #428]	; (8002e18 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002c6c:	fa22 f303 	lsr.w	r3, r2, r3
 8002c70:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	ee07 3a90 	vmov	s15, r3
 8002c78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	ee07 3a90 	vmov	s15, r3
 8002c82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c8a:	4b62      	ldr	r3, [pc, #392]	; (8002e14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c92:	ee07 3a90 	vmov	s15, r3
 8002c96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c9e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002e24 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ca2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ca6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002caa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002cae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002cb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cb6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002cba:	e087      	b.n	8002dcc <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	ee07 3a90 	vmov	s15, r3
 8002cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cc6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002e28 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002cca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002cce:	4b51      	ldr	r3, [pc, #324]	; (8002e14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cd6:	ee07 3a90 	vmov	s15, r3
 8002cda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002cde:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ce2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002e24 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ce6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002cea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002cee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002cf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002cf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cfa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002cfe:	e065      	b.n	8002dcc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	ee07 3a90 	vmov	s15, r3
 8002d06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d0a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002e2c <HAL_RCC_GetSysClockFreq+0x2ec>
 8002d0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d12:	4b40      	ldr	r3, [pc, #256]	; (8002e14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d1a:	ee07 3a90 	vmov	s15, r3
 8002d1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d22:	ed97 6a02 	vldr	s12, [r7, #8]
 8002d26:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002e24 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002d2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002d36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002d42:	e043      	b.n	8002dcc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	ee07 3a90 	vmov	s15, r3
 8002d4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d4e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002e30 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002d52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d56:	4b2f      	ldr	r3, [pc, #188]	; (8002e14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d5e:	ee07 3a90 	vmov	s15, r3
 8002d62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d66:	ed97 6a02 	vldr	s12, [r7, #8]
 8002d6a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002e24 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002d6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002d7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002d86:	e021      	b.n	8002dcc <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	ee07 3a90 	vmov	s15, r3
 8002d8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d92:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002e2c <HAL_RCC_GetSysClockFreq+0x2ec>
 8002d96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d9a:	4b1e      	ldr	r3, [pc, #120]	; (8002e14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002da2:	ee07 3a90 	vmov	s15, r3
 8002da6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002daa:	ed97 6a02 	vldr	s12, [r7, #8]
 8002dae:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002e24 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002db2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002db6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002dba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002dbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002dc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002dca:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002dcc:	4b11      	ldr	r3, [pc, #68]	; (8002e14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd0:	0a5b      	lsrs	r3, r3, #9
 8002dd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	ee07 3a90 	vmov	s15, r3
 8002de0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002de4:	edd7 6a07 	vldr	s13, [r7, #28]
 8002de8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002dec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002df0:	ee17 3a90 	vmov	r3, s15
 8002df4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002df6:	e005      	b.n	8002e04 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	61bb      	str	r3, [r7, #24]
    break;
 8002dfc:	e002      	b.n	8002e04 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8002dfe:	4b07      	ldr	r3, [pc, #28]	; (8002e1c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002e00:	61bb      	str	r3, [r7, #24]
    break;
 8002e02:	bf00      	nop
  }

  return sysclockfreq;
 8002e04:	69bb      	ldr	r3, [r7, #24]
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3724      	adds	r7, #36	; 0x24
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	58024400 	.word	0x58024400
 8002e18:	03d09000 	.word	0x03d09000
 8002e1c:	003d0900 	.word	0x003d0900
 8002e20:	007a1200 	.word	0x007a1200
 8002e24:	46000000 	.word	0x46000000
 8002e28:	4c742400 	.word	0x4c742400
 8002e2c:	4a742400 	.word	0x4a742400
 8002e30:	4af42400 	.word	0x4af42400

08002e34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002e3a:	f7ff fe81 	bl	8002b40 <HAL_RCC_GetSysClockFreq>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	4b10      	ldr	r3, [pc, #64]	; (8002e84 <HAL_RCC_GetHCLKFreq+0x50>)
 8002e42:	699b      	ldr	r3, [r3, #24]
 8002e44:	0a1b      	lsrs	r3, r3, #8
 8002e46:	f003 030f 	and.w	r3, r3, #15
 8002e4a:	490f      	ldr	r1, [pc, #60]	; (8002e88 <HAL_RCC_GetHCLKFreq+0x54>)
 8002e4c:	5ccb      	ldrb	r3, [r1, r3]
 8002e4e:	f003 031f 	and.w	r3, r3, #31
 8002e52:	fa22 f303 	lsr.w	r3, r2, r3
 8002e56:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002e58:	4b0a      	ldr	r3, [pc, #40]	; (8002e84 <HAL_RCC_GetHCLKFreq+0x50>)
 8002e5a:	699b      	ldr	r3, [r3, #24]
 8002e5c:	f003 030f 	and.w	r3, r3, #15
 8002e60:	4a09      	ldr	r2, [pc, #36]	; (8002e88 <HAL_RCC_GetHCLKFreq+0x54>)
 8002e62:	5cd3      	ldrb	r3, [r2, r3]
 8002e64:	f003 031f 	and.w	r3, r3, #31
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e6e:	4a07      	ldr	r2, [pc, #28]	; (8002e8c <HAL_RCC_GetHCLKFreq+0x58>)
 8002e70:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002e72:	4a07      	ldr	r2, [pc, #28]	; (8002e90 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002e78:	4b04      	ldr	r3, [pc, #16]	; (8002e8c <HAL_RCC_GetHCLKFreq+0x58>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3708      	adds	r7, #8
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	58024400 	.word	0x58024400
 8002e88:	08008e30 	.word	0x08008e30
 8002e8c:	24000010 	.word	0x24000010
 8002e90:	2400000c 	.word	0x2400000c

08002e94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002e98:	f7ff ffcc 	bl	8002e34 <HAL_RCC_GetHCLKFreq>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	4b06      	ldr	r3, [pc, #24]	; (8002eb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ea0:	69db      	ldr	r3, [r3, #28]
 8002ea2:	091b      	lsrs	r3, r3, #4
 8002ea4:	f003 0307 	and.w	r3, r3, #7
 8002ea8:	4904      	ldr	r1, [pc, #16]	; (8002ebc <HAL_RCC_GetPCLK1Freq+0x28>)
 8002eaa:	5ccb      	ldrb	r3, [r1, r3]
 8002eac:	f003 031f 	and.w	r3, r3, #31
 8002eb0:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	58024400 	.word	0x58024400
 8002ebc:	08008e30 	.word	0x08008e30

08002ec0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002ec4:	f7ff ffb6 	bl	8002e34 <HAL_RCC_GetHCLKFreq>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	4b06      	ldr	r3, [pc, #24]	; (8002ee4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ecc:	69db      	ldr	r3, [r3, #28]
 8002ece:	0a1b      	lsrs	r3, r3, #8
 8002ed0:	f003 0307 	and.w	r3, r3, #7
 8002ed4:	4904      	ldr	r1, [pc, #16]	; (8002ee8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002ed6:	5ccb      	ldrb	r3, [r1, r3]
 8002ed8:	f003 031f 	and.w	r3, r3, #31
 8002edc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	58024400 	.word	0x58024400
 8002ee8:	08008e30 	.word	0x08008e30

08002eec <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b086      	sub	sp, #24
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ef8:	2300      	movs	r3, #0
 8002efa:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d03f      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f0c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002f10:	d02a      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002f12:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002f16:	d824      	bhi.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002f18:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f1c:	d018      	beq.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002f1e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f22:	d81e      	bhi.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d003      	beq.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002f28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f2c:	d007      	beq.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002f2e:	e018      	b.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f30:	4bab      	ldr	r3, [pc, #684]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f34:	4aaa      	ldr	r2, [pc, #680]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002f36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f3a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002f3c:	e015      	b.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	3304      	adds	r3, #4
 8002f42:	2102      	movs	r1, #2
 8002f44:	4618      	mov	r0, r3
 8002f46:	f001 f989 	bl	800425c <RCCEx_PLL2_Config>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002f4e:	e00c      	b.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	3324      	adds	r3, #36	; 0x24
 8002f54:	2102      	movs	r1, #2
 8002f56:	4618      	mov	r0, r3
 8002f58:	f001 fa32 	bl	80043c0 <RCCEx_PLL3_Config>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002f60:	e003      	b.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	75fb      	strb	r3, [r7, #23]
      break;
 8002f66:	e000      	b.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002f68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f6a:	7dfb      	ldrb	r3, [r7, #23]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d109      	bne.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002f70:	4b9b      	ldr	r3, [pc, #620]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002f72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f74:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f7c:	4998      	ldr	r1, [pc, #608]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	650b      	str	r3, [r1, #80]	; 0x50
 8002f82:	e001      	b.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f84:	7dfb      	ldrb	r3, [r7, #23]
 8002f86:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d03d      	beq.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f98:	2b04      	cmp	r3, #4
 8002f9a:	d826      	bhi.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002f9c:	a201      	add	r2, pc, #4	; (adr r2, 8002fa4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8002f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fa2:	bf00      	nop
 8002fa4:	08002fb9 	.word	0x08002fb9
 8002fa8:	08002fc7 	.word	0x08002fc7
 8002fac:	08002fd9 	.word	0x08002fd9
 8002fb0:	08002ff1 	.word	0x08002ff1
 8002fb4:	08002ff1 	.word	0x08002ff1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fb8:	4b89      	ldr	r3, [pc, #548]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fbc:	4a88      	ldr	r2, [pc, #544]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002fbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fc2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002fc4:	e015      	b.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	3304      	adds	r3, #4
 8002fca:	2100      	movs	r1, #0
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f001 f945 	bl	800425c <RCCEx_PLL2_Config>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002fd6:	e00c      	b.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	3324      	adds	r3, #36	; 0x24
 8002fdc:	2100      	movs	r1, #0
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f001 f9ee 	bl	80043c0 <RCCEx_PLL3_Config>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002fe8:	e003      	b.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	75fb      	strb	r3, [r7, #23]
      break;
 8002fee:	e000      	b.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002ff0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ff2:	7dfb      	ldrb	r3, [r7, #23]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d109      	bne.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ff8:	4b79      	ldr	r3, [pc, #484]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002ffa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ffc:	f023 0207 	bic.w	r2, r3, #7
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003004:	4976      	ldr	r1, [pc, #472]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003006:	4313      	orrs	r3, r2
 8003008:	650b      	str	r3, [r1, #80]	; 0x50
 800300a:	e001      	b.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800300c:	7dfb      	ldrb	r3, [r7, #23]
 800300e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003018:	2b00      	cmp	r3, #0
 800301a:	d051      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003022:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8003026:	d036      	beq.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003028:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800302c:	d830      	bhi.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800302e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003032:	d032      	beq.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8003034:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003038:	d82a      	bhi.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800303a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800303e:	d02e      	beq.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8003040:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003044:	d824      	bhi.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8003046:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800304a:	d018      	beq.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x192>
 800304c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003050:	d81e      	bhi.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8003052:	2b00      	cmp	r3, #0
 8003054:	d003      	beq.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x172>
 8003056:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800305a:	d007      	beq.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x180>
 800305c:	e018      	b.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800305e:	4b60      	ldr	r3, [pc, #384]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003062:	4a5f      	ldr	r2, [pc, #380]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003064:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003068:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800306a:	e019      	b.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	3304      	adds	r3, #4
 8003070:	2100      	movs	r1, #0
 8003072:	4618      	mov	r0, r3
 8003074:	f001 f8f2 	bl	800425c <RCCEx_PLL2_Config>
 8003078:	4603      	mov	r3, r0
 800307a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800307c:	e010      	b.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	3324      	adds	r3, #36	; 0x24
 8003082:	2100      	movs	r1, #0
 8003084:	4618      	mov	r0, r3
 8003086:	f001 f99b 	bl	80043c0 <RCCEx_PLL3_Config>
 800308a:	4603      	mov	r3, r0
 800308c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800308e:	e007      	b.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	75fb      	strb	r3, [r7, #23]
      break;
 8003094:	e004      	b.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8003096:	bf00      	nop
 8003098:	e002      	b.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800309a:	bf00      	nop
 800309c:	e000      	b.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800309e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030a0:	7dfb      	ldrb	r3, [r7, #23]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d10a      	bne.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80030a6:	4b4e      	ldr	r3, [pc, #312]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80030a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030aa:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80030b4:	494a      	ldr	r1, [pc, #296]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80030b6:	4313      	orrs	r3, r2
 80030b8:	658b      	str	r3, [r1, #88]	; 0x58
 80030ba:	e001      	b.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030bc:	7dfb      	ldrb	r3, [r7, #23]
 80030be:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d051      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80030d2:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80030d6:	d036      	beq.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 80030d8:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80030dc:	d830      	bhi.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80030de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80030e2:	d032      	beq.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x25e>
 80030e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80030e8:	d82a      	bhi.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80030ea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80030ee:	d02e      	beq.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x262>
 80030f0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80030f4:	d824      	bhi.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80030f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80030fa:	d018      	beq.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x242>
 80030fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003100:	d81e      	bhi.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8003102:	2b00      	cmp	r3, #0
 8003104:	d003      	beq.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x222>
 8003106:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800310a:	d007      	beq.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x230>
 800310c:	e018      	b.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800310e:	4b34      	ldr	r3, [pc, #208]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003112:	4a33      	ldr	r2, [pc, #204]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003114:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003118:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800311a:	e019      	b.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	3304      	adds	r3, #4
 8003120:	2100      	movs	r1, #0
 8003122:	4618      	mov	r0, r3
 8003124:	f001 f89a 	bl	800425c <RCCEx_PLL2_Config>
 8003128:	4603      	mov	r3, r0
 800312a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800312c:	e010      	b.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	3324      	adds	r3, #36	; 0x24
 8003132:	2100      	movs	r1, #0
 8003134:	4618      	mov	r0, r3
 8003136:	f001 f943 	bl	80043c0 <RCCEx_PLL3_Config>
 800313a:	4603      	mov	r3, r0
 800313c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800313e:	e007      	b.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	75fb      	strb	r3, [r7, #23]
      break;
 8003144:	e004      	b.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8003146:	bf00      	nop
 8003148:	e002      	b.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800314a:	bf00      	nop
 800314c:	e000      	b.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800314e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003150:	7dfb      	ldrb	r3, [r7, #23]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d10a      	bne.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003156:	4b22      	ldr	r3, [pc, #136]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800315a:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003164:	491e      	ldr	r1, [pc, #120]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003166:	4313      	orrs	r3, r2
 8003168:	658b      	str	r3, [r1, #88]	; 0x58
 800316a:	e001      	b.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800316c:	7dfb      	ldrb	r3, [r7, #23]
 800316e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d035      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003180:	2b30      	cmp	r3, #48	; 0x30
 8003182:	d01c      	beq.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003184:	2b30      	cmp	r3, #48	; 0x30
 8003186:	d817      	bhi.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8003188:	2b20      	cmp	r3, #32
 800318a:	d00c      	beq.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800318c:	2b20      	cmp	r3, #32
 800318e:	d813      	bhi.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8003190:	2b00      	cmp	r3, #0
 8003192:	d016      	beq.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8003194:	2b10      	cmp	r3, #16
 8003196:	d10f      	bne.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003198:	4b11      	ldr	r3, [pc, #68]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800319a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800319c:	4a10      	ldr	r2, [pc, #64]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800319e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80031a4:	e00e      	b.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	3304      	adds	r3, #4
 80031aa:	2102      	movs	r1, #2
 80031ac:	4618      	mov	r0, r3
 80031ae:	f001 f855 	bl	800425c <RCCEx_PLL2_Config>
 80031b2:	4603      	mov	r3, r0
 80031b4:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80031b6:	e005      	b.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	75fb      	strb	r3, [r7, #23]
      break;
 80031bc:	e002      	b.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 80031be:	bf00      	nop
 80031c0:	e000      	b.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 80031c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031c4:	7dfb      	ldrb	r3, [r7, #23]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d10c      	bne.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80031ca:	4b05      	ldr	r3, [pc, #20]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80031cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031ce:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031d6:	4902      	ldr	r1, [pc, #8]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80031d8:	4313      	orrs	r3, r2
 80031da:	64cb      	str	r3, [r1, #76]	; 0x4c
 80031dc:	e004      	b.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80031de:	bf00      	nop
 80031e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031e4:	7dfb      	ldrb	r3, [r7, #23]
 80031e6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d047      	beq.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031fc:	d030      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x374>
 80031fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003202:	d82a      	bhi.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003204:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003208:	d02c      	beq.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x378>
 800320a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800320e:	d824      	bhi.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003210:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003214:	d018      	beq.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003216:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800321a:	d81e      	bhi.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800321c:	2b00      	cmp	r3, #0
 800321e:	d003      	beq.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003220:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003224:	d007      	beq.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003226:	e018      	b.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003228:	4bac      	ldr	r3, [pc, #688]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800322a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800322c:	4aab      	ldr	r2, [pc, #684]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800322e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003232:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003234:	e017      	b.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	3304      	adds	r3, #4
 800323a:	2100      	movs	r1, #0
 800323c:	4618      	mov	r0, r3
 800323e:	f001 f80d 	bl	800425c <RCCEx_PLL2_Config>
 8003242:	4603      	mov	r3, r0
 8003244:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003246:	e00e      	b.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	3324      	adds	r3, #36	; 0x24
 800324c:	2100      	movs	r1, #0
 800324e:	4618      	mov	r0, r3
 8003250:	f001 f8b6 	bl	80043c0 <RCCEx_PLL3_Config>
 8003254:	4603      	mov	r3, r0
 8003256:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003258:	e005      	b.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	75fb      	strb	r3, [r7, #23]
      break;
 800325e:	e002      	b.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8003260:	bf00      	nop
 8003262:	e000      	b.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8003264:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003266:	7dfb      	ldrb	r3, [r7, #23]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d109      	bne.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800326c:	4b9b      	ldr	r3, [pc, #620]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800326e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003270:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003278:	4998      	ldr	r1, [pc, #608]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800327a:	4313      	orrs	r3, r2
 800327c:	650b      	str	r3, [r1, #80]	; 0x50
 800327e:	e001      	b.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003280:	7dfb      	ldrb	r3, [r7, #23]
 8003282:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800328c:	2b00      	cmp	r3, #0
 800328e:	d049      	beq.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003294:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003298:	d02e      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800329a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800329e:	d828      	bhi.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x406>
 80032a0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80032a4:	d02a      	beq.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x410>
 80032a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80032aa:	d822      	bhi.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x406>
 80032ac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80032b0:	d026      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x414>
 80032b2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80032b6:	d81c      	bhi.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x406>
 80032b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032bc:	d010      	beq.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 80032be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032c2:	d816      	bhi.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x406>
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d01d      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x418>
 80032c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032cc:	d111      	bne.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	3304      	adds	r3, #4
 80032d2:	2101      	movs	r1, #1
 80032d4:	4618      	mov	r0, r3
 80032d6:	f000 ffc1 	bl	800425c <RCCEx_PLL2_Config>
 80032da:	4603      	mov	r3, r0
 80032dc:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80032de:	e012      	b.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	3324      	adds	r3, #36	; 0x24
 80032e4:	2101      	movs	r1, #1
 80032e6:	4618      	mov	r0, r3
 80032e8:	f001 f86a 	bl	80043c0 <RCCEx_PLL3_Config>
 80032ec:	4603      	mov	r3, r0
 80032ee:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80032f0:	e009      	b.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	75fb      	strb	r3, [r7, #23]
      break;
 80032f6:	e006      	b.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80032f8:	bf00      	nop
 80032fa:	e004      	b.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80032fc:	bf00      	nop
 80032fe:	e002      	b.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003300:	bf00      	nop
 8003302:	e000      	b.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003304:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003306:	7dfb      	ldrb	r3, [r7, #23]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d109      	bne.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800330c:	4b73      	ldr	r3, [pc, #460]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800330e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003310:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003318:	4970      	ldr	r1, [pc, #448]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800331a:	4313      	orrs	r3, r2
 800331c:	650b      	str	r3, [r1, #80]	; 0x50
 800331e:	e001      	b.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003320:	7dfb      	ldrb	r3, [r7, #23]
 8003322:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800332c:	2b00      	cmp	r3, #0
 800332e:	d04b      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003336:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800333a:	d02e      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800333c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003340:	d828      	bhi.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003342:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003346:	d02a      	beq.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8003348:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800334c:	d822      	bhi.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800334e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003352:	d026      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8003354:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003358:	d81c      	bhi.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800335a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800335e:	d010      	beq.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x496>
 8003360:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003364:	d816      	bhi.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003366:	2b00      	cmp	r3, #0
 8003368:	d01d      	beq.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 800336a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800336e:	d111      	bne.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	3304      	adds	r3, #4
 8003374:	2101      	movs	r1, #1
 8003376:	4618      	mov	r0, r3
 8003378:	f000 ff70 	bl	800425c <RCCEx_PLL2_Config>
 800337c:	4603      	mov	r3, r0
 800337e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003380:	e012      	b.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	3324      	adds	r3, #36	; 0x24
 8003386:	2101      	movs	r1, #1
 8003388:	4618      	mov	r0, r3
 800338a:	f001 f819 	bl	80043c0 <RCCEx_PLL3_Config>
 800338e:	4603      	mov	r3, r0
 8003390:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003392:	e009      	b.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	75fb      	strb	r3, [r7, #23]
      break;
 8003398:	e006      	b.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800339a:	bf00      	nop
 800339c:	e004      	b.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800339e:	bf00      	nop
 80033a0:	e002      	b.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80033a2:	bf00      	nop
 80033a4:	e000      	b.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80033a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033a8:	7dfb      	ldrb	r3, [r7, #23]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d10a      	bne.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80033ae:	4b4b      	ldr	r3, [pc, #300]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80033b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033b2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80033bc:	4947      	ldr	r1, [pc, #284]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	658b      	str	r3, [r1, #88]	; 0x58
 80033c2:	e001      	b.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033c4:	7dfb      	ldrb	r3, [r7, #23]
 80033c6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d02f      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033dc:	d00e      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x510>
 80033de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033e2:	d814      	bhi.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x522>
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d015      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80033e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80033ec:	d10f      	bne.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033ee:	4b3b      	ldr	r3, [pc, #236]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80033f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f2:	4a3a      	ldr	r2, [pc, #232]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80033f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033f8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80033fa:	e00c      	b.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	3304      	adds	r3, #4
 8003400:	2101      	movs	r1, #1
 8003402:	4618      	mov	r0, r3
 8003404:	f000 ff2a 	bl	800425c <RCCEx_PLL2_Config>
 8003408:	4603      	mov	r3, r0
 800340a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800340c:	e003      	b.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	75fb      	strb	r3, [r7, #23]
      break;
 8003412:	e000      	b.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8003414:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003416:	7dfb      	ldrb	r3, [r7, #23]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d109      	bne.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800341c:	4b2f      	ldr	r3, [pc, #188]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800341e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003420:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003428:	492c      	ldr	r1, [pc, #176]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800342a:	4313      	orrs	r3, r2
 800342c:	650b      	str	r3, [r1, #80]	; 0x50
 800342e:	e001      	b.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003430:	7dfb      	ldrb	r3, [r7, #23]
 8003432:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d032      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003444:	2b03      	cmp	r3, #3
 8003446:	d81b      	bhi.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8003448:	a201      	add	r2, pc, #4	; (adr r2, 8003450 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800344a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800344e:	bf00      	nop
 8003450:	08003487 	.word	0x08003487
 8003454:	08003461 	.word	0x08003461
 8003458:	0800346f 	.word	0x0800346f
 800345c:	08003487 	.word	0x08003487
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003460:	4b1e      	ldr	r3, [pc, #120]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003464:	4a1d      	ldr	r2, [pc, #116]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003466:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800346a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800346c:	e00c      	b.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	3304      	adds	r3, #4
 8003472:	2102      	movs	r1, #2
 8003474:	4618      	mov	r0, r3
 8003476:	f000 fef1 	bl	800425c <RCCEx_PLL2_Config>
 800347a:	4603      	mov	r3, r0
 800347c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800347e:	e003      	b.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	75fb      	strb	r3, [r7, #23]
      break;
 8003484:	e000      	b.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8003486:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003488:	7dfb      	ldrb	r3, [r7, #23]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d109      	bne.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800348e:	4b13      	ldr	r3, [pc, #76]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003492:	f023 0203 	bic.w	r2, r3, #3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800349a:	4910      	ldr	r1, [pc, #64]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800349c:	4313      	orrs	r3, r2
 800349e:	64cb      	str	r3, [r1, #76]	; 0x4c
 80034a0:	e001      	b.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034a2:	7dfb      	ldrb	r3, [r7, #23]
 80034a4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	f000 808a 	beq.w	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034b4:	4b0a      	ldr	r3, [pc, #40]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a09      	ldr	r2, [pc, #36]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80034ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80034c0:	f7fe faa0 	bl	8001a04 <HAL_GetTick>
 80034c4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80034c6:	e00d      	b.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034c8:	f7fe fa9c 	bl	8001a04 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	2b64      	cmp	r3, #100	; 0x64
 80034d4:	d906      	bls.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	75fb      	strb	r3, [r7, #23]
        break;
 80034da:	e009      	b.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80034dc:	58024400 	.word	0x58024400
 80034e0:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80034e4:	4bb9      	ldr	r3, [pc, #740]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d0eb      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 80034f0:	7dfb      	ldrb	r3, [r7, #23]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d166      	bne.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80034f6:	4bb6      	ldr	r3, [pc, #728]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80034f8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003500:	4053      	eors	r3, r2
 8003502:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003506:	2b00      	cmp	r3, #0
 8003508:	d013      	beq.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800350a:	4bb1      	ldr	r3, [pc, #708]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800350c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800350e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003512:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003514:	4bae      	ldr	r3, [pc, #696]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003518:	4aad      	ldr	r2, [pc, #692]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800351a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800351e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003520:	4bab      	ldr	r3, [pc, #684]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003524:	4aaa      	ldr	r2, [pc, #680]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003526:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800352a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800352c:	4aa8      	ldr	r2, [pc, #672]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003538:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800353c:	d115      	bne.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800353e:	f7fe fa61 	bl	8001a04 <HAL_GetTick>
 8003542:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003544:	e00b      	b.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003546:	f7fe fa5d 	bl	8001a04 <HAL_GetTick>
 800354a:	4602      	mov	r2, r0
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	f241 3288 	movw	r2, #5000	; 0x1388
 8003554:	4293      	cmp	r3, r2
 8003556:	d902      	bls.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 8003558:	2303      	movs	r3, #3
 800355a:	75fb      	strb	r3, [r7, #23]
            break;
 800355c:	e005      	b.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800355e:	4b9c      	ldr	r3, [pc, #624]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003562:	f003 0302 	and.w	r3, r3, #2
 8003566:	2b00      	cmp	r3, #0
 8003568:	d0ed      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 800356a:	7dfb      	ldrb	r3, [r7, #23]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d126      	bne.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003576:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800357a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800357e:	d10d      	bne.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8003580:	4b93      	ldr	r3, [pc, #588]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003582:	691b      	ldr	r3, [r3, #16]
 8003584:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800358e:	0919      	lsrs	r1, r3, #4
 8003590:	4b90      	ldr	r3, [pc, #576]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003592:	400b      	ands	r3, r1
 8003594:	498e      	ldr	r1, [pc, #568]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003596:	4313      	orrs	r3, r2
 8003598:	610b      	str	r3, [r1, #16]
 800359a:	e005      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 800359c:	4b8c      	ldr	r3, [pc, #560]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800359e:	691b      	ldr	r3, [r3, #16]
 80035a0:	4a8b      	ldr	r2, [pc, #556]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80035a2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80035a6:	6113      	str	r3, [r2, #16]
 80035a8:	4b89      	ldr	r3, [pc, #548]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80035aa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80035b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035b6:	4986      	ldr	r1, [pc, #536]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80035b8:	4313      	orrs	r3, r2
 80035ba:	670b      	str	r3, [r1, #112]	; 0x70
 80035bc:	e004      	b.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80035be:	7dfb      	ldrb	r3, [r7, #23]
 80035c0:	75bb      	strb	r3, [r7, #22]
 80035c2:	e001      	b.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035c4:	7dfb      	ldrb	r3, [r7, #23]
 80035c6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0301 	and.w	r3, r3, #1
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d07e      	beq.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035d8:	2b28      	cmp	r3, #40	; 0x28
 80035da:	d867      	bhi.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 80035dc:	a201      	add	r2, pc, #4	; (adr r2, 80035e4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 80035de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035e2:	bf00      	nop
 80035e4:	080036b3 	.word	0x080036b3
 80035e8:	080036ad 	.word	0x080036ad
 80035ec:	080036ad 	.word	0x080036ad
 80035f0:	080036ad 	.word	0x080036ad
 80035f4:	080036ad 	.word	0x080036ad
 80035f8:	080036ad 	.word	0x080036ad
 80035fc:	080036ad 	.word	0x080036ad
 8003600:	080036ad 	.word	0x080036ad
 8003604:	08003689 	.word	0x08003689
 8003608:	080036ad 	.word	0x080036ad
 800360c:	080036ad 	.word	0x080036ad
 8003610:	080036ad 	.word	0x080036ad
 8003614:	080036ad 	.word	0x080036ad
 8003618:	080036ad 	.word	0x080036ad
 800361c:	080036ad 	.word	0x080036ad
 8003620:	080036ad 	.word	0x080036ad
 8003624:	0800369b 	.word	0x0800369b
 8003628:	080036ad 	.word	0x080036ad
 800362c:	080036ad 	.word	0x080036ad
 8003630:	080036ad 	.word	0x080036ad
 8003634:	080036ad 	.word	0x080036ad
 8003638:	080036ad 	.word	0x080036ad
 800363c:	080036ad 	.word	0x080036ad
 8003640:	080036ad 	.word	0x080036ad
 8003644:	080036b3 	.word	0x080036b3
 8003648:	080036ad 	.word	0x080036ad
 800364c:	080036ad 	.word	0x080036ad
 8003650:	080036ad 	.word	0x080036ad
 8003654:	080036ad 	.word	0x080036ad
 8003658:	080036ad 	.word	0x080036ad
 800365c:	080036ad 	.word	0x080036ad
 8003660:	080036ad 	.word	0x080036ad
 8003664:	080036b3 	.word	0x080036b3
 8003668:	080036ad 	.word	0x080036ad
 800366c:	080036ad 	.word	0x080036ad
 8003670:	080036ad 	.word	0x080036ad
 8003674:	080036ad 	.word	0x080036ad
 8003678:	080036ad 	.word	0x080036ad
 800367c:	080036ad 	.word	0x080036ad
 8003680:	080036ad 	.word	0x080036ad
 8003684:	080036b3 	.word	0x080036b3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	3304      	adds	r3, #4
 800368c:	2101      	movs	r1, #1
 800368e:	4618      	mov	r0, r3
 8003690:	f000 fde4 	bl	800425c <RCCEx_PLL2_Config>
 8003694:	4603      	mov	r3, r0
 8003696:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003698:	e00c      	b.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	3324      	adds	r3, #36	; 0x24
 800369e:	2101      	movs	r1, #1
 80036a0:	4618      	mov	r0, r3
 80036a2:	f000 fe8d 	bl	80043c0 <RCCEx_PLL3_Config>
 80036a6:	4603      	mov	r3, r0
 80036a8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80036aa:	e003      	b.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	75fb      	strb	r3, [r7, #23]
      break;
 80036b0:	e000      	b.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 80036b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036b4:	7dfb      	ldrb	r3, [r7, #23]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d109      	bne.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80036ba:	4b45      	ldr	r3, [pc, #276]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80036bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036be:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036c6:	4942      	ldr	r1, [pc, #264]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	654b      	str	r3, [r1, #84]	; 0x54
 80036cc:	e001      	b.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036ce:	7dfb      	ldrb	r3, [r7, #23]
 80036d0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0302 	and.w	r3, r3, #2
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d037      	beq.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e2:	2b05      	cmp	r3, #5
 80036e4:	d820      	bhi.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 80036e6:	a201      	add	r2, pc, #4	; (adr r2, 80036ec <HAL_RCCEx_PeriphCLKConfig+0x800>)
 80036e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ec:	0800372f 	.word	0x0800372f
 80036f0:	08003705 	.word	0x08003705
 80036f4:	08003717 	.word	0x08003717
 80036f8:	0800372f 	.word	0x0800372f
 80036fc:	0800372f 	.word	0x0800372f
 8003700:	0800372f 	.word	0x0800372f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	3304      	adds	r3, #4
 8003708:	2101      	movs	r1, #1
 800370a:	4618      	mov	r0, r3
 800370c:	f000 fda6 	bl	800425c <RCCEx_PLL2_Config>
 8003710:	4603      	mov	r3, r0
 8003712:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003714:	e00c      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	3324      	adds	r3, #36	; 0x24
 800371a:	2101      	movs	r1, #1
 800371c:	4618      	mov	r0, r3
 800371e:	f000 fe4f 	bl	80043c0 <RCCEx_PLL3_Config>
 8003722:	4603      	mov	r3, r0
 8003724:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003726:	e003      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	75fb      	strb	r3, [r7, #23]
      break;
 800372c:	e000      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 800372e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003730:	7dfb      	ldrb	r3, [r7, #23]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d109      	bne.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003736:	4b26      	ldr	r3, [pc, #152]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800373a:	f023 0207 	bic.w	r2, r3, #7
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003742:	4923      	ldr	r1, [pc, #140]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003744:	4313      	orrs	r3, r2
 8003746:	654b      	str	r3, [r1, #84]	; 0x54
 8003748:	e001      	b.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800374a:	7dfb      	ldrb	r3, [r7, #23]
 800374c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0304 	and.w	r3, r3, #4
 8003756:	2b00      	cmp	r3, #0
 8003758:	d040      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003760:	2b05      	cmp	r3, #5
 8003762:	d821      	bhi.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8003764:	a201      	add	r2, pc, #4	; (adr r2, 800376c <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8003766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800376a:	bf00      	nop
 800376c:	080037af 	.word	0x080037af
 8003770:	08003785 	.word	0x08003785
 8003774:	08003797 	.word	0x08003797
 8003778:	080037af 	.word	0x080037af
 800377c:	080037af 	.word	0x080037af
 8003780:	080037af 	.word	0x080037af
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	3304      	adds	r3, #4
 8003788:	2101      	movs	r1, #1
 800378a:	4618      	mov	r0, r3
 800378c:	f000 fd66 	bl	800425c <RCCEx_PLL2_Config>
 8003790:	4603      	mov	r3, r0
 8003792:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003794:	e00c      	b.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	3324      	adds	r3, #36	; 0x24
 800379a:	2101      	movs	r1, #1
 800379c:	4618      	mov	r0, r3
 800379e:	f000 fe0f 	bl	80043c0 <RCCEx_PLL3_Config>
 80037a2:	4603      	mov	r3, r0
 80037a4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80037a6:	e003      	b.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	75fb      	strb	r3, [r7, #23]
      break;
 80037ac:	e000      	b.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 80037ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037b0:	7dfb      	ldrb	r3, [r7, #23]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d110      	bne.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80037b6:	4b06      	ldr	r3, [pc, #24]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80037b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ba:	f023 0207 	bic.w	r2, r3, #7
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037c4:	4902      	ldr	r1, [pc, #8]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	658b      	str	r3, [r1, #88]	; 0x58
 80037ca:	e007      	b.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 80037cc:	58024800 	.word	0x58024800
 80037d0:	58024400 	.word	0x58024400
 80037d4:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037d8:	7dfb      	ldrb	r3, [r7, #23]
 80037da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0320 	and.w	r3, r3, #32
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d04b      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037f2:	d02e      	beq.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x966>
 80037f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037f8:	d828      	bhi.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x960>
 80037fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037fe:	d02a      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8003800:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003804:	d822      	bhi.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x960>
 8003806:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800380a:	d026      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800380c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003810:	d81c      	bhi.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x960>
 8003812:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003816:	d010      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8003818:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800381c:	d816      	bhi.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x960>
 800381e:	2b00      	cmp	r3, #0
 8003820:	d01d      	beq.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x972>
 8003822:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003826:	d111      	bne.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	3304      	adds	r3, #4
 800382c:	2100      	movs	r1, #0
 800382e:	4618      	mov	r0, r3
 8003830:	f000 fd14 	bl	800425c <RCCEx_PLL2_Config>
 8003834:	4603      	mov	r3, r0
 8003836:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003838:	e012      	b.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	3324      	adds	r3, #36	; 0x24
 800383e:	2102      	movs	r1, #2
 8003840:	4618      	mov	r0, r3
 8003842:	f000 fdbd 	bl	80043c0 <RCCEx_PLL3_Config>
 8003846:	4603      	mov	r3, r0
 8003848:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800384a:	e009      	b.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	75fb      	strb	r3, [r7, #23]
      break;
 8003850:	e006      	b.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003852:	bf00      	nop
 8003854:	e004      	b.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003856:	bf00      	nop
 8003858:	e002      	b.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800385a:	bf00      	nop
 800385c:	e000      	b.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800385e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003860:	7dfb      	ldrb	r3, [r7, #23]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d10a      	bne.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003866:	4bb2      	ldr	r3, [pc, #712]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800386a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003874:	49ae      	ldr	r1, [pc, #696]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003876:	4313      	orrs	r3, r2
 8003878:	654b      	str	r3, [r1, #84]	; 0x54
 800387a:	e001      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800387c:	7dfb      	ldrb	r3, [r7, #23]
 800387e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003888:	2b00      	cmp	r3, #0
 800388a:	d04b      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003892:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003896:	d02e      	beq.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8003898:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800389c:	d828      	bhi.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800389e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038a2:	d02a      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 80038a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038a8:	d822      	bhi.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80038aa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80038ae:	d026      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80038b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80038b4:	d81c      	bhi.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80038b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038ba:	d010      	beq.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 80038bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038c0:	d816      	bhi.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d01d      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80038c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038ca:	d111      	bne.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	3304      	adds	r3, #4
 80038d0:	2100      	movs	r1, #0
 80038d2:	4618      	mov	r0, r3
 80038d4:	f000 fcc2 	bl	800425c <RCCEx_PLL2_Config>
 80038d8:	4603      	mov	r3, r0
 80038da:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80038dc:	e012      	b.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	3324      	adds	r3, #36	; 0x24
 80038e2:	2102      	movs	r1, #2
 80038e4:	4618      	mov	r0, r3
 80038e6:	f000 fd6b 	bl	80043c0 <RCCEx_PLL3_Config>
 80038ea:	4603      	mov	r3, r0
 80038ec:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80038ee:	e009      	b.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	75fb      	strb	r3, [r7, #23]
      break;
 80038f4:	e006      	b.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80038f6:	bf00      	nop
 80038f8:	e004      	b.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80038fa:	bf00      	nop
 80038fc:	e002      	b.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80038fe:	bf00      	nop
 8003900:	e000      	b.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8003902:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003904:	7dfb      	ldrb	r3, [r7, #23]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d10a      	bne.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800390a:	4b89      	ldr	r3, [pc, #548]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800390c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800390e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003918:	4985      	ldr	r1, [pc, #532]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800391a:	4313      	orrs	r3, r2
 800391c:	658b      	str	r3, [r1, #88]	; 0x58
 800391e:	e001      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003920:	7dfb      	ldrb	r3, [r7, #23]
 8003922:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800392c:	2b00      	cmp	r3, #0
 800392e:	d04b      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003936:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800393a:	d02e      	beq.n	800399a <HAL_RCCEx_PeriphCLKConfig+0xaae>
 800393c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003940:	d828      	bhi.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003942:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003946:	d02a      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8003948:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800394c:	d822      	bhi.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800394e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003952:	d026      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8003954:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003958:	d81c      	bhi.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800395a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800395e:	d010      	beq.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8003960:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003964:	d816      	bhi.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003966:	2b00      	cmp	r3, #0
 8003968:	d01d      	beq.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 800396a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800396e:	d111      	bne.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	3304      	adds	r3, #4
 8003974:	2100      	movs	r1, #0
 8003976:	4618      	mov	r0, r3
 8003978:	f000 fc70 	bl	800425c <RCCEx_PLL2_Config>
 800397c:	4603      	mov	r3, r0
 800397e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003980:	e012      	b.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	3324      	adds	r3, #36	; 0x24
 8003986:	2102      	movs	r1, #2
 8003988:	4618      	mov	r0, r3
 800398a:	f000 fd19 	bl	80043c0 <RCCEx_PLL3_Config>
 800398e:	4603      	mov	r3, r0
 8003990:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003992:	e009      	b.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	75fb      	strb	r3, [r7, #23]
      break;
 8003998:	e006      	b.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800399a:	bf00      	nop
 800399c:	e004      	b.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800399e:	bf00      	nop
 80039a0:	e002      	b.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80039a2:	bf00      	nop
 80039a4:	e000      	b.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80039a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039a8:	7dfb      	ldrb	r3, [r7, #23]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d10a      	bne.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80039ae:	4b60      	ldr	r3, [pc, #384]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80039b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039bc:	495c      	ldr	r1, [pc, #368]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	658b      	str	r3, [r1, #88]	; 0x58
 80039c2:	e001      	b.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039c4:	7dfb      	ldrb	r3, [r7, #23]
 80039c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0308 	and.w	r3, r3, #8
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d018      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039dc:	d10a      	bne.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	3324      	adds	r3, #36	; 0x24
 80039e2:	2102      	movs	r1, #2
 80039e4:	4618      	mov	r0, r3
 80039e6:	f000 fceb 	bl	80043c0 <RCCEx_PLL3_Config>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d001      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80039f4:	4b4e      	ldr	r3, [pc, #312]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80039f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039f8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a00:	494b      	ldr	r1, [pc, #300]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003a02:	4313      	orrs	r3, r2
 8003a04:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0310 	and.w	r3, r3, #16
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d01a      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a1c:	d10a      	bne.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	3324      	adds	r3, #36	; 0x24
 8003a22:	2102      	movs	r1, #2
 8003a24:	4618      	mov	r0, r3
 8003a26:	f000 fccb 	bl	80043c0 <RCCEx_PLL3_Config>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d001      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003a34:	4b3e      	ldr	r3, [pc, #248]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a42:	493b      	ldr	r1, [pc, #236]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003a44:	4313      	orrs	r3, r2
 8003a46:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d034      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a5a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a5e:	d01d      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8003a60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a64:	d817      	bhi.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d003      	beq.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8003a6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a6e:	d009      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003a70:	e011      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	3304      	adds	r3, #4
 8003a76:	2100      	movs	r1, #0
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f000 fbef 	bl	800425c <RCCEx_PLL2_Config>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003a82:	e00c      	b.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	3324      	adds	r3, #36	; 0x24
 8003a88:	2102      	movs	r1, #2
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f000 fc98 	bl	80043c0 <RCCEx_PLL3_Config>
 8003a90:	4603      	mov	r3, r0
 8003a92:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003a94:	e003      	b.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	75fb      	strb	r3, [r7, #23]
      break;
 8003a9a:	e000      	b.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8003a9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a9e:	7dfb      	ldrb	r3, [r7, #23]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d10a      	bne.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003aa4:	4b22      	ldr	r3, [pc, #136]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aa8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ab2:	491f      	ldr	r1, [pc, #124]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	658b      	str	r3, [r1, #88]	; 0x58
 8003ab8:	e001      	b.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aba:	7dfb      	ldrb	r3, [r7, #23]
 8003abc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d036      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ad0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003ad4:	d01c      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8003ad6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003ada:	d816      	bhi.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003adc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ae0:	d003      	beq.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8003ae2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ae6:	d007      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8003ae8:	e00f      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003aea:	4b11      	ldr	r3, [pc, #68]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aee:	4a10      	ldr	r2, [pc, #64]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003af0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003af4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003af6:	e00c      	b.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	3324      	adds	r3, #36	; 0x24
 8003afc:	2101      	movs	r1, #1
 8003afe:	4618      	mov	r0, r3
 8003b00:	f000 fc5e 	bl	80043c0 <RCCEx_PLL3_Config>
 8003b04:	4603      	mov	r3, r0
 8003b06:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003b08:	e003      	b.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	75fb      	strb	r3, [r7, #23]
      break;
 8003b0e:	e000      	b.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8003b10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b12:	7dfb      	ldrb	r3, [r7, #23]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d10d      	bne.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b18:	4b05      	ldr	r3, [pc, #20]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b1c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b26:	4902      	ldr	r1, [pc, #8]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	654b      	str	r3, [r1, #84]	; 0x54
 8003b2c:	e004      	b.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 8003b2e:	bf00      	nop
 8003b30:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b34:	7dfb      	ldrb	r3, [r7, #23]
 8003b36:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d029      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d003      	beq.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003b4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b50:	d007      	beq.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8003b52:	e00f      	b.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b54:	4b61      	ldr	r3, [pc, #388]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b58:	4a60      	ldr	r2, [pc, #384]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003b5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b5e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003b60:	e00b      	b.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	3304      	adds	r3, #4
 8003b66:	2102      	movs	r1, #2
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f000 fb77 	bl	800425c <RCCEx_PLL2_Config>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003b72:	e002      	b.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	75fb      	strb	r3, [r7, #23]
      break;
 8003b78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b7a:	7dfb      	ldrb	r3, [r7, #23]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d109      	bne.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003b80:	4b56      	ldr	r3, [pc, #344]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003b82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b84:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b8c:	4953      	ldr	r1, [pc, #332]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003b92:	e001      	b.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b94:	7dfb      	ldrb	r3, [r7, #23]
 8003b96:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d00a      	beq.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	3324      	adds	r3, #36	; 0x24
 8003ba8:	2102      	movs	r1, #2
 8003baa:	4618      	mov	r0, r3
 8003bac:	f000 fc08 	bl	80043c0 <RCCEx_PLL3_Config>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d001      	beq.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d030      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bce:	d017      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003bd0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bd4:	d811      	bhi.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8003bd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bda:	d013      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8003bdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003be0:	d80b      	bhi.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d010      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8003be6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bea:	d106      	bne.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bec:	4b3b      	ldr	r3, [pc, #236]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf0:	4a3a      	ldr	r2, [pc, #232]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003bf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bf6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003bf8:	e007      	b.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	75fb      	strb	r3, [r7, #23]
      break;
 8003bfe:	e004      	b.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8003c00:	bf00      	nop
 8003c02:	e002      	b.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8003c04:	bf00      	nop
 8003c06:	e000      	b.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8003c08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c0a:	7dfb      	ldrb	r3, [r7, #23]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d109      	bne.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003c10:	4b32      	ldr	r3, [pc, #200]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c1c:	492f      	ldr	r1, [pc, #188]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	654b      	str	r3, [r1, #84]	; 0x54
 8003c22:	e001      	b.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c24:	7dfb      	ldrb	r3, [r7, #23]
 8003c26:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d008      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003c34:	4b29      	ldr	r3, [pc, #164]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003c36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c38:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c40:	4926      	ldr	r1, [pc, #152]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d008      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003c52:	4b22      	ldr	r3, [pc, #136]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003c54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c56:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c5e:	491f      	ldr	r1, [pc, #124]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d00d      	beq.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003c70:	4b1a      	ldr	r3, [pc, #104]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003c72:	691b      	ldr	r3, [r3, #16]
 8003c74:	4a19      	ldr	r2, [pc, #100]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003c76:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003c7a:	6113      	str	r3, [r2, #16]
 8003c7c:	4b17      	ldr	r3, [pc, #92]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003c7e:	691a      	ldr	r2, [r3, #16]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c86:	4915      	ldr	r1, [pc, #84]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	da08      	bge.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003c94:	4b11      	ldr	r3, [pc, #68]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003c96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c98:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ca0:	490e      	ldr	r1, [pc, #56]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d009      	beq.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003cb2:	4b0a      	ldr	r3, [pc, #40]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003cb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cb6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cc0:	4906      	ldr	r1, [pc, #24]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8003cc6:	7dbb      	ldrb	r3, [r7, #22]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d101      	bne.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	e000      	b.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3718      	adds	r7, #24
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	58024400 	.word	0x58024400

08003ce0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003ce4:	f7ff f8a6 	bl	8002e34 <HAL_RCC_GetHCLKFreq>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	4b06      	ldr	r3, [pc, #24]	; (8003d04 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003cec:	6a1b      	ldr	r3, [r3, #32]
 8003cee:	091b      	lsrs	r3, r3, #4
 8003cf0:	f003 0307 	and.w	r3, r3, #7
 8003cf4:	4904      	ldr	r1, [pc, #16]	; (8003d08 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003cf6:	5ccb      	ldrb	r3, [r1, r3]
 8003cf8:	f003 031f 	and.w	r3, r3, #31
 8003cfc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	58024400 	.word	0x58024400
 8003d08:	08008e30 	.word	0x08008e30

08003d0c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b089      	sub	sp, #36	; 0x24
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003d14:	4ba1      	ldr	r3, [pc, #644]	; (8003f9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d18:	f003 0303 	and.w	r3, r3, #3
 8003d1c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8003d1e:	4b9f      	ldr	r3, [pc, #636]	; (8003f9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d22:	0b1b      	lsrs	r3, r3, #12
 8003d24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d28:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003d2a:	4b9c      	ldr	r3, [pc, #624]	; (8003f9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d2e:	091b      	lsrs	r3, r3, #4
 8003d30:	f003 0301 	and.w	r3, r3, #1
 8003d34:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003d36:	4b99      	ldr	r3, [pc, #612]	; (8003f9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d3a:	08db      	lsrs	r3, r3, #3
 8003d3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003d40:	693a      	ldr	r2, [r7, #16]
 8003d42:	fb02 f303 	mul.w	r3, r2, r3
 8003d46:	ee07 3a90 	vmov	s15, r3
 8003d4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d4e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	f000 8111 	beq.w	8003f7c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	f000 8083 	beq.w	8003e68 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003d62:	69bb      	ldr	r3, [r7, #24]
 8003d64:	2b02      	cmp	r3, #2
 8003d66:	f200 80a1 	bhi.w	8003eac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d003      	beq.n	8003d78 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d056      	beq.n	8003e24 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003d76:	e099      	b.n	8003eac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003d78:	4b88      	ldr	r3, [pc, #544]	; (8003f9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0320 	and.w	r3, r3, #32
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d02d      	beq.n	8003de0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003d84:	4b85      	ldr	r3, [pc, #532]	; (8003f9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	08db      	lsrs	r3, r3, #3
 8003d8a:	f003 0303 	and.w	r3, r3, #3
 8003d8e:	4a84      	ldr	r2, [pc, #528]	; (8003fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003d90:	fa22 f303 	lsr.w	r3, r2, r3
 8003d94:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	ee07 3a90 	vmov	s15, r3
 8003d9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	ee07 3a90 	vmov	s15, r3
 8003da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003daa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dae:	4b7b      	ldr	r3, [pc, #492]	; (8003f9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003db6:	ee07 3a90 	vmov	s15, r3
 8003dba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8003dc2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003dc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003dca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003dce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003dd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003dd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dda:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003dde:	e087      	b.n	8003ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	ee07 3a90 	vmov	s15, r3
 8003de6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dea:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003dee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003df2:	4b6a      	ldr	r3, [pc, #424]	; (8003f9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dfa:	ee07 3a90 	vmov	s15, r3
 8003dfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e02:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e06:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003e0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e1e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003e22:	e065      	b.n	8003ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	ee07 3a90 	vmov	s15, r3
 8003e2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e2e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003fac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003e32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e36:	4b59      	ldr	r3, [pc, #356]	; (8003f9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e3e:	ee07 3a90 	vmov	s15, r3
 8003e42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e46:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e4a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003e4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e62:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003e66:	e043      	b.n	8003ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	ee07 3a90 	vmov	s15, r3
 8003e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e72:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003fb0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003e76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e7a:	4b48      	ldr	r3, [pc, #288]	; (8003f9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e82:	ee07 3a90 	vmov	s15, r3
 8003e86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e8e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003e92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ea6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003eaa:	e021      	b.n	8003ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	ee07 3a90 	vmov	s15, r3
 8003eb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eb6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003fac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003eba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ebe:	4b37      	ldr	r3, [pc, #220]	; (8003f9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ec6:	ee07 3a90 	vmov	s15, r3
 8003eca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ece:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ed2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003ed6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003eda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ede:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ee2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ee6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003eea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003eee:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8003ef0:	4b2a      	ldr	r3, [pc, #168]	; (8003f9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef4:	0a5b      	lsrs	r3, r3, #9
 8003ef6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003efa:	ee07 3a90 	vmov	s15, r3
 8003efe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003f06:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003f0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f16:	ee17 2a90 	vmov	r2, s15
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8003f1e:	4b1f      	ldr	r3, [pc, #124]	; (8003f9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f22:	0c1b      	lsrs	r3, r3, #16
 8003f24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f28:	ee07 3a90 	vmov	s15, r3
 8003f2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f30:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003f34:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003f38:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f44:	ee17 2a90 	vmov	r2, s15
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8003f4c:	4b13      	ldr	r3, [pc, #76]	; (8003f9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f50:	0e1b      	lsrs	r3, r3, #24
 8003f52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f56:	ee07 3a90 	vmov	s15, r3
 8003f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003f62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003f66:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f72:	ee17 2a90 	vmov	r2, s15
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003f7a:	e008      	b.n	8003f8e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	609a      	str	r2, [r3, #8]
}
 8003f8e:	bf00      	nop
 8003f90:	3724      	adds	r7, #36	; 0x24
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr
 8003f9a:	bf00      	nop
 8003f9c:	58024400 	.word	0x58024400
 8003fa0:	03d09000 	.word	0x03d09000
 8003fa4:	46000000 	.word	0x46000000
 8003fa8:	4c742400 	.word	0x4c742400
 8003fac:	4a742400 	.word	0x4a742400
 8003fb0:	4af42400 	.word	0x4af42400

08003fb4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b089      	sub	sp, #36	; 0x24
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003fbc:	4ba1      	ldr	r3, [pc, #644]	; (8004244 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc0:	f003 0303 	and.w	r3, r3, #3
 8003fc4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8003fc6:	4b9f      	ldr	r3, [pc, #636]	; (8004244 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fca:	0d1b      	lsrs	r3, r3, #20
 8003fcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fd0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003fd2:	4b9c      	ldr	r3, [pc, #624]	; (8004244 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd6:	0a1b      	lsrs	r3, r3, #8
 8003fd8:	f003 0301 	and.w	r3, r3, #1
 8003fdc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8003fde:	4b99      	ldr	r3, [pc, #612]	; (8004244 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fe2:	08db      	lsrs	r3, r3, #3
 8003fe4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003fe8:	693a      	ldr	r2, [r7, #16]
 8003fea:	fb02 f303 	mul.w	r3, r2, r3
 8003fee:	ee07 3a90 	vmov	s15, r3
 8003ff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ff6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	f000 8111 	beq.w	8004224 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	2b02      	cmp	r3, #2
 8004006:	f000 8083 	beq.w	8004110 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800400a:	69bb      	ldr	r3, [r7, #24]
 800400c:	2b02      	cmp	r3, #2
 800400e:	f200 80a1 	bhi.w	8004154 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004012:	69bb      	ldr	r3, [r7, #24]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d003      	beq.n	8004020 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004018:	69bb      	ldr	r3, [r7, #24]
 800401a:	2b01      	cmp	r3, #1
 800401c:	d056      	beq.n	80040cc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800401e:	e099      	b.n	8004154 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004020:	4b88      	ldr	r3, [pc, #544]	; (8004244 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0320 	and.w	r3, r3, #32
 8004028:	2b00      	cmp	r3, #0
 800402a:	d02d      	beq.n	8004088 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800402c:	4b85      	ldr	r3, [pc, #532]	; (8004244 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	08db      	lsrs	r3, r3, #3
 8004032:	f003 0303 	and.w	r3, r3, #3
 8004036:	4a84      	ldr	r2, [pc, #528]	; (8004248 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004038:	fa22 f303 	lsr.w	r3, r2, r3
 800403c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	ee07 3a90 	vmov	s15, r3
 8004044:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	ee07 3a90 	vmov	s15, r3
 800404e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004052:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004056:	4b7b      	ldr	r3, [pc, #492]	; (8004244 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800405e:	ee07 3a90 	vmov	s15, r3
 8004062:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004066:	ed97 6a03 	vldr	s12, [r7, #12]
 800406a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800424c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800406e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004072:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004076:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800407a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800407e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004082:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004086:	e087      	b.n	8004198 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	ee07 3a90 	vmov	s15, r3
 800408e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004092:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004250 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004096:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800409a:	4b6a      	ldr	r3, [pc, #424]	; (8004244 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800409c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040a2:	ee07 3a90 	vmov	s15, r3
 80040a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80040ae:	eddf 5a67 	vldr	s11, [pc, #412]	; 800424c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80040b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80040ca:	e065      	b.n	8004198 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	ee07 3a90 	vmov	s15, r3
 80040d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040d6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004254 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80040da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040de:	4b59      	ldr	r3, [pc, #356]	; (8004244 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80040e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040e6:	ee07 3a90 	vmov	s15, r3
 80040ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80040f2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800424c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80040f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004102:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800410a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800410e:	e043      	b.n	8004198 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	ee07 3a90 	vmov	s15, r3
 8004116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800411a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004258 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800411e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004122:	4b48      	ldr	r3, [pc, #288]	; (8004244 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004126:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800412a:	ee07 3a90 	vmov	s15, r3
 800412e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004132:	ed97 6a03 	vldr	s12, [r7, #12]
 8004136:	eddf 5a45 	vldr	s11, [pc, #276]	; 800424c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800413a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800413e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004142:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004146:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800414a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800414e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004152:	e021      	b.n	8004198 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	ee07 3a90 	vmov	s15, r3
 800415a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800415e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004254 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004162:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004166:	4b37      	ldr	r3, [pc, #220]	; (8004244 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800416e:	ee07 3a90 	vmov	s15, r3
 8004172:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004176:	ed97 6a03 	vldr	s12, [r7, #12]
 800417a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800424c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800417e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004182:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004186:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800418a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800418e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004192:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004196:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004198:	4b2a      	ldr	r3, [pc, #168]	; (8004244 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800419a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419c:	0a5b      	lsrs	r3, r3, #9
 800419e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041a2:	ee07 3a90 	vmov	s15, r3
 80041a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80041ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80041b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80041b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041be:	ee17 2a90 	vmov	r2, s15
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80041c6:	4b1f      	ldr	r3, [pc, #124]	; (8004244 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ca:	0c1b      	lsrs	r3, r3, #16
 80041cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041d0:	ee07 3a90 	vmov	s15, r3
 80041d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80041dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80041e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80041e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041ec:	ee17 2a90 	vmov	r2, s15
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80041f4:	4b13      	ldr	r3, [pc, #76]	; (8004244 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f8:	0e1b      	lsrs	r3, r3, #24
 80041fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041fe:	ee07 3a90 	vmov	s15, r3
 8004202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004206:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800420a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800420e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004212:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004216:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800421a:	ee17 2a90 	vmov	r2, s15
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004222:	e008      	b.n	8004236 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	609a      	str	r2, [r3, #8]
}
 8004236:	bf00      	nop
 8004238:	3724      	adds	r7, #36	; 0x24
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	58024400 	.word	0x58024400
 8004248:	03d09000 	.word	0x03d09000
 800424c:	46000000 	.word	0x46000000
 8004250:	4c742400 	.word	0x4c742400
 8004254:	4a742400 	.word	0x4a742400
 8004258:	4af42400 	.word	0x4af42400

0800425c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004266:	2300      	movs	r3, #0
 8004268:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800426a:	4b53      	ldr	r3, [pc, #332]	; (80043b8 <RCCEx_PLL2_Config+0x15c>)
 800426c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800426e:	f003 0303 	and.w	r3, r3, #3
 8004272:	2b03      	cmp	r3, #3
 8004274:	d101      	bne.n	800427a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e099      	b.n	80043ae <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800427a:	4b4f      	ldr	r3, [pc, #316]	; (80043b8 <RCCEx_PLL2_Config+0x15c>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a4e      	ldr	r2, [pc, #312]	; (80043b8 <RCCEx_PLL2_Config+0x15c>)
 8004280:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004284:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004286:	f7fd fbbd 	bl	8001a04 <HAL_GetTick>
 800428a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800428c:	e008      	b.n	80042a0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800428e:	f7fd fbb9 	bl	8001a04 <HAL_GetTick>
 8004292:	4602      	mov	r2, r0
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	2b02      	cmp	r3, #2
 800429a:	d901      	bls.n	80042a0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800429c:	2303      	movs	r3, #3
 800429e:	e086      	b.n	80043ae <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80042a0:	4b45      	ldr	r3, [pc, #276]	; (80043b8 <RCCEx_PLL2_Config+0x15c>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d1f0      	bne.n	800428e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80042ac:	4b42      	ldr	r3, [pc, #264]	; (80043b8 <RCCEx_PLL2_Config+0x15c>)
 80042ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042b0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	031b      	lsls	r3, r3, #12
 80042ba:	493f      	ldr	r1, [pc, #252]	; (80043b8 <RCCEx_PLL2_Config+0x15c>)
 80042bc:	4313      	orrs	r3, r2
 80042be:	628b      	str	r3, [r1, #40]	; 0x28
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	3b01      	subs	r3, #1
 80042c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	3b01      	subs	r3, #1
 80042d0:	025b      	lsls	r3, r3, #9
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	431a      	orrs	r2, r3
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	3b01      	subs	r3, #1
 80042dc:	041b      	lsls	r3, r3, #16
 80042de:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80042e2:	431a      	orrs	r2, r3
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	691b      	ldr	r3, [r3, #16]
 80042e8:	3b01      	subs	r3, #1
 80042ea:	061b      	lsls	r3, r3, #24
 80042ec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80042f0:	4931      	ldr	r1, [pc, #196]	; (80043b8 <RCCEx_PLL2_Config+0x15c>)
 80042f2:	4313      	orrs	r3, r2
 80042f4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80042f6:	4b30      	ldr	r3, [pc, #192]	; (80043b8 <RCCEx_PLL2_Config+0x15c>)
 80042f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042fa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	695b      	ldr	r3, [r3, #20]
 8004302:	492d      	ldr	r1, [pc, #180]	; (80043b8 <RCCEx_PLL2_Config+0x15c>)
 8004304:	4313      	orrs	r3, r2
 8004306:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004308:	4b2b      	ldr	r3, [pc, #172]	; (80043b8 <RCCEx_PLL2_Config+0x15c>)
 800430a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800430c:	f023 0220 	bic.w	r2, r3, #32
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	699b      	ldr	r3, [r3, #24]
 8004314:	4928      	ldr	r1, [pc, #160]	; (80043b8 <RCCEx_PLL2_Config+0x15c>)
 8004316:	4313      	orrs	r3, r2
 8004318:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800431a:	4b27      	ldr	r3, [pc, #156]	; (80043b8 <RCCEx_PLL2_Config+0x15c>)
 800431c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800431e:	4a26      	ldr	r2, [pc, #152]	; (80043b8 <RCCEx_PLL2_Config+0x15c>)
 8004320:	f023 0310 	bic.w	r3, r3, #16
 8004324:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004326:	4b24      	ldr	r3, [pc, #144]	; (80043b8 <RCCEx_PLL2_Config+0x15c>)
 8004328:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800432a:	4b24      	ldr	r3, [pc, #144]	; (80043bc <RCCEx_PLL2_Config+0x160>)
 800432c:	4013      	ands	r3, r2
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	69d2      	ldr	r2, [r2, #28]
 8004332:	00d2      	lsls	r2, r2, #3
 8004334:	4920      	ldr	r1, [pc, #128]	; (80043b8 <RCCEx_PLL2_Config+0x15c>)
 8004336:	4313      	orrs	r3, r2
 8004338:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800433a:	4b1f      	ldr	r3, [pc, #124]	; (80043b8 <RCCEx_PLL2_Config+0x15c>)
 800433c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800433e:	4a1e      	ldr	r2, [pc, #120]	; (80043b8 <RCCEx_PLL2_Config+0x15c>)
 8004340:	f043 0310 	orr.w	r3, r3, #16
 8004344:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d106      	bne.n	800435a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800434c:	4b1a      	ldr	r3, [pc, #104]	; (80043b8 <RCCEx_PLL2_Config+0x15c>)
 800434e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004350:	4a19      	ldr	r2, [pc, #100]	; (80043b8 <RCCEx_PLL2_Config+0x15c>)
 8004352:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004356:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004358:	e00f      	b.n	800437a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	2b01      	cmp	r3, #1
 800435e:	d106      	bne.n	800436e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004360:	4b15      	ldr	r3, [pc, #84]	; (80043b8 <RCCEx_PLL2_Config+0x15c>)
 8004362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004364:	4a14      	ldr	r2, [pc, #80]	; (80043b8 <RCCEx_PLL2_Config+0x15c>)
 8004366:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800436a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800436c:	e005      	b.n	800437a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800436e:	4b12      	ldr	r3, [pc, #72]	; (80043b8 <RCCEx_PLL2_Config+0x15c>)
 8004370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004372:	4a11      	ldr	r2, [pc, #68]	; (80043b8 <RCCEx_PLL2_Config+0x15c>)
 8004374:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004378:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800437a:	4b0f      	ldr	r3, [pc, #60]	; (80043b8 <RCCEx_PLL2_Config+0x15c>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a0e      	ldr	r2, [pc, #56]	; (80043b8 <RCCEx_PLL2_Config+0x15c>)
 8004380:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004384:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004386:	f7fd fb3d 	bl	8001a04 <HAL_GetTick>
 800438a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800438c:	e008      	b.n	80043a0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800438e:	f7fd fb39 	bl	8001a04 <HAL_GetTick>
 8004392:	4602      	mov	r2, r0
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	1ad3      	subs	r3, r2, r3
 8004398:	2b02      	cmp	r3, #2
 800439a:	d901      	bls.n	80043a0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800439c:	2303      	movs	r3, #3
 800439e:	e006      	b.n	80043ae <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80043a0:	4b05      	ldr	r3, [pc, #20]	; (80043b8 <RCCEx_PLL2_Config+0x15c>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d0f0      	beq.n	800438e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80043ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3710      	adds	r7, #16
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	58024400 	.word	0x58024400
 80043bc:	ffff0007 	.word	0xffff0007

080043c0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b084      	sub	sp, #16
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80043ca:	2300      	movs	r3, #0
 80043cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80043ce:	4b53      	ldr	r3, [pc, #332]	; (800451c <RCCEx_PLL3_Config+0x15c>)
 80043d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d2:	f003 0303 	and.w	r3, r3, #3
 80043d6:	2b03      	cmp	r3, #3
 80043d8:	d101      	bne.n	80043de <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e099      	b.n	8004512 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80043de:	4b4f      	ldr	r3, [pc, #316]	; (800451c <RCCEx_PLL3_Config+0x15c>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a4e      	ldr	r2, [pc, #312]	; (800451c <RCCEx_PLL3_Config+0x15c>)
 80043e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043ea:	f7fd fb0b 	bl	8001a04 <HAL_GetTick>
 80043ee:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80043f0:	e008      	b.n	8004404 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80043f2:	f7fd fb07 	bl	8001a04 <HAL_GetTick>
 80043f6:	4602      	mov	r2, r0
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	d901      	bls.n	8004404 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004400:	2303      	movs	r3, #3
 8004402:	e086      	b.n	8004512 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004404:	4b45      	ldr	r3, [pc, #276]	; (800451c <RCCEx_PLL3_Config+0x15c>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d1f0      	bne.n	80043f2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004410:	4b42      	ldr	r3, [pc, #264]	; (800451c <RCCEx_PLL3_Config+0x15c>)
 8004412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004414:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	051b      	lsls	r3, r3, #20
 800441e:	493f      	ldr	r1, [pc, #252]	; (800451c <RCCEx_PLL3_Config+0x15c>)
 8004420:	4313      	orrs	r3, r2
 8004422:	628b      	str	r3, [r1, #40]	; 0x28
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	3b01      	subs	r3, #1
 800442a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	3b01      	subs	r3, #1
 8004434:	025b      	lsls	r3, r3, #9
 8004436:	b29b      	uxth	r3, r3
 8004438:	431a      	orrs	r2, r3
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	3b01      	subs	r3, #1
 8004440:	041b      	lsls	r3, r3, #16
 8004442:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004446:	431a      	orrs	r2, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	691b      	ldr	r3, [r3, #16]
 800444c:	3b01      	subs	r3, #1
 800444e:	061b      	lsls	r3, r3, #24
 8004450:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004454:	4931      	ldr	r1, [pc, #196]	; (800451c <RCCEx_PLL3_Config+0x15c>)
 8004456:	4313      	orrs	r3, r2
 8004458:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800445a:	4b30      	ldr	r3, [pc, #192]	; (800451c <RCCEx_PLL3_Config+0x15c>)
 800445c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800445e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	695b      	ldr	r3, [r3, #20]
 8004466:	492d      	ldr	r1, [pc, #180]	; (800451c <RCCEx_PLL3_Config+0x15c>)
 8004468:	4313      	orrs	r3, r2
 800446a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800446c:	4b2b      	ldr	r3, [pc, #172]	; (800451c <RCCEx_PLL3_Config+0x15c>)
 800446e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004470:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	699b      	ldr	r3, [r3, #24]
 8004478:	4928      	ldr	r1, [pc, #160]	; (800451c <RCCEx_PLL3_Config+0x15c>)
 800447a:	4313      	orrs	r3, r2
 800447c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800447e:	4b27      	ldr	r3, [pc, #156]	; (800451c <RCCEx_PLL3_Config+0x15c>)
 8004480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004482:	4a26      	ldr	r2, [pc, #152]	; (800451c <RCCEx_PLL3_Config+0x15c>)
 8004484:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004488:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800448a:	4b24      	ldr	r3, [pc, #144]	; (800451c <RCCEx_PLL3_Config+0x15c>)
 800448c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800448e:	4b24      	ldr	r3, [pc, #144]	; (8004520 <RCCEx_PLL3_Config+0x160>)
 8004490:	4013      	ands	r3, r2
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	69d2      	ldr	r2, [r2, #28]
 8004496:	00d2      	lsls	r2, r2, #3
 8004498:	4920      	ldr	r1, [pc, #128]	; (800451c <RCCEx_PLL3_Config+0x15c>)
 800449a:	4313      	orrs	r3, r2
 800449c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800449e:	4b1f      	ldr	r3, [pc, #124]	; (800451c <RCCEx_PLL3_Config+0x15c>)
 80044a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a2:	4a1e      	ldr	r2, [pc, #120]	; (800451c <RCCEx_PLL3_Config+0x15c>)
 80044a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d106      	bne.n	80044be <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80044b0:	4b1a      	ldr	r3, [pc, #104]	; (800451c <RCCEx_PLL3_Config+0x15c>)
 80044b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b4:	4a19      	ldr	r2, [pc, #100]	; (800451c <RCCEx_PLL3_Config+0x15c>)
 80044b6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80044ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 80044bc:	e00f      	b.n	80044de <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d106      	bne.n	80044d2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80044c4:	4b15      	ldr	r3, [pc, #84]	; (800451c <RCCEx_PLL3_Config+0x15c>)
 80044c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c8:	4a14      	ldr	r2, [pc, #80]	; (800451c <RCCEx_PLL3_Config+0x15c>)
 80044ca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80044ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 80044d0:	e005      	b.n	80044de <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80044d2:	4b12      	ldr	r3, [pc, #72]	; (800451c <RCCEx_PLL3_Config+0x15c>)
 80044d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d6:	4a11      	ldr	r2, [pc, #68]	; (800451c <RCCEx_PLL3_Config+0x15c>)
 80044d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044dc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80044de:	4b0f      	ldr	r3, [pc, #60]	; (800451c <RCCEx_PLL3_Config+0x15c>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a0e      	ldr	r2, [pc, #56]	; (800451c <RCCEx_PLL3_Config+0x15c>)
 80044e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044ea:	f7fd fa8b 	bl	8001a04 <HAL_GetTick>
 80044ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80044f0:	e008      	b.n	8004504 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80044f2:	f7fd fa87 	bl	8001a04 <HAL_GetTick>
 80044f6:	4602      	mov	r2, r0
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d901      	bls.n	8004504 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004500:	2303      	movs	r3, #3
 8004502:	e006      	b.n	8004512 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004504:	4b05      	ldr	r3, [pc, #20]	; (800451c <RCCEx_PLL3_Config+0x15c>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800450c:	2b00      	cmp	r3, #0
 800450e:	d0f0      	beq.n	80044f2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004510:	7bfb      	ldrb	r3, [r7, #15]
}
 8004512:	4618      	mov	r0, r3
 8004514:	3710      	adds	r7, #16
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	58024400 	.word	0x58024400
 8004520:	ffff0007 	.word	0xffff0007

08004524 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b082      	sub	sp, #8
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d101      	bne.n	8004536 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e049      	b.n	80045ca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800453c:	b2db      	uxtb	r3, r3
 800453e:	2b00      	cmp	r3, #0
 8004540:	d106      	bne.n	8004550 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f7fc feec 	bl	8001328 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2202      	movs	r2, #2
 8004554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	3304      	adds	r3, #4
 8004560:	4619      	mov	r1, r3
 8004562:	4610      	mov	r0, r2
 8004564:	f001 f8d2 	bl	800570c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045c8:	2300      	movs	r3, #0
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3708      	adds	r7, #8
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
	...

080045d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b085      	sub	sp, #20
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d001      	beq.n	80045ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e05e      	b.n	80046aa <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2202      	movs	r2, #2
 80045f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	68da      	ldr	r2, [r3, #12]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f042 0201 	orr.w	r2, r2, #1
 8004602:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a2b      	ldr	r2, [pc, #172]	; (80046b8 <HAL_TIM_Base_Start_IT+0xe4>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d02c      	beq.n	8004668 <HAL_TIM_Base_Start_IT+0x94>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004616:	d027      	beq.n	8004668 <HAL_TIM_Base_Start_IT+0x94>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a27      	ldr	r2, [pc, #156]	; (80046bc <HAL_TIM_Base_Start_IT+0xe8>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d022      	beq.n	8004668 <HAL_TIM_Base_Start_IT+0x94>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a26      	ldr	r2, [pc, #152]	; (80046c0 <HAL_TIM_Base_Start_IT+0xec>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d01d      	beq.n	8004668 <HAL_TIM_Base_Start_IT+0x94>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a24      	ldr	r2, [pc, #144]	; (80046c4 <HAL_TIM_Base_Start_IT+0xf0>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d018      	beq.n	8004668 <HAL_TIM_Base_Start_IT+0x94>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a23      	ldr	r2, [pc, #140]	; (80046c8 <HAL_TIM_Base_Start_IT+0xf4>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d013      	beq.n	8004668 <HAL_TIM_Base_Start_IT+0x94>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a21      	ldr	r2, [pc, #132]	; (80046cc <HAL_TIM_Base_Start_IT+0xf8>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d00e      	beq.n	8004668 <HAL_TIM_Base_Start_IT+0x94>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a20      	ldr	r2, [pc, #128]	; (80046d0 <HAL_TIM_Base_Start_IT+0xfc>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d009      	beq.n	8004668 <HAL_TIM_Base_Start_IT+0x94>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a1e      	ldr	r2, [pc, #120]	; (80046d4 <HAL_TIM_Base_Start_IT+0x100>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d004      	beq.n	8004668 <HAL_TIM_Base_Start_IT+0x94>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a1d      	ldr	r2, [pc, #116]	; (80046d8 <HAL_TIM_Base_Start_IT+0x104>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d115      	bne.n	8004694 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	689a      	ldr	r2, [r3, #8]
 800466e:	4b1b      	ldr	r3, [pc, #108]	; (80046dc <HAL_TIM_Base_Start_IT+0x108>)
 8004670:	4013      	ands	r3, r2
 8004672:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2b06      	cmp	r3, #6
 8004678:	d015      	beq.n	80046a6 <HAL_TIM_Base_Start_IT+0xd2>
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004680:	d011      	beq.n	80046a6 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f042 0201 	orr.w	r2, r2, #1
 8004690:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004692:	e008      	b.n	80046a6 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f042 0201 	orr.w	r2, r2, #1
 80046a2:	601a      	str	r2, [r3, #0]
 80046a4:	e000      	b.n	80046a8 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80046a8:	2300      	movs	r3, #0
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3714      	adds	r7, #20
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr
 80046b6:	bf00      	nop
 80046b8:	40010000 	.word	0x40010000
 80046bc:	40000400 	.word	0x40000400
 80046c0:	40000800 	.word	0x40000800
 80046c4:	40000c00 	.word	0x40000c00
 80046c8:	40010400 	.word	0x40010400
 80046cc:	40001800 	.word	0x40001800
 80046d0:	40014000 	.word	0x40014000
 80046d4:	4000e000 	.word	0x4000e000
 80046d8:	4000e400 	.word	0x4000e400
 80046dc:	00010007 	.word	0x00010007

080046e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d101      	bne.n	80046f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e049      	b.n	8004786 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d106      	bne.n	800470c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f000 f841 	bl	800478e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2202      	movs	r2, #2
 8004710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	3304      	adds	r3, #4
 800471c:	4619      	mov	r1, r3
 800471e:	4610      	mov	r0, r2
 8004720:	f000 fff4 	bl	800570c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2201      	movs	r2, #1
 8004730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2201      	movs	r2, #1
 8004738:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004784:	2300      	movs	r3, #0
}
 8004786:	4618      	mov	r0, r3
 8004788:	3708      	adds	r7, #8
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}

0800478e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800478e:	b480      	push	{r7}
 8004790:	b083      	sub	sp, #12
 8004792:	af00      	add	r7, sp, #0
 8004794:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004796:	bf00      	nop
 8004798:	370c      	adds	r7, #12
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr
	...

080047a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d109      	bne.n	80047c8 <HAL_TIM_PWM_Start+0x24>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	2b01      	cmp	r3, #1
 80047be:	bf14      	ite	ne
 80047c0:	2301      	movne	r3, #1
 80047c2:	2300      	moveq	r3, #0
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	e03c      	b.n	8004842 <HAL_TIM_PWM_Start+0x9e>
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	2b04      	cmp	r3, #4
 80047cc:	d109      	bne.n	80047e2 <HAL_TIM_PWM_Start+0x3e>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	bf14      	ite	ne
 80047da:	2301      	movne	r3, #1
 80047dc:	2300      	moveq	r3, #0
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	e02f      	b.n	8004842 <HAL_TIM_PWM_Start+0x9e>
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	2b08      	cmp	r3, #8
 80047e6:	d109      	bne.n	80047fc <HAL_TIM_PWM_Start+0x58>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	bf14      	ite	ne
 80047f4:	2301      	movne	r3, #1
 80047f6:	2300      	moveq	r3, #0
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	e022      	b.n	8004842 <HAL_TIM_PWM_Start+0x9e>
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	2b0c      	cmp	r3, #12
 8004800:	d109      	bne.n	8004816 <HAL_TIM_PWM_Start+0x72>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004808:	b2db      	uxtb	r3, r3
 800480a:	2b01      	cmp	r3, #1
 800480c:	bf14      	ite	ne
 800480e:	2301      	movne	r3, #1
 8004810:	2300      	moveq	r3, #0
 8004812:	b2db      	uxtb	r3, r3
 8004814:	e015      	b.n	8004842 <HAL_TIM_PWM_Start+0x9e>
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	2b10      	cmp	r3, #16
 800481a:	d109      	bne.n	8004830 <HAL_TIM_PWM_Start+0x8c>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004822:	b2db      	uxtb	r3, r3
 8004824:	2b01      	cmp	r3, #1
 8004826:	bf14      	ite	ne
 8004828:	2301      	movne	r3, #1
 800482a:	2300      	moveq	r3, #0
 800482c:	b2db      	uxtb	r3, r3
 800482e:	e008      	b.n	8004842 <HAL_TIM_PWM_Start+0x9e>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004836:	b2db      	uxtb	r3, r3
 8004838:	2b01      	cmp	r3, #1
 800483a:	bf14      	ite	ne
 800483c:	2301      	movne	r3, #1
 800483e:	2300      	moveq	r3, #0
 8004840:	b2db      	uxtb	r3, r3
 8004842:	2b00      	cmp	r3, #0
 8004844:	d001      	beq.n	800484a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e0ab      	b.n	80049a2 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d104      	bne.n	800485a <HAL_TIM_PWM_Start+0xb6>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2202      	movs	r2, #2
 8004854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004858:	e023      	b.n	80048a2 <HAL_TIM_PWM_Start+0xfe>
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	2b04      	cmp	r3, #4
 800485e:	d104      	bne.n	800486a <HAL_TIM_PWM_Start+0xc6>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2202      	movs	r2, #2
 8004864:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004868:	e01b      	b.n	80048a2 <HAL_TIM_PWM_Start+0xfe>
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	2b08      	cmp	r3, #8
 800486e:	d104      	bne.n	800487a <HAL_TIM_PWM_Start+0xd6>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2202      	movs	r2, #2
 8004874:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004878:	e013      	b.n	80048a2 <HAL_TIM_PWM_Start+0xfe>
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	2b0c      	cmp	r3, #12
 800487e:	d104      	bne.n	800488a <HAL_TIM_PWM_Start+0xe6>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2202      	movs	r2, #2
 8004884:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004888:	e00b      	b.n	80048a2 <HAL_TIM_PWM_Start+0xfe>
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	2b10      	cmp	r3, #16
 800488e:	d104      	bne.n	800489a <HAL_TIM_PWM_Start+0xf6>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2202      	movs	r2, #2
 8004894:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004898:	e003      	b.n	80048a2 <HAL_TIM_PWM_Start+0xfe>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2202      	movs	r2, #2
 800489e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	2201      	movs	r2, #1
 80048a8:	6839      	ldr	r1, [r7, #0]
 80048aa:	4618      	mov	r0, r3
 80048ac:	f001 fc7e 	bl	80061ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a3d      	ldr	r2, [pc, #244]	; (80049ac <HAL_TIM_PWM_Start+0x208>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d013      	beq.n	80048e2 <HAL_TIM_PWM_Start+0x13e>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a3c      	ldr	r2, [pc, #240]	; (80049b0 <HAL_TIM_PWM_Start+0x20c>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d00e      	beq.n	80048e2 <HAL_TIM_PWM_Start+0x13e>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a3a      	ldr	r2, [pc, #232]	; (80049b4 <HAL_TIM_PWM_Start+0x210>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d009      	beq.n	80048e2 <HAL_TIM_PWM_Start+0x13e>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a39      	ldr	r2, [pc, #228]	; (80049b8 <HAL_TIM_PWM_Start+0x214>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d004      	beq.n	80048e2 <HAL_TIM_PWM_Start+0x13e>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a37      	ldr	r2, [pc, #220]	; (80049bc <HAL_TIM_PWM_Start+0x218>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d101      	bne.n	80048e6 <HAL_TIM_PWM_Start+0x142>
 80048e2:	2301      	movs	r3, #1
 80048e4:	e000      	b.n	80048e8 <HAL_TIM_PWM_Start+0x144>
 80048e6:	2300      	movs	r3, #0
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d007      	beq.n	80048fc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048fa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a2a      	ldr	r2, [pc, #168]	; (80049ac <HAL_TIM_PWM_Start+0x208>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d02c      	beq.n	8004960 <HAL_TIM_PWM_Start+0x1bc>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800490e:	d027      	beq.n	8004960 <HAL_TIM_PWM_Start+0x1bc>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a2a      	ldr	r2, [pc, #168]	; (80049c0 <HAL_TIM_PWM_Start+0x21c>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d022      	beq.n	8004960 <HAL_TIM_PWM_Start+0x1bc>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a29      	ldr	r2, [pc, #164]	; (80049c4 <HAL_TIM_PWM_Start+0x220>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d01d      	beq.n	8004960 <HAL_TIM_PWM_Start+0x1bc>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a27      	ldr	r2, [pc, #156]	; (80049c8 <HAL_TIM_PWM_Start+0x224>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d018      	beq.n	8004960 <HAL_TIM_PWM_Start+0x1bc>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a1f      	ldr	r2, [pc, #124]	; (80049b0 <HAL_TIM_PWM_Start+0x20c>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d013      	beq.n	8004960 <HAL_TIM_PWM_Start+0x1bc>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a23      	ldr	r2, [pc, #140]	; (80049cc <HAL_TIM_PWM_Start+0x228>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d00e      	beq.n	8004960 <HAL_TIM_PWM_Start+0x1bc>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a1b      	ldr	r2, [pc, #108]	; (80049b4 <HAL_TIM_PWM_Start+0x210>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d009      	beq.n	8004960 <HAL_TIM_PWM_Start+0x1bc>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a1f      	ldr	r2, [pc, #124]	; (80049d0 <HAL_TIM_PWM_Start+0x22c>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d004      	beq.n	8004960 <HAL_TIM_PWM_Start+0x1bc>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a1e      	ldr	r2, [pc, #120]	; (80049d4 <HAL_TIM_PWM_Start+0x230>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d115      	bne.n	800498c <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	689a      	ldr	r2, [r3, #8]
 8004966:	4b1c      	ldr	r3, [pc, #112]	; (80049d8 <HAL_TIM_PWM_Start+0x234>)
 8004968:	4013      	ands	r3, r2
 800496a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2b06      	cmp	r3, #6
 8004970:	d015      	beq.n	800499e <HAL_TIM_PWM_Start+0x1fa>
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004978:	d011      	beq.n	800499e <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f042 0201 	orr.w	r2, r2, #1
 8004988:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800498a:	e008      	b.n	800499e <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f042 0201 	orr.w	r2, r2, #1
 800499a:	601a      	str	r2, [r3, #0]
 800499c:	e000      	b.n	80049a0 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800499e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80049a0:	2300      	movs	r3, #0
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3710      	adds	r7, #16
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	bf00      	nop
 80049ac:	40010000 	.word	0x40010000
 80049b0:	40010400 	.word	0x40010400
 80049b4:	40014000 	.word	0x40014000
 80049b8:	40014400 	.word	0x40014400
 80049bc:	40014800 	.word	0x40014800
 80049c0:	40000400 	.word	0x40000400
 80049c4:	40000800 	.word	0x40000800
 80049c8:	40000c00 	.word	0x40000c00
 80049cc:	40001800 	.word	0x40001800
 80049d0:	4000e000 	.word	0x4000e000
 80049d4:	4000e400 	.word	0x4000e400
 80049d8:	00010007 	.word	0x00010007

080049dc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b082      	sub	sp, #8
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d101      	bne.n	80049ee <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e049      	b.n	8004a82 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d106      	bne.n	8004a08 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 f841 	bl	8004a8a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2202      	movs	r2, #2
 8004a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	3304      	adds	r3, #4
 8004a18:	4619      	mov	r1, r3
 8004a1a:	4610      	mov	r0, r2
 8004a1c:	f000 fe76 	bl	800570c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a80:	2300      	movs	r3, #0
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3708      	adds	r7, #8
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}

08004a8a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004a8a:	b480      	push	{r7}
 8004a8c:	b083      	sub	sp, #12
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004a92:	bf00      	nop
 8004a94:	370c      	adds	r7, #12
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr
	...

08004aa0 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b084      	sub	sp, #16
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d104      	bne.n	8004aba <HAL_TIM_IC_Start+0x1a>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	e023      	b.n	8004b02 <HAL_TIM_IC_Start+0x62>
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	2b04      	cmp	r3, #4
 8004abe:	d104      	bne.n	8004aca <HAL_TIM_IC_Start+0x2a>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	e01b      	b.n	8004b02 <HAL_TIM_IC_Start+0x62>
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	2b08      	cmp	r3, #8
 8004ace:	d104      	bne.n	8004ada <HAL_TIM_IC_Start+0x3a>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	e013      	b.n	8004b02 <HAL_TIM_IC_Start+0x62>
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	2b0c      	cmp	r3, #12
 8004ade:	d104      	bne.n	8004aea <HAL_TIM_IC_Start+0x4a>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	e00b      	b.n	8004b02 <HAL_TIM_IC_Start+0x62>
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	2b10      	cmp	r3, #16
 8004aee:	d104      	bne.n	8004afa <HAL_TIM_IC_Start+0x5a>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	e003      	b.n	8004b02 <HAL_TIM_IC_Start+0x62>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d104      	bne.n	8004b14 <HAL_TIM_IC_Start+0x74>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	e013      	b.n	8004b3c <HAL_TIM_IC_Start+0x9c>
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	2b04      	cmp	r3, #4
 8004b18:	d104      	bne.n	8004b24 <HAL_TIM_IC_Start+0x84>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	e00b      	b.n	8004b3c <HAL_TIM_IC_Start+0x9c>
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	2b08      	cmp	r3, #8
 8004b28:	d104      	bne.n	8004b34 <HAL_TIM_IC_Start+0x94>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	e003      	b.n	8004b3c <HAL_TIM_IC_Start+0x9c>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b3e:	7bfb      	ldrb	r3, [r7, #15]
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d102      	bne.n	8004b4a <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004b44:	7bbb      	ldrb	r3, [r7, #14]
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d001      	beq.n	8004b4e <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e0a1      	b.n	8004c92 <HAL_TIM_IC_Start+0x1f2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d104      	bne.n	8004b5e <HAL_TIM_IC_Start+0xbe>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2202      	movs	r2, #2
 8004b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b5c:	e023      	b.n	8004ba6 <HAL_TIM_IC_Start+0x106>
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	2b04      	cmp	r3, #4
 8004b62:	d104      	bne.n	8004b6e <HAL_TIM_IC_Start+0xce>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2202      	movs	r2, #2
 8004b68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b6c:	e01b      	b.n	8004ba6 <HAL_TIM_IC_Start+0x106>
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	2b08      	cmp	r3, #8
 8004b72:	d104      	bne.n	8004b7e <HAL_TIM_IC_Start+0xde>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2202      	movs	r2, #2
 8004b78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b7c:	e013      	b.n	8004ba6 <HAL_TIM_IC_Start+0x106>
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	2b0c      	cmp	r3, #12
 8004b82:	d104      	bne.n	8004b8e <HAL_TIM_IC_Start+0xee>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2202      	movs	r2, #2
 8004b88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b8c:	e00b      	b.n	8004ba6 <HAL_TIM_IC_Start+0x106>
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	2b10      	cmp	r3, #16
 8004b92:	d104      	bne.n	8004b9e <HAL_TIM_IC_Start+0xfe>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2202      	movs	r2, #2
 8004b98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b9c:	e003      	b.n	8004ba6 <HAL_TIM_IC_Start+0x106>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2202      	movs	r2, #2
 8004ba2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d104      	bne.n	8004bb6 <HAL_TIM_IC_Start+0x116>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2202      	movs	r2, #2
 8004bb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bb4:	e013      	b.n	8004bde <HAL_TIM_IC_Start+0x13e>
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	2b04      	cmp	r3, #4
 8004bba:	d104      	bne.n	8004bc6 <HAL_TIM_IC_Start+0x126>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2202      	movs	r2, #2
 8004bc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004bc4:	e00b      	b.n	8004bde <HAL_TIM_IC_Start+0x13e>
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	2b08      	cmp	r3, #8
 8004bca:	d104      	bne.n	8004bd6 <HAL_TIM_IC_Start+0x136>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2202      	movs	r2, #2
 8004bd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004bd4:	e003      	b.n	8004bde <HAL_TIM_IC_Start+0x13e>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2202      	movs	r2, #2
 8004bda:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	2201      	movs	r2, #1
 8004be4:	6839      	ldr	r1, [r7, #0]
 8004be6:	4618      	mov	r0, r3
 8004be8:	f001 fae0 	bl	80061ac <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a2a      	ldr	r2, [pc, #168]	; (8004c9c <HAL_TIM_IC_Start+0x1fc>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d02c      	beq.n	8004c50 <HAL_TIM_IC_Start+0x1b0>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bfe:	d027      	beq.n	8004c50 <HAL_TIM_IC_Start+0x1b0>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a26      	ldr	r2, [pc, #152]	; (8004ca0 <HAL_TIM_IC_Start+0x200>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d022      	beq.n	8004c50 <HAL_TIM_IC_Start+0x1b0>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a25      	ldr	r2, [pc, #148]	; (8004ca4 <HAL_TIM_IC_Start+0x204>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d01d      	beq.n	8004c50 <HAL_TIM_IC_Start+0x1b0>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a23      	ldr	r2, [pc, #140]	; (8004ca8 <HAL_TIM_IC_Start+0x208>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d018      	beq.n	8004c50 <HAL_TIM_IC_Start+0x1b0>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a22      	ldr	r2, [pc, #136]	; (8004cac <HAL_TIM_IC_Start+0x20c>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d013      	beq.n	8004c50 <HAL_TIM_IC_Start+0x1b0>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a20      	ldr	r2, [pc, #128]	; (8004cb0 <HAL_TIM_IC_Start+0x210>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d00e      	beq.n	8004c50 <HAL_TIM_IC_Start+0x1b0>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a1f      	ldr	r2, [pc, #124]	; (8004cb4 <HAL_TIM_IC_Start+0x214>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d009      	beq.n	8004c50 <HAL_TIM_IC_Start+0x1b0>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a1d      	ldr	r2, [pc, #116]	; (8004cb8 <HAL_TIM_IC_Start+0x218>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d004      	beq.n	8004c50 <HAL_TIM_IC_Start+0x1b0>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a1c      	ldr	r2, [pc, #112]	; (8004cbc <HAL_TIM_IC_Start+0x21c>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d115      	bne.n	8004c7c <HAL_TIM_IC_Start+0x1dc>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	689a      	ldr	r2, [r3, #8]
 8004c56:	4b1a      	ldr	r3, [pc, #104]	; (8004cc0 <HAL_TIM_IC_Start+0x220>)
 8004c58:	4013      	ands	r3, r2
 8004c5a:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	2b06      	cmp	r3, #6
 8004c60:	d015      	beq.n	8004c8e <HAL_TIM_IC_Start+0x1ee>
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c68:	d011      	beq.n	8004c8e <HAL_TIM_IC_Start+0x1ee>
    {
      __HAL_TIM_ENABLE(htim);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f042 0201 	orr.w	r2, r2, #1
 8004c78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c7a:	e008      	b.n	8004c8e <HAL_TIM_IC_Start+0x1ee>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f042 0201 	orr.w	r2, r2, #1
 8004c8a:	601a      	str	r2, [r3, #0]
 8004c8c:	e000      	b.n	8004c90 <HAL_TIM_IC_Start+0x1f0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c8e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004c90:	2300      	movs	r3, #0
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3710      	adds	r7, #16
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	40010000 	.word	0x40010000
 8004ca0:	40000400 	.word	0x40000400
 8004ca4:	40000800 	.word	0x40000800
 8004ca8:	40000c00 	.word	0x40000c00
 8004cac:	40010400 	.word	0x40010400
 8004cb0:	40001800 	.word	0x40001800
 8004cb4:	40014000 	.word	0x40014000
 8004cb8:	4000e000 	.word	0x4000e000
 8004cbc:	4000e400 	.word	0x4000e400
 8004cc0:	00010007 	.word	0x00010007

08004cc4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b086      	sub	sp, #24
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d101      	bne.n	8004cd8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e08f      	b.n	8004df8 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d106      	bne.n	8004cf2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f7fc fbef 	bl	80014d0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2202      	movs	r2, #2
 8004cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	6899      	ldr	r1, [r3, #8]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	4b3e      	ldr	r3, [pc, #248]	; (8004e00 <HAL_TIM_Encoder_Init+0x13c>)
 8004d06:	400b      	ands	r3, r1
 8004d08:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	3304      	adds	r3, #4
 8004d12:	4619      	mov	r1, r3
 8004d14:	4610      	mov	r0, r2
 8004d16:	f000 fcf9 	bl	800570c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	699b      	ldr	r3, [r3, #24]
 8004d28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	6a1b      	ldr	r3, [r3, #32]
 8004d30:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	697a      	ldr	r2, [r7, #20]
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004d3c:	693a      	ldr	r2, [r7, #16]
 8004d3e:	4b31      	ldr	r3, [pc, #196]	; (8004e04 <HAL_TIM_Encoder_Init+0x140>)
 8004d40:	4013      	ands	r3, r2
 8004d42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	689a      	ldr	r2, [r3, #8]
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	699b      	ldr	r3, [r3, #24]
 8004d4c:	021b      	lsls	r3, r3, #8
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	693a      	ldr	r2, [r7, #16]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004d56:	693a      	ldr	r2, [r7, #16]
 8004d58:	4b2b      	ldr	r3, [pc, #172]	; (8004e08 <HAL_TIM_Encoder_Init+0x144>)
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004d5e:	693a      	ldr	r2, [r7, #16]
 8004d60:	4b2a      	ldr	r3, [pc, #168]	; (8004e0c <HAL_TIM_Encoder_Init+0x148>)
 8004d62:	4013      	ands	r3, r2
 8004d64:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	68da      	ldr	r2, [r3, #12]
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	69db      	ldr	r3, [r3, #28]
 8004d6e:	021b      	lsls	r3, r3, #8
 8004d70:	4313      	orrs	r3, r2
 8004d72:	693a      	ldr	r2, [r7, #16]
 8004d74:	4313      	orrs	r3, r2
 8004d76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	691b      	ldr	r3, [r3, #16]
 8004d7c:	011a      	lsls	r2, r3, #4
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	6a1b      	ldr	r3, [r3, #32]
 8004d82:	031b      	lsls	r3, r3, #12
 8004d84:	4313      	orrs	r3, r2
 8004d86:	693a      	ldr	r2, [r7, #16]
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004d92:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004d9a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	685a      	ldr	r2, [r3, #4]
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	695b      	ldr	r3, [r3, #20]
 8004da4:	011b      	lsls	r3, r3, #4
 8004da6:	4313      	orrs	r3, r2
 8004da8:	68fa      	ldr	r2, [r7, #12]
 8004daa:	4313      	orrs	r3, r2
 8004dac:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	697a      	ldr	r2, [r7, #20]
 8004db4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	693a      	ldr	r2, [r7, #16]
 8004dbc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	68fa      	ldr	r2, [r7, #12]
 8004dc4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2201      	movs	r2, #1
 8004dca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2201      	movs	r2, #1
 8004dda:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2201      	movs	r2, #1
 8004de2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2201      	movs	r2, #1
 8004dea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2201      	movs	r2, #1
 8004df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004df6:	2300      	movs	r3, #0
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3718      	adds	r7, #24
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}
 8004e00:	fffebff8 	.word	0xfffebff8
 8004e04:	fffffcfc 	.word	0xfffffcfc
 8004e08:	fffff3f3 	.word	0xfffff3f3
 8004e0c:	ffff0f0f 	.word	0xffff0f0f

08004e10 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e20:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004e28:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e30:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e38:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d110      	bne.n	8004e62 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e40:	7bfb      	ldrb	r3, [r7, #15]
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d102      	bne.n	8004e4c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004e46:	7b7b      	ldrb	r3, [r7, #13]
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d001      	beq.n	8004e50 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e069      	b.n	8004f24 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2202      	movs	r2, #2
 8004e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2202      	movs	r2, #2
 8004e5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e60:	e031      	b.n	8004ec6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	2b04      	cmp	r3, #4
 8004e66:	d110      	bne.n	8004e8a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e68:	7bbb      	ldrb	r3, [r7, #14]
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d102      	bne.n	8004e74 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004e6e:	7b3b      	ldrb	r3, [r7, #12]
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d001      	beq.n	8004e78 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	e055      	b.n	8004f24 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2202      	movs	r2, #2
 8004e7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2202      	movs	r2, #2
 8004e84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e88:	e01d      	b.n	8004ec6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e8a:	7bfb      	ldrb	r3, [r7, #15]
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d108      	bne.n	8004ea2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e90:	7bbb      	ldrb	r3, [r7, #14]
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d105      	bne.n	8004ea2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e96:	7b7b      	ldrb	r3, [r7, #13]
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d102      	bne.n	8004ea2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004e9c:	7b3b      	ldrb	r3, [r7, #12]
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d001      	beq.n	8004ea6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e03e      	b.n	8004f24 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2202      	movs	r2, #2
 8004eaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2202      	movs	r2, #2
 8004eb2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2202      	movs	r2, #2
 8004eba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2202      	movs	r2, #2
 8004ec2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d003      	beq.n	8004ed4 <HAL_TIM_Encoder_Start+0xc4>
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	2b04      	cmp	r3, #4
 8004ed0:	d008      	beq.n	8004ee4 <HAL_TIM_Encoder_Start+0xd4>
 8004ed2:	e00f      	b.n	8004ef4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	2201      	movs	r2, #1
 8004eda:	2100      	movs	r1, #0
 8004edc:	4618      	mov	r0, r3
 8004ede:	f001 f965 	bl	80061ac <TIM_CCxChannelCmd>
      break;
 8004ee2:	e016      	b.n	8004f12 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2201      	movs	r2, #1
 8004eea:	2104      	movs	r1, #4
 8004eec:	4618      	mov	r0, r3
 8004eee:	f001 f95d 	bl	80061ac <TIM_CCxChannelCmd>
      break;
 8004ef2:	e00e      	b.n	8004f12 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	2201      	movs	r2, #1
 8004efa:	2100      	movs	r1, #0
 8004efc:	4618      	mov	r0, r3
 8004efe:	f001 f955 	bl	80061ac <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	2201      	movs	r2, #1
 8004f08:	2104      	movs	r1, #4
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f001 f94e 	bl	80061ac <TIM_CCxChannelCmd>
      break;
 8004f10:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f042 0201 	orr.w	r2, r2, #1
 8004f20:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004f22:	2300      	movs	r3, #0
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3710      	adds	r7, #16
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}

08004f2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b082      	sub	sp, #8
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	691b      	ldr	r3, [r3, #16]
 8004f3a:	f003 0302 	and.w	r3, r3, #2
 8004f3e:	2b02      	cmp	r3, #2
 8004f40:	d122      	bne.n	8004f88 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	f003 0302 	and.w	r3, r3, #2
 8004f4c:	2b02      	cmp	r3, #2
 8004f4e:	d11b      	bne.n	8004f88 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f06f 0202 	mvn.w	r2, #2
 8004f58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	699b      	ldr	r3, [r3, #24]
 8004f66:	f003 0303 	and.w	r3, r3, #3
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d003      	beq.n	8004f76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f000 fbae 	bl	80056d0 <HAL_TIM_IC_CaptureCallback>
 8004f74:	e005      	b.n	8004f82 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f000 fba0 	bl	80056bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f000 fbb1 	bl	80056e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	f003 0304 	and.w	r3, r3, #4
 8004f92:	2b04      	cmp	r3, #4
 8004f94:	d122      	bne.n	8004fdc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	f003 0304 	and.w	r3, r3, #4
 8004fa0:	2b04      	cmp	r3, #4
 8004fa2:	d11b      	bne.n	8004fdc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f06f 0204 	mvn.w	r2, #4
 8004fac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2202      	movs	r2, #2
 8004fb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	699b      	ldr	r3, [r3, #24]
 8004fba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d003      	beq.n	8004fca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f000 fb84 	bl	80056d0 <HAL_TIM_IC_CaptureCallback>
 8004fc8:	e005      	b.n	8004fd6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f000 fb76 	bl	80056bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f000 fb87 	bl	80056e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	691b      	ldr	r3, [r3, #16]
 8004fe2:	f003 0308 	and.w	r3, r3, #8
 8004fe6:	2b08      	cmp	r3, #8
 8004fe8:	d122      	bne.n	8005030 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	f003 0308 	and.w	r3, r3, #8
 8004ff4:	2b08      	cmp	r3, #8
 8004ff6:	d11b      	bne.n	8005030 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f06f 0208 	mvn.w	r2, #8
 8005000:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2204      	movs	r2, #4
 8005006:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	69db      	ldr	r3, [r3, #28]
 800500e:	f003 0303 	and.w	r3, r3, #3
 8005012:	2b00      	cmp	r3, #0
 8005014:	d003      	beq.n	800501e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 fb5a 	bl	80056d0 <HAL_TIM_IC_CaptureCallback>
 800501c:	e005      	b.n	800502a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f000 fb4c 	bl	80056bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f000 fb5d 	bl	80056e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2200      	movs	r2, #0
 800502e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	f003 0310 	and.w	r3, r3, #16
 800503a:	2b10      	cmp	r3, #16
 800503c:	d122      	bne.n	8005084 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	f003 0310 	and.w	r3, r3, #16
 8005048:	2b10      	cmp	r3, #16
 800504a:	d11b      	bne.n	8005084 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f06f 0210 	mvn.w	r2, #16
 8005054:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2208      	movs	r2, #8
 800505a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	69db      	ldr	r3, [r3, #28]
 8005062:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005066:	2b00      	cmp	r3, #0
 8005068:	d003      	beq.n	8005072 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f000 fb30 	bl	80056d0 <HAL_TIM_IC_CaptureCallback>
 8005070:	e005      	b.n	800507e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f000 fb22 	bl	80056bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f000 fb33 	bl	80056e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	691b      	ldr	r3, [r3, #16]
 800508a:	f003 0301 	and.w	r3, r3, #1
 800508e:	2b01      	cmp	r3, #1
 8005090:	d10e      	bne.n	80050b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	f003 0301 	and.w	r3, r3, #1
 800509c:	2b01      	cmp	r3, #1
 800509e:	d107      	bne.n	80050b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f06f 0201 	mvn.w	r2, #1
 80050a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f7fc f834 	bl	8001118 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	691b      	ldr	r3, [r3, #16]
 80050b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050ba:	2b80      	cmp	r3, #128	; 0x80
 80050bc:	d10e      	bne.n	80050dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050c8:	2b80      	cmp	r3, #128	; 0x80
 80050ca:	d107      	bne.n	80050dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80050d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f001 f934 	bl	8006344 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	691b      	ldr	r3, [r3, #16]
 80050e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050ea:	d10e      	bne.n	800510a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050f6:	2b80      	cmp	r3, #128	; 0x80
 80050f8:	d107      	bne.n	800510a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005102:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f001 f927 	bl	8006358 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	691b      	ldr	r3, [r3, #16]
 8005110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005114:	2b40      	cmp	r3, #64	; 0x40
 8005116:	d10e      	bne.n	8005136 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005122:	2b40      	cmp	r3, #64	; 0x40
 8005124:	d107      	bne.n	8005136 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800512e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f000 fae1 	bl	80056f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	691b      	ldr	r3, [r3, #16]
 800513c:	f003 0320 	and.w	r3, r3, #32
 8005140:	2b20      	cmp	r3, #32
 8005142:	d10e      	bne.n	8005162 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	68db      	ldr	r3, [r3, #12]
 800514a:	f003 0320 	and.w	r3, r3, #32
 800514e:	2b20      	cmp	r3, #32
 8005150:	d107      	bne.n	8005162 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f06f 0220 	mvn.w	r2, #32
 800515a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f001 f8e7 	bl	8006330 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005162:	bf00      	nop
 8005164:	3708      	adds	r7, #8
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}

0800516a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800516a:	b580      	push	{r7, lr}
 800516c:	b086      	sub	sp, #24
 800516e:	af00      	add	r7, sp, #0
 8005170:	60f8      	str	r0, [r7, #12]
 8005172:	60b9      	str	r1, [r7, #8]
 8005174:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005176:	2300      	movs	r3, #0
 8005178:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005180:	2b01      	cmp	r3, #1
 8005182:	d101      	bne.n	8005188 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005184:	2302      	movs	r3, #2
 8005186:	e088      	b.n	800529a <HAL_TIM_IC_ConfigChannel+0x130>
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d11b      	bne.n	80051ce <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	6818      	ldr	r0, [r3, #0]
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	6819      	ldr	r1, [r3, #0]
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	685a      	ldr	r2, [r3, #4]
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	f000 fe2d 	bl	8005e04 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	699a      	ldr	r2, [r3, #24]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f022 020c 	bic.w	r2, r2, #12
 80051b8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	6999      	ldr	r1, [r3, #24]
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	689a      	ldr	r2, [r3, #8]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	430a      	orrs	r2, r1
 80051ca:	619a      	str	r2, [r3, #24]
 80051cc:	e060      	b.n	8005290 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2b04      	cmp	r3, #4
 80051d2:	d11c      	bne.n	800520e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	6818      	ldr	r0, [r3, #0]
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	6819      	ldr	r1, [r3, #0]
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	685a      	ldr	r2, [r3, #4]
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	f000 febd 	bl	8005f62 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	699a      	ldr	r2, [r3, #24]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80051f6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	6999      	ldr	r1, [r3, #24]
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	021a      	lsls	r2, r3, #8
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	430a      	orrs	r2, r1
 800520a:	619a      	str	r2, [r3, #24]
 800520c:	e040      	b.n	8005290 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2b08      	cmp	r3, #8
 8005212:	d11b      	bne.n	800524c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6818      	ldr	r0, [r3, #0]
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	6819      	ldr	r1, [r3, #0]
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	685a      	ldr	r2, [r3, #4]
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	f000 ff0a 	bl	800603c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	69da      	ldr	r2, [r3, #28]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f022 020c 	bic.w	r2, r2, #12
 8005236:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	69d9      	ldr	r1, [r3, #28]
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	689a      	ldr	r2, [r3, #8]
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	430a      	orrs	r2, r1
 8005248:	61da      	str	r2, [r3, #28]
 800524a:	e021      	b.n	8005290 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2b0c      	cmp	r3, #12
 8005250:	d11c      	bne.n	800528c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	6818      	ldr	r0, [r3, #0]
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	6819      	ldr	r1, [r3, #0]
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	685a      	ldr	r2, [r3, #4]
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	f000 ff27 	bl	80060b4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	69da      	ldr	r2, [r3, #28]
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005274:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	69d9      	ldr	r1, [r3, #28]
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	021a      	lsls	r2, r3, #8
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	430a      	orrs	r2, r1
 8005288:	61da      	str	r2, [r3, #28]
 800528a:	e001      	b.n	8005290 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2200      	movs	r2, #0
 8005294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005298:	7dfb      	ldrb	r3, [r7, #23]
}
 800529a:	4618      	mov	r0, r3
 800529c:	3718      	adds	r7, #24
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
	...

080052a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b086      	sub	sp, #24
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	60f8      	str	r0, [r7, #12]
 80052ac:	60b9      	str	r1, [r7, #8]
 80052ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052b0:	2300      	movs	r3, #0
 80052b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d101      	bne.n	80052c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80052be:	2302      	movs	r3, #2
 80052c0:	e0ff      	b.n	80054c2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2201      	movs	r2, #1
 80052c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2b14      	cmp	r3, #20
 80052ce:	f200 80f0 	bhi.w	80054b2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80052d2:	a201      	add	r2, pc, #4	; (adr r2, 80052d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80052d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052d8:	0800532d 	.word	0x0800532d
 80052dc:	080054b3 	.word	0x080054b3
 80052e0:	080054b3 	.word	0x080054b3
 80052e4:	080054b3 	.word	0x080054b3
 80052e8:	0800536d 	.word	0x0800536d
 80052ec:	080054b3 	.word	0x080054b3
 80052f0:	080054b3 	.word	0x080054b3
 80052f4:	080054b3 	.word	0x080054b3
 80052f8:	080053af 	.word	0x080053af
 80052fc:	080054b3 	.word	0x080054b3
 8005300:	080054b3 	.word	0x080054b3
 8005304:	080054b3 	.word	0x080054b3
 8005308:	080053ef 	.word	0x080053ef
 800530c:	080054b3 	.word	0x080054b3
 8005310:	080054b3 	.word	0x080054b3
 8005314:	080054b3 	.word	0x080054b3
 8005318:	08005431 	.word	0x08005431
 800531c:	080054b3 	.word	0x080054b3
 8005320:	080054b3 	.word	0x080054b3
 8005324:	080054b3 	.word	0x080054b3
 8005328:	08005471 	.word	0x08005471
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	68b9      	ldr	r1, [r7, #8]
 8005332:	4618      	mov	r0, r3
 8005334:	f000 fa90 	bl	8005858 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	699a      	ldr	r2, [r3, #24]
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f042 0208 	orr.w	r2, r2, #8
 8005346:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	699a      	ldr	r2, [r3, #24]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f022 0204 	bic.w	r2, r2, #4
 8005356:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	6999      	ldr	r1, [r3, #24]
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	691a      	ldr	r2, [r3, #16]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	430a      	orrs	r2, r1
 8005368:	619a      	str	r2, [r3, #24]
      break;
 800536a:	e0a5      	b.n	80054b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	68b9      	ldr	r1, [r7, #8]
 8005372:	4618      	mov	r0, r3
 8005374:	f000 fb00 	bl	8005978 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	699a      	ldr	r2, [r3, #24]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005386:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	699a      	ldr	r2, [r3, #24]
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005396:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	6999      	ldr	r1, [r3, #24]
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	691b      	ldr	r3, [r3, #16]
 80053a2:	021a      	lsls	r2, r3, #8
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	430a      	orrs	r2, r1
 80053aa:	619a      	str	r2, [r3, #24]
      break;
 80053ac:	e084      	b.n	80054b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	68b9      	ldr	r1, [r7, #8]
 80053b4:	4618      	mov	r0, r3
 80053b6:	f000 fb69 	bl	8005a8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	69da      	ldr	r2, [r3, #28]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f042 0208 	orr.w	r2, r2, #8
 80053c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	69da      	ldr	r2, [r3, #28]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f022 0204 	bic.w	r2, r2, #4
 80053d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	69d9      	ldr	r1, [r3, #28]
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	691a      	ldr	r2, [r3, #16]
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	430a      	orrs	r2, r1
 80053ea:	61da      	str	r2, [r3, #28]
      break;
 80053ec:	e064      	b.n	80054b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	68b9      	ldr	r1, [r7, #8]
 80053f4:	4618      	mov	r0, r3
 80053f6:	f000 fbd1 	bl	8005b9c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	69da      	ldr	r2, [r3, #28]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005408:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	69da      	ldr	r2, [r3, #28]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005418:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	69d9      	ldr	r1, [r3, #28]
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	691b      	ldr	r3, [r3, #16]
 8005424:	021a      	lsls	r2, r3, #8
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	430a      	orrs	r2, r1
 800542c:	61da      	str	r2, [r3, #28]
      break;
 800542e:	e043      	b.n	80054b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	68b9      	ldr	r1, [r7, #8]
 8005436:	4618      	mov	r0, r3
 8005438:	f000 fc1a 	bl	8005c70 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f042 0208 	orr.w	r2, r2, #8
 800544a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f022 0204 	bic.w	r2, r2, #4
 800545a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	691a      	ldr	r2, [r3, #16]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	430a      	orrs	r2, r1
 800546c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800546e:	e023      	b.n	80054b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	68b9      	ldr	r1, [r7, #8]
 8005476:	4618      	mov	r0, r3
 8005478:	f000 fc5e 	bl	8005d38 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800548a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800549a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	691b      	ldr	r3, [r3, #16]
 80054a6:	021a      	lsls	r2, r3, #8
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	430a      	orrs	r2, r1
 80054ae:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80054b0:	e002      	b.n	80054b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	75fb      	strb	r3, [r7, #23]
      break;
 80054b6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2200      	movs	r2, #0
 80054bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80054c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3718      	adds	r7, #24
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
 80054ca:	bf00      	nop

080054cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b084      	sub	sp, #16
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054d6:	2300      	movs	r3, #0
 80054d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d101      	bne.n	80054e8 <HAL_TIM_ConfigClockSource+0x1c>
 80054e4:	2302      	movs	r3, #2
 80054e6:	e0dc      	b.n	80056a2 <HAL_TIM_ConfigClockSource+0x1d6>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2202      	movs	r2, #2
 80054f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005500:	68ba      	ldr	r2, [r7, #8]
 8005502:	4b6a      	ldr	r3, [pc, #424]	; (80056ac <HAL_TIM_ConfigClockSource+0x1e0>)
 8005504:	4013      	ands	r3, r2
 8005506:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800550e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	68ba      	ldr	r2, [r7, #8]
 8005516:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a64      	ldr	r2, [pc, #400]	; (80056b0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800551e:	4293      	cmp	r3, r2
 8005520:	f000 80a9 	beq.w	8005676 <HAL_TIM_ConfigClockSource+0x1aa>
 8005524:	4a62      	ldr	r2, [pc, #392]	; (80056b0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005526:	4293      	cmp	r3, r2
 8005528:	f200 80ae 	bhi.w	8005688 <HAL_TIM_ConfigClockSource+0x1bc>
 800552c:	4a61      	ldr	r2, [pc, #388]	; (80056b4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800552e:	4293      	cmp	r3, r2
 8005530:	f000 80a1 	beq.w	8005676 <HAL_TIM_ConfigClockSource+0x1aa>
 8005534:	4a5f      	ldr	r2, [pc, #380]	; (80056b4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005536:	4293      	cmp	r3, r2
 8005538:	f200 80a6 	bhi.w	8005688 <HAL_TIM_ConfigClockSource+0x1bc>
 800553c:	4a5e      	ldr	r2, [pc, #376]	; (80056b8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800553e:	4293      	cmp	r3, r2
 8005540:	f000 8099 	beq.w	8005676 <HAL_TIM_ConfigClockSource+0x1aa>
 8005544:	4a5c      	ldr	r2, [pc, #368]	; (80056b8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005546:	4293      	cmp	r3, r2
 8005548:	f200 809e 	bhi.w	8005688 <HAL_TIM_ConfigClockSource+0x1bc>
 800554c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005550:	f000 8091 	beq.w	8005676 <HAL_TIM_ConfigClockSource+0x1aa>
 8005554:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005558:	f200 8096 	bhi.w	8005688 <HAL_TIM_ConfigClockSource+0x1bc>
 800555c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005560:	f000 8089 	beq.w	8005676 <HAL_TIM_ConfigClockSource+0x1aa>
 8005564:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005568:	f200 808e 	bhi.w	8005688 <HAL_TIM_ConfigClockSource+0x1bc>
 800556c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005570:	d03e      	beq.n	80055f0 <HAL_TIM_ConfigClockSource+0x124>
 8005572:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005576:	f200 8087 	bhi.w	8005688 <HAL_TIM_ConfigClockSource+0x1bc>
 800557a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800557e:	f000 8086 	beq.w	800568e <HAL_TIM_ConfigClockSource+0x1c2>
 8005582:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005586:	d87f      	bhi.n	8005688 <HAL_TIM_ConfigClockSource+0x1bc>
 8005588:	2b70      	cmp	r3, #112	; 0x70
 800558a:	d01a      	beq.n	80055c2 <HAL_TIM_ConfigClockSource+0xf6>
 800558c:	2b70      	cmp	r3, #112	; 0x70
 800558e:	d87b      	bhi.n	8005688 <HAL_TIM_ConfigClockSource+0x1bc>
 8005590:	2b60      	cmp	r3, #96	; 0x60
 8005592:	d050      	beq.n	8005636 <HAL_TIM_ConfigClockSource+0x16a>
 8005594:	2b60      	cmp	r3, #96	; 0x60
 8005596:	d877      	bhi.n	8005688 <HAL_TIM_ConfigClockSource+0x1bc>
 8005598:	2b50      	cmp	r3, #80	; 0x50
 800559a:	d03c      	beq.n	8005616 <HAL_TIM_ConfigClockSource+0x14a>
 800559c:	2b50      	cmp	r3, #80	; 0x50
 800559e:	d873      	bhi.n	8005688 <HAL_TIM_ConfigClockSource+0x1bc>
 80055a0:	2b40      	cmp	r3, #64	; 0x40
 80055a2:	d058      	beq.n	8005656 <HAL_TIM_ConfigClockSource+0x18a>
 80055a4:	2b40      	cmp	r3, #64	; 0x40
 80055a6:	d86f      	bhi.n	8005688 <HAL_TIM_ConfigClockSource+0x1bc>
 80055a8:	2b30      	cmp	r3, #48	; 0x30
 80055aa:	d064      	beq.n	8005676 <HAL_TIM_ConfigClockSource+0x1aa>
 80055ac:	2b30      	cmp	r3, #48	; 0x30
 80055ae:	d86b      	bhi.n	8005688 <HAL_TIM_ConfigClockSource+0x1bc>
 80055b0:	2b20      	cmp	r3, #32
 80055b2:	d060      	beq.n	8005676 <HAL_TIM_ConfigClockSource+0x1aa>
 80055b4:	2b20      	cmp	r3, #32
 80055b6:	d867      	bhi.n	8005688 <HAL_TIM_ConfigClockSource+0x1bc>
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d05c      	beq.n	8005676 <HAL_TIM_ConfigClockSource+0x1aa>
 80055bc:	2b10      	cmp	r3, #16
 80055be:	d05a      	beq.n	8005676 <HAL_TIM_ConfigClockSource+0x1aa>
 80055c0:	e062      	b.n	8005688 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6818      	ldr	r0, [r3, #0]
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	6899      	ldr	r1, [r3, #8]
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	685a      	ldr	r2, [r3, #4]
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	f000 fdcb 	bl	800616c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80055e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	68ba      	ldr	r2, [r7, #8]
 80055ec:	609a      	str	r2, [r3, #8]
      break;
 80055ee:	e04f      	b.n	8005690 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6818      	ldr	r0, [r3, #0]
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	6899      	ldr	r1, [r3, #8]
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	685a      	ldr	r2, [r3, #4]
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	f000 fdb4 	bl	800616c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	689a      	ldr	r2, [r3, #8]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005612:	609a      	str	r2, [r3, #8]
      break;
 8005614:	e03c      	b.n	8005690 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6818      	ldr	r0, [r3, #0]
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	6859      	ldr	r1, [r3, #4]
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	68db      	ldr	r3, [r3, #12]
 8005622:	461a      	mov	r2, r3
 8005624:	f000 fc6e 	bl	8005f04 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	2150      	movs	r1, #80	; 0x50
 800562e:	4618      	mov	r0, r3
 8005630:	f000 fd7e 	bl	8006130 <TIM_ITRx_SetConfig>
      break;
 8005634:	e02c      	b.n	8005690 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6818      	ldr	r0, [r3, #0]
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	6859      	ldr	r1, [r3, #4]
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	68db      	ldr	r3, [r3, #12]
 8005642:	461a      	mov	r2, r3
 8005644:	f000 fcca 	bl	8005fdc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	2160      	movs	r1, #96	; 0x60
 800564e:	4618      	mov	r0, r3
 8005650:	f000 fd6e 	bl	8006130 <TIM_ITRx_SetConfig>
      break;
 8005654:	e01c      	b.n	8005690 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6818      	ldr	r0, [r3, #0]
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	6859      	ldr	r1, [r3, #4]
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	461a      	mov	r2, r3
 8005664:	f000 fc4e 	bl	8005f04 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	2140      	movs	r1, #64	; 0x40
 800566e:	4618      	mov	r0, r3
 8005670:	f000 fd5e 	bl	8006130 <TIM_ITRx_SetConfig>
      break;
 8005674:	e00c      	b.n	8005690 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4619      	mov	r1, r3
 8005680:	4610      	mov	r0, r2
 8005682:	f000 fd55 	bl	8006130 <TIM_ITRx_SetConfig>
      break;
 8005686:	e003      	b.n	8005690 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	73fb      	strb	r3, [r7, #15]
      break;
 800568c:	e000      	b.n	8005690 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800568e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2201      	movs	r2, #1
 8005694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80056a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3710      	adds	r7, #16
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}
 80056aa:	bf00      	nop
 80056ac:	ffceff88 	.word	0xffceff88
 80056b0:	00100040 	.word	0x00100040
 80056b4:	00100030 	.word	0x00100030
 80056b8:	00100020 	.word	0x00100020

080056bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056bc:	b480      	push	{r7}
 80056be:	b083      	sub	sp, #12
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80056c4:	bf00      	nop
 80056c6:	370c      	adds	r7, #12
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr

080056d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b083      	sub	sp, #12
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80056d8:	bf00      	nop
 80056da:	370c      	adds	r7, #12
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr

080056e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b083      	sub	sp, #12
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80056ec:	bf00      	nop
 80056ee:	370c      	adds	r7, #12
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr

080056f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b083      	sub	sp, #12
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005700:	bf00      	nop
 8005702:	370c      	adds	r7, #12
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr

0800570c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800570c:	b480      	push	{r7}
 800570e:	b085      	sub	sp, #20
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4a44      	ldr	r2, [pc, #272]	; (8005830 <TIM_Base_SetConfig+0x124>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d013      	beq.n	800574c <TIM_Base_SetConfig+0x40>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800572a:	d00f      	beq.n	800574c <TIM_Base_SetConfig+0x40>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	4a41      	ldr	r2, [pc, #260]	; (8005834 <TIM_Base_SetConfig+0x128>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d00b      	beq.n	800574c <TIM_Base_SetConfig+0x40>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	4a40      	ldr	r2, [pc, #256]	; (8005838 <TIM_Base_SetConfig+0x12c>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d007      	beq.n	800574c <TIM_Base_SetConfig+0x40>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	4a3f      	ldr	r2, [pc, #252]	; (800583c <TIM_Base_SetConfig+0x130>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d003      	beq.n	800574c <TIM_Base_SetConfig+0x40>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	4a3e      	ldr	r2, [pc, #248]	; (8005840 <TIM_Base_SetConfig+0x134>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d108      	bne.n	800575e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005752:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	68fa      	ldr	r2, [r7, #12]
 800575a:	4313      	orrs	r3, r2
 800575c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4a33      	ldr	r2, [pc, #204]	; (8005830 <TIM_Base_SetConfig+0x124>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d027      	beq.n	80057b6 <TIM_Base_SetConfig+0xaa>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800576c:	d023      	beq.n	80057b6 <TIM_Base_SetConfig+0xaa>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4a30      	ldr	r2, [pc, #192]	; (8005834 <TIM_Base_SetConfig+0x128>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d01f      	beq.n	80057b6 <TIM_Base_SetConfig+0xaa>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	4a2f      	ldr	r2, [pc, #188]	; (8005838 <TIM_Base_SetConfig+0x12c>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d01b      	beq.n	80057b6 <TIM_Base_SetConfig+0xaa>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4a2e      	ldr	r2, [pc, #184]	; (800583c <TIM_Base_SetConfig+0x130>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d017      	beq.n	80057b6 <TIM_Base_SetConfig+0xaa>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	4a2d      	ldr	r2, [pc, #180]	; (8005840 <TIM_Base_SetConfig+0x134>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d013      	beq.n	80057b6 <TIM_Base_SetConfig+0xaa>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	4a2c      	ldr	r2, [pc, #176]	; (8005844 <TIM_Base_SetConfig+0x138>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d00f      	beq.n	80057b6 <TIM_Base_SetConfig+0xaa>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	4a2b      	ldr	r2, [pc, #172]	; (8005848 <TIM_Base_SetConfig+0x13c>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d00b      	beq.n	80057b6 <TIM_Base_SetConfig+0xaa>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4a2a      	ldr	r2, [pc, #168]	; (800584c <TIM_Base_SetConfig+0x140>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d007      	beq.n	80057b6 <TIM_Base_SetConfig+0xaa>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	4a29      	ldr	r2, [pc, #164]	; (8005850 <TIM_Base_SetConfig+0x144>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d003      	beq.n	80057b6 <TIM_Base_SetConfig+0xaa>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4a28      	ldr	r2, [pc, #160]	; (8005854 <TIM_Base_SetConfig+0x148>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d108      	bne.n	80057c8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	68db      	ldr	r3, [r3, #12]
 80057c2:	68fa      	ldr	r2, [r7, #12]
 80057c4:	4313      	orrs	r3, r2
 80057c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	695b      	ldr	r3, [r3, #20]
 80057d2:	4313      	orrs	r3, r2
 80057d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	68fa      	ldr	r2, [r7, #12]
 80057da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	689a      	ldr	r2, [r3, #8]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	4a10      	ldr	r2, [pc, #64]	; (8005830 <TIM_Base_SetConfig+0x124>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d00f      	beq.n	8005814 <TIM_Base_SetConfig+0x108>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	4a12      	ldr	r2, [pc, #72]	; (8005840 <TIM_Base_SetConfig+0x134>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d00b      	beq.n	8005814 <TIM_Base_SetConfig+0x108>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	4a11      	ldr	r2, [pc, #68]	; (8005844 <TIM_Base_SetConfig+0x138>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d007      	beq.n	8005814 <TIM_Base_SetConfig+0x108>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	4a10      	ldr	r2, [pc, #64]	; (8005848 <TIM_Base_SetConfig+0x13c>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d003      	beq.n	8005814 <TIM_Base_SetConfig+0x108>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	4a0f      	ldr	r2, [pc, #60]	; (800584c <TIM_Base_SetConfig+0x140>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d103      	bne.n	800581c <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	691a      	ldr	r2, [r3, #16]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	615a      	str	r2, [r3, #20]
}
 8005822:	bf00      	nop
 8005824:	3714      	adds	r7, #20
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr
 800582e:	bf00      	nop
 8005830:	40010000 	.word	0x40010000
 8005834:	40000400 	.word	0x40000400
 8005838:	40000800 	.word	0x40000800
 800583c:	40000c00 	.word	0x40000c00
 8005840:	40010400 	.word	0x40010400
 8005844:	40014000 	.word	0x40014000
 8005848:	40014400 	.word	0x40014400
 800584c:	40014800 	.word	0x40014800
 8005850:	4000e000 	.word	0x4000e000
 8005854:	4000e400 	.word	0x4000e400

08005858 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005858:	b480      	push	{r7}
 800585a:	b087      	sub	sp, #28
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6a1b      	ldr	r3, [r3, #32]
 8005866:	f023 0201 	bic.w	r2, r3, #1
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6a1b      	ldr	r3, [r3, #32]
 8005872:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	699b      	ldr	r3, [r3, #24]
 800587e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005880:	68fa      	ldr	r2, [r7, #12]
 8005882:	4b37      	ldr	r3, [pc, #220]	; (8005960 <TIM_OC1_SetConfig+0x108>)
 8005884:	4013      	ands	r3, r2
 8005886:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f023 0303 	bic.w	r3, r3, #3
 800588e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	68fa      	ldr	r2, [r7, #12]
 8005896:	4313      	orrs	r3, r2
 8005898:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	f023 0302 	bic.w	r3, r3, #2
 80058a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	697a      	ldr	r2, [r7, #20]
 80058a8:	4313      	orrs	r3, r2
 80058aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	4a2d      	ldr	r2, [pc, #180]	; (8005964 <TIM_OC1_SetConfig+0x10c>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d00f      	beq.n	80058d4 <TIM_OC1_SetConfig+0x7c>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	4a2c      	ldr	r2, [pc, #176]	; (8005968 <TIM_OC1_SetConfig+0x110>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d00b      	beq.n	80058d4 <TIM_OC1_SetConfig+0x7c>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	4a2b      	ldr	r2, [pc, #172]	; (800596c <TIM_OC1_SetConfig+0x114>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d007      	beq.n	80058d4 <TIM_OC1_SetConfig+0x7c>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4a2a      	ldr	r2, [pc, #168]	; (8005970 <TIM_OC1_SetConfig+0x118>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d003      	beq.n	80058d4 <TIM_OC1_SetConfig+0x7c>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	4a29      	ldr	r2, [pc, #164]	; (8005974 <TIM_OC1_SetConfig+0x11c>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d10c      	bne.n	80058ee <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	f023 0308 	bic.w	r3, r3, #8
 80058da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	697a      	ldr	r2, [r7, #20]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	f023 0304 	bic.w	r3, r3, #4
 80058ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a1c      	ldr	r2, [pc, #112]	; (8005964 <TIM_OC1_SetConfig+0x10c>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d00f      	beq.n	8005916 <TIM_OC1_SetConfig+0xbe>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a1b      	ldr	r2, [pc, #108]	; (8005968 <TIM_OC1_SetConfig+0x110>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d00b      	beq.n	8005916 <TIM_OC1_SetConfig+0xbe>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a1a      	ldr	r2, [pc, #104]	; (800596c <TIM_OC1_SetConfig+0x114>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d007      	beq.n	8005916 <TIM_OC1_SetConfig+0xbe>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	4a19      	ldr	r2, [pc, #100]	; (8005970 <TIM_OC1_SetConfig+0x118>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d003      	beq.n	8005916 <TIM_OC1_SetConfig+0xbe>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a18      	ldr	r2, [pc, #96]	; (8005974 <TIM_OC1_SetConfig+0x11c>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d111      	bne.n	800593a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800591c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005924:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	695b      	ldr	r3, [r3, #20]
 800592a:	693a      	ldr	r2, [r7, #16]
 800592c:	4313      	orrs	r3, r2
 800592e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	699b      	ldr	r3, [r3, #24]
 8005934:	693a      	ldr	r2, [r7, #16]
 8005936:	4313      	orrs	r3, r2
 8005938:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	693a      	ldr	r2, [r7, #16]
 800593e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	68fa      	ldr	r2, [r7, #12]
 8005944:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	685a      	ldr	r2, [r3, #4]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	697a      	ldr	r2, [r7, #20]
 8005952:	621a      	str	r2, [r3, #32]
}
 8005954:	bf00      	nop
 8005956:	371c      	adds	r7, #28
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr
 8005960:	fffeff8f 	.word	0xfffeff8f
 8005964:	40010000 	.word	0x40010000
 8005968:	40010400 	.word	0x40010400
 800596c:	40014000 	.word	0x40014000
 8005970:	40014400 	.word	0x40014400
 8005974:	40014800 	.word	0x40014800

08005978 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005978:	b480      	push	{r7}
 800597a:	b087      	sub	sp, #28
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a1b      	ldr	r3, [r3, #32]
 8005986:	f023 0210 	bic.w	r2, r3, #16
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6a1b      	ldr	r3, [r3, #32]
 8005992:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	699b      	ldr	r3, [r3, #24]
 800599e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80059a0:	68fa      	ldr	r2, [r7, #12]
 80059a2:	4b34      	ldr	r3, [pc, #208]	; (8005a74 <TIM_OC2_SetConfig+0xfc>)
 80059a4:	4013      	ands	r3, r2
 80059a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	021b      	lsls	r3, r3, #8
 80059b6:	68fa      	ldr	r2, [r7, #12]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	f023 0320 	bic.w	r3, r3, #32
 80059c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	011b      	lsls	r3, r3, #4
 80059ca:	697a      	ldr	r2, [r7, #20]
 80059cc:	4313      	orrs	r3, r2
 80059ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	4a29      	ldr	r2, [pc, #164]	; (8005a78 <TIM_OC2_SetConfig+0x100>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d003      	beq.n	80059e0 <TIM_OC2_SetConfig+0x68>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	4a28      	ldr	r2, [pc, #160]	; (8005a7c <TIM_OC2_SetConfig+0x104>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d10d      	bne.n	80059fc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	011b      	lsls	r3, r3, #4
 80059ee:	697a      	ldr	r2, [r7, #20]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	4a1e      	ldr	r2, [pc, #120]	; (8005a78 <TIM_OC2_SetConfig+0x100>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d00f      	beq.n	8005a24 <TIM_OC2_SetConfig+0xac>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	4a1d      	ldr	r2, [pc, #116]	; (8005a7c <TIM_OC2_SetConfig+0x104>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d00b      	beq.n	8005a24 <TIM_OC2_SetConfig+0xac>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	4a1c      	ldr	r2, [pc, #112]	; (8005a80 <TIM_OC2_SetConfig+0x108>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d007      	beq.n	8005a24 <TIM_OC2_SetConfig+0xac>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	4a1b      	ldr	r2, [pc, #108]	; (8005a84 <TIM_OC2_SetConfig+0x10c>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d003      	beq.n	8005a24 <TIM_OC2_SetConfig+0xac>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	4a1a      	ldr	r2, [pc, #104]	; (8005a88 <TIM_OC2_SetConfig+0x110>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d113      	bne.n	8005a4c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	695b      	ldr	r3, [r3, #20]
 8005a38:	009b      	lsls	r3, r3, #2
 8005a3a:	693a      	ldr	r2, [r7, #16]
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	699b      	ldr	r3, [r3, #24]
 8005a44:	009b      	lsls	r3, r3, #2
 8005a46:	693a      	ldr	r2, [r7, #16]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	693a      	ldr	r2, [r7, #16]
 8005a50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	68fa      	ldr	r2, [r7, #12]
 8005a56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	685a      	ldr	r2, [r3, #4]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	697a      	ldr	r2, [r7, #20]
 8005a64:	621a      	str	r2, [r3, #32]
}
 8005a66:	bf00      	nop
 8005a68:	371c      	adds	r7, #28
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr
 8005a72:	bf00      	nop
 8005a74:	feff8fff 	.word	0xfeff8fff
 8005a78:	40010000 	.word	0x40010000
 8005a7c:	40010400 	.word	0x40010400
 8005a80:	40014000 	.word	0x40014000
 8005a84:	40014400 	.word	0x40014400
 8005a88:	40014800 	.word	0x40014800

08005a8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b087      	sub	sp, #28
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a1b      	ldr	r3, [r3, #32]
 8005a9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6a1b      	ldr	r3, [r3, #32]
 8005aa6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	69db      	ldr	r3, [r3, #28]
 8005ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ab4:	68fa      	ldr	r2, [r7, #12]
 8005ab6:	4b33      	ldr	r3, [pc, #204]	; (8005b84 <TIM_OC3_SetConfig+0xf8>)
 8005ab8:	4013      	ands	r3, r2
 8005aba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f023 0303 	bic.w	r3, r3, #3
 8005ac2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	68fa      	ldr	r2, [r7, #12]
 8005aca:	4313      	orrs	r3, r2
 8005acc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ad4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	021b      	lsls	r3, r3, #8
 8005adc:	697a      	ldr	r2, [r7, #20]
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	4a28      	ldr	r2, [pc, #160]	; (8005b88 <TIM_OC3_SetConfig+0xfc>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d003      	beq.n	8005af2 <TIM_OC3_SetConfig+0x66>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	4a27      	ldr	r2, [pc, #156]	; (8005b8c <TIM_OC3_SetConfig+0x100>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d10d      	bne.n	8005b0e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005af8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	68db      	ldr	r3, [r3, #12]
 8005afe:	021b      	lsls	r3, r3, #8
 8005b00:	697a      	ldr	r2, [r7, #20]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	4a1d      	ldr	r2, [pc, #116]	; (8005b88 <TIM_OC3_SetConfig+0xfc>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d00f      	beq.n	8005b36 <TIM_OC3_SetConfig+0xaa>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	4a1c      	ldr	r2, [pc, #112]	; (8005b8c <TIM_OC3_SetConfig+0x100>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d00b      	beq.n	8005b36 <TIM_OC3_SetConfig+0xaa>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4a1b      	ldr	r2, [pc, #108]	; (8005b90 <TIM_OC3_SetConfig+0x104>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d007      	beq.n	8005b36 <TIM_OC3_SetConfig+0xaa>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	4a1a      	ldr	r2, [pc, #104]	; (8005b94 <TIM_OC3_SetConfig+0x108>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d003      	beq.n	8005b36 <TIM_OC3_SetConfig+0xaa>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a19      	ldr	r2, [pc, #100]	; (8005b98 <TIM_OC3_SetConfig+0x10c>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d113      	bne.n	8005b5e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	695b      	ldr	r3, [r3, #20]
 8005b4a:	011b      	lsls	r3, r3, #4
 8005b4c:	693a      	ldr	r2, [r7, #16]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	699b      	ldr	r3, [r3, #24]
 8005b56:	011b      	lsls	r3, r3, #4
 8005b58:	693a      	ldr	r2, [r7, #16]
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	693a      	ldr	r2, [r7, #16]
 8005b62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	68fa      	ldr	r2, [r7, #12]
 8005b68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	685a      	ldr	r2, [r3, #4]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	697a      	ldr	r2, [r7, #20]
 8005b76:	621a      	str	r2, [r3, #32]
}
 8005b78:	bf00      	nop
 8005b7a:	371c      	adds	r7, #28
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr
 8005b84:	fffeff8f 	.word	0xfffeff8f
 8005b88:	40010000 	.word	0x40010000
 8005b8c:	40010400 	.word	0x40010400
 8005b90:	40014000 	.word	0x40014000
 8005b94:	40014400 	.word	0x40014400
 8005b98:	40014800 	.word	0x40014800

08005b9c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b087      	sub	sp, #28
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a1b      	ldr	r3, [r3, #32]
 8005baa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6a1b      	ldr	r3, [r3, #32]
 8005bb6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	69db      	ldr	r3, [r3, #28]
 8005bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005bc4:	68fa      	ldr	r2, [r7, #12]
 8005bc6:	4b24      	ldr	r3, [pc, #144]	; (8005c58 <TIM_OC4_SetConfig+0xbc>)
 8005bc8:	4013      	ands	r3, r2
 8005bca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	021b      	lsls	r3, r3, #8
 8005bda:	68fa      	ldr	r2, [r7, #12]
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005be6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	031b      	lsls	r3, r3, #12
 8005bee:	693a      	ldr	r2, [r7, #16]
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	4a19      	ldr	r2, [pc, #100]	; (8005c5c <TIM_OC4_SetConfig+0xc0>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d00f      	beq.n	8005c1c <TIM_OC4_SetConfig+0x80>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	4a18      	ldr	r2, [pc, #96]	; (8005c60 <TIM_OC4_SetConfig+0xc4>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d00b      	beq.n	8005c1c <TIM_OC4_SetConfig+0x80>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	4a17      	ldr	r2, [pc, #92]	; (8005c64 <TIM_OC4_SetConfig+0xc8>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d007      	beq.n	8005c1c <TIM_OC4_SetConfig+0x80>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	4a16      	ldr	r2, [pc, #88]	; (8005c68 <TIM_OC4_SetConfig+0xcc>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d003      	beq.n	8005c1c <TIM_OC4_SetConfig+0x80>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	4a15      	ldr	r2, [pc, #84]	; (8005c6c <TIM_OC4_SetConfig+0xd0>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d109      	bne.n	8005c30 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c22:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	695b      	ldr	r3, [r3, #20]
 8005c28:	019b      	lsls	r3, r3, #6
 8005c2a:	697a      	ldr	r2, [r7, #20]
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	697a      	ldr	r2, [r7, #20]
 8005c34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	68fa      	ldr	r2, [r7, #12]
 8005c3a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	685a      	ldr	r2, [r3, #4]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	693a      	ldr	r2, [r7, #16]
 8005c48:	621a      	str	r2, [r3, #32]
}
 8005c4a:	bf00      	nop
 8005c4c:	371c      	adds	r7, #28
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr
 8005c56:	bf00      	nop
 8005c58:	feff8fff 	.word	0xfeff8fff
 8005c5c:	40010000 	.word	0x40010000
 8005c60:	40010400 	.word	0x40010400
 8005c64:	40014000 	.word	0x40014000
 8005c68:	40014400 	.word	0x40014400
 8005c6c:	40014800 	.word	0x40014800

08005c70 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b087      	sub	sp, #28
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6a1b      	ldr	r3, [r3, #32]
 8005c7e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6a1b      	ldr	r3, [r3, #32]
 8005c8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005c98:	68fa      	ldr	r2, [r7, #12]
 8005c9a:	4b21      	ldr	r3, [pc, #132]	; (8005d20 <TIM_OC5_SetConfig+0xb0>)
 8005c9c:	4013      	ands	r3, r2
 8005c9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	68fa      	ldr	r2, [r7, #12]
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005cb0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	041b      	lsls	r3, r3, #16
 8005cb8:	693a      	ldr	r2, [r7, #16]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	4a18      	ldr	r2, [pc, #96]	; (8005d24 <TIM_OC5_SetConfig+0xb4>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d00f      	beq.n	8005ce6 <TIM_OC5_SetConfig+0x76>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4a17      	ldr	r2, [pc, #92]	; (8005d28 <TIM_OC5_SetConfig+0xb8>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d00b      	beq.n	8005ce6 <TIM_OC5_SetConfig+0x76>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	4a16      	ldr	r2, [pc, #88]	; (8005d2c <TIM_OC5_SetConfig+0xbc>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d007      	beq.n	8005ce6 <TIM_OC5_SetConfig+0x76>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4a15      	ldr	r2, [pc, #84]	; (8005d30 <TIM_OC5_SetConfig+0xc0>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d003      	beq.n	8005ce6 <TIM_OC5_SetConfig+0x76>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	4a14      	ldr	r2, [pc, #80]	; (8005d34 <TIM_OC5_SetConfig+0xc4>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d109      	bne.n	8005cfa <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	695b      	ldr	r3, [r3, #20]
 8005cf2:	021b      	lsls	r3, r3, #8
 8005cf4:	697a      	ldr	r2, [r7, #20]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	697a      	ldr	r2, [r7, #20]
 8005cfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	68fa      	ldr	r2, [r7, #12]
 8005d04:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	685a      	ldr	r2, [r3, #4]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	693a      	ldr	r2, [r7, #16]
 8005d12:	621a      	str	r2, [r3, #32]
}
 8005d14:	bf00      	nop
 8005d16:	371c      	adds	r7, #28
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr
 8005d20:	fffeff8f 	.word	0xfffeff8f
 8005d24:	40010000 	.word	0x40010000
 8005d28:	40010400 	.word	0x40010400
 8005d2c:	40014000 	.word	0x40014000
 8005d30:	40014400 	.word	0x40014400
 8005d34:	40014800 	.word	0x40014800

08005d38 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b087      	sub	sp, #28
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6a1b      	ldr	r3, [r3, #32]
 8005d46:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6a1b      	ldr	r3, [r3, #32]
 8005d52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005d60:	68fa      	ldr	r2, [r7, #12]
 8005d62:	4b22      	ldr	r3, [pc, #136]	; (8005dec <TIM_OC6_SetConfig+0xb4>)
 8005d64:	4013      	ands	r3, r2
 8005d66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	021b      	lsls	r3, r3, #8
 8005d6e:	68fa      	ldr	r2, [r7, #12]
 8005d70:	4313      	orrs	r3, r2
 8005d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005d7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	051b      	lsls	r3, r3, #20
 8005d82:	693a      	ldr	r2, [r7, #16]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	4a19      	ldr	r2, [pc, #100]	; (8005df0 <TIM_OC6_SetConfig+0xb8>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d00f      	beq.n	8005db0 <TIM_OC6_SetConfig+0x78>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	4a18      	ldr	r2, [pc, #96]	; (8005df4 <TIM_OC6_SetConfig+0xbc>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d00b      	beq.n	8005db0 <TIM_OC6_SetConfig+0x78>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	4a17      	ldr	r2, [pc, #92]	; (8005df8 <TIM_OC6_SetConfig+0xc0>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d007      	beq.n	8005db0 <TIM_OC6_SetConfig+0x78>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	4a16      	ldr	r2, [pc, #88]	; (8005dfc <TIM_OC6_SetConfig+0xc4>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d003      	beq.n	8005db0 <TIM_OC6_SetConfig+0x78>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	4a15      	ldr	r2, [pc, #84]	; (8005e00 <TIM_OC6_SetConfig+0xc8>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d109      	bne.n	8005dc4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005db6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	695b      	ldr	r3, [r3, #20]
 8005dbc:	029b      	lsls	r3, r3, #10
 8005dbe:	697a      	ldr	r2, [r7, #20]
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	697a      	ldr	r2, [r7, #20]
 8005dc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	68fa      	ldr	r2, [r7, #12]
 8005dce:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	685a      	ldr	r2, [r3, #4]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	693a      	ldr	r2, [r7, #16]
 8005ddc:	621a      	str	r2, [r3, #32]
}
 8005dde:	bf00      	nop
 8005de0:	371c      	adds	r7, #28
 8005de2:	46bd      	mov	sp, r7
 8005de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de8:	4770      	bx	lr
 8005dea:	bf00      	nop
 8005dec:	feff8fff 	.word	0xfeff8fff
 8005df0:	40010000 	.word	0x40010000
 8005df4:	40010400 	.word	0x40010400
 8005df8:	40014000 	.word	0x40014000
 8005dfc:	40014400 	.word	0x40014400
 8005e00:	40014800 	.word	0x40014800

08005e04 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b087      	sub	sp, #28
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	60f8      	str	r0, [r7, #12]
 8005e0c:	60b9      	str	r1, [r7, #8]
 8005e0e:	607a      	str	r2, [r7, #4]
 8005e10:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	6a1b      	ldr	r3, [r3, #32]
 8005e16:	f023 0201 	bic.w	r2, r3, #1
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	699b      	ldr	r3, [r3, #24]
 8005e22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	6a1b      	ldr	r3, [r3, #32]
 8005e28:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	4a2c      	ldr	r2, [pc, #176]	; (8005ee0 <TIM_TI1_SetConfig+0xdc>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d023      	beq.n	8005e7a <TIM_TI1_SetConfig+0x76>
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e38:	d01f      	beq.n	8005e7a <TIM_TI1_SetConfig+0x76>
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	4a29      	ldr	r2, [pc, #164]	; (8005ee4 <TIM_TI1_SetConfig+0xe0>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d01b      	beq.n	8005e7a <TIM_TI1_SetConfig+0x76>
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	4a28      	ldr	r2, [pc, #160]	; (8005ee8 <TIM_TI1_SetConfig+0xe4>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d017      	beq.n	8005e7a <TIM_TI1_SetConfig+0x76>
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	4a27      	ldr	r2, [pc, #156]	; (8005eec <TIM_TI1_SetConfig+0xe8>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d013      	beq.n	8005e7a <TIM_TI1_SetConfig+0x76>
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	4a26      	ldr	r2, [pc, #152]	; (8005ef0 <TIM_TI1_SetConfig+0xec>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d00f      	beq.n	8005e7a <TIM_TI1_SetConfig+0x76>
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	4a25      	ldr	r2, [pc, #148]	; (8005ef4 <TIM_TI1_SetConfig+0xf0>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d00b      	beq.n	8005e7a <TIM_TI1_SetConfig+0x76>
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	4a24      	ldr	r2, [pc, #144]	; (8005ef8 <TIM_TI1_SetConfig+0xf4>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d007      	beq.n	8005e7a <TIM_TI1_SetConfig+0x76>
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	4a23      	ldr	r2, [pc, #140]	; (8005efc <TIM_TI1_SetConfig+0xf8>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d003      	beq.n	8005e7a <TIM_TI1_SetConfig+0x76>
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	4a22      	ldr	r2, [pc, #136]	; (8005f00 <TIM_TI1_SetConfig+0xfc>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d101      	bne.n	8005e7e <TIM_TI1_SetConfig+0x7a>
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e000      	b.n	8005e80 <TIM_TI1_SetConfig+0x7c>
 8005e7e:	2300      	movs	r3, #0
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d008      	beq.n	8005e96 <TIM_TI1_SetConfig+0x92>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	f023 0303 	bic.w	r3, r3, #3
 8005e8a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005e8c:	697a      	ldr	r2, [r7, #20]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	4313      	orrs	r3, r2
 8005e92:	617b      	str	r3, [r7, #20]
 8005e94:	e003      	b.n	8005e9e <TIM_TI1_SetConfig+0x9a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	f043 0301 	orr.w	r3, r3, #1
 8005e9c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ea4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	011b      	lsls	r3, r3, #4
 8005eaa:	b2db      	uxtb	r3, r3
 8005eac:	697a      	ldr	r2, [r7, #20]
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	f023 030a 	bic.w	r3, r3, #10
 8005eb8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	f003 030a 	and.w	r3, r3, #10
 8005ec0:	693a      	ldr	r2, [r7, #16]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	697a      	ldr	r2, [r7, #20]
 8005eca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	693a      	ldr	r2, [r7, #16]
 8005ed0:	621a      	str	r2, [r3, #32]
}
 8005ed2:	bf00      	nop
 8005ed4:	371c      	adds	r7, #28
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr
 8005ede:	bf00      	nop
 8005ee0:	40010000 	.word	0x40010000
 8005ee4:	40000400 	.word	0x40000400
 8005ee8:	40000800 	.word	0x40000800
 8005eec:	40000c00 	.word	0x40000c00
 8005ef0:	40010400 	.word	0x40010400
 8005ef4:	40001800 	.word	0x40001800
 8005ef8:	40014000 	.word	0x40014000
 8005efc:	4000e000 	.word	0x4000e000
 8005f00:	4000e400 	.word	0x4000e400

08005f04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b087      	sub	sp, #28
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	60f8      	str	r0, [r7, #12]
 8005f0c:	60b9      	str	r1, [r7, #8]
 8005f0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	6a1b      	ldr	r3, [r3, #32]
 8005f14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	6a1b      	ldr	r3, [r3, #32]
 8005f1a:	f023 0201 	bic.w	r2, r3, #1
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	699b      	ldr	r3, [r3, #24]
 8005f26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	011b      	lsls	r3, r3, #4
 8005f34:	693a      	ldr	r2, [r7, #16]
 8005f36:	4313      	orrs	r3, r2
 8005f38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	f023 030a 	bic.w	r3, r3, #10
 8005f40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f42:	697a      	ldr	r2, [r7, #20]
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	4313      	orrs	r3, r2
 8005f48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	693a      	ldr	r2, [r7, #16]
 8005f4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	697a      	ldr	r2, [r7, #20]
 8005f54:	621a      	str	r2, [r3, #32]
}
 8005f56:	bf00      	nop
 8005f58:	371c      	adds	r7, #28
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr

08005f62 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005f62:	b480      	push	{r7}
 8005f64:	b087      	sub	sp, #28
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	60f8      	str	r0, [r7, #12]
 8005f6a:	60b9      	str	r1, [r7, #8]
 8005f6c:	607a      	str	r2, [r7, #4]
 8005f6e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	6a1b      	ldr	r3, [r3, #32]
 8005f74:	f023 0210 	bic.w	r2, r3, #16
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	699b      	ldr	r3, [r3, #24]
 8005f80:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	6a1b      	ldr	r3, [r3, #32]
 8005f86:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f8e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	021b      	lsls	r3, r3, #8
 8005f94:	697a      	ldr	r2, [r7, #20]
 8005f96:	4313      	orrs	r3, r2
 8005f98:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005fa0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	031b      	lsls	r3, r3, #12
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	697a      	ldr	r2, [r7, #20]
 8005faa:	4313      	orrs	r3, r2
 8005fac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005fb4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	011b      	lsls	r3, r3, #4
 8005fba:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005fbe:	693a      	ldr	r2, [r7, #16]
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	697a      	ldr	r2, [r7, #20]
 8005fc8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	693a      	ldr	r2, [r7, #16]
 8005fce:	621a      	str	r2, [r3, #32]
}
 8005fd0:	bf00      	nop
 8005fd2:	371c      	adds	r7, #28
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr

08005fdc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b087      	sub	sp, #28
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	60f8      	str	r0, [r7, #12]
 8005fe4:	60b9      	str	r1, [r7, #8]
 8005fe6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	6a1b      	ldr	r3, [r3, #32]
 8005fec:	f023 0210 	bic.w	r2, r3, #16
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	699b      	ldr	r3, [r3, #24]
 8005ff8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	6a1b      	ldr	r3, [r3, #32]
 8005ffe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006006:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	031b      	lsls	r3, r3, #12
 800600c:	697a      	ldr	r2, [r7, #20]
 800600e:	4313      	orrs	r3, r2
 8006010:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006018:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	011b      	lsls	r3, r3, #4
 800601e:	693a      	ldr	r2, [r7, #16]
 8006020:	4313      	orrs	r3, r2
 8006022:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	697a      	ldr	r2, [r7, #20]
 8006028:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	693a      	ldr	r2, [r7, #16]
 800602e:	621a      	str	r2, [r3, #32]
}
 8006030:	bf00      	nop
 8006032:	371c      	adds	r7, #28
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr

0800603c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800603c:	b480      	push	{r7}
 800603e:	b087      	sub	sp, #28
 8006040:	af00      	add	r7, sp, #0
 8006042:	60f8      	str	r0, [r7, #12]
 8006044:	60b9      	str	r1, [r7, #8]
 8006046:	607a      	str	r2, [r7, #4]
 8006048:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	6a1b      	ldr	r3, [r3, #32]
 800604e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	69db      	ldr	r3, [r3, #28]
 800605a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	6a1b      	ldr	r3, [r3, #32]
 8006060:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	f023 0303 	bic.w	r3, r3, #3
 8006068:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800606a:	697a      	ldr	r2, [r7, #20]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	4313      	orrs	r3, r2
 8006070:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006078:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	011b      	lsls	r3, r3, #4
 800607e:	b2db      	uxtb	r3, r3
 8006080:	697a      	ldr	r2, [r7, #20]
 8006082:	4313      	orrs	r3, r2
 8006084:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800608c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	021b      	lsls	r3, r3, #8
 8006092:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006096:	693a      	ldr	r2, [r7, #16]
 8006098:	4313      	orrs	r3, r2
 800609a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	697a      	ldr	r2, [r7, #20]
 80060a0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	693a      	ldr	r2, [r7, #16]
 80060a6:	621a      	str	r2, [r3, #32]
}
 80060a8:	bf00      	nop
 80060aa:	371c      	adds	r7, #28
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr

080060b4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b087      	sub	sp, #28
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	60f8      	str	r0, [r7, #12]
 80060bc:	60b9      	str	r1, [r7, #8]
 80060be:	607a      	str	r2, [r7, #4]
 80060c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	6a1b      	ldr	r3, [r3, #32]
 80060c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	69db      	ldr	r3, [r3, #28]
 80060d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	6a1b      	ldr	r3, [r3, #32]
 80060d8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060e0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	021b      	lsls	r3, r3, #8
 80060e6:	697a      	ldr	r2, [r7, #20]
 80060e8:	4313      	orrs	r3, r2
 80060ea:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80060f2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	031b      	lsls	r3, r3, #12
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	697a      	ldr	r2, [r7, #20]
 80060fc:	4313      	orrs	r3, r2
 80060fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006106:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	031b      	lsls	r3, r3, #12
 800610c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006110:	693a      	ldr	r2, [r7, #16]
 8006112:	4313      	orrs	r3, r2
 8006114:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	697a      	ldr	r2, [r7, #20]
 800611a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	693a      	ldr	r2, [r7, #16]
 8006120:	621a      	str	r2, [r3, #32]
}
 8006122:	bf00      	nop
 8006124:	371c      	adds	r7, #28
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr
	...

08006130 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006130:	b480      	push	{r7}
 8006132:	b085      	sub	sp, #20
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006140:	68fa      	ldr	r2, [r7, #12]
 8006142:	4b09      	ldr	r3, [pc, #36]	; (8006168 <TIM_ITRx_SetConfig+0x38>)
 8006144:	4013      	ands	r3, r2
 8006146:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006148:	683a      	ldr	r2, [r7, #0]
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	4313      	orrs	r3, r2
 800614e:	f043 0307 	orr.w	r3, r3, #7
 8006152:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	68fa      	ldr	r2, [r7, #12]
 8006158:	609a      	str	r2, [r3, #8]
}
 800615a:	bf00      	nop
 800615c:	3714      	adds	r7, #20
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr
 8006166:	bf00      	nop
 8006168:	ffcfff8f 	.word	0xffcfff8f

0800616c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800616c:	b480      	push	{r7}
 800616e:	b087      	sub	sp, #28
 8006170:	af00      	add	r7, sp, #0
 8006172:	60f8      	str	r0, [r7, #12]
 8006174:	60b9      	str	r1, [r7, #8]
 8006176:	607a      	str	r2, [r7, #4]
 8006178:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006186:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	021a      	lsls	r2, r3, #8
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	431a      	orrs	r2, r3
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	4313      	orrs	r3, r2
 8006194:	697a      	ldr	r2, [r7, #20]
 8006196:	4313      	orrs	r3, r2
 8006198:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	697a      	ldr	r2, [r7, #20]
 800619e:	609a      	str	r2, [r3, #8]
}
 80061a0:	bf00      	nop
 80061a2:	371c      	adds	r7, #28
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr

080061ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b087      	sub	sp, #28
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	60f8      	str	r0, [r7, #12]
 80061b4:	60b9      	str	r1, [r7, #8]
 80061b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	f003 031f 	and.w	r3, r3, #31
 80061be:	2201      	movs	r2, #1
 80061c0:	fa02 f303 	lsl.w	r3, r2, r3
 80061c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	6a1a      	ldr	r2, [r3, #32]
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	43db      	mvns	r3, r3
 80061ce:	401a      	ands	r2, r3
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	6a1a      	ldr	r2, [r3, #32]
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	f003 031f 	and.w	r3, r3, #31
 80061de:	6879      	ldr	r1, [r7, #4]
 80061e0:	fa01 f303 	lsl.w	r3, r1, r3
 80061e4:	431a      	orrs	r2, r3
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	621a      	str	r2, [r3, #32]
}
 80061ea:	bf00      	nop
 80061ec:	371c      	adds	r7, #28
 80061ee:	46bd      	mov	sp, r7
 80061f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f4:	4770      	bx	lr
	...

080061f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b085      	sub	sp, #20
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
 8006200:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006208:	2b01      	cmp	r3, #1
 800620a:	d101      	bne.n	8006210 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800620c:	2302      	movs	r3, #2
 800620e:	e077      	b.n	8006300 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2202      	movs	r2, #2
 800621c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a35      	ldr	r2, [pc, #212]	; (800630c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d004      	beq.n	8006244 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a34      	ldr	r2, [pc, #208]	; (8006310 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d108      	bne.n	8006256 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800624a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	68fa      	ldr	r2, [r7, #12]
 8006252:	4313      	orrs	r3, r2
 8006254:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800625c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	68fa      	ldr	r2, [r7, #12]
 8006264:	4313      	orrs	r3, r2
 8006266:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	68fa      	ldr	r2, [r7, #12]
 800626e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a25      	ldr	r2, [pc, #148]	; (800630c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d02c      	beq.n	80062d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006282:	d027      	beq.n	80062d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a22      	ldr	r2, [pc, #136]	; (8006314 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d022      	beq.n	80062d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a21      	ldr	r2, [pc, #132]	; (8006318 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d01d      	beq.n	80062d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a1f      	ldr	r2, [pc, #124]	; (800631c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d018      	beq.n	80062d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a1a      	ldr	r2, [pc, #104]	; (8006310 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d013      	beq.n	80062d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a1b      	ldr	r2, [pc, #108]	; (8006320 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d00e      	beq.n	80062d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a1a      	ldr	r2, [pc, #104]	; (8006324 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d009      	beq.n	80062d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a18      	ldr	r2, [pc, #96]	; (8006328 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d004      	beq.n	80062d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a17      	ldr	r2, [pc, #92]	; (800632c <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d10c      	bne.n	80062ee <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062da:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	68ba      	ldr	r2, [r7, #8]
 80062e2:	4313      	orrs	r3, r2
 80062e4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	68ba      	ldr	r2, [r7, #8]
 80062ec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2201      	movs	r2, #1
 80062f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2200      	movs	r2, #0
 80062fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062fe:	2300      	movs	r3, #0
}
 8006300:	4618      	mov	r0, r3
 8006302:	3714      	adds	r7, #20
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr
 800630c:	40010000 	.word	0x40010000
 8006310:	40010400 	.word	0x40010400
 8006314:	40000400 	.word	0x40000400
 8006318:	40000800 	.word	0x40000800
 800631c:	40000c00 	.word	0x40000c00
 8006320:	40001800 	.word	0x40001800
 8006324:	40014000 	.word	0x40014000
 8006328:	4000e000 	.word	0x4000e000
 800632c:	4000e400 	.word	0x4000e400

08006330 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006330:	b480      	push	{r7}
 8006332:	b083      	sub	sp, #12
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006338:	bf00      	nop
 800633a:	370c      	adds	r7, #12
 800633c:	46bd      	mov	sp, r7
 800633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006342:	4770      	bx	lr

08006344 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006344:	b480      	push	{r7}
 8006346:	b083      	sub	sp, #12
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800634c:	bf00      	nop
 800634e:	370c      	adds	r7, #12
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr

08006358 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006358:	b480      	push	{r7}
 800635a:	b083      	sub	sp, #12
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006360:	bf00      	nop
 8006362:	370c      	adds	r7, #12
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr

0800636c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b082      	sub	sp, #8
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d101      	bne.n	800637e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	e042      	b.n	8006404 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006384:	2b00      	cmp	r3, #0
 8006386:	d106      	bne.n	8006396 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2200      	movs	r2, #0
 800638c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f7fb f923 	bl	80015dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2224      	movs	r2, #36	; 0x24
 800639a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	681a      	ldr	r2, [r3, #0]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f022 0201 	bic.w	r2, r2, #1
 80063ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f000 f82c 	bl	800640c <UART_SetConfig>
 80063b4:	4603      	mov	r3, r0
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d101      	bne.n	80063be <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80063ba:	2301      	movs	r3, #1
 80063bc:	e022      	b.n	8006404 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d002      	beq.n	80063cc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f000 fe7e 	bl	80070c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	685a      	ldr	r2, [r3, #4]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80063da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	689a      	ldr	r2, [r3, #8]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80063ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	681a      	ldr	r2, [r3, #0]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f042 0201 	orr.w	r2, r2, #1
 80063fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f000 ff05 	bl	800720c <UART_CheckIdleState>
 8006402:	4603      	mov	r3, r0
}
 8006404:	4618      	mov	r0, r3
 8006406:	3708      	adds	r7, #8
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}

0800640c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800640c:	b5b0      	push	{r4, r5, r7, lr}
 800640e:	b08e      	sub	sp, #56	; 0x38
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006414:	2300      	movs	r3, #0
 8006416:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	689a      	ldr	r2, [r3, #8]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	691b      	ldr	r3, [r3, #16]
 8006422:	431a      	orrs	r2, r3
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	695b      	ldr	r3, [r3, #20]
 8006428:	431a      	orrs	r2, r3
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	69db      	ldr	r3, [r3, #28]
 800642e:	4313      	orrs	r3, r2
 8006430:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	681a      	ldr	r2, [r3, #0]
 8006438:	4bbf      	ldr	r3, [pc, #764]	; (8006738 <UART_SetConfig+0x32c>)
 800643a:	4013      	ands	r3, r2
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	6812      	ldr	r2, [r2, #0]
 8006440:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006442:	430b      	orrs	r3, r1
 8006444:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	68da      	ldr	r2, [r3, #12]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	430a      	orrs	r2, r1
 800645a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	699b      	ldr	r3, [r3, #24]
 8006460:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4ab5      	ldr	r2, [pc, #724]	; (800673c <UART_SetConfig+0x330>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d004      	beq.n	8006476 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6a1b      	ldr	r3, [r3, #32]
 8006470:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006472:	4313      	orrs	r3, r2
 8006474:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	689a      	ldr	r2, [r3, #8]
 800647c:	4bb0      	ldr	r3, [pc, #704]	; (8006740 <UART_SetConfig+0x334>)
 800647e:	4013      	ands	r3, r2
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	6812      	ldr	r2, [r2, #0]
 8006484:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006486:	430b      	orrs	r3, r1
 8006488:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006490:	f023 010f 	bic.w	r1, r3, #15
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	430a      	orrs	r2, r1
 800649e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4aa7      	ldr	r2, [pc, #668]	; (8006744 <UART_SetConfig+0x338>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d176      	bne.n	8006598 <UART_SetConfig+0x18c>
 80064aa:	4ba7      	ldr	r3, [pc, #668]	; (8006748 <UART_SetConfig+0x33c>)
 80064ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80064b2:	2b28      	cmp	r3, #40	; 0x28
 80064b4:	d86c      	bhi.n	8006590 <UART_SetConfig+0x184>
 80064b6:	a201      	add	r2, pc, #4	; (adr r2, 80064bc <UART_SetConfig+0xb0>)
 80064b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064bc:	08006561 	.word	0x08006561
 80064c0:	08006591 	.word	0x08006591
 80064c4:	08006591 	.word	0x08006591
 80064c8:	08006591 	.word	0x08006591
 80064cc:	08006591 	.word	0x08006591
 80064d0:	08006591 	.word	0x08006591
 80064d4:	08006591 	.word	0x08006591
 80064d8:	08006591 	.word	0x08006591
 80064dc:	08006569 	.word	0x08006569
 80064e0:	08006591 	.word	0x08006591
 80064e4:	08006591 	.word	0x08006591
 80064e8:	08006591 	.word	0x08006591
 80064ec:	08006591 	.word	0x08006591
 80064f0:	08006591 	.word	0x08006591
 80064f4:	08006591 	.word	0x08006591
 80064f8:	08006591 	.word	0x08006591
 80064fc:	08006571 	.word	0x08006571
 8006500:	08006591 	.word	0x08006591
 8006504:	08006591 	.word	0x08006591
 8006508:	08006591 	.word	0x08006591
 800650c:	08006591 	.word	0x08006591
 8006510:	08006591 	.word	0x08006591
 8006514:	08006591 	.word	0x08006591
 8006518:	08006591 	.word	0x08006591
 800651c:	08006579 	.word	0x08006579
 8006520:	08006591 	.word	0x08006591
 8006524:	08006591 	.word	0x08006591
 8006528:	08006591 	.word	0x08006591
 800652c:	08006591 	.word	0x08006591
 8006530:	08006591 	.word	0x08006591
 8006534:	08006591 	.word	0x08006591
 8006538:	08006591 	.word	0x08006591
 800653c:	08006581 	.word	0x08006581
 8006540:	08006591 	.word	0x08006591
 8006544:	08006591 	.word	0x08006591
 8006548:	08006591 	.word	0x08006591
 800654c:	08006591 	.word	0x08006591
 8006550:	08006591 	.word	0x08006591
 8006554:	08006591 	.word	0x08006591
 8006558:	08006591 	.word	0x08006591
 800655c:	08006589 	.word	0x08006589
 8006560:	2301      	movs	r3, #1
 8006562:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006566:	e326      	b.n	8006bb6 <UART_SetConfig+0x7aa>
 8006568:	2304      	movs	r3, #4
 800656a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800656e:	e322      	b.n	8006bb6 <UART_SetConfig+0x7aa>
 8006570:	2308      	movs	r3, #8
 8006572:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006576:	e31e      	b.n	8006bb6 <UART_SetConfig+0x7aa>
 8006578:	2310      	movs	r3, #16
 800657a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800657e:	e31a      	b.n	8006bb6 <UART_SetConfig+0x7aa>
 8006580:	2320      	movs	r3, #32
 8006582:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006586:	e316      	b.n	8006bb6 <UART_SetConfig+0x7aa>
 8006588:	2340      	movs	r3, #64	; 0x40
 800658a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800658e:	e312      	b.n	8006bb6 <UART_SetConfig+0x7aa>
 8006590:	2380      	movs	r3, #128	; 0x80
 8006592:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006596:	e30e      	b.n	8006bb6 <UART_SetConfig+0x7aa>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a6b      	ldr	r2, [pc, #428]	; (800674c <UART_SetConfig+0x340>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d130      	bne.n	8006604 <UART_SetConfig+0x1f8>
 80065a2:	4b69      	ldr	r3, [pc, #420]	; (8006748 <UART_SetConfig+0x33c>)
 80065a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065a6:	f003 0307 	and.w	r3, r3, #7
 80065aa:	2b05      	cmp	r3, #5
 80065ac:	d826      	bhi.n	80065fc <UART_SetConfig+0x1f0>
 80065ae:	a201      	add	r2, pc, #4	; (adr r2, 80065b4 <UART_SetConfig+0x1a8>)
 80065b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065b4:	080065cd 	.word	0x080065cd
 80065b8:	080065d5 	.word	0x080065d5
 80065bc:	080065dd 	.word	0x080065dd
 80065c0:	080065e5 	.word	0x080065e5
 80065c4:	080065ed 	.word	0x080065ed
 80065c8:	080065f5 	.word	0x080065f5
 80065cc:	2300      	movs	r3, #0
 80065ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065d2:	e2f0      	b.n	8006bb6 <UART_SetConfig+0x7aa>
 80065d4:	2304      	movs	r3, #4
 80065d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065da:	e2ec      	b.n	8006bb6 <UART_SetConfig+0x7aa>
 80065dc:	2308      	movs	r3, #8
 80065de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065e2:	e2e8      	b.n	8006bb6 <UART_SetConfig+0x7aa>
 80065e4:	2310      	movs	r3, #16
 80065e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065ea:	e2e4      	b.n	8006bb6 <UART_SetConfig+0x7aa>
 80065ec:	2320      	movs	r3, #32
 80065ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065f2:	e2e0      	b.n	8006bb6 <UART_SetConfig+0x7aa>
 80065f4:	2340      	movs	r3, #64	; 0x40
 80065f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065fa:	e2dc      	b.n	8006bb6 <UART_SetConfig+0x7aa>
 80065fc:	2380      	movs	r3, #128	; 0x80
 80065fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006602:	e2d8      	b.n	8006bb6 <UART_SetConfig+0x7aa>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a51      	ldr	r2, [pc, #324]	; (8006750 <UART_SetConfig+0x344>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d130      	bne.n	8006670 <UART_SetConfig+0x264>
 800660e:	4b4e      	ldr	r3, [pc, #312]	; (8006748 <UART_SetConfig+0x33c>)
 8006610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006612:	f003 0307 	and.w	r3, r3, #7
 8006616:	2b05      	cmp	r3, #5
 8006618:	d826      	bhi.n	8006668 <UART_SetConfig+0x25c>
 800661a:	a201      	add	r2, pc, #4	; (adr r2, 8006620 <UART_SetConfig+0x214>)
 800661c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006620:	08006639 	.word	0x08006639
 8006624:	08006641 	.word	0x08006641
 8006628:	08006649 	.word	0x08006649
 800662c:	08006651 	.word	0x08006651
 8006630:	08006659 	.word	0x08006659
 8006634:	08006661 	.word	0x08006661
 8006638:	2300      	movs	r3, #0
 800663a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800663e:	e2ba      	b.n	8006bb6 <UART_SetConfig+0x7aa>
 8006640:	2304      	movs	r3, #4
 8006642:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006646:	e2b6      	b.n	8006bb6 <UART_SetConfig+0x7aa>
 8006648:	2308      	movs	r3, #8
 800664a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800664e:	e2b2      	b.n	8006bb6 <UART_SetConfig+0x7aa>
 8006650:	2310      	movs	r3, #16
 8006652:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006656:	e2ae      	b.n	8006bb6 <UART_SetConfig+0x7aa>
 8006658:	2320      	movs	r3, #32
 800665a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800665e:	e2aa      	b.n	8006bb6 <UART_SetConfig+0x7aa>
 8006660:	2340      	movs	r3, #64	; 0x40
 8006662:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006666:	e2a6      	b.n	8006bb6 <UART_SetConfig+0x7aa>
 8006668:	2380      	movs	r3, #128	; 0x80
 800666a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800666e:	e2a2      	b.n	8006bb6 <UART_SetConfig+0x7aa>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a37      	ldr	r2, [pc, #220]	; (8006754 <UART_SetConfig+0x348>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d130      	bne.n	80066dc <UART_SetConfig+0x2d0>
 800667a:	4b33      	ldr	r3, [pc, #204]	; (8006748 <UART_SetConfig+0x33c>)
 800667c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800667e:	f003 0307 	and.w	r3, r3, #7
 8006682:	2b05      	cmp	r3, #5
 8006684:	d826      	bhi.n	80066d4 <UART_SetConfig+0x2c8>
 8006686:	a201      	add	r2, pc, #4	; (adr r2, 800668c <UART_SetConfig+0x280>)
 8006688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800668c:	080066a5 	.word	0x080066a5
 8006690:	080066ad 	.word	0x080066ad
 8006694:	080066b5 	.word	0x080066b5
 8006698:	080066bd 	.word	0x080066bd
 800669c:	080066c5 	.word	0x080066c5
 80066a0:	080066cd 	.word	0x080066cd
 80066a4:	2300      	movs	r3, #0
 80066a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066aa:	e284      	b.n	8006bb6 <UART_SetConfig+0x7aa>
 80066ac:	2304      	movs	r3, #4
 80066ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066b2:	e280      	b.n	8006bb6 <UART_SetConfig+0x7aa>
 80066b4:	2308      	movs	r3, #8
 80066b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066ba:	e27c      	b.n	8006bb6 <UART_SetConfig+0x7aa>
 80066bc:	2310      	movs	r3, #16
 80066be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066c2:	e278      	b.n	8006bb6 <UART_SetConfig+0x7aa>
 80066c4:	2320      	movs	r3, #32
 80066c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066ca:	e274      	b.n	8006bb6 <UART_SetConfig+0x7aa>
 80066cc:	2340      	movs	r3, #64	; 0x40
 80066ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066d2:	e270      	b.n	8006bb6 <UART_SetConfig+0x7aa>
 80066d4:	2380      	movs	r3, #128	; 0x80
 80066d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066da:	e26c      	b.n	8006bb6 <UART_SetConfig+0x7aa>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a1d      	ldr	r2, [pc, #116]	; (8006758 <UART_SetConfig+0x34c>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d142      	bne.n	800676c <UART_SetConfig+0x360>
 80066e6:	4b18      	ldr	r3, [pc, #96]	; (8006748 <UART_SetConfig+0x33c>)
 80066e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066ea:	f003 0307 	and.w	r3, r3, #7
 80066ee:	2b05      	cmp	r3, #5
 80066f0:	d838      	bhi.n	8006764 <UART_SetConfig+0x358>
 80066f2:	a201      	add	r2, pc, #4	; (adr r2, 80066f8 <UART_SetConfig+0x2ec>)
 80066f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066f8:	08006711 	.word	0x08006711
 80066fc:	08006719 	.word	0x08006719
 8006700:	08006721 	.word	0x08006721
 8006704:	08006729 	.word	0x08006729
 8006708:	08006731 	.word	0x08006731
 800670c:	0800675d 	.word	0x0800675d
 8006710:	2300      	movs	r3, #0
 8006712:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006716:	e24e      	b.n	8006bb6 <UART_SetConfig+0x7aa>
 8006718:	2304      	movs	r3, #4
 800671a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800671e:	e24a      	b.n	8006bb6 <UART_SetConfig+0x7aa>
 8006720:	2308      	movs	r3, #8
 8006722:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006726:	e246      	b.n	8006bb6 <UART_SetConfig+0x7aa>
 8006728:	2310      	movs	r3, #16
 800672a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800672e:	e242      	b.n	8006bb6 <UART_SetConfig+0x7aa>
 8006730:	2320      	movs	r3, #32
 8006732:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006736:	e23e      	b.n	8006bb6 <UART_SetConfig+0x7aa>
 8006738:	cfff69f3 	.word	0xcfff69f3
 800673c:	58000c00 	.word	0x58000c00
 8006740:	11fff4ff 	.word	0x11fff4ff
 8006744:	40011000 	.word	0x40011000
 8006748:	58024400 	.word	0x58024400
 800674c:	40004400 	.word	0x40004400
 8006750:	40004800 	.word	0x40004800
 8006754:	40004c00 	.word	0x40004c00
 8006758:	40005000 	.word	0x40005000
 800675c:	2340      	movs	r3, #64	; 0x40
 800675e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006762:	e228      	b.n	8006bb6 <UART_SetConfig+0x7aa>
 8006764:	2380      	movs	r3, #128	; 0x80
 8006766:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800676a:	e224      	b.n	8006bb6 <UART_SetConfig+0x7aa>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4ab1      	ldr	r2, [pc, #708]	; (8006a38 <UART_SetConfig+0x62c>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d176      	bne.n	8006864 <UART_SetConfig+0x458>
 8006776:	4bb1      	ldr	r3, [pc, #708]	; (8006a3c <UART_SetConfig+0x630>)
 8006778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800677a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800677e:	2b28      	cmp	r3, #40	; 0x28
 8006780:	d86c      	bhi.n	800685c <UART_SetConfig+0x450>
 8006782:	a201      	add	r2, pc, #4	; (adr r2, 8006788 <UART_SetConfig+0x37c>)
 8006784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006788:	0800682d 	.word	0x0800682d
 800678c:	0800685d 	.word	0x0800685d
 8006790:	0800685d 	.word	0x0800685d
 8006794:	0800685d 	.word	0x0800685d
 8006798:	0800685d 	.word	0x0800685d
 800679c:	0800685d 	.word	0x0800685d
 80067a0:	0800685d 	.word	0x0800685d
 80067a4:	0800685d 	.word	0x0800685d
 80067a8:	08006835 	.word	0x08006835
 80067ac:	0800685d 	.word	0x0800685d
 80067b0:	0800685d 	.word	0x0800685d
 80067b4:	0800685d 	.word	0x0800685d
 80067b8:	0800685d 	.word	0x0800685d
 80067bc:	0800685d 	.word	0x0800685d
 80067c0:	0800685d 	.word	0x0800685d
 80067c4:	0800685d 	.word	0x0800685d
 80067c8:	0800683d 	.word	0x0800683d
 80067cc:	0800685d 	.word	0x0800685d
 80067d0:	0800685d 	.word	0x0800685d
 80067d4:	0800685d 	.word	0x0800685d
 80067d8:	0800685d 	.word	0x0800685d
 80067dc:	0800685d 	.word	0x0800685d
 80067e0:	0800685d 	.word	0x0800685d
 80067e4:	0800685d 	.word	0x0800685d
 80067e8:	08006845 	.word	0x08006845
 80067ec:	0800685d 	.word	0x0800685d
 80067f0:	0800685d 	.word	0x0800685d
 80067f4:	0800685d 	.word	0x0800685d
 80067f8:	0800685d 	.word	0x0800685d
 80067fc:	0800685d 	.word	0x0800685d
 8006800:	0800685d 	.word	0x0800685d
 8006804:	0800685d 	.word	0x0800685d
 8006808:	0800684d 	.word	0x0800684d
 800680c:	0800685d 	.word	0x0800685d
 8006810:	0800685d 	.word	0x0800685d
 8006814:	0800685d 	.word	0x0800685d
 8006818:	0800685d 	.word	0x0800685d
 800681c:	0800685d 	.word	0x0800685d
 8006820:	0800685d 	.word	0x0800685d
 8006824:	0800685d 	.word	0x0800685d
 8006828:	08006855 	.word	0x08006855
 800682c:	2301      	movs	r3, #1
 800682e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006832:	e1c0      	b.n	8006bb6 <UART_SetConfig+0x7aa>
 8006834:	2304      	movs	r3, #4
 8006836:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800683a:	e1bc      	b.n	8006bb6 <UART_SetConfig+0x7aa>
 800683c:	2308      	movs	r3, #8
 800683e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006842:	e1b8      	b.n	8006bb6 <UART_SetConfig+0x7aa>
 8006844:	2310      	movs	r3, #16
 8006846:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800684a:	e1b4      	b.n	8006bb6 <UART_SetConfig+0x7aa>
 800684c:	2320      	movs	r3, #32
 800684e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006852:	e1b0      	b.n	8006bb6 <UART_SetConfig+0x7aa>
 8006854:	2340      	movs	r3, #64	; 0x40
 8006856:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800685a:	e1ac      	b.n	8006bb6 <UART_SetConfig+0x7aa>
 800685c:	2380      	movs	r3, #128	; 0x80
 800685e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006862:	e1a8      	b.n	8006bb6 <UART_SetConfig+0x7aa>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a75      	ldr	r2, [pc, #468]	; (8006a40 <UART_SetConfig+0x634>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d130      	bne.n	80068d0 <UART_SetConfig+0x4c4>
 800686e:	4b73      	ldr	r3, [pc, #460]	; (8006a3c <UART_SetConfig+0x630>)
 8006870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006872:	f003 0307 	and.w	r3, r3, #7
 8006876:	2b05      	cmp	r3, #5
 8006878:	d826      	bhi.n	80068c8 <UART_SetConfig+0x4bc>
 800687a:	a201      	add	r2, pc, #4	; (adr r2, 8006880 <UART_SetConfig+0x474>)
 800687c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006880:	08006899 	.word	0x08006899
 8006884:	080068a1 	.word	0x080068a1
 8006888:	080068a9 	.word	0x080068a9
 800688c:	080068b1 	.word	0x080068b1
 8006890:	080068b9 	.word	0x080068b9
 8006894:	080068c1 	.word	0x080068c1
 8006898:	2300      	movs	r3, #0
 800689a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800689e:	e18a      	b.n	8006bb6 <UART_SetConfig+0x7aa>
 80068a0:	2304      	movs	r3, #4
 80068a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068a6:	e186      	b.n	8006bb6 <UART_SetConfig+0x7aa>
 80068a8:	2308      	movs	r3, #8
 80068aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068ae:	e182      	b.n	8006bb6 <UART_SetConfig+0x7aa>
 80068b0:	2310      	movs	r3, #16
 80068b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068b6:	e17e      	b.n	8006bb6 <UART_SetConfig+0x7aa>
 80068b8:	2320      	movs	r3, #32
 80068ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068be:	e17a      	b.n	8006bb6 <UART_SetConfig+0x7aa>
 80068c0:	2340      	movs	r3, #64	; 0x40
 80068c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068c6:	e176      	b.n	8006bb6 <UART_SetConfig+0x7aa>
 80068c8:	2380      	movs	r3, #128	; 0x80
 80068ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068ce:	e172      	b.n	8006bb6 <UART_SetConfig+0x7aa>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a5b      	ldr	r2, [pc, #364]	; (8006a44 <UART_SetConfig+0x638>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d130      	bne.n	800693c <UART_SetConfig+0x530>
 80068da:	4b58      	ldr	r3, [pc, #352]	; (8006a3c <UART_SetConfig+0x630>)
 80068dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068de:	f003 0307 	and.w	r3, r3, #7
 80068e2:	2b05      	cmp	r3, #5
 80068e4:	d826      	bhi.n	8006934 <UART_SetConfig+0x528>
 80068e6:	a201      	add	r2, pc, #4	; (adr r2, 80068ec <UART_SetConfig+0x4e0>)
 80068e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ec:	08006905 	.word	0x08006905
 80068f0:	0800690d 	.word	0x0800690d
 80068f4:	08006915 	.word	0x08006915
 80068f8:	0800691d 	.word	0x0800691d
 80068fc:	08006925 	.word	0x08006925
 8006900:	0800692d 	.word	0x0800692d
 8006904:	2300      	movs	r3, #0
 8006906:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800690a:	e154      	b.n	8006bb6 <UART_SetConfig+0x7aa>
 800690c:	2304      	movs	r3, #4
 800690e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006912:	e150      	b.n	8006bb6 <UART_SetConfig+0x7aa>
 8006914:	2308      	movs	r3, #8
 8006916:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800691a:	e14c      	b.n	8006bb6 <UART_SetConfig+0x7aa>
 800691c:	2310      	movs	r3, #16
 800691e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006922:	e148      	b.n	8006bb6 <UART_SetConfig+0x7aa>
 8006924:	2320      	movs	r3, #32
 8006926:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800692a:	e144      	b.n	8006bb6 <UART_SetConfig+0x7aa>
 800692c:	2340      	movs	r3, #64	; 0x40
 800692e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006932:	e140      	b.n	8006bb6 <UART_SetConfig+0x7aa>
 8006934:	2380      	movs	r3, #128	; 0x80
 8006936:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800693a:	e13c      	b.n	8006bb6 <UART_SetConfig+0x7aa>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a41      	ldr	r2, [pc, #260]	; (8006a48 <UART_SetConfig+0x63c>)
 8006942:	4293      	cmp	r3, r2
 8006944:	f040 8082 	bne.w	8006a4c <UART_SetConfig+0x640>
 8006948:	4b3c      	ldr	r3, [pc, #240]	; (8006a3c <UART_SetConfig+0x630>)
 800694a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800694c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006950:	2b28      	cmp	r3, #40	; 0x28
 8006952:	d86d      	bhi.n	8006a30 <UART_SetConfig+0x624>
 8006954:	a201      	add	r2, pc, #4	; (adr r2, 800695c <UART_SetConfig+0x550>)
 8006956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800695a:	bf00      	nop
 800695c:	08006a01 	.word	0x08006a01
 8006960:	08006a31 	.word	0x08006a31
 8006964:	08006a31 	.word	0x08006a31
 8006968:	08006a31 	.word	0x08006a31
 800696c:	08006a31 	.word	0x08006a31
 8006970:	08006a31 	.word	0x08006a31
 8006974:	08006a31 	.word	0x08006a31
 8006978:	08006a31 	.word	0x08006a31
 800697c:	08006a09 	.word	0x08006a09
 8006980:	08006a31 	.word	0x08006a31
 8006984:	08006a31 	.word	0x08006a31
 8006988:	08006a31 	.word	0x08006a31
 800698c:	08006a31 	.word	0x08006a31
 8006990:	08006a31 	.word	0x08006a31
 8006994:	08006a31 	.word	0x08006a31
 8006998:	08006a31 	.word	0x08006a31
 800699c:	08006a11 	.word	0x08006a11
 80069a0:	08006a31 	.word	0x08006a31
 80069a4:	08006a31 	.word	0x08006a31
 80069a8:	08006a31 	.word	0x08006a31
 80069ac:	08006a31 	.word	0x08006a31
 80069b0:	08006a31 	.word	0x08006a31
 80069b4:	08006a31 	.word	0x08006a31
 80069b8:	08006a31 	.word	0x08006a31
 80069bc:	08006a19 	.word	0x08006a19
 80069c0:	08006a31 	.word	0x08006a31
 80069c4:	08006a31 	.word	0x08006a31
 80069c8:	08006a31 	.word	0x08006a31
 80069cc:	08006a31 	.word	0x08006a31
 80069d0:	08006a31 	.word	0x08006a31
 80069d4:	08006a31 	.word	0x08006a31
 80069d8:	08006a31 	.word	0x08006a31
 80069dc:	08006a21 	.word	0x08006a21
 80069e0:	08006a31 	.word	0x08006a31
 80069e4:	08006a31 	.word	0x08006a31
 80069e8:	08006a31 	.word	0x08006a31
 80069ec:	08006a31 	.word	0x08006a31
 80069f0:	08006a31 	.word	0x08006a31
 80069f4:	08006a31 	.word	0x08006a31
 80069f8:	08006a31 	.word	0x08006a31
 80069fc:	08006a29 	.word	0x08006a29
 8006a00:	2301      	movs	r3, #1
 8006a02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a06:	e0d6      	b.n	8006bb6 <UART_SetConfig+0x7aa>
 8006a08:	2304      	movs	r3, #4
 8006a0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a0e:	e0d2      	b.n	8006bb6 <UART_SetConfig+0x7aa>
 8006a10:	2308      	movs	r3, #8
 8006a12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a16:	e0ce      	b.n	8006bb6 <UART_SetConfig+0x7aa>
 8006a18:	2310      	movs	r3, #16
 8006a1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a1e:	e0ca      	b.n	8006bb6 <UART_SetConfig+0x7aa>
 8006a20:	2320      	movs	r3, #32
 8006a22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a26:	e0c6      	b.n	8006bb6 <UART_SetConfig+0x7aa>
 8006a28:	2340      	movs	r3, #64	; 0x40
 8006a2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a2e:	e0c2      	b.n	8006bb6 <UART_SetConfig+0x7aa>
 8006a30:	2380      	movs	r3, #128	; 0x80
 8006a32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a36:	e0be      	b.n	8006bb6 <UART_SetConfig+0x7aa>
 8006a38:	40011400 	.word	0x40011400
 8006a3c:	58024400 	.word	0x58024400
 8006a40:	40007800 	.word	0x40007800
 8006a44:	40007c00 	.word	0x40007c00
 8006a48:	40011800 	.word	0x40011800
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4aad      	ldr	r2, [pc, #692]	; (8006d08 <UART_SetConfig+0x8fc>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d176      	bne.n	8006b44 <UART_SetConfig+0x738>
 8006a56:	4bad      	ldr	r3, [pc, #692]	; (8006d0c <UART_SetConfig+0x900>)
 8006a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a5e:	2b28      	cmp	r3, #40	; 0x28
 8006a60:	d86c      	bhi.n	8006b3c <UART_SetConfig+0x730>
 8006a62:	a201      	add	r2, pc, #4	; (adr r2, 8006a68 <UART_SetConfig+0x65c>)
 8006a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a68:	08006b0d 	.word	0x08006b0d
 8006a6c:	08006b3d 	.word	0x08006b3d
 8006a70:	08006b3d 	.word	0x08006b3d
 8006a74:	08006b3d 	.word	0x08006b3d
 8006a78:	08006b3d 	.word	0x08006b3d
 8006a7c:	08006b3d 	.word	0x08006b3d
 8006a80:	08006b3d 	.word	0x08006b3d
 8006a84:	08006b3d 	.word	0x08006b3d
 8006a88:	08006b15 	.word	0x08006b15
 8006a8c:	08006b3d 	.word	0x08006b3d
 8006a90:	08006b3d 	.word	0x08006b3d
 8006a94:	08006b3d 	.word	0x08006b3d
 8006a98:	08006b3d 	.word	0x08006b3d
 8006a9c:	08006b3d 	.word	0x08006b3d
 8006aa0:	08006b3d 	.word	0x08006b3d
 8006aa4:	08006b3d 	.word	0x08006b3d
 8006aa8:	08006b1d 	.word	0x08006b1d
 8006aac:	08006b3d 	.word	0x08006b3d
 8006ab0:	08006b3d 	.word	0x08006b3d
 8006ab4:	08006b3d 	.word	0x08006b3d
 8006ab8:	08006b3d 	.word	0x08006b3d
 8006abc:	08006b3d 	.word	0x08006b3d
 8006ac0:	08006b3d 	.word	0x08006b3d
 8006ac4:	08006b3d 	.word	0x08006b3d
 8006ac8:	08006b25 	.word	0x08006b25
 8006acc:	08006b3d 	.word	0x08006b3d
 8006ad0:	08006b3d 	.word	0x08006b3d
 8006ad4:	08006b3d 	.word	0x08006b3d
 8006ad8:	08006b3d 	.word	0x08006b3d
 8006adc:	08006b3d 	.word	0x08006b3d
 8006ae0:	08006b3d 	.word	0x08006b3d
 8006ae4:	08006b3d 	.word	0x08006b3d
 8006ae8:	08006b2d 	.word	0x08006b2d
 8006aec:	08006b3d 	.word	0x08006b3d
 8006af0:	08006b3d 	.word	0x08006b3d
 8006af4:	08006b3d 	.word	0x08006b3d
 8006af8:	08006b3d 	.word	0x08006b3d
 8006afc:	08006b3d 	.word	0x08006b3d
 8006b00:	08006b3d 	.word	0x08006b3d
 8006b04:	08006b3d 	.word	0x08006b3d
 8006b08:	08006b35 	.word	0x08006b35
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b12:	e050      	b.n	8006bb6 <UART_SetConfig+0x7aa>
 8006b14:	2304      	movs	r3, #4
 8006b16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b1a:	e04c      	b.n	8006bb6 <UART_SetConfig+0x7aa>
 8006b1c:	2308      	movs	r3, #8
 8006b1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b22:	e048      	b.n	8006bb6 <UART_SetConfig+0x7aa>
 8006b24:	2310      	movs	r3, #16
 8006b26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b2a:	e044      	b.n	8006bb6 <UART_SetConfig+0x7aa>
 8006b2c:	2320      	movs	r3, #32
 8006b2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b32:	e040      	b.n	8006bb6 <UART_SetConfig+0x7aa>
 8006b34:	2340      	movs	r3, #64	; 0x40
 8006b36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b3a:	e03c      	b.n	8006bb6 <UART_SetConfig+0x7aa>
 8006b3c:	2380      	movs	r3, #128	; 0x80
 8006b3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b42:	e038      	b.n	8006bb6 <UART_SetConfig+0x7aa>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a71      	ldr	r2, [pc, #452]	; (8006d10 <UART_SetConfig+0x904>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d130      	bne.n	8006bb0 <UART_SetConfig+0x7a4>
 8006b4e:	4b6f      	ldr	r3, [pc, #444]	; (8006d0c <UART_SetConfig+0x900>)
 8006b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b52:	f003 0307 	and.w	r3, r3, #7
 8006b56:	2b05      	cmp	r3, #5
 8006b58:	d826      	bhi.n	8006ba8 <UART_SetConfig+0x79c>
 8006b5a:	a201      	add	r2, pc, #4	; (adr r2, 8006b60 <UART_SetConfig+0x754>)
 8006b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b60:	08006b79 	.word	0x08006b79
 8006b64:	08006b81 	.word	0x08006b81
 8006b68:	08006b89 	.word	0x08006b89
 8006b6c:	08006b91 	.word	0x08006b91
 8006b70:	08006b99 	.word	0x08006b99
 8006b74:	08006ba1 	.word	0x08006ba1
 8006b78:	2302      	movs	r3, #2
 8006b7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b7e:	e01a      	b.n	8006bb6 <UART_SetConfig+0x7aa>
 8006b80:	2304      	movs	r3, #4
 8006b82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b86:	e016      	b.n	8006bb6 <UART_SetConfig+0x7aa>
 8006b88:	2308      	movs	r3, #8
 8006b8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b8e:	e012      	b.n	8006bb6 <UART_SetConfig+0x7aa>
 8006b90:	2310      	movs	r3, #16
 8006b92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b96:	e00e      	b.n	8006bb6 <UART_SetConfig+0x7aa>
 8006b98:	2320      	movs	r3, #32
 8006b9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b9e:	e00a      	b.n	8006bb6 <UART_SetConfig+0x7aa>
 8006ba0:	2340      	movs	r3, #64	; 0x40
 8006ba2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ba6:	e006      	b.n	8006bb6 <UART_SetConfig+0x7aa>
 8006ba8:	2380      	movs	r3, #128	; 0x80
 8006baa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006bae:	e002      	b.n	8006bb6 <UART_SetConfig+0x7aa>
 8006bb0:	2380      	movs	r3, #128	; 0x80
 8006bb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a55      	ldr	r2, [pc, #340]	; (8006d10 <UART_SetConfig+0x904>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	f040 80f0 	bne.w	8006da2 <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006bc2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006bc6:	2b20      	cmp	r3, #32
 8006bc8:	dc46      	bgt.n	8006c58 <UART_SetConfig+0x84c>
 8006bca:	2b02      	cmp	r3, #2
 8006bcc:	db75      	blt.n	8006cba <UART_SetConfig+0x8ae>
 8006bce:	3b02      	subs	r3, #2
 8006bd0:	2b1e      	cmp	r3, #30
 8006bd2:	d872      	bhi.n	8006cba <UART_SetConfig+0x8ae>
 8006bd4:	a201      	add	r2, pc, #4	; (adr r2, 8006bdc <UART_SetConfig+0x7d0>)
 8006bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bda:	bf00      	nop
 8006bdc:	08006c5f 	.word	0x08006c5f
 8006be0:	08006cbb 	.word	0x08006cbb
 8006be4:	08006c67 	.word	0x08006c67
 8006be8:	08006cbb 	.word	0x08006cbb
 8006bec:	08006cbb 	.word	0x08006cbb
 8006bf0:	08006cbb 	.word	0x08006cbb
 8006bf4:	08006c77 	.word	0x08006c77
 8006bf8:	08006cbb 	.word	0x08006cbb
 8006bfc:	08006cbb 	.word	0x08006cbb
 8006c00:	08006cbb 	.word	0x08006cbb
 8006c04:	08006cbb 	.word	0x08006cbb
 8006c08:	08006cbb 	.word	0x08006cbb
 8006c0c:	08006cbb 	.word	0x08006cbb
 8006c10:	08006cbb 	.word	0x08006cbb
 8006c14:	08006c87 	.word	0x08006c87
 8006c18:	08006cbb 	.word	0x08006cbb
 8006c1c:	08006cbb 	.word	0x08006cbb
 8006c20:	08006cbb 	.word	0x08006cbb
 8006c24:	08006cbb 	.word	0x08006cbb
 8006c28:	08006cbb 	.word	0x08006cbb
 8006c2c:	08006cbb 	.word	0x08006cbb
 8006c30:	08006cbb 	.word	0x08006cbb
 8006c34:	08006cbb 	.word	0x08006cbb
 8006c38:	08006cbb 	.word	0x08006cbb
 8006c3c:	08006cbb 	.word	0x08006cbb
 8006c40:	08006cbb 	.word	0x08006cbb
 8006c44:	08006cbb 	.word	0x08006cbb
 8006c48:	08006cbb 	.word	0x08006cbb
 8006c4c:	08006cbb 	.word	0x08006cbb
 8006c50:	08006cbb 	.word	0x08006cbb
 8006c54:	08006cad 	.word	0x08006cad
 8006c58:	2b40      	cmp	r3, #64	; 0x40
 8006c5a:	d02a      	beq.n	8006cb2 <UART_SetConfig+0x8a6>
 8006c5c:	e02d      	b.n	8006cba <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006c5e:	f7fd f83f 	bl	8003ce0 <HAL_RCCEx_GetD3PCLK1Freq>
 8006c62:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006c64:	e02f      	b.n	8006cc6 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c66:	f107 0314 	add.w	r3, r7, #20
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f7fd f84e 	bl	8003d0c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006c70:	69bb      	ldr	r3, [r7, #24]
 8006c72:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c74:	e027      	b.n	8006cc6 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c76:	f107 0308 	add.w	r3, r7, #8
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f7fd f99a 	bl	8003fb4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c84:	e01f      	b.n	8006cc6 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c86:	4b21      	ldr	r3, [pc, #132]	; (8006d0c <UART_SetConfig+0x900>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f003 0320 	and.w	r3, r3, #32
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d009      	beq.n	8006ca6 <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006c92:	4b1e      	ldr	r3, [pc, #120]	; (8006d0c <UART_SetConfig+0x900>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	08db      	lsrs	r3, r3, #3
 8006c98:	f003 0303 	and.w	r3, r3, #3
 8006c9c:	4a1d      	ldr	r2, [pc, #116]	; (8006d14 <UART_SetConfig+0x908>)
 8006c9e:	fa22 f303 	lsr.w	r3, r2, r3
 8006ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006ca4:	e00f      	b.n	8006cc6 <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 8006ca6:	4b1b      	ldr	r3, [pc, #108]	; (8006d14 <UART_SetConfig+0x908>)
 8006ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006caa:	e00c      	b.n	8006cc6 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006cac:	4b1a      	ldr	r3, [pc, #104]	; (8006d18 <UART_SetConfig+0x90c>)
 8006cae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006cb0:	e009      	b.n	8006cc6 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006cb8:	e005      	b.n	8006cc6 <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006cc4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	f000 81e6 	beq.w	800709a <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd2:	4a12      	ldr	r2, [pc, #72]	; (8006d1c <UART_SetConfig+0x910>)
 8006cd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006cd8:	461a      	mov	r2, r3
 8006cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cdc:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ce0:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	685a      	ldr	r2, [r3, #4]
 8006ce6:	4613      	mov	r3, r2
 8006ce8:	005b      	lsls	r3, r3, #1
 8006cea:	4413      	add	r3, r2
 8006cec:	6a3a      	ldr	r2, [r7, #32]
 8006cee:	429a      	cmp	r2, r3
 8006cf0:	d305      	bcc.n	8006cfe <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006cf8:	6a3a      	ldr	r2, [r7, #32]
 8006cfa:	429a      	cmp	r2, r3
 8006cfc:	d910      	bls.n	8006d20 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 8006cfe:	2301      	movs	r3, #1
 8006d00:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006d04:	e1c9      	b.n	800709a <UART_SetConfig+0xc8e>
 8006d06:	bf00      	nop
 8006d08:	40011c00 	.word	0x40011c00
 8006d0c:	58024400 	.word	0x58024400
 8006d10:	58000c00 	.word	0x58000c00
 8006d14:	03d09000 	.word	0x03d09000
 8006d18:	003d0900 	.word	0x003d0900
 8006d1c:	08008e40 	.word	0x08008e40
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d22:	4618      	mov	r0, r3
 8006d24:	f04f 0100 	mov.w	r1, #0
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d2c:	4ac1      	ldr	r2, [pc, #772]	; (8007034 <UART_SetConfig+0xc28>)
 8006d2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d32:	b29a      	uxth	r2, r3
 8006d34:	f04f 0300 	mov.w	r3, #0
 8006d38:	f7f9 faf2 	bl	8000320 <__aeabi_uldivmod>
 8006d3c:	4602      	mov	r2, r0
 8006d3e:	460b      	mov	r3, r1
 8006d40:	4610      	mov	r0, r2
 8006d42:	4619      	mov	r1, r3
 8006d44:	f04f 0200 	mov.w	r2, #0
 8006d48:	f04f 0300 	mov.w	r3, #0
 8006d4c:	020b      	lsls	r3, r1, #8
 8006d4e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006d52:	0202      	lsls	r2, r0, #8
 8006d54:	6879      	ldr	r1, [r7, #4]
 8006d56:	6849      	ldr	r1, [r1, #4]
 8006d58:	0849      	lsrs	r1, r1, #1
 8006d5a:	4608      	mov	r0, r1
 8006d5c:	f04f 0100 	mov.w	r1, #0
 8006d60:	1814      	adds	r4, r2, r0
 8006d62:	eb43 0501 	adc.w	r5, r3, r1
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	f04f 0300 	mov.w	r3, #0
 8006d70:	4620      	mov	r0, r4
 8006d72:	4629      	mov	r1, r5
 8006d74:	f7f9 fad4 	bl	8000320 <__aeabi_uldivmod>
 8006d78:	4602      	mov	r2, r0
 8006d7a:	460b      	mov	r3, r1
 8006d7c:	4613      	mov	r3, r2
 8006d7e:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d86:	d308      	bcc.n	8006d9a <UART_SetConfig+0x98e>
 8006d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d8e:	d204      	bcs.n	8006d9a <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d96:	60da      	str	r2, [r3, #12]
 8006d98:	e17f      	b.n	800709a <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006da0:	e17b      	b.n	800709a <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	69db      	ldr	r3, [r3, #28]
 8006da6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006daa:	f040 80bd 	bne.w	8006f28 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 8006dae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006db2:	2b20      	cmp	r3, #32
 8006db4:	dc48      	bgt.n	8006e48 <UART_SetConfig+0xa3c>
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	db7b      	blt.n	8006eb2 <UART_SetConfig+0xaa6>
 8006dba:	2b20      	cmp	r3, #32
 8006dbc:	d879      	bhi.n	8006eb2 <UART_SetConfig+0xaa6>
 8006dbe:	a201      	add	r2, pc, #4	; (adr r2, 8006dc4 <UART_SetConfig+0x9b8>)
 8006dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dc4:	08006e4f 	.word	0x08006e4f
 8006dc8:	08006e57 	.word	0x08006e57
 8006dcc:	08006eb3 	.word	0x08006eb3
 8006dd0:	08006eb3 	.word	0x08006eb3
 8006dd4:	08006e5f 	.word	0x08006e5f
 8006dd8:	08006eb3 	.word	0x08006eb3
 8006ddc:	08006eb3 	.word	0x08006eb3
 8006de0:	08006eb3 	.word	0x08006eb3
 8006de4:	08006e6f 	.word	0x08006e6f
 8006de8:	08006eb3 	.word	0x08006eb3
 8006dec:	08006eb3 	.word	0x08006eb3
 8006df0:	08006eb3 	.word	0x08006eb3
 8006df4:	08006eb3 	.word	0x08006eb3
 8006df8:	08006eb3 	.word	0x08006eb3
 8006dfc:	08006eb3 	.word	0x08006eb3
 8006e00:	08006eb3 	.word	0x08006eb3
 8006e04:	08006e7f 	.word	0x08006e7f
 8006e08:	08006eb3 	.word	0x08006eb3
 8006e0c:	08006eb3 	.word	0x08006eb3
 8006e10:	08006eb3 	.word	0x08006eb3
 8006e14:	08006eb3 	.word	0x08006eb3
 8006e18:	08006eb3 	.word	0x08006eb3
 8006e1c:	08006eb3 	.word	0x08006eb3
 8006e20:	08006eb3 	.word	0x08006eb3
 8006e24:	08006eb3 	.word	0x08006eb3
 8006e28:	08006eb3 	.word	0x08006eb3
 8006e2c:	08006eb3 	.word	0x08006eb3
 8006e30:	08006eb3 	.word	0x08006eb3
 8006e34:	08006eb3 	.word	0x08006eb3
 8006e38:	08006eb3 	.word	0x08006eb3
 8006e3c:	08006eb3 	.word	0x08006eb3
 8006e40:	08006eb3 	.word	0x08006eb3
 8006e44:	08006ea5 	.word	0x08006ea5
 8006e48:	2b40      	cmp	r3, #64	; 0x40
 8006e4a:	d02e      	beq.n	8006eaa <UART_SetConfig+0xa9e>
 8006e4c:	e031      	b.n	8006eb2 <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e4e:	f7fc f821 	bl	8002e94 <HAL_RCC_GetPCLK1Freq>
 8006e52:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006e54:	e033      	b.n	8006ebe <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e56:	f7fc f833 	bl	8002ec0 <HAL_RCC_GetPCLK2Freq>
 8006e5a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006e5c:	e02f      	b.n	8006ebe <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e5e:	f107 0314 	add.w	r3, r7, #20
 8006e62:	4618      	mov	r0, r3
 8006e64:	f7fc ff52 	bl	8003d0c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006e68:	69bb      	ldr	r3, [r7, #24]
 8006e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006e6c:	e027      	b.n	8006ebe <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e6e:	f107 0308 	add.w	r3, r7, #8
 8006e72:	4618      	mov	r0, r3
 8006e74:	f7fd f89e 	bl	8003fb4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006e7c:	e01f      	b.n	8006ebe <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e7e:	4b6e      	ldr	r3, [pc, #440]	; (8007038 <UART_SetConfig+0xc2c>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f003 0320 	and.w	r3, r3, #32
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d009      	beq.n	8006e9e <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006e8a:	4b6b      	ldr	r3, [pc, #428]	; (8007038 <UART_SetConfig+0xc2c>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	08db      	lsrs	r3, r3, #3
 8006e90:	f003 0303 	and.w	r3, r3, #3
 8006e94:	4a69      	ldr	r2, [pc, #420]	; (800703c <UART_SetConfig+0xc30>)
 8006e96:	fa22 f303 	lsr.w	r3, r2, r3
 8006e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006e9c:	e00f      	b.n	8006ebe <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 8006e9e:	4b67      	ldr	r3, [pc, #412]	; (800703c <UART_SetConfig+0xc30>)
 8006ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006ea2:	e00c      	b.n	8006ebe <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006ea4:	4b66      	ldr	r3, [pc, #408]	; (8007040 <UART_SetConfig+0xc34>)
 8006ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006ea8:	e009      	b.n	8006ebe <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006eaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006eae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006eb0:	e005      	b.n	8006ebe <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006ebc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	f000 80ea 	beq.w	800709a <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eca:	4a5a      	ldr	r2, [pc, #360]	; (8007034 <UART_SetConfig+0xc28>)
 8006ecc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ed0:	461a      	mov	r2, r3
 8006ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ed4:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ed8:	005a      	lsls	r2, r3, #1
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	085b      	lsrs	r3, r3, #1
 8006ee0:	441a      	add	r2, r3
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eea:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eee:	2b0f      	cmp	r3, #15
 8006ef0:	d916      	bls.n	8006f20 <UART_SetConfig+0xb14>
 8006ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ef4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ef8:	d212      	bcs.n	8006f20 <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006efc:	b29b      	uxth	r3, r3
 8006efe:	f023 030f 	bic.w	r3, r3, #15
 8006f02:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f06:	085b      	lsrs	r3, r3, #1
 8006f08:	b29b      	uxth	r3, r3
 8006f0a:	f003 0307 	and.w	r3, r3, #7
 8006f0e:	b29a      	uxth	r2, r3
 8006f10:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006f12:	4313      	orrs	r3, r2
 8006f14:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006f1c:	60da      	str	r2, [r3, #12]
 8006f1e:	e0bc      	b.n	800709a <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8006f20:	2301      	movs	r3, #1
 8006f22:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006f26:	e0b8      	b.n	800709a <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006f28:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006f2c:	2b20      	cmp	r3, #32
 8006f2e:	dc4b      	bgt.n	8006fc8 <UART_SetConfig+0xbbc>
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	f2c0 8087 	blt.w	8007044 <UART_SetConfig+0xc38>
 8006f36:	2b20      	cmp	r3, #32
 8006f38:	f200 8084 	bhi.w	8007044 <UART_SetConfig+0xc38>
 8006f3c:	a201      	add	r2, pc, #4	; (adr r2, 8006f44 <UART_SetConfig+0xb38>)
 8006f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f42:	bf00      	nop
 8006f44:	08006fcf 	.word	0x08006fcf
 8006f48:	08006fd7 	.word	0x08006fd7
 8006f4c:	08007045 	.word	0x08007045
 8006f50:	08007045 	.word	0x08007045
 8006f54:	08006fdf 	.word	0x08006fdf
 8006f58:	08007045 	.word	0x08007045
 8006f5c:	08007045 	.word	0x08007045
 8006f60:	08007045 	.word	0x08007045
 8006f64:	08006fef 	.word	0x08006fef
 8006f68:	08007045 	.word	0x08007045
 8006f6c:	08007045 	.word	0x08007045
 8006f70:	08007045 	.word	0x08007045
 8006f74:	08007045 	.word	0x08007045
 8006f78:	08007045 	.word	0x08007045
 8006f7c:	08007045 	.word	0x08007045
 8006f80:	08007045 	.word	0x08007045
 8006f84:	08006fff 	.word	0x08006fff
 8006f88:	08007045 	.word	0x08007045
 8006f8c:	08007045 	.word	0x08007045
 8006f90:	08007045 	.word	0x08007045
 8006f94:	08007045 	.word	0x08007045
 8006f98:	08007045 	.word	0x08007045
 8006f9c:	08007045 	.word	0x08007045
 8006fa0:	08007045 	.word	0x08007045
 8006fa4:	08007045 	.word	0x08007045
 8006fa8:	08007045 	.word	0x08007045
 8006fac:	08007045 	.word	0x08007045
 8006fb0:	08007045 	.word	0x08007045
 8006fb4:	08007045 	.word	0x08007045
 8006fb8:	08007045 	.word	0x08007045
 8006fbc:	08007045 	.word	0x08007045
 8006fc0:	08007045 	.word	0x08007045
 8006fc4:	08007025 	.word	0x08007025
 8006fc8:	2b40      	cmp	r3, #64	; 0x40
 8006fca:	d02e      	beq.n	800702a <UART_SetConfig+0xc1e>
 8006fcc:	e03a      	b.n	8007044 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006fce:	f7fb ff61 	bl	8002e94 <HAL_RCC_GetPCLK1Freq>
 8006fd2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006fd4:	e03c      	b.n	8007050 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006fd6:	f7fb ff73 	bl	8002ec0 <HAL_RCC_GetPCLK2Freq>
 8006fda:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006fdc:	e038      	b.n	8007050 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006fde:	f107 0314 	add.w	r3, r7, #20
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f7fc fe92 	bl	8003d0c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006fe8:	69bb      	ldr	r3, [r7, #24]
 8006fea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006fec:	e030      	b.n	8007050 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006fee:	f107 0308 	add.w	r3, r7, #8
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f7fc ffde 	bl	8003fb4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006ffc:	e028      	b.n	8007050 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ffe:	4b0e      	ldr	r3, [pc, #56]	; (8007038 <UART_SetConfig+0xc2c>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f003 0320 	and.w	r3, r3, #32
 8007006:	2b00      	cmp	r3, #0
 8007008:	d009      	beq.n	800701e <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800700a:	4b0b      	ldr	r3, [pc, #44]	; (8007038 <UART_SetConfig+0xc2c>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	08db      	lsrs	r3, r3, #3
 8007010:	f003 0303 	and.w	r3, r3, #3
 8007014:	4a09      	ldr	r2, [pc, #36]	; (800703c <UART_SetConfig+0xc30>)
 8007016:	fa22 f303 	lsr.w	r3, r2, r3
 800701a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800701c:	e018      	b.n	8007050 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 800701e:	4b07      	ldr	r3, [pc, #28]	; (800703c <UART_SetConfig+0xc30>)
 8007020:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007022:	e015      	b.n	8007050 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007024:	4b06      	ldr	r3, [pc, #24]	; (8007040 <UART_SetConfig+0xc34>)
 8007026:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007028:	e012      	b.n	8007050 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800702a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800702e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007030:	e00e      	b.n	8007050 <UART_SetConfig+0xc44>
 8007032:	bf00      	nop
 8007034:	08008e40 	.word	0x08008e40
 8007038:	58024400 	.word	0x58024400
 800703c:	03d09000 	.word	0x03d09000
 8007040:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8007044:	2300      	movs	r3, #0
 8007046:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007048:	2301      	movs	r3, #1
 800704a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800704e:	bf00      	nop
    }

    if (pclk != 0U)
 8007050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007052:	2b00      	cmp	r3, #0
 8007054:	d021      	beq.n	800709a <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800705a:	4a1a      	ldr	r2, [pc, #104]	; (80070c4 <UART_SetConfig+0xcb8>)
 800705c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007060:	461a      	mov	r2, r3
 8007062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007064:	fbb3 f2f2 	udiv	r2, r3, r2
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	085b      	lsrs	r3, r3, #1
 800706e:	441a      	add	r2, r3
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	fbb2 f3f3 	udiv	r3, r2, r3
 8007078:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800707a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800707c:	2b0f      	cmp	r3, #15
 800707e:	d909      	bls.n	8007094 <UART_SetConfig+0xc88>
 8007080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007082:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007086:	d205      	bcs.n	8007094 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800708a:	b29a      	uxth	r2, r3
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	60da      	str	r2, [r3, #12]
 8007092:	e002      	b.n	800709a <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8007094:	2301      	movs	r3, #1
 8007096:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2201      	movs	r2, #1
 800709e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2201      	movs	r2, #1
 80070a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2200      	movs	r2, #0
 80070ae:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2200      	movs	r2, #0
 80070b4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80070b6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3738      	adds	r7, #56	; 0x38
 80070be:	46bd      	mov	sp, r7
 80070c0:	bdb0      	pop	{r4, r5, r7, pc}
 80070c2:	bf00      	nop
 80070c4:	08008e40 	.word	0x08008e40

080070c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b083      	sub	sp, #12
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070d4:	f003 0301 	and.w	r3, r3, #1
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d00a      	beq.n	80070f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	430a      	orrs	r2, r1
 80070f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070f6:	f003 0302 	and.w	r3, r3, #2
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d00a      	beq.n	8007114 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	430a      	orrs	r2, r1
 8007112:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007118:	f003 0304 	and.w	r3, r3, #4
 800711c:	2b00      	cmp	r3, #0
 800711e:	d00a      	beq.n	8007136 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	430a      	orrs	r2, r1
 8007134:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800713a:	f003 0308 	and.w	r3, r3, #8
 800713e:	2b00      	cmp	r3, #0
 8007140:	d00a      	beq.n	8007158 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	430a      	orrs	r2, r1
 8007156:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800715c:	f003 0310 	and.w	r3, r3, #16
 8007160:	2b00      	cmp	r3, #0
 8007162:	d00a      	beq.n	800717a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	689b      	ldr	r3, [r3, #8]
 800716a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	430a      	orrs	r2, r1
 8007178:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800717e:	f003 0320 	and.w	r3, r3, #32
 8007182:	2b00      	cmp	r3, #0
 8007184:	d00a      	beq.n	800719c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	689b      	ldr	r3, [r3, #8]
 800718c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	430a      	orrs	r2, r1
 800719a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d01a      	beq.n	80071de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	430a      	orrs	r2, r1
 80071bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80071c6:	d10a      	bne.n	80071de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	430a      	orrs	r2, r1
 80071dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d00a      	beq.n	8007200 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	430a      	orrs	r2, r1
 80071fe:	605a      	str	r2, [r3, #4]
  }
}
 8007200:	bf00      	nop
 8007202:	370c      	adds	r7, #12
 8007204:	46bd      	mov	sp, r7
 8007206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720a:	4770      	bx	lr

0800720c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b086      	sub	sp, #24
 8007210:	af02      	add	r7, sp, #8
 8007212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2200      	movs	r2, #0
 8007218:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800721c:	f7fa fbf2 	bl	8001a04 <HAL_GetTick>
 8007220:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f003 0308 	and.w	r3, r3, #8
 800722c:	2b08      	cmp	r3, #8
 800722e:	d10e      	bne.n	800724e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007230:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007234:	9300      	str	r3, [sp, #0]
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	2200      	movs	r2, #0
 800723a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f000 f82f 	bl	80072a2 <UART_WaitOnFlagUntilTimeout>
 8007244:	4603      	mov	r3, r0
 8007246:	2b00      	cmp	r3, #0
 8007248:	d001      	beq.n	800724e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800724a:	2303      	movs	r3, #3
 800724c:	e025      	b.n	800729a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f003 0304 	and.w	r3, r3, #4
 8007258:	2b04      	cmp	r3, #4
 800725a:	d10e      	bne.n	800727a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800725c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007260:	9300      	str	r3, [sp, #0]
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2200      	movs	r2, #0
 8007266:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 f819 	bl	80072a2 <UART_WaitOnFlagUntilTimeout>
 8007270:	4603      	mov	r3, r0
 8007272:	2b00      	cmp	r3, #0
 8007274:	d001      	beq.n	800727a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007276:	2303      	movs	r3, #3
 8007278:	e00f      	b.n	800729a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2220      	movs	r2, #32
 800727e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2220      	movs	r2, #32
 8007286:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2200      	movs	r2, #0
 800728e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2200      	movs	r2, #0
 8007294:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007298:	2300      	movs	r3, #0
}
 800729a:	4618      	mov	r0, r3
 800729c:	3710      	adds	r7, #16
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}

080072a2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80072a2:	b580      	push	{r7, lr}
 80072a4:	b09c      	sub	sp, #112	; 0x70
 80072a6:	af00      	add	r7, sp, #0
 80072a8:	60f8      	str	r0, [r7, #12]
 80072aa:	60b9      	str	r1, [r7, #8]
 80072ac:	603b      	str	r3, [r7, #0]
 80072ae:	4613      	mov	r3, r2
 80072b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072b2:	e0a9      	b.n	8007408 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80072b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072ba:	f000 80a5 	beq.w	8007408 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072be:	f7fa fba1 	bl	8001a04 <HAL_GetTick>
 80072c2:	4602      	mov	r2, r0
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	1ad3      	subs	r3, r2, r3
 80072c8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80072ca:	429a      	cmp	r2, r3
 80072cc:	d302      	bcc.n	80072d4 <UART_WaitOnFlagUntilTimeout+0x32>
 80072ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d140      	bne.n	8007356 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072dc:	e853 3f00 	ldrex	r3, [r3]
 80072e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80072e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072e4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80072e8:	667b      	str	r3, [r7, #100]	; 0x64
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	461a      	mov	r2, r3
 80072f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80072f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80072f4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80072f8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80072fa:	e841 2300 	strex	r3, r2, [r1]
 80072fe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007300:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007302:	2b00      	cmp	r3, #0
 8007304:	d1e6      	bne.n	80072d4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	3308      	adds	r3, #8
 800730c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800730e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007310:	e853 3f00 	ldrex	r3, [r3]
 8007314:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007318:	f023 0301 	bic.w	r3, r3, #1
 800731c:	663b      	str	r3, [r7, #96]	; 0x60
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	3308      	adds	r3, #8
 8007324:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007326:	64ba      	str	r2, [r7, #72]	; 0x48
 8007328:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800732a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800732c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800732e:	e841 2300 	strex	r3, r2, [r1]
 8007332:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007334:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007336:	2b00      	cmp	r3, #0
 8007338:	d1e5      	bne.n	8007306 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	2220      	movs	r2, #32
 800733e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2220      	movs	r2, #32
 8007346:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	2200      	movs	r2, #0
 800734e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007352:	2303      	movs	r3, #3
 8007354:	e069      	b.n	800742a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f003 0304 	and.w	r3, r3, #4
 8007360:	2b00      	cmp	r3, #0
 8007362:	d051      	beq.n	8007408 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	69db      	ldr	r3, [r3, #28]
 800736a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800736e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007372:	d149      	bne.n	8007408 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800737c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007386:	e853 3f00 	ldrex	r3, [r3]
 800738a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800738c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800738e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007392:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	461a      	mov	r2, r3
 800739a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800739c:	637b      	str	r3, [r7, #52]	; 0x34
 800739e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80073a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80073a4:	e841 2300 	strex	r3, r2, [r1]
 80073a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80073aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d1e6      	bne.n	800737e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	3308      	adds	r3, #8
 80073b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	e853 3f00 	ldrex	r3, [r3]
 80073be:	613b      	str	r3, [r7, #16]
   return(result);
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	f023 0301 	bic.w	r3, r3, #1
 80073c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	3308      	adds	r3, #8
 80073ce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80073d0:	623a      	str	r2, [r7, #32]
 80073d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d4:	69f9      	ldr	r1, [r7, #28]
 80073d6:	6a3a      	ldr	r2, [r7, #32]
 80073d8:	e841 2300 	strex	r3, r2, [r1]
 80073dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80073de:	69bb      	ldr	r3, [r7, #24]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d1e5      	bne.n	80073b0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2220      	movs	r2, #32
 80073e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2220      	movs	r2, #32
 80073f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	2220      	movs	r2, #32
 80073f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2200      	movs	r2, #0
 8007400:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007404:	2303      	movs	r3, #3
 8007406:	e010      	b.n	800742a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	69da      	ldr	r2, [r3, #28]
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	4013      	ands	r3, r2
 8007412:	68ba      	ldr	r2, [r7, #8]
 8007414:	429a      	cmp	r2, r3
 8007416:	bf0c      	ite	eq
 8007418:	2301      	moveq	r3, #1
 800741a:	2300      	movne	r3, #0
 800741c:	b2db      	uxtb	r3, r3
 800741e:	461a      	mov	r2, r3
 8007420:	79fb      	ldrb	r3, [r7, #7]
 8007422:	429a      	cmp	r2, r3
 8007424:	f43f af46 	beq.w	80072b4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007428:	2300      	movs	r3, #0
}
 800742a:	4618      	mov	r0, r3
 800742c:	3770      	adds	r7, #112	; 0x70
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}

08007432 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007432:	b480      	push	{r7}
 8007434:	b085      	sub	sp, #20
 8007436:	af00      	add	r7, sp, #0
 8007438:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007440:	2b01      	cmp	r3, #1
 8007442:	d101      	bne.n	8007448 <HAL_UARTEx_DisableFifoMode+0x16>
 8007444:	2302      	movs	r3, #2
 8007446:	e027      	b.n	8007498 <HAL_UARTEx_DisableFifoMode+0x66>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2201      	movs	r2, #1
 800744c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2224      	movs	r2, #36	; 0x24
 8007454:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	681a      	ldr	r2, [r3, #0]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f022 0201 	bic.w	r2, r2, #1
 800746e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007476:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2200      	movs	r2, #0
 800747c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	68fa      	ldr	r2, [r7, #12]
 8007484:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2220      	movs	r2, #32
 800748a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2200      	movs	r2, #0
 8007492:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007496:	2300      	movs	r3, #0
}
 8007498:	4618      	mov	r0, r3
 800749a:	3714      	adds	r7, #20
 800749c:	46bd      	mov	sp, r7
 800749e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a2:	4770      	bx	lr

080074a4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b084      	sub	sp, #16
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80074b4:	2b01      	cmp	r3, #1
 80074b6:	d101      	bne.n	80074bc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80074b8:	2302      	movs	r3, #2
 80074ba:	e02d      	b.n	8007518 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2201      	movs	r2, #1
 80074c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2224      	movs	r2, #36	; 0x24
 80074c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	681a      	ldr	r2, [r3, #0]
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f022 0201 	bic.w	r2, r2, #1
 80074e2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	689b      	ldr	r3, [r3, #8]
 80074ea:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	683a      	ldr	r2, [r7, #0]
 80074f4:	430a      	orrs	r2, r1
 80074f6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f000 f84f 	bl	800759c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	68fa      	ldr	r2, [r7, #12]
 8007504:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2220      	movs	r2, #32
 800750a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2200      	movs	r2, #0
 8007512:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007516:	2300      	movs	r3, #0
}
 8007518:	4618      	mov	r0, r3
 800751a:	3710      	adds	r7, #16
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}

08007520 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b084      	sub	sp, #16
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
 8007528:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007530:	2b01      	cmp	r3, #1
 8007532:	d101      	bne.n	8007538 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007534:	2302      	movs	r3, #2
 8007536:	e02d      	b.n	8007594 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2201      	movs	r2, #1
 800753c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2224      	movs	r2, #36	; 0x24
 8007544:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	681a      	ldr	r2, [r3, #0]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f022 0201 	bic.w	r2, r2, #1
 800755e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	683a      	ldr	r2, [r7, #0]
 8007570:	430a      	orrs	r2, r1
 8007572:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f000 f811 	bl	800759c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	68fa      	ldr	r2, [r7, #12]
 8007580:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2220      	movs	r2, #32
 8007586:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2200      	movs	r2, #0
 800758e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007592:	2300      	movs	r3, #0
}
 8007594:	4618      	mov	r0, r3
 8007596:	3710      	adds	r7, #16
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}

0800759c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800759c:	b480      	push	{r7}
 800759e:	b085      	sub	sp, #20
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d108      	bne.n	80075be <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2201      	movs	r2, #1
 80075b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2201      	movs	r2, #1
 80075b8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80075bc:	e031      	b.n	8007622 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80075be:	2310      	movs	r3, #16
 80075c0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80075c2:	2310      	movs	r3, #16
 80075c4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	689b      	ldr	r3, [r3, #8]
 80075cc:	0e5b      	lsrs	r3, r3, #25
 80075ce:	b2db      	uxtb	r3, r3
 80075d0:	f003 0307 	and.w	r3, r3, #7
 80075d4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	689b      	ldr	r3, [r3, #8]
 80075dc:	0f5b      	lsrs	r3, r3, #29
 80075de:	b2db      	uxtb	r3, r3
 80075e0:	f003 0307 	and.w	r3, r3, #7
 80075e4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80075e6:	7bbb      	ldrb	r3, [r7, #14]
 80075e8:	7b3a      	ldrb	r2, [r7, #12]
 80075ea:	4911      	ldr	r1, [pc, #68]	; (8007630 <UARTEx_SetNbDataToProcess+0x94>)
 80075ec:	5c8a      	ldrb	r2, [r1, r2]
 80075ee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80075f2:	7b3a      	ldrb	r2, [r7, #12]
 80075f4:	490f      	ldr	r1, [pc, #60]	; (8007634 <UARTEx_SetNbDataToProcess+0x98>)
 80075f6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80075f8:	fb93 f3f2 	sdiv	r3, r3, r2
 80075fc:	b29a      	uxth	r2, r3
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007604:	7bfb      	ldrb	r3, [r7, #15]
 8007606:	7b7a      	ldrb	r2, [r7, #13]
 8007608:	4909      	ldr	r1, [pc, #36]	; (8007630 <UARTEx_SetNbDataToProcess+0x94>)
 800760a:	5c8a      	ldrb	r2, [r1, r2]
 800760c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007610:	7b7a      	ldrb	r2, [r7, #13]
 8007612:	4908      	ldr	r1, [pc, #32]	; (8007634 <UARTEx_SetNbDataToProcess+0x98>)
 8007614:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007616:	fb93 f3f2 	sdiv	r3, r3, r2
 800761a:	b29a      	uxth	r2, r3
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007622:	bf00      	nop
 8007624:	3714      	adds	r7, #20
 8007626:	46bd      	mov	sp, r7
 8007628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762c:	4770      	bx	lr
 800762e:	bf00      	nop
 8007630:	08008e58 	.word	0x08008e58
 8007634:	08008e60 	.word	0x08008e60

08007638 <findslot>:
 8007638:	4b0a      	ldr	r3, [pc, #40]	; (8007664 <findslot+0x2c>)
 800763a:	b510      	push	{r4, lr}
 800763c:	4604      	mov	r4, r0
 800763e:	6818      	ldr	r0, [r3, #0]
 8007640:	b118      	cbz	r0, 800764a <findslot+0x12>
 8007642:	6983      	ldr	r3, [r0, #24]
 8007644:	b90b      	cbnz	r3, 800764a <findslot+0x12>
 8007646:	f000 fad7 	bl	8007bf8 <__sinit>
 800764a:	2c13      	cmp	r4, #19
 800764c:	d807      	bhi.n	800765e <findslot+0x26>
 800764e:	4806      	ldr	r0, [pc, #24]	; (8007668 <findslot+0x30>)
 8007650:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8007654:	3201      	adds	r2, #1
 8007656:	d002      	beq.n	800765e <findslot+0x26>
 8007658:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 800765c:	bd10      	pop	{r4, pc}
 800765e:	2000      	movs	r0, #0
 8007660:	e7fc      	b.n	800765c <findslot+0x24>
 8007662:	bf00      	nop
 8007664:	24000024 	.word	0x24000024
 8007668:	240000d8 	.word	0x240000d8

0800766c <checkerror>:
 800766c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800766e:	1c43      	adds	r3, r0, #1
 8007670:	4604      	mov	r4, r0
 8007672:	d109      	bne.n	8007688 <checkerror+0x1c>
 8007674:	f000 fa62 	bl	8007b3c <__errno>
 8007678:	2613      	movs	r6, #19
 800767a:	4605      	mov	r5, r0
 800767c:	2700      	movs	r7, #0
 800767e:	4630      	mov	r0, r6
 8007680:	4639      	mov	r1, r7
 8007682:	beab      	bkpt	0x00ab
 8007684:	4606      	mov	r6, r0
 8007686:	602e      	str	r6, [r5, #0]
 8007688:	4620      	mov	r0, r4
 800768a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800768c <error>:
 800768c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800768e:	4604      	mov	r4, r0
 8007690:	f000 fa54 	bl	8007b3c <__errno>
 8007694:	2613      	movs	r6, #19
 8007696:	4605      	mov	r5, r0
 8007698:	2700      	movs	r7, #0
 800769a:	4630      	mov	r0, r6
 800769c:	4639      	mov	r1, r7
 800769e:	beab      	bkpt	0x00ab
 80076a0:	4606      	mov	r6, r0
 80076a2:	602e      	str	r6, [r5, #0]
 80076a4:	4620      	mov	r0, r4
 80076a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080076a8 <_swiread>:
 80076a8:	b530      	push	{r4, r5, lr}
 80076aa:	b085      	sub	sp, #20
 80076ac:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80076b0:	9203      	str	r2, [sp, #12]
 80076b2:	2406      	movs	r4, #6
 80076b4:	ad01      	add	r5, sp, #4
 80076b6:	4620      	mov	r0, r4
 80076b8:	4629      	mov	r1, r5
 80076ba:	beab      	bkpt	0x00ab
 80076bc:	4604      	mov	r4, r0
 80076be:	4620      	mov	r0, r4
 80076c0:	f7ff ffd4 	bl	800766c <checkerror>
 80076c4:	b005      	add	sp, #20
 80076c6:	bd30      	pop	{r4, r5, pc}

080076c8 <_read>:
 80076c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80076ca:	4615      	mov	r5, r2
 80076cc:	9101      	str	r1, [sp, #4]
 80076ce:	f7ff ffb3 	bl	8007638 <findslot>
 80076d2:	9901      	ldr	r1, [sp, #4]
 80076d4:	4604      	mov	r4, r0
 80076d6:	b938      	cbnz	r0, 80076e8 <_read+0x20>
 80076d8:	f000 fa30 	bl	8007b3c <__errno>
 80076dc:	2309      	movs	r3, #9
 80076de:	6003      	str	r3, [r0, #0]
 80076e0:	f04f 30ff 	mov.w	r0, #4294967295
 80076e4:	b003      	add	sp, #12
 80076e6:	bd30      	pop	{r4, r5, pc}
 80076e8:	6800      	ldr	r0, [r0, #0]
 80076ea:	462a      	mov	r2, r5
 80076ec:	f7ff ffdc 	bl	80076a8 <_swiread>
 80076f0:	1c43      	adds	r3, r0, #1
 80076f2:	d0f7      	beq.n	80076e4 <_read+0x1c>
 80076f4:	6863      	ldr	r3, [r4, #4]
 80076f6:	1a2a      	subs	r2, r5, r0
 80076f8:	4413      	add	r3, r2
 80076fa:	6063      	str	r3, [r4, #4]
 80076fc:	4610      	mov	r0, r2
 80076fe:	e7f1      	b.n	80076e4 <_read+0x1c>

08007700 <_swilseek>:
 8007700:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007702:	460c      	mov	r4, r1
 8007704:	4616      	mov	r6, r2
 8007706:	f7ff ff97 	bl	8007638 <findslot>
 800770a:	4605      	mov	r5, r0
 800770c:	b940      	cbnz	r0, 8007720 <_swilseek+0x20>
 800770e:	f000 fa15 	bl	8007b3c <__errno>
 8007712:	2309      	movs	r3, #9
 8007714:	6003      	str	r3, [r0, #0]
 8007716:	f04f 34ff 	mov.w	r4, #4294967295
 800771a:	4620      	mov	r0, r4
 800771c:	b003      	add	sp, #12
 800771e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007720:	2e02      	cmp	r6, #2
 8007722:	d903      	bls.n	800772c <_swilseek+0x2c>
 8007724:	f000 fa0a 	bl	8007b3c <__errno>
 8007728:	2316      	movs	r3, #22
 800772a:	e7f3      	b.n	8007714 <_swilseek+0x14>
 800772c:	2e01      	cmp	r6, #1
 800772e:	d112      	bne.n	8007756 <_swilseek+0x56>
 8007730:	6843      	ldr	r3, [r0, #4]
 8007732:	18e4      	adds	r4, r4, r3
 8007734:	d4f6      	bmi.n	8007724 <_swilseek+0x24>
 8007736:	682b      	ldr	r3, [r5, #0]
 8007738:	260a      	movs	r6, #10
 800773a:	e9cd 3400 	strd	r3, r4, [sp]
 800773e:	466f      	mov	r7, sp
 8007740:	4630      	mov	r0, r6
 8007742:	4639      	mov	r1, r7
 8007744:	beab      	bkpt	0x00ab
 8007746:	4606      	mov	r6, r0
 8007748:	4630      	mov	r0, r6
 800774a:	f7ff ff8f 	bl	800766c <checkerror>
 800774e:	2800      	cmp	r0, #0
 8007750:	dbe1      	blt.n	8007716 <_swilseek+0x16>
 8007752:	606c      	str	r4, [r5, #4]
 8007754:	e7e1      	b.n	800771a <_swilseek+0x1a>
 8007756:	2e02      	cmp	r6, #2
 8007758:	d1ed      	bne.n	8007736 <_swilseek+0x36>
 800775a:	6803      	ldr	r3, [r0, #0]
 800775c:	9300      	str	r3, [sp, #0]
 800775e:	260c      	movs	r6, #12
 8007760:	466f      	mov	r7, sp
 8007762:	4630      	mov	r0, r6
 8007764:	4639      	mov	r1, r7
 8007766:	beab      	bkpt	0x00ab
 8007768:	4606      	mov	r6, r0
 800776a:	4630      	mov	r0, r6
 800776c:	f7ff ff7e 	bl	800766c <checkerror>
 8007770:	1c43      	adds	r3, r0, #1
 8007772:	d0d0      	beq.n	8007716 <_swilseek+0x16>
 8007774:	4404      	add	r4, r0
 8007776:	e7de      	b.n	8007736 <_swilseek+0x36>

08007778 <_lseek>:
 8007778:	f7ff bfc2 	b.w	8007700 <_swilseek>

0800777c <_swiwrite>:
 800777c:	b530      	push	{r4, r5, lr}
 800777e:	b085      	sub	sp, #20
 8007780:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8007784:	9203      	str	r2, [sp, #12]
 8007786:	2405      	movs	r4, #5
 8007788:	ad01      	add	r5, sp, #4
 800778a:	4620      	mov	r0, r4
 800778c:	4629      	mov	r1, r5
 800778e:	beab      	bkpt	0x00ab
 8007790:	4604      	mov	r4, r0
 8007792:	4620      	mov	r0, r4
 8007794:	f7ff ff6a 	bl	800766c <checkerror>
 8007798:	b005      	add	sp, #20
 800779a:	bd30      	pop	{r4, r5, pc}

0800779c <_write>:
 800779c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800779e:	4615      	mov	r5, r2
 80077a0:	9101      	str	r1, [sp, #4]
 80077a2:	f7ff ff49 	bl	8007638 <findslot>
 80077a6:	9901      	ldr	r1, [sp, #4]
 80077a8:	4604      	mov	r4, r0
 80077aa:	b930      	cbnz	r0, 80077ba <_write+0x1e>
 80077ac:	f000 f9c6 	bl	8007b3c <__errno>
 80077b0:	2309      	movs	r3, #9
 80077b2:	6003      	str	r3, [r0, #0]
 80077b4:	f04f 30ff 	mov.w	r0, #4294967295
 80077b8:	e012      	b.n	80077e0 <_write+0x44>
 80077ba:	6800      	ldr	r0, [r0, #0]
 80077bc:	462a      	mov	r2, r5
 80077be:	f7ff ffdd 	bl	800777c <_swiwrite>
 80077c2:	2800      	cmp	r0, #0
 80077c4:	dbf6      	blt.n	80077b4 <_write+0x18>
 80077c6:	6862      	ldr	r2, [r4, #4]
 80077c8:	1a2b      	subs	r3, r5, r0
 80077ca:	441a      	add	r2, r3
 80077cc:	42a8      	cmp	r0, r5
 80077ce:	6062      	str	r2, [r4, #4]
 80077d0:	d105      	bne.n	80077de <_write+0x42>
 80077d2:	2000      	movs	r0, #0
 80077d4:	b003      	add	sp, #12
 80077d6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80077da:	f7ff bf57 	b.w	800768c <error>
 80077de:	4618      	mov	r0, r3
 80077e0:	b003      	add	sp, #12
 80077e2:	bd30      	pop	{r4, r5, pc}

080077e4 <_swiclose>:
 80077e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80077e6:	2402      	movs	r4, #2
 80077e8:	9001      	str	r0, [sp, #4]
 80077ea:	ad01      	add	r5, sp, #4
 80077ec:	4620      	mov	r0, r4
 80077ee:	4629      	mov	r1, r5
 80077f0:	beab      	bkpt	0x00ab
 80077f2:	4604      	mov	r4, r0
 80077f4:	4620      	mov	r0, r4
 80077f6:	f7ff ff39 	bl	800766c <checkerror>
 80077fa:	b003      	add	sp, #12
 80077fc:	bd30      	pop	{r4, r5, pc}
	...

08007800 <_close>:
 8007800:	b538      	push	{r3, r4, r5, lr}
 8007802:	4605      	mov	r5, r0
 8007804:	f7ff ff18 	bl	8007638 <findslot>
 8007808:	4604      	mov	r4, r0
 800780a:	b930      	cbnz	r0, 800781a <_close+0x1a>
 800780c:	f000 f996 	bl	8007b3c <__errno>
 8007810:	2309      	movs	r3, #9
 8007812:	6003      	str	r3, [r0, #0]
 8007814:	f04f 30ff 	mov.w	r0, #4294967295
 8007818:	bd38      	pop	{r3, r4, r5, pc}
 800781a:	3d01      	subs	r5, #1
 800781c:	2d01      	cmp	r5, #1
 800781e:	d809      	bhi.n	8007834 <_close+0x34>
 8007820:	4b09      	ldr	r3, [pc, #36]	; (8007848 <_close+0x48>)
 8007822:	689a      	ldr	r2, [r3, #8]
 8007824:	691b      	ldr	r3, [r3, #16]
 8007826:	429a      	cmp	r2, r3
 8007828:	d104      	bne.n	8007834 <_close+0x34>
 800782a:	f04f 33ff 	mov.w	r3, #4294967295
 800782e:	6003      	str	r3, [r0, #0]
 8007830:	2000      	movs	r0, #0
 8007832:	e7f1      	b.n	8007818 <_close+0x18>
 8007834:	6820      	ldr	r0, [r4, #0]
 8007836:	f7ff ffd5 	bl	80077e4 <_swiclose>
 800783a:	2800      	cmp	r0, #0
 800783c:	d1ec      	bne.n	8007818 <_close+0x18>
 800783e:	f04f 33ff 	mov.w	r3, #4294967295
 8007842:	6023      	str	r3, [r4, #0]
 8007844:	e7e8      	b.n	8007818 <_close+0x18>
 8007846:	bf00      	nop
 8007848:	240000d8 	.word	0x240000d8

0800784c <_swistat>:
 800784c:	b570      	push	{r4, r5, r6, lr}
 800784e:	460c      	mov	r4, r1
 8007850:	f7ff fef2 	bl	8007638 <findslot>
 8007854:	4605      	mov	r5, r0
 8007856:	b930      	cbnz	r0, 8007866 <_swistat+0x1a>
 8007858:	f000 f970 	bl	8007b3c <__errno>
 800785c:	2309      	movs	r3, #9
 800785e:	6003      	str	r3, [r0, #0]
 8007860:	f04f 30ff 	mov.w	r0, #4294967295
 8007864:	bd70      	pop	{r4, r5, r6, pc}
 8007866:	6863      	ldr	r3, [r4, #4]
 8007868:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800786c:	6063      	str	r3, [r4, #4]
 800786e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007872:	64a3      	str	r3, [r4, #72]	; 0x48
 8007874:	260c      	movs	r6, #12
 8007876:	4630      	mov	r0, r6
 8007878:	4629      	mov	r1, r5
 800787a:	beab      	bkpt	0x00ab
 800787c:	4605      	mov	r5, r0
 800787e:	4628      	mov	r0, r5
 8007880:	f7ff fef4 	bl	800766c <checkerror>
 8007884:	1c43      	adds	r3, r0, #1
 8007886:	bf1c      	itt	ne
 8007888:	6120      	strne	r0, [r4, #16]
 800788a:	2000      	movne	r0, #0
 800788c:	e7ea      	b.n	8007864 <_swistat+0x18>

0800788e <_stat>:
 800788e:	b538      	push	{r3, r4, r5, lr}
 8007890:	460d      	mov	r5, r1
 8007892:	4604      	mov	r4, r0
 8007894:	2258      	movs	r2, #88	; 0x58
 8007896:	2100      	movs	r1, #0
 8007898:	4628      	mov	r0, r5
 800789a:	f000 fa7b 	bl	8007d94 <memset>
 800789e:	4620      	mov	r0, r4
 80078a0:	2100      	movs	r1, #0
 80078a2:	f000 f811 	bl	80078c8 <_swiopen>
 80078a6:	1c43      	adds	r3, r0, #1
 80078a8:	4604      	mov	r4, r0
 80078aa:	d00b      	beq.n	80078c4 <_stat+0x36>
 80078ac:	686b      	ldr	r3, [r5, #4]
 80078ae:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80078b2:	606b      	str	r3, [r5, #4]
 80078b4:	4629      	mov	r1, r5
 80078b6:	f7ff ffc9 	bl	800784c <_swistat>
 80078ba:	4605      	mov	r5, r0
 80078bc:	4620      	mov	r0, r4
 80078be:	f7ff ff9f 	bl	8007800 <_close>
 80078c2:	462c      	mov	r4, r5
 80078c4:	4620      	mov	r0, r4
 80078c6:	bd38      	pop	{r3, r4, r5, pc}

080078c8 <_swiopen>:
 80078c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80078cc:	4b2a      	ldr	r3, [pc, #168]	; (8007978 <_swiopen+0xb0>)
 80078ce:	b097      	sub	sp, #92	; 0x5c
 80078d0:	4681      	mov	r9, r0
 80078d2:	460f      	mov	r7, r1
 80078d4:	2500      	movs	r5, #0
 80078d6:	461e      	mov	r6, r3
 80078d8:	f853 4035 	ldr.w	r4, [r3, r5, lsl #3]
 80078dc:	1c61      	adds	r1, r4, #1
 80078de:	d037      	beq.n	8007950 <_swiopen+0x88>
 80078e0:	3501      	adds	r5, #1
 80078e2:	2d14      	cmp	r5, #20
 80078e4:	d1f8      	bne.n	80078d8 <_swiopen+0x10>
 80078e6:	f000 f929 	bl	8007b3c <__errno>
 80078ea:	2318      	movs	r3, #24
 80078ec:	6003      	str	r3, [r0, #0]
 80078ee:	f04f 34ff 	mov.w	r4, #4294967295
 80078f2:	e03d      	b.n	8007970 <_swiopen+0xa8>
 80078f4:	f3c7 4400 	ubfx	r4, r7, #16, #1
 80078f8:	f240 6301 	movw	r3, #1537	; 0x601
 80078fc:	07ba      	lsls	r2, r7, #30
 80078fe:	bf48      	it	mi
 8007900:	f044 0402 	orrmi.w	r4, r4, #2
 8007904:	421f      	tst	r7, r3
 8007906:	bf18      	it	ne
 8007908:	f044 0404 	orrne.w	r4, r4, #4
 800790c:	073b      	lsls	r3, r7, #28
 800790e:	bf48      	it	mi
 8007910:	f024 0404 	bicmi.w	r4, r4, #4
 8007914:	4648      	mov	r0, r9
 8007916:	bf48      	it	mi
 8007918:	f044 0408 	orrmi.w	r4, r4, #8
 800791c:	f8cd 9000 	str.w	r9, [sp]
 8007920:	f7f8 fcf6 	bl	8000310 <strlen>
 8007924:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8007928:	2401      	movs	r4, #1
 800792a:	4620      	mov	r0, r4
 800792c:	4641      	mov	r1, r8
 800792e:	beab      	bkpt	0x00ab
 8007930:	4604      	mov	r4, r0
 8007932:	2c00      	cmp	r4, #0
 8007934:	db07      	blt.n	8007946 <_swiopen+0x7e>
 8007936:	f846 4035 	str.w	r4, [r6, r5, lsl #3]
 800793a:	eb06 06c5 	add.w	r6, r6, r5, lsl #3
 800793e:	2300      	movs	r3, #0
 8007940:	6073      	str	r3, [r6, #4]
 8007942:	462c      	mov	r4, r5
 8007944:	e014      	b.n	8007970 <_swiopen+0xa8>
 8007946:	4620      	mov	r0, r4
 8007948:	f7ff fea0 	bl	800768c <error>
 800794c:	4604      	mov	r4, r0
 800794e:	e00f      	b.n	8007970 <_swiopen+0xa8>
 8007950:	f407 6320 	and.w	r3, r7, #2560	; 0xa00
 8007954:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8007958:	46e8      	mov	r8, sp
 800795a:	d1cb      	bne.n	80078f4 <_swiopen+0x2c>
 800795c:	4641      	mov	r1, r8
 800795e:	4648      	mov	r0, r9
 8007960:	f7ff ff95 	bl	800788e <_stat>
 8007964:	3001      	adds	r0, #1
 8007966:	d0c5      	beq.n	80078f4 <_swiopen+0x2c>
 8007968:	f000 f8e8 	bl	8007b3c <__errno>
 800796c:	2311      	movs	r3, #17
 800796e:	6003      	str	r3, [r0, #0]
 8007970:	4620      	mov	r0, r4
 8007972:	b017      	add	sp, #92	; 0x5c
 8007974:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007978:	240000d8 	.word	0x240000d8

0800797c <_get_semihosting_exts>:
 800797c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007980:	4606      	mov	r6, r0
 8007982:	460f      	mov	r7, r1
 8007984:	482a      	ldr	r0, [pc, #168]	; (8007a30 <_get_semihosting_exts+0xb4>)
 8007986:	2100      	movs	r1, #0
 8007988:	4615      	mov	r5, r2
 800798a:	f7ff ff9d 	bl	80078c8 <_swiopen>
 800798e:	462a      	mov	r2, r5
 8007990:	4604      	mov	r4, r0
 8007992:	2100      	movs	r1, #0
 8007994:	4630      	mov	r0, r6
 8007996:	f000 f9fd 	bl	8007d94 <memset>
 800799a:	1c63      	adds	r3, r4, #1
 800799c:	d016      	beq.n	80079cc <_get_semihosting_exts+0x50>
 800799e:	4620      	mov	r0, r4
 80079a0:	f7ff fe4a 	bl	8007638 <findslot>
 80079a4:	f04f 090c 	mov.w	r9, #12
 80079a8:	4680      	mov	r8, r0
 80079aa:	4648      	mov	r0, r9
 80079ac:	4641      	mov	r1, r8
 80079ae:	beab      	bkpt	0x00ab
 80079b0:	4680      	mov	r8, r0
 80079b2:	4640      	mov	r0, r8
 80079b4:	f7ff fe5a 	bl	800766c <checkerror>
 80079b8:	2803      	cmp	r0, #3
 80079ba:	dd02      	ble.n	80079c2 <_get_semihosting_exts+0x46>
 80079bc:	1ec3      	subs	r3, r0, #3
 80079be:	42ab      	cmp	r3, r5
 80079c0:	dc08      	bgt.n	80079d4 <_get_semihosting_exts+0x58>
 80079c2:	4620      	mov	r0, r4
 80079c4:	f7ff ff1c 	bl	8007800 <_close>
 80079c8:	f04f 34ff 	mov.w	r4, #4294967295
 80079cc:	4620      	mov	r0, r4
 80079ce:	b003      	add	sp, #12
 80079d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80079d4:	2204      	movs	r2, #4
 80079d6:	eb0d 0102 	add.w	r1, sp, r2
 80079da:	4620      	mov	r0, r4
 80079dc:	f7ff fe74 	bl	80076c8 <_read>
 80079e0:	2803      	cmp	r0, #3
 80079e2:	ddee      	ble.n	80079c2 <_get_semihosting_exts+0x46>
 80079e4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80079e8:	2b53      	cmp	r3, #83	; 0x53
 80079ea:	d1ea      	bne.n	80079c2 <_get_semihosting_exts+0x46>
 80079ec:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80079f0:	2b48      	cmp	r3, #72	; 0x48
 80079f2:	d1e6      	bne.n	80079c2 <_get_semihosting_exts+0x46>
 80079f4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80079f8:	2b46      	cmp	r3, #70	; 0x46
 80079fa:	d1e2      	bne.n	80079c2 <_get_semihosting_exts+0x46>
 80079fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007a00:	2b42      	cmp	r3, #66	; 0x42
 8007a02:	d1de      	bne.n	80079c2 <_get_semihosting_exts+0x46>
 8007a04:	2201      	movs	r2, #1
 8007a06:	4639      	mov	r1, r7
 8007a08:	4620      	mov	r0, r4
 8007a0a:	f7ff fe79 	bl	8007700 <_swilseek>
 8007a0e:	2800      	cmp	r0, #0
 8007a10:	dbd7      	blt.n	80079c2 <_get_semihosting_exts+0x46>
 8007a12:	462a      	mov	r2, r5
 8007a14:	4631      	mov	r1, r6
 8007a16:	4620      	mov	r0, r4
 8007a18:	f7ff fe56 	bl	80076c8 <_read>
 8007a1c:	4605      	mov	r5, r0
 8007a1e:	4620      	mov	r0, r4
 8007a20:	f7ff feee 	bl	8007800 <_close>
 8007a24:	4628      	mov	r0, r5
 8007a26:	f7ff fe21 	bl	800766c <checkerror>
 8007a2a:	4604      	mov	r4, r0
 8007a2c:	e7ce      	b.n	80079cc <_get_semihosting_exts+0x50>
 8007a2e:	bf00      	nop
 8007a30:	08008e68 	.word	0x08008e68

08007a34 <initialise_semihosting_exts>:
 8007a34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007a36:	4d0a      	ldr	r5, [pc, #40]	; (8007a60 <initialise_semihosting_exts+0x2c>)
 8007a38:	4c0a      	ldr	r4, [pc, #40]	; (8007a64 <initialise_semihosting_exts+0x30>)
 8007a3a:	2100      	movs	r1, #0
 8007a3c:	2201      	movs	r2, #1
 8007a3e:	a801      	add	r0, sp, #4
 8007a40:	6029      	str	r1, [r5, #0]
 8007a42:	6022      	str	r2, [r4, #0]
 8007a44:	f7ff ff9a 	bl	800797c <_get_semihosting_exts>
 8007a48:	2800      	cmp	r0, #0
 8007a4a:	dd07      	ble.n	8007a5c <initialise_semihosting_exts+0x28>
 8007a4c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8007a50:	f003 0201 	and.w	r2, r3, #1
 8007a54:	f003 0302 	and.w	r3, r3, #2
 8007a58:	602a      	str	r2, [r5, #0]
 8007a5a:	6023      	str	r3, [r4, #0]
 8007a5c:	b003      	add	sp, #12
 8007a5e:	bd30      	pop	{r4, r5, pc}
 8007a60:	2400001c 	.word	0x2400001c
 8007a64:	24000020 	.word	0x24000020

08007a68 <_has_ext_stdout_stderr>:
 8007a68:	b510      	push	{r4, lr}
 8007a6a:	4c04      	ldr	r4, [pc, #16]	; (8007a7c <_has_ext_stdout_stderr+0x14>)
 8007a6c:	6822      	ldr	r2, [r4, #0]
 8007a6e:	2a00      	cmp	r2, #0
 8007a70:	da01      	bge.n	8007a76 <_has_ext_stdout_stderr+0xe>
 8007a72:	f7ff ffdf 	bl	8007a34 <initialise_semihosting_exts>
 8007a76:	6820      	ldr	r0, [r4, #0]
 8007a78:	bd10      	pop	{r4, pc}
 8007a7a:	bf00      	nop
 8007a7c:	24000020 	.word	0x24000020

08007a80 <initialise_monitor_handles>:
 8007a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a84:	b085      	sub	sp, #20
 8007a86:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8007b38 <initialise_monitor_handles+0xb8>
 8007a8a:	f8cd 9004 	str.w	r9, [sp, #4]
 8007a8e:	2303      	movs	r3, #3
 8007a90:	2400      	movs	r4, #0
 8007a92:	9303      	str	r3, [sp, #12]
 8007a94:	f10d 0804 	add.w	r8, sp, #4
 8007a98:	9402      	str	r4, [sp, #8]
 8007a9a:	2501      	movs	r5, #1
 8007a9c:	4628      	mov	r0, r5
 8007a9e:	4641      	mov	r1, r8
 8007aa0:	beab      	bkpt	0x00ab
 8007aa2:	4605      	mov	r5, r0
 8007aa4:	4e20      	ldr	r6, [pc, #128]	; (8007b28 <initialise_monitor_handles+0xa8>)
 8007aa6:	4a21      	ldr	r2, [pc, #132]	; (8007b2c <initialise_monitor_handles+0xac>)
 8007aa8:	6035      	str	r5, [r6, #0]
 8007aaa:	4623      	mov	r3, r4
 8007aac:	f04f 31ff 	mov.w	r1, #4294967295
 8007ab0:	4614      	mov	r4, r2
 8007ab2:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 8007ab6:	3301      	adds	r3, #1
 8007ab8:	2b14      	cmp	r3, #20
 8007aba:	d1fa      	bne.n	8007ab2 <initialise_monitor_handles+0x32>
 8007abc:	f7ff ffd4 	bl	8007a68 <_has_ext_stdout_stderr>
 8007ac0:	4d1b      	ldr	r5, [pc, #108]	; (8007b30 <initialise_monitor_handles+0xb0>)
 8007ac2:	b1d0      	cbz	r0, 8007afa <initialise_monitor_handles+0x7a>
 8007ac4:	f04f 0a03 	mov.w	sl, #3
 8007ac8:	2304      	movs	r3, #4
 8007aca:	f8cd 9004 	str.w	r9, [sp, #4]
 8007ace:	2701      	movs	r7, #1
 8007ad0:	f8cd a00c 	str.w	sl, [sp, #12]
 8007ad4:	9302      	str	r3, [sp, #8]
 8007ad6:	4638      	mov	r0, r7
 8007ad8:	4641      	mov	r1, r8
 8007ada:	beab      	bkpt	0x00ab
 8007adc:	4683      	mov	fp, r0
 8007ade:	4b15      	ldr	r3, [pc, #84]	; (8007b34 <initialise_monitor_handles+0xb4>)
 8007ae0:	f8cd 9004 	str.w	r9, [sp, #4]
 8007ae4:	f8c3 b000 	str.w	fp, [r3]
 8007ae8:	2308      	movs	r3, #8
 8007aea:	f8cd a00c 	str.w	sl, [sp, #12]
 8007aee:	9302      	str	r3, [sp, #8]
 8007af0:	4638      	mov	r0, r7
 8007af2:	4641      	mov	r1, r8
 8007af4:	beab      	bkpt	0x00ab
 8007af6:	4607      	mov	r7, r0
 8007af8:	602f      	str	r7, [r5, #0]
 8007afa:	682b      	ldr	r3, [r5, #0]
 8007afc:	3301      	adds	r3, #1
 8007afe:	bf02      	ittt	eq
 8007b00:	4b0c      	ldreq	r3, [pc, #48]	; (8007b34 <initialise_monitor_handles+0xb4>)
 8007b02:	681b      	ldreq	r3, [r3, #0]
 8007b04:	602b      	streq	r3, [r5, #0]
 8007b06:	6833      	ldr	r3, [r6, #0]
 8007b08:	6023      	str	r3, [r4, #0]
 8007b0a:	2600      	movs	r6, #0
 8007b0c:	6066      	str	r6, [r4, #4]
 8007b0e:	f7ff ffab 	bl	8007a68 <_has_ext_stdout_stderr>
 8007b12:	b130      	cbz	r0, 8007b22 <initialise_monitor_handles+0xa2>
 8007b14:	4b07      	ldr	r3, [pc, #28]	; (8007b34 <initialise_monitor_handles+0xb4>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8007b1c:	682b      	ldr	r3, [r5, #0]
 8007b1e:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8007b22:	b005      	add	sp, #20
 8007b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b28:	240000d0 	.word	0x240000d0
 8007b2c:	240000d8 	.word	0x240000d8
 8007b30:	240000cc 	.word	0x240000cc
 8007b34:	240000d4 	.word	0x240000d4
 8007b38:	08008e7e 	.word	0x08008e7e

08007b3c <__errno>:
 8007b3c:	4b01      	ldr	r3, [pc, #4]	; (8007b44 <__errno+0x8>)
 8007b3e:	6818      	ldr	r0, [r3, #0]
 8007b40:	4770      	bx	lr
 8007b42:	bf00      	nop
 8007b44:	24000024 	.word	0x24000024

08007b48 <std>:
 8007b48:	2300      	movs	r3, #0
 8007b4a:	b510      	push	{r4, lr}
 8007b4c:	4604      	mov	r4, r0
 8007b4e:	e9c0 3300 	strd	r3, r3, [r0]
 8007b52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007b56:	6083      	str	r3, [r0, #8]
 8007b58:	8181      	strh	r1, [r0, #12]
 8007b5a:	6643      	str	r3, [r0, #100]	; 0x64
 8007b5c:	81c2      	strh	r2, [r0, #14]
 8007b5e:	6183      	str	r3, [r0, #24]
 8007b60:	4619      	mov	r1, r3
 8007b62:	2208      	movs	r2, #8
 8007b64:	305c      	adds	r0, #92	; 0x5c
 8007b66:	f000 f915 	bl	8007d94 <memset>
 8007b6a:	4b05      	ldr	r3, [pc, #20]	; (8007b80 <std+0x38>)
 8007b6c:	6263      	str	r3, [r4, #36]	; 0x24
 8007b6e:	4b05      	ldr	r3, [pc, #20]	; (8007b84 <std+0x3c>)
 8007b70:	62a3      	str	r3, [r4, #40]	; 0x28
 8007b72:	4b05      	ldr	r3, [pc, #20]	; (8007b88 <std+0x40>)
 8007b74:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007b76:	4b05      	ldr	r3, [pc, #20]	; (8007b8c <std+0x44>)
 8007b78:	6224      	str	r4, [r4, #32]
 8007b7a:	6323      	str	r3, [r4, #48]	; 0x30
 8007b7c:	bd10      	pop	{r4, pc}
 8007b7e:	bf00      	nop
 8007b80:	08007f19 	.word	0x08007f19
 8007b84:	08007f3b 	.word	0x08007f3b
 8007b88:	08007f73 	.word	0x08007f73
 8007b8c:	08007f97 	.word	0x08007f97

08007b90 <_cleanup_r>:
 8007b90:	4901      	ldr	r1, [pc, #4]	; (8007b98 <_cleanup_r+0x8>)
 8007b92:	f000 b8af 	b.w	8007cf4 <_fwalk_reent>
 8007b96:	bf00      	nop
 8007b98:	080080f1 	.word	0x080080f1

08007b9c <__sfmoreglue>:
 8007b9c:	b570      	push	{r4, r5, r6, lr}
 8007b9e:	1e4a      	subs	r2, r1, #1
 8007ba0:	2568      	movs	r5, #104	; 0x68
 8007ba2:	4355      	muls	r5, r2
 8007ba4:	460e      	mov	r6, r1
 8007ba6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007baa:	f000 f94b 	bl	8007e44 <_malloc_r>
 8007bae:	4604      	mov	r4, r0
 8007bb0:	b140      	cbz	r0, 8007bc4 <__sfmoreglue+0x28>
 8007bb2:	2100      	movs	r1, #0
 8007bb4:	e9c0 1600 	strd	r1, r6, [r0]
 8007bb8:	300c      	adds	r0, #12
 8007bba:	60a0      	str	r0, [r4, #8]
 8007bbc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007bc0:	f000 f8e8 	bl	8007d94 <memset>
 8007bc4:	4620      	mov	r0, r4
 8007bc6:	bd70      	pop	{r4, r5, r6, pc}

08007bc8 <__sfp_lock_acquire>:
 8007bc8:	4801      	ldr	r0, [pc, #4]	; (8007bd0 <__sfp_lock_acquire+0x8>)
 8007bca:	f000 b8d8 	b.w	8007d7e <__retarget_lock_acquire_recursive>
 8007bce:	bf00      	nop
 8007bd0:	2400044c 	.word	0x2400044c

08007bd4 <__sfp_lock_release>:
 8007bd4:	4801      	ldr	r0, [pc, #4]	; (8007bdc <__sfp_lock_release+0x8>)
 8007bd6:	f000 b8d3 	b.w	8007d80 <__retarget_lock_release_recursive>
 8007bda:	bf00      	nop
 8007bdc:	2400044c 	.word	0x2400044c

08007be0 <__sinit_lock_acquire>:
 8007be0:	4801      	ldr	r0, [pc, #4]	; (8007be8 <__sinit_lock_acquire+0x8>)
 8007be2:	f000 b8cc 	b.w	8007d7e <__retarget_lock_acquire_recursive>
 8007be6:	bf00      	nop
 8007be8:	24000447 	.word	0x24000447

08007bec <__sinit_lock_release>:
 8007bec:	4801      	ldr	r0, [pc, #4]	; (8007bf4 <__sinit_lock_release+0x8>)
 8007bee:	f000 b8c7 	b.w	8007d80 <__retarget_lock_release_recursive>
 8007bf2:	bf00      	nop
 8007bf4:	24000447 	.word	0x24000447

08007bf8 <__sinit>:
 8007bf8:	b510      	push	{r4, lr}
 8007bfa:	4604      	mov	r4, r0
 8007bfc:	f7ff fff0 	bl	8007be0 <__sinit_lock_acquire>
 8007c00:	69a3      	ldr	r3, [r4, #24]
 8007c02:	b11b      	cbz	r3, 8007c0c <__sinit+0x14>
 8007c04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c08:	f7ff bff0 	b.w	8007bec <__sinit_lock_release>
 8007c0c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007c10:	6523      	str	r3, [r4, #80]	; 0x50
 8007c12:	4b13      	ldr	r3, [pc, #76]	; (8007c60 <__sinit+0x68>)
 8007c14:	4a13      	ldr	r2, [pc, #76]	; (8007c64 <__sinit+0x6c>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	62a2      	str	r2, [r4, #40]	; 0x28
 8007c1a:	42a3      	cmp	r3, r4
 8007c1c:	bf04      	itt	eq
 8007c1e:	2301      	moveq	r3, #1
 8007c20:	61a3      	streq	r3, [r4, #24]
 8007c22:	4620      	mov	r0, r4
 8007c24:	f000 f820 	bl	8007c68 <__sfp>
 8007c28:	6060      	str	r0, [r4, #4]
 8007c2a:	4620      	mov	r0, r4
 8007c2c:	f000 f81c 	bl	8007c68 <__sfp>
 8007c30:	60a0      	str	r0, [r4, #8]
 8007c32:	4620      	mov	r0, r4
 8007c34:	f000 f818 	bl	8007c68 <__sfp>
 8007c38:	2200      	movs	r2, #0
 8007c3a:	60e0      	str	r0, [r4, #12]
 8007c3c:	2104      	movs	r1, #4
 8007c3e:	6860      	ldr	r0, [r4, #4]
 8007c40:	f7ff ff82 	bl	8007b48 <std>
 8007c44:	68a0      	ldr	r0, [r4, #8]
 8007c46:	2201      	movs	r2, #1
 8007c48:	2109      	movs	r1, #9
 8007c4a:	f7ff ff7d 	bl	8007b48 <std>
 8007c4e:	68e0      	ldr	r0, [r4, #12]
 8007c50:	2202      	movs	r2, #2
 8007c52:	2112      	movs	r1, #18
 8007c54:	f7ff ff78 	bl	8007b48 <std>
 8007c58:	2301      	movs	r3, #1
 8007c5a:	61a3      	str	r3, [r4, #24]
 8007c5c:	e7d2      	b.n	8007c04 <__sinit+0xc>
 8007c5e:	bf00      	nop
 8007c60:	08008ee4 	.word	0x08008ee4
 8007c64:	08007b91 	.word	0x08007b91

08007c68 <__sfp>:
 8007c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c6a:	4607      	mov	r7, r0
 8007c6c:	f7ff ffac 	bl	8007bc8 <__sfp_lock_acquire>
 8007c70:	4b1e      	ldr	r3, [pc, #120]	; (8007cec <__sfp+0x84>)
 8007c72:	681e      	ldr	r6, [r3, #0]
 8007c74:	69b3      	ldr	r3, [r6, #24]
 8007c76:	b913      	cbnz	r3, 8007c7e <__sfp+0x16>
 8007c78:	4630      	mov	r0, r6
 8007c7a:	f7ff ffbd 	bl	8007bf8 <__sinit>
 8007c7e:	3648      	adds	r6, #72	; 0x48
 8007c80:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007c84:	3b01      	subs	r3, #1
 8007c86:	d503      	bpl.n	8007c90 <__sfp+0x28>
 8007c88:	6833      	ldr	r3, [r6, #0]
 8007c8a:	b30b      	cbz	r3, 8007cd0 <__sfp+0x68>
 8007c8c:	6836      	ldr	r6, [r6, #0]
 8007c8e:	e7f7      	b.n	8007c80 <__sfp+0x18>
 8007c90:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007c94:	b9d5      	cbnz	r5, 8007ccc <__sfp+0x64>
 8007c96:	4b16      	ldr	r3, [pc, #88]	; (8007cf0 <__sfp+0x88>)
 8007c98:	60e3      	str	r3, [r4, #12]
 8007c9a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007c9e:	6665      	str	r5, [r4, #100]	; 0x64
 8007ca0:	f000 f86c 	bl	8007d7c <__retarget_lock_init_recursive>
 8007ca4:	f7ff ff96 	bl	8007bd4 <__sfp_lock_release>
 8007ca8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007cac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007cb0:	6025      	str	r5, [r4, #0]
 8007cb2:	61a5      	str	r5, [r4, #24]
 8007cb4:	2208      	movs	r2, #8
 8007cb6:	4629      	mov	r1, r5
 8007cb8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007cbc:	f000 f86a 	bl	8007d94 <memset>
 8007cc0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007cc4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007cc8:	4620      	mov	r0, r4
 8007cca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ccc:	3468      	adds	r4, #104	; 0x68
 8007cce:	e7d9      	b.n	8007c84 <__sfp+0x1c>
 8007cd0:	2104      	movs	r1, #4
 8007cd2:	4638      	mov	r0, r7
 8007cd4:	f7ff ff62 	bl	8007b9c <__sfmoreglue>
 8007cd8:	4604      	mov	r4, r0
 8007cda:	6030      	str	r0, [r6, #0]
 8007cdc:	2800      	cmp	r0, #0
 8007cde:	d1d5      	bne.n	8007c8c <__sfp+0x24>
 8007ce0:	f7ff ff78 	bl	8007bd4 <__sfp_lock_release>
 8007ce4:	230c      	movs	r3, #12
 8007ce6:	603b      	str	r3, [r7, #0]
 8007ce8:	e7ee      	b.n	8007cc8 <__sfp+0x60>
 8007cea:	bf00      	nop
 8007cec:	08008ee4 	.word	0x08008ee4
 8007cf0:	ffff0001 	.word	0xffff0001

08007cf4 <_fwalk_reent>:
 8007cf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cf8:	4606      	mov	r6, r0
 8007cfa:	4688      	mov	r8, r1
 8007cfc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007d00:	2700      	movs	r7, #0
 8007d02:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007d06:	f1b9 0901 	subs.w	r9, r9, #1
 8007d0a:	d505      	bpl.n	8007d18 <_fwalk_reent+0x24>
 8007d0c:	6824      	ldr	r4, [r4, #0]
 8007d0e:	2c00      	cmp	r4, #0
 8007d10:	d1f7      	bne.n	8007d02 <_fwalk_reent+0xe>
 8007d12:	4638      	mov	r0, r7
 8007d14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d18:	89ab      	ldrh	r3, [r5, #12]
 8007d1a:	2b01      	cmp	r3, #1
 8007d1c:	d907      	bls.n	8007d2e <_fwalk_reent+0x3a>
 8007d1e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007d22:	3301      	adds	r3, #1
 8007d24:	d003      	beq.n	8007d2e <_fwalk_reent+0x3a>
 8007d26:	4629      	mov	r1, r5
 8007d28:	4630      	mov	r0, r6
 8007d2a:	47c0      	blx	r8
 8007d2c:	4307      	orrs	r7, r0
 8007d2e:	3568      	adds	r5, #104	; 0x68
 8007d30:	e7e9      	b.n	8007d06 <_fwalk_reent+0x12>
	...

08007d34 <__libc_init_array>:
 8007d34:	b570      	push	{r4, r5, r6, lr}
 8007d36:	4d0d      	ldr	r5, [pc, #52]	; (8007d6c <__libc_init_array+0x38>)
 8007d38:	4c0d      	ldr	r4, [pc, #52]	; (8007d70 <__libc_init_array+0x3c>)
 8007d3a:	1b64      	subs	r4, r4, r5
 8007d3c:	10a4      	asrs	r4, r4, #2
 8007d3e:	2600      	movs	r6, #0
 8007d40:	42a6      	cmp	r6, r4
 8007d42:	d109      	bne.n	8007d58 <__libc_init_array+0x24>
 8007d44:	4d0b      	ldr	r5, [pc, #44]	; (8007d74 <__libc_init_array+0x40>)
 8007d46:	4c0c      	ldr	r4, [pc, #48]	; (8007d78 <__libc_init_array+0x44>)
 8007d48:	f001 f864 	bl	8008e14 <_init>
 8007d4c:	1b64      	subs	r4, r4, r5
 8007d4e:	10a4      	asrs	r4, r4, #2
 8007d50:	2600      	movs	r6, #0
 8007d52:	42a6      	cmp	r6, r4
 8007d54:	d105      	bne.n	8007d62 <__libc_init_array+0x2e>
 8007d56:	bd70      	pop	{r4, r5, r6, pc}
 8007d58:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d5c:	4798      	blx	r3
 8007d5e:	3601      	adds	r6, #1
 8007d60:	e7ee      	b.n	8007d40 <__libc_init_array+0xc>
 8007d62:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d66:	4798      	blx	r3
 8007d68:	3601      	adds	r6, #1
 8007d6a:	e7f2      	b.n	8007d52 <__libc_init_array+0x1e>
 8007d6c:	080090c8 	.word	0x080090c8
 8007d70:	080090c8 	.word	0x080090c8
 8007d74:	080090c8 	.word	0x080090c8
 8007d78:	080090cc 	.word	0x080090cc

08007d7c <__retarget_lock_init_recursive>:
 8007d7c:	4770      	bx	lr

08007d7e <__retarget_lock_acquire_recursive>:
 8007d7e:	4770      	bx	lr

08007d80 <__retarget_lock_release_recursive>:
 8007d80:	4770      	bx	lr
	...

08007d84 <malloc>:
 8007d84:	4b02      	ldr	r3, [pc, #8]	; (8007d90 <malloc+0xc>)
 8007d86:	4601      	mov	r1, r0
 8007d88:	6818      	ldr	r0, [r3, #0]
 8007d8a:	f000 b85b 	b.w	8007e44 <_malloc_r>
 8007d8e:	bf00      	nop
 8007d90:	24000024 	.word	0x24000024

08007d94 <memset>:
 8007d94:	4402      	add	r2, r0
 8007d96:	4603      	mov	r3, r0
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d100      	bne.n	8007d9e <memset+0xa>
 8007d9c:	4770      	bx	lr
 8007d9e:	f803 1b01 	strb.w	r1, [r3], #1
 8007da2:	e7f9      	b.n	8007d98 <memset+0x4>

08007da4 <_free_r>:
 8007da4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007da6:	2900      	cmp	r1, #0
 8007da8:	d048      	beq.n	8007e3c <_free_r+0x98>
 8007daa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007dae:	9001      	str	r0, [sp, #4]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	f1a1 0404 	sub.w	r4, r1, #4
 8007db6:	bfb8      	it	lt
 8007db8:	18e4      	addlt	r4, r4, r3
 8007dba:	f000 f9e7 	bl	800818c <__malloc_lock>
 8007dbe:	4a20      	ldr	r2, [pc, #128]	; (8007e40 <_free_r+0x9c>)
 8007dc0:	9801      	ldr	r0, [sp, #4]
 8007dc2:	6813      	ldr	r3, [r2, #0]
 8007dc4:	4615      	mov	r5, r2
 8007dc6:	b933      	cbnz	r3, 8007dd6 <_free_r+0x32>
 8007dc8:	6063      	str	r3, [r4, #4]
 8007dca:	6014      	str	r4, [r2, #0]
 8007dcc:	b003      	add	sp, #12
 8007dce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007dd2:	f000 b9e1 	b.w	8008198 <__malloc_unlock>
 8007dd6:	42a3      	cmp	r3, r4
 8007dd8:	d90b      	bls.n	8007df2 <_free_r+0x4e>
 8007dda:	6821      	ldr	r1, [r4, #0]
 8007ddc:	1862      	adds	r2, r4, r1
 8007dde:	4293      	cmp	r3, r2
 8007de0:	bf04      	itt	eq
 8007de2:	681a      	ldreq	r2, [r3, #0]
 8007de4:	685b      	ldreq	r3, [r3, #4]
 8007de6:	6063      	str	r3, [r4, #4]
 8007de8:	bf04      	itt	eq
 8007dea:	1852      	addeq	r2, r2, r1
 8007dec:	6022      	streq	r2, [r4, #0]
 8007dee:	602c      	str	r4, [r5, #0]
 8007df0:	e7ec      	b.n	8007dcc <_free_r+0x28>
 8007df2:	461a      	mov	r2, r3
 8007df4:	685b      	ldr	r3, [r3, #4]
 8007df6:	b10b      	cbz	r3, 8007dfc <_free_r+0x58>
 8007df8:	42a3      	cmp	r3, r4
 8007dfa:	d9fa      	bls.n	8007df2 <_free_r+0x4e>
 8007dfc:	6811      	ldr	r1, [r2, #0]
 8007dfe:	1855      	adds	r5, r2, r1
 8007e00:	42a5      	cmp	r5, r4
 8007e02:	d10b      	bne.n	8007e1c <_free_r+0x78>
 8007e04:	6824      	ldr	r4, [r4, #0]
 8007e06:	4421      	add	r1, r4
 8007e08:	1854      	adds	r4, r2, r1
 8007e0a:	42a3      	cmp	r3, r4
 8007e0c:	6011      	str	r1, [r2, #0]
 8007e0e:	d1dd      	bne.n	8007dcc <_free_r+0x28>
 8007e10:	681c      	ldr	r4, [r3, #0]
 8007e12:	685b      	ldr	r3, [r3, #4]
 8007e14:	6053      	str	r3, [r2, #4]
 8007e16:	4421      	add	r1, r4
 8007e18:	6011      	str	r1, [r2, #0]
 8007e1a:	e7d7      	b.n	8007dcc <_free_r+0x28>
 8007e1c:	d902      	bls.n	8007e24 <_free_r+0x80>
 8007e1e:	230c      	movs	r3, #12
 8007e20:	6003      	str	r3, [r0, #0]
 8007e22:	e7d3      	b.n	8007dcc <_free_r+0x28>
 8007e24:	6825      	ldr	r5, [r4, #0]
 8007e26:	1961      	adds	r1, r4, r5
 8007e28:	428b      	cmp	r3, r1
 8007e2a:	bf04      	itt	eq
 8007e2c:	6819      	ldreq	r1, [r3, #0]
 8007e2e:	685b      	ldreq	r3, [r3, #4]
 8007e30:	6063      	str	r3, [r4, #4]
 8007e32:	bf04      	itt	eq
 8007e34:	1949      	addeq	r1, r1, r5
 8007e36:	6021      	streq	r1, [r4, #0]
 8007e38:	6054      	str	r4, [r2, #4]
 8007e3a:	e7c7      	b.n	8007dcc <_free_r+0x28>
 8007e3c:	b003      	add	sp, #12
 8007e3e:	bd30      	pop	{r4, r5, pc}
 8007e40:	24000178 	.word	0x24000178

08007e44 <_malloc_r>:
 8007e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e46:	1ccd      	adds	r5, r1, #3
 8007e48:	f025 0503 	bic.w	r5, r5, #3
 8007e4c:	3508      	adds	r5, #8
 8007e4e:	2d0c      	cmp	r5, #12
 8007e50:	bf38      	it	cc
 8007e52:	250c      	movcc	r5, #12
 8007e54:	2d00      	cmp	r5, #0
 8007e56:	4606      	mov	r6, r0
 8007e58:	db01      	blt.n	8007e5e <_malloc_r+0x1a>
 8007e5a:	42a9      	cmp	r1, r5
 8007e5c:	d903      	bls.n	8007e66 <_malloc_r+0x22>
 8007e5e:	230c      	movs	r3, #12
 8007e60:	6033      	str	r3, [r6, #0]
 8007e62:	2000      	movs	r0, #0
 8007e64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e66:	f000 f991 	bl	800818c <__malloc_lock>
 8007e6a:	4921      	ldr	r1, [pc, #132]	; (8007ef0 <_malloc_r+0xac>)
 8007e6c:	680a      	ldr	r2, [r1, #0]
 8007e6e:	4614      	mov	r4, r2
 8007e70:	b99c      	cbnz	r4, 8007e9a <_malloc_r+0x56>
 8007e72:	4f20      	ldr	r7, [pc, #128]	; (8007ef4 <_malloc_r+0xb0>)
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	b923      	cbnz	r3, 8007e82 <_malloc_r+0x3e>
 8007e78:	4621      	mov	r1, r4
 8007e7a:	4630      	mov	r0, r6
 8007e7c:	f000 f83c 	bl	8007ef8 <_sbrk_r>
 8007e80:	6038      	str	r0, [r7, #0]
 8007e82:	4629      	mov	r1, r5
 8007e84:	4630      	mov	r0, r6
 8007e86:	f000 f837 	bl	8007ef8 <_sbrk_r>
 8007e8a:	1c43      	adds	r3, r0, #1
 8007e8c:	d123      	bne.n	8007ed6 <_malloc_r+0x92>
 8007e8e:	230c      	movs	r3, #12
 8007e90:	6033      	str	r3, [r6, #0]
 8007e92:	4630      	mov	r0, r6
 8007e94:	f000 f980 	bl	8008198 <__malloc_unlock>
 8007e98:	e7e3      	b.n	8007e62 <_malloc_r+0x1e>
 8007e9a:	6823      	ldr	r3, [r4, #0]
 8007e9c:	1b5b      	subs	r3, r3, r5
 8007e9e:	d417      	bmi.n	8007ed0 <_malloc_r+0x8c>
 8007ea0:	2b0b      	cmp	r3, #11
 8007ea2:	d903      	bls.n	8007eac <_malloc_r+0x68>
 8007ea4:	6023      	str	r3, [r4, #0]
 8007ea6:	441c      	add	r4, r3
 8007ea8:	6025      	str	r5, [r4, #0]
 8007eaa:	e004      	b.n	8007eb6 <_malloc_r+0x72>
 8007eac:	6863      	ldr	r3, [r4, #4]
 8007eae:	42a2      	cmp	r2, r4
 8007eb0:	bf0c      	ite	eq
 8007eb2:	600b      	streq	r3, [r1, #0]
 8007eb4:	6053      	strne	r3, [r2, #4]
 8007eb6:	4630      	mov	r0, r6
 8007eb8:	f000 f96e 	bl	8008198 <__malloc_unlock>
 8007ebc:	f104 000b 	add.w	r0, r4, #11
 8007ec0:	1d23      	adds	r3, r4, #4
 8007ec2:	f020 0007 	bic.w	r0, r0, #7
 8007ec6:	1ac2      	subs	r2, r0, r3
 8007ec8:	d0cc      	beq.n	8007e64 <_malloc_r+0x20>
 8007eca:	1a1b      	subs	r3, r3, r0
 8007ecc:	50a3      	str	r3, [r4, r2]
 8007ece:	e7c9      	b.n	8007e64 <_malloc_r+0x20>
 8007ed0:	4622      	mov	r2, r4
 8007ed2:	6864      	ldr	r4, [r4, #4]
 8007ed4:	e7cc      	b.n	8007e70 <_malloc_r+0x2c>
 8007ed6:	1cc4      	adds	r4, r0, #3
 8007ed8:	f024 0403 	bic.w	r4, r4, #3
 8007edc:	42a0      	cmp	r0, r4
 8007ede:	d0e3      	beq.n	8007ea8 <_malloc_r+0x64>
 8007ee0:	1a21      	subs	r1, r4, r0
 8007ee2:	4630      	mov	r0, r6
 8007ee4:	f000 f808 	bl	8007ef8 <_sbrk_r>
 8007ee8:	3001      	adds	r0, #1
 8007eea:	d1dd      	bne.n	8007ea8 <_malloc_r+0x64>
 8007eec:	e7cf      	b.n	8007e8e <_malloc_r+0x4a>
 8007eee:	bf00      	nop
 8007ef0:	24000178 	.word	0x24000178
 8007ef4:	2400017c 	.word	0x2400017c

08007ef8 <_sbrk_r>:
 8007ef8:	b538      	push	{r3, r4, r5, lr}
 8007efa:	4d06      	ldr	r5, [pc, #24]	; (8007f14 <_sbrk_r+0x1c>)
 8007efc:	2300      	movs	r3, #0
 8007efe:	4604      	mov	r4, r0
 8007f00:	4608      	mov	r0, r1
 8007f02:	602b      	str	r3, [r5, #0]
 8007f04:	f7f9 fc20 	bl	8001748 <_sbrk>
 8007f08:	1c43      	adds	r3, r0, #1
 8007f0a:	d102      	bne.n	8007f12 <_sbrk_r+0x1a>
 8007f0c:	682b      	ldr	r3, [r5, #0]
 8007f0e:	b103      	cbz	r3, 8007f12 <_sbrk_r+0x1a>
 8007f10:	6023      	str	r3, [r4, #0]
 8007f12:	bd38      	pop	{r3, r4, r5, pc}
 8007f14:	24000450 	.word	0x24000450

08007f18 <__sread>:
 8007f18:	b510      	push	{r4, lr}
 8007f1a:	460c      	mov	r4, r1
 8007f1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f20:	f000 f940 	bl	80081a4 <_read_r>
 8007f24:	2800      	cmp	r0, #0
 8007f26:	bfab      	itete	ge
 8007f28:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007f2a:	89a3      	ldrhlt	r3, [r4, #12]
 8007f2c:	181b      	addge	r3, r3, r0
 8007f2e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007f32:	bfac      	ite	ge
 8007f34:	6563      	strge	r3, [r4, #84]	; 0x54
 8007f36:	81a3      	strhlt	r3, [r4, #12]
 8007f38:	bd10      	pop	{r4, pc}

08007f3a <__swrite>:
 8007f3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f3e:	461f      	mov	r7, r3
 8007f40:	898b      	ldrh	r3, [r1, #12]
 8007f42:	05db      	lsls	r3, r3, #23
 8007f44:	4605      	mov	r5, r0
 8007f46:	460c      	mov	r4, r1
 8007f48:	4616      	mov	r6, r2
 8007f4a:	d505      	bpl.n	8007f58 <__swrite+0x1e>
 8007f4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f50:	2302      	movs	r3, #2
 8007f52:	2200      	movs	r2, #0
 8007f54:	f000 f908 	bl	8008168 <_lseek_r>
 8007f58:	89a3      	ldrh	r3, [r4, #12]
 8007f5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f62:	81a3      	strh	r3, [r4, #12]
 8007f64:	4632      	mov	r2, r6
 8007f66:	463b      	mov	r3, r7
 8007f68:	4628      	mov	r0, r5
 8007f6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f6e:	f000 b817 	b.w	8007fa0 <_write_r>

08007f72 <__sseek>:
 8007f72:	b510      	push	{r4, lr}
 8007f74:	460c      	mov	r4, r1
 8007f76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f7a:	f000 f8f5 	bl	8008168 <_lseek_r>
 8007f7e:	1c43      	adds	r3, r0, #1
 8007f80:	89a3      	ldrh	r3, [r4, #12]
 8007f82:	bf15      	itete	ne
 8007f84:	6560      	strne	r0, [r4, #84]	; 0x54
 8007f86:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007f8a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007f8e:	81a3      	strheq	r3, [r4, #12]
 8007f90:	bf18      	it	ne
 8007f92:	81a3      	strhne	r3, [r4, #12]
 8007f94:	bd10      	pop	{r4, pc}

08007f96 <__sclose>:
 8007f96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f9a:	f000 b813 	b.w	8007fc4 <_close_r>
	...

08007fa0 <_write_r>:
 8007fa0:	b538      	push	{r3, r4, r5, lr}
 8007fa2:	4d07      	ldr	r5, [pc, #28]	; (8007fc0 <_write_r+0x20>)
 8007fa4:	4604      	mov	r4, r0
 8007fa6:	4608      	mov	r0, r1
 8007fa8:	4611      	mov	r1, r2
 8007faa:	2200      	movs	r2, #0
 8007fac:	602a      	str	r2, [r5, #0]
 8007fae:	461a      	mov	r2, r3
 8007fb0:	f7ff fbf4 	bl	800779c <_write>
 8007fb4:	1c43      	adds	r3, r0, #1
 8007fb6:	d102      	bne.n	8007fbe <_write_r+0x1e>
 8007fb8:	682b      	ldr	r3, [r5, #0]
 8007fba:	b103      	cbz	r3, 8007fbe <_write_r+0x1e>
 8007fbc:	6023      	str	r3, [r4, #0]
 8007fbe:	bd38      	pop	{r3, r4, r5, pc}
 8007fc0:	24000450 	.word	0x24000450

08007fc4 <_close_r>:
 8007fc4:	b538      	push	{r3, r4, r5, lr}
 8007fc6:	4d06      	ldr	r5, [pc, #24]	; (8007fe0 <_close_r+0x1c>)
 8007fc8:	2300      	movs	r3, #0
 8007fca:	4604      	mov	r4, r0
 8007fcc:	4608      	mov	r0, r1
 8007fce:	602b      	str	r3, [r5, #0]
 8007fd0:	f7ff fc16 	bl	8007800 <_close>
 8007fd4:	1c43      	adds	r3, r0, #1
 8007fd6:	d102      	bne.n	8007fde <_close_r+0x1a>
 8007fd8:	682b      	ldr	r3, [r5, #0]
 8007fda:	b103      	cbz	r3, 8007fde <_close_r+0x1a>
 8007fdc:	6023      	str	r3, [r4, #0]
 8007fde:	bd38      	pop	{r3, r4, r5, pc}
 8007fe0:	24000450 	.word	0x24000450

08007fe4 <__sflush_r>:
 8007fe4:	898a      	ldrh	r2, [r1, #12]
 8007fe6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fea:	4605      	mov	r5, r0
 8007fec:	0710      	lsls	r0, r2, #28
 8007fee:	460c      	mov	r4, r1
 8007ff0:	d458      	bmi.n	80080a4 <__sflush_r+0xc0>
 8007ff2:	684b      	ldr	r3, [r1, #4]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	dc05      	bgt.n	8008004 <__sflush_r+0x20>
 8007ff8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	dc02      	bgt.n	8008004 <__sflush_r+0x20>
 8007ffe:	2000      	movs	r0, #0
 8008000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008004:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008006:	2e00      	cmp	r6, #0
 8008008:	d0f9      	beq.n	8007ffe <__sflush_r+0x1a>
 800800a:	2300      	movs	r3, #0
 800800c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008010:	682f      	ldr	r7, [r5, #0]
 8008012:	602b      	str	r3, [r5, #0]
 8008014:	d032      	beq.n	800807c <__sflush_r+0x98>
 8008016:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008018:	89a3      	ldrh	r3, [r4, #12]
 800801a:	075a      	lsls	r2, r3, #29
 800801c:	d505      	bpl.n	800802a <__sflush_r+0x46>
 800801e:	6863      	ldr	r3, [r4, #4]
 8008020:	1ac0      	subs	r0, r0, r3
 8008022:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008024:	b10b      	cbz	r3, 800802a <__sflush_r+0x46>
 8008026:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008028:	1ac0      	subs	r0, r0, r3
 800802a:	2300      	movs	r3, #0
 800802c:	4602      	mov	r2, r0
 800802e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008030:	6a21      	ldr	r1, [r4, #32]
 8008032:	4628      	mov	r0, r5
 8008034:	47b0      	blx	r6
 8008036:	1c43      	adds	r3, r0, #1
 8008038:	89a3      	ldrh	r3, [r4, #12]
 800803a:	d106      	bne.n	800804a <__sflush_r+0x66>
 800803c:	6829      	ldr	r1, [r5, #0]
 800803e:	291d      	cmp	r1, #29
 8008040:	d82c      	bhi.n	800809c <__sflush_r+0xb8>
 8008042:	4a2a      	ldr	r2, [pc, #168]	; (80080ec <__sflush_r+0x108>)
 8008044:	40ca      	lsrs	r2, r1
 8008046:	07d6      	lsls	r6, r2, #31
 8008048:	d528      	bpl.n	800809c <__sflush_r+0xb8>
 800804a:	2200      	movs	r2, #0
 800804c:	6062      	str	r2, [r4, #4]
 800804e:	04d9      	lsls	r1, r3, #19
 8008050:	6922      	ldr	r2, [r4, #16]
 8008052:	6022      	str	r2, [r4, #0]
 8008054:	d504      	bpl.n	8008060 <__sflush_r+0x7c>
 8008056:	1c42      	adds	r2, r0, #1
 8008058:	d101      	bne.n	800805e <__sflush_r+0x7a>
 800805a:	682b      	ldr	r3, [r5, #0]
 800805c:	b903      	cbnz	r3, 8008060 <__sflush_r+0x7c>
 800805e:	6560      	str	r0, [r4, #84]	; 0x54
 8008060:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008062:	602f      	str	r7, [r5, #0]
 8008064:	2900      	cmp	r1, #0
 8008066:	d0ca      	beq.n	8007ffe <__sflush_r+0x1a>
 8008068:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800806c:	4299      	cmp	r1, r3
 800806e:	d002      	beq.n	8008076 <__sflush_r+0x92>
 8008070:	4628      	mov	r0, r5
 8008072:	f7ff fe97 	bl	8007da4 <_free_r>
 8008076:	2000      	movs	r0, #0
 8008078:	6360      	str	r0, [r4, #52]	; 0x34
 800807a:	e7c1      	b.n	8008000 <__sflush_r+0x1c>
 800807c:	6a21      	ldr	r1, [r4, #32]
 800807e:	2301      	movs	r3, #1
 8008080:	4628      	mov	r0, r5
 8008082:	47b0      	blx	r6
 8008084:	1c41      	adds	r1, r0, #1
 8008086:	d1c7      	bne.n	8008018 <__sflush_r+0x34>
 8008088:	682b      	ldr	r3, [r5, #0]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d0c4      	beq.n	8008018 <__sflush_r+0x34>
 800808e:	2b1d      	cmp	r3, #29
 8008090:	d001      	beq.n	8008096 <__sflush_r+0xb2>
 8008092:	2b16      	cmp	r3, #22
 8008094:	d101      	bne.n	800809a <__sflush_r+0xb6>
 8008096:	602f      	str	r7, [r5, #0]
 8008098:	e7b1      	b.n	8007ffe <__sflush_r+0x1a>
 800809a:	89a3      	ldrh	r3, [r4, #12]
 800809c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080a0:	81a3      	strh	r3, [r4, #12]
 80080a2:	e7ad      	b.n	8008000 <__sflush_r+0x1c>
 80080a4:	690f      	ldr	r7, [r1, #16]
 80080a6:	2f00      	cmp	r7, #0
 80080a8:	d0a9      	beq.n	8007ffe <__sflush_r+0x1a>
 80080aa:	0793      	lsls	r3, r2, #30
 80080ac:	680e      	ldr	r6, [r1, #0]
 80080ae:	bf08      	it	eq
 80080b0:	694b      	ldreq	r3, [r1, #20]
 80080b2:	600f      	str	r7, [r1, #0]
 80080b4:	bf18      	it	ne
 80080b6:	2300      	movne	r3, #0
 80080b8:	eba6 0807 	sub.w	r8, r6, r7
 80080bc:	608b      	str	r3, [r1, #8]
 80080be:	f1b8 0f00 	cmp.w	r8, #0
 80080c2:	dd9c      	ble.n	8007ffe <__sflush_r+0x1a>
 80080c4:	6a21      	ldr	r1, [r4, #32]
 80080c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80080c8:	4643      	mov	r3, r8
 80080ca:	463a      	mov	r2, r7
 80080cc:	4628      	mov	r0, r5
 80080ce:	47b0      	blx	r6
 80080d0:	2800      	cmp	r0, #0
 80080d2:	dc06      	bgt.n	80080e2 <__sflush_r+0xfe>
 80080d4:	89a3      	ldrh	r3, [r4, #12]
 80080d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080da:	81a3      	strh	r3, [r4, #12]
 80080dc:	f04f 30ff 	mov.w	r0, #4294967295
 80080e0:	e78e      	b.n	8008000 <__sflush_r+0x1c>
 80080e2:	4407      	add	r7, r0
 80080e4:	eba8 0800 	sub.w	r8, r8, r0
 80080e8:	e7e9      	b.n	80080be <__sflush_r+0xda>
 80080ea:	bf00      	nop
 80080ec:	20400001 	.word	0x20400001

080080f0 <_fflush_r>:
 80080f0:	b538      	push	{r3, r4, r5, lr}
 80080f2:	690b      	ldr	r3, [r1, #16]
 80080f4:	4605      	mov	r5, r0
 80080f6:	460c      	mov	r4, r1
 80080f8:	b913      	cbnz	r3, 8008100 <_fflush_r+0x10>
 80080fa:	2500      	movs	r5, #0
 80080fc:	4628      	mov	r0, r5
 80080fe:	bd38      	pop	{r3, r4, r5, pc}
 8008100:	b118      	cbz	r0, 800810a <_fflush_r+0x1a>
 8008102:	6983      	ldr	r3, [r0, #24]
 8008104:	b90b      	cbnz	r3, 800810a <_fflush_r+0x1a>
 8008106:	f7ff fd77 	bl	8007bf8 <__sinit>
 800810a:	4b14      	ldr	r3, [pc, #80]	; (800815c <_fflush_r+0x6c>)
 800810c:	429c      	cmp	r4, r3
 800810e:	d11b      	bne.n	8008148 <_fflush_r+0x58>
 8008110:	686c      	ldr	r4, [r5, #4]
 8008112:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d0ef      	beq.n	80080fa <_fflush_r+0xa>
 800811a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800811c:	07d0      	lsls	r0, r2, #31
 800811e:	d404      	bmi.n	800812a <_fflush_r+0x3a>
 8008120:	0599      	lsls	r1, r3, #22
 8008122:	d402      	bmi.n	800812a <_fflush_r+0x3a>
 8008124:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008126:	f7ff fe2a 	bl	8007d7e <__retarget_lock_acquire_recursive>
 800812a:	4628      	mov	r0, r5
 800812c:	4621      	mov	r1, r4
 800812e:	f7ff ff59 	bl	8007fe4 <__sflush_r>
 8008132:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008134:	07da      	lsls	r2, r3, #31
 8008136:	4605      	mov	r5, r0
 8008138:	d4e0      	bmi.n	80080fc <_fflush_r+0xc>
 800813a:	89a3      	ldrh	r3, [r4, #12]
 800813c:	059b      	lsls	r3, r3, #22
 800813e:	d4dd      	bmi.n	80080fc <_fflush_r+0xc>
 8008140:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008142:	f7ff fe1d 	bl	8007d80 <__retarget_lock_release_recursive>
 8008146:	e7d9      	b.n	80080fc <_fflush_r+0xc>
 8008148:	4b05      	ldr	r3, [pc, #20]	; (8008160 <_fflush_r+0x70>)
 800814a:	429c      	cmp	r4, r3
 800814c:	d101      	bne.n	8008152 <_fflush_r+0x62>
 800814e:	68ac      	ldr	r4, [r5, #8]
 8008150:	e7df      	b.n	8008112 <_fflush_r+0x22>
 8008152:	4b04      	ldr	r3, [pc, #16]	; (8008164 <_fflush_r+0x74>)
 8008154:	429c      	cmp	r4, r3
 8008156:	bf08      	it	eq
 8008158:	68ec      	ldreq	r4, [r5, #12]
 800815a:	e7da      	b.n	8008112 <_fflush_r+0x22>
 800815c:	08008ea4 	.word	0x08008ea4
 8008160:	08008ec4 	.word	0x08008ec4
 8008164:	08008e84 	.word	0x08008e84

08008168 <_lseek_r>:
 8008168:	b538      	push	{r3, r4, r5, lr}
 800816a:	4d07      	ldr	r5, [pc, #28]	; (8008188 <_lseek_r+0x20>)
 800816c:	4604      	mov	r4, r0
 800816e:	4608      	mov	r0, r1
 8008170:	4611      	mov	r1, r2
 8008172:	2200      	movs	r2, #0
 8008174:	602a      	str	r2, [r5, #0]
 8008176:	461a      	mov	r2, r3
 8008178:	f7ff fafe 	bl	8007778 <_lseek>
 800817c:	1c43      	adds	r3, r0, #1
 800817e:	d102      	bne.n	8008186 <_lseek_r+0x1e>
 8008180:	682b      	ldr	r3, [r5, #0]
 8008182:	b103      	cbz	r3, 8008186 <_lseek_r+0x1e>
 8008184:	6023      	str	r3, [r4, #0]
 8008186:	bd38      	pop	{r3, r4, r5, pc}
 8008188:	24000450 	.word	0x24000450

0800818c <__malloc_lock>:
 800818c:	4801      	ldr	r0, [pc, #4]	; (8008194 <__malloc_lock+0x8>)
 800818e:	f7ff bdf6 	b.w	8007d7e <__retarget_lock_acquire_recursive>
 8008192:	bf00      	nop
 8008194:	24000448 	.word	0x24000448

08008198 <__malloc_unlock>:
 8008198:	4801      	ldr	r0, [pc, #4]	; (80081a0 <__malloc_unlock+0x8>)
 800819a:	f7ff bdf1 	b.w	8007d80 <__retarget_lock_release_recursive>
 800819e:	bf00      	nop
 80081a0:	24000448 	.word	0x24000448

080081a4 <_read_r>:
 80081a4:	b538      	push	{r3, r4, r5, lr}
 80081a6:	4d07      	ldr	r5, [pc, #28]	; (80081c4 <_read_r+0x20>)
 80081a8:	4604      	mov	r4, r0
 80081aa:	4608      	mov	r0, r1
 80081ac:	4611      	mov	r1, r2
 80081ae:	2200      	movs	r2, #0
 80081b0:	602a      	str	r2, [r5, #0]
 80081b2:	461a      	mov	r2, r3
 80081b4:	f7ff fa88 	bl	80076c8 <_read>
 80081b8:	1c43      	adds	r3, r0, #1
 80081ba:	d102      	bne.n	80081c2 <_read_r+0x1e>
 80081bc:	682b      	ldr	r3, [r5, #0]
 80081be:	b103      	cbz	r3, 80081c2 <_read_r+0x1e>
 80081c0:	6023      	str	r3, [r4, #0]
 80081c2:	bd38      	pop	{r3, r4, r5, pc}
 80081c4:	24000450 	.word	0x24000450

080081c8 <round>:
 80081c8:	ee10 1a90 	vmov	r1, s1
 80081cc:	f3c1 500a 	ubfx	r0, r1, #20, #11
 80081d0:	f2a0 32ff 	subw	r2, r0, #1023	; 0x3ff
 80081d4:	2a13      	cmp	r2, #19
 80081d6:	b510      	push	{r4, lr}
 80081d8:	ee10 3a10 	vmov	r3, s0
 80081dc:	dc19      	bgt.n	8008212 <round+0x4a>
 80081de:	2a00      	cmp	r2, #0
 80081e0:	da09      	bge.n	80081f6 <round+0x2e>
 80081e2:	3201      	adds	r2, #1
 80081e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80081e8:	d103      	bne.n	80081f2 <round+0x2a>
 80081ea:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 80081ee:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80081f2:	2000      	movs	r0, #0
 80081f4:	e027      	b.n	8008246 <round+0x7e>
 80081f6:	4816      	ldr	r0, [pc, #88]	; (8008250 <round+0x88>)
 80081f8:	4110      	asrs	r0, r2
 80081fa:	ea01 0400 	and.w	r4, r1, r0
 80081fe:	4323      	orrs	r3, r4
 8008200:	d00e      	beq.n	8008220 <round+0x58>
 8008202:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008206:	fa43 f202 	asr.w	r2, r3, r2
 800820a:	4411      	add	r1, r2
 800820c:	ea21 0100 	bic.w	r1, r1, r0
 8008210:	e7ef      	b.n	80081f2 <round+0x2a>
 8008212:	2a33      	cmp	r2, #51	; 0x33
 8008214:	dd05      	ble.n	8008222 <round+0x5a>
 8008216:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800821a:	d101      	bne.n	8008220 <round+0x58>
 800821c:	ee30 0b00 	vadd.f64	d0, d0, d0
 8008220:	bd10      	pop	{r4, pc}
 8008222:	f2a0 4413 	subw	r4, r0, #1043	; 0x413
 8008226:	f04f 30ff 	mov.w	r0, #4294967295
 800822a:	fa20 f404 	lsr.w	r4, r0, r4
 800822e:	4223      	tst	r3, r4
 8008230:	d0f6      	beq.n	8008220 <round+0x58>
 8008232:	2001      	movs	r0, #1
 8008234:	f1c2 0233 	rsb	r2, r2, #51	; 0x33
 8008238:	fa00 f202 	lsl.w	r2, r0, r2
 800823c:	189b      	adds	r3, r3, r2
 800823e:	bf28      	it	cs
 8008240:	1809      	addcs	r1, r1, r0
 8008242:	ea23 0004 	bic.w	r0, r3, r4
 8008246:	460b      	mov	r3, r1
 8008248:	4602      	mov	r2, r0
 800824a:	ec43 2b10 	vmov	d0, r2, r3
 800824e:	e7e7      	b.n	8008220 <round+0x58>
 8008250:	000fffff 	.word	0x000fffff
 8008254:	00000000 	.word	0x00000000

08008258 <sin>:
 8008258:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800825a:	eeb0 7b40 	vmov.f64	d7, d0
 800825e:	ee17 3a90 	vmov	r3, s15
 8008262:	4a1f      	ldr	r2, [pc, #124]	; (80082e0 <sin+0x88>)
 8008264:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008268:	4293      	cmp	r3, r2
 800826a:	dc05      	bgt.n	8008278 <sin+0x20>
 800826c:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 80082d8 <sin+0x80>
 8008270:	2000      	movs	r0, #0
 8008272:	f000 fc65 	bl	8008b40 <__kernel_sin>
 8008276:	e004      	b.n	8008282 <sin+0x2a>
 8008278:	4a1a      	ldr	r2, [pc, #104]	; (80082e4 <sin+0x8c>)
 800827a:	4293      	cmp	r3, r2
 800827c:	dd04      	ble.n	8008288 <sin+0x30>
 800827e:	ee30 0b40 	vsub.f64	d0, d0, d0
 8008282:	b005      	add	sp, #20
 8008284:	f85d fb04 	ldr.w	pc, [sp], #4
 8008288:	4668      	mov	r0, sp
 800828a:	f000 f82d 	bl	80082e8 <__ieee754_rem_pio2>
 800828e:	f000 0003 	and.w	r0, r0, #3
 8008292:	2801      	cmp	r0, #1
 8008294:	d008      	beq.n	80082a8 <sin+0x50>
 8008296:	2802      	cmp	r0, #2
 8008298:	d00d      	beq.n	80082b6 <sin+0x5e>
 800829a:	b9b0      	cbnz	r0, 80082ca <sin+0x72>
 800829c:	ed9d 1b02 	vldr	d1, [sp, #8]
 80082a0:	ed9d 0b00 	vldr	d0, [sp]
 80082a4:	2001      	movs	r0, #1
 80082a6:	e7e4      	b.n	8008272 <sin+0x1a>
 80082a8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80082ac:	ed9d 0b00 	vldr	d0, [sp]
 80082b0:	f000 f95a 	bl	8008568 <__kernel_cos>
 80082b4:	e7e5      	b.n	8008282 <sin+0x2a>
 80082b6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80082ba:	ed9d 0b00 	vldr	d0, [sp]
 80082be:	2001      	movs	r0, #1
 80082c0:	f000 fc3e 	bl	8008b40 <__kernel_sin>
 80082c4:	eeb1 0b40 	vneg.f64	d0, d0
 80082c8:	e7db      	b.n	8008282 <sin+0x2a>
 80082ca:	ed9d 1b02 	vldr	d1, [sp, #8]
 80082ce:	ed9d 0b00 	vldr	d0, [sp]
 80082d2:	f000 f949 	bl	8008568 <__kernel_cos>
 80082d6:	e7f5      	b.n	80082c4 <sin+0x6c>
	...
 80082e0:	3fe921fb 	.word	0x3fe921fb
 80082e4:	7fefffff 	.word	0x7fefffff

080082e8 <__ieee754_rem_pio2>:
 80082e8:	b570      	push	{r4, r5, r6, lr}
 80082ea:	eeb0 7b40 	vmov.f64	d7, d0
 80082ee:	ee17 5a90 	vmov	r5, s15
 80082f2:	4b97      	ldr	r3, [pc, #604]	; (8008550 <__ieee754_rem_pio2+0x268>)
 80082f4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80082f8:	429e      	cmp	r6, r3
 80082fa:	b088      	sub	sp, #32
 80082fc:	4604      	mov	r4, r0
 80082fe:	dc07      	bgt.n	8008310 <__ieee754_rem_pio2+0x28>
 8008300:	2200      	movs	r2, #0
 8008302:	2300      	movs	r3, #0
 8008304:	ed84 0b00 	vstr	d0, [r4]
 8008308:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800830c:	2000      	movs	r0, #0
 800830e:	e01b      	b.n	8008348 <__ieee754_rem_pio2+0x60>
 8008310:	4b90      	ldr	r3, [pc, #576]	; (8008554 <__ieee754_rem_pio2+0x26c>)
 8008312:	429e      	cmp	r6, r3
 8008314:	dc3b      	bgt.n	800838e <__ieee754_rem_pio2+0xa6>
 8008316:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 800831a:	2d00      	cmp	r5, #0
 800831c:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8008510 <__ieee754_rem_pio2+0x228>
 8008320:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 8008324:	dd19      	ble.n	800835a <__ieee754_rem_pio2+0x72>
 8008326:	ee30 7b46 	vsub.f64	d7, d0, d6
 800832a:	429e      	cmp	r6, r3
 800832c:	d00e      	beq.n	800834c <__ieee754_rem_pio2+0x64>
 800832e:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8008518 <__ieee754_rem_pio2+0x230>
 8008332:	ee37 5b46 	vsub.f64	d5, d7, d6
 8008336:	ee37 7b45 	vsub.f64	d7, d7, d5
 800833a:	ed84 5b00 	vstr	d5, [r4]
 800833e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008342:	ed84 7b02 	vstr	d7, [r4, #8]
 8008346:	2001      	movs	r0, #1
 8008348:	b008      	add	sp, #32
 800834a:	bd70      	pop	{r4, r5, r6, pc}
 800834c:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8008520 <__ieee754_rem_pio2+0x238>
 8008350:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008354:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8008528 <__ieee754_rem_pio2+0x240>
 8008358:	e7eb      	b.n	8008332 <__ieee754_rem_pio2+0x4a>
 800835a:	429e      	cmp	r6, r3
 800835c:	ee30 7b06 	vadd.f64	d7, d0, d6
 8008360:	d00e      	beq.n	8008380 <__ieee754_rem_pio2+0x98>
 8008362:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 8008518 <__ieee754_rem_pio2+0x230>
 8008366:	ee37 5b06 	vadd.f64	d5, d7, d6
 800836a:	ee37 7b45 	vsub.f64	d7, d7, d5
 800836e:	ed84 5b00 	vstr	d5, [r4]
 8008372:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008376:	f04f 30ff 	mov.w	r0, #4294967295
 800837a:	ed84 7b02 	vstr	d7, [r4, #8]
 800837e:	e7e3      	b.n	8008348 <__ieee754_rem_pio2+0x60>
 8008380:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8008520 <__ieee754_rem_pio2+0x238>
 8008384:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008388:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8008528 <__ieee754_rem_pio2+0x240>
 800838c:	e7eb      	b.n	8008366 <__ieee754_rem_pio2+0x7e>
 800838e:	4b72      	ldr	r3, [pc, #456]	; (8008558 <__ieee754_rem_pio2+0x270>)
 8008390:	429e      	cmp	r6, r3
 8008392:	dc6e      	bgt.n	8008472 <__ieee754_rem_pio2+0x18a>
 8008394:	f000 fc2c 	bl	8008bf0 <fabs>
 8008398:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800839c:	ed9f 6b64 	vldr	d6, [pc, #400]	; 8008530 <__ieee754_rem_pio2+0x248>
 80083a0:	eea0 7b06 	vfma.f64	d7, d0, d6
 80083a4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80083a8:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80083ac:	ee17 0a90 	vmov	r0, s15
 80083b0:	eeb1 4b45 	vneg.f64	d4, d5
 80083b4:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8008510 <__ieee754_rem_pio2+0x228>
 80083b8:	eea5 0b47 	vfms.f64	d0, d5, d7
 80083bc:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8008518 <__ieee754_rem_pio2+0x230>
 80083c0:	281f      	cmp	r0, #31
 80083c2:	ee25 7b07 	vmul.f64	d7, d5, d7
 80083c6:	ee30 6b47 	vsub.f64	d6, d0, d7
 80083ca:	dc08      	bgt.n	80083de <__ieee754_rem_pio2+0xf6>
 80083cc:	4b63      	ldr	r3, [pc, #396]	; (800855c <__ieee754_rem_pio2+0x274>)
 80083ce:	1e42      	subs	r2, r0, #1
 80083d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083d4:	42b3      	cmp	r3, r6
 80083d6:	d002      	beq.n	80083de <__ieee754_rem_pio2+0xf6>
 80083d8:	ed84 6b00 	vstr	d6, [r4]
 80083dc:	e024      	b.n	8008428 <__ieee754_rem_pio2+0x140>
 80083de:	ee16 3a90 	vmov	r3, s13
 80083e2:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80083e6:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 80083ea:	2b10      	cmp	r3, #16
 80083ec:	ea4f 5226 	mov.w	r2, r6, asr #20
 80083f0:	ddf2      	ble.n	80083d8 <__ieee754_rem_pio2+0xf0>
 80083f2:	eeb0 6b40 	vmov.f64	d6, d0
 80083f6:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 8008520 <__ieee754_rem_pio2+0x238>
 80083fa:	eea4 6b03 	vfma.f64	d6, d4, d3
 80083fe:	ee30 7b46 	vsub.f64	d7, d0, d6
 8008402:	eea4 7b03 	vfma.f64	d7, d4, d3
 8008406:	ed9f 3b48 	vldr	d3, [pc, #288]	; 8008528 <__ieee754_rem_pio2+0x240>
 800840a:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800840e:	ee36 3b47 	vsub.f64	d3, d6, d7
 8008412:	ee13 3a90 	vmov	r3, s7
 8008416:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800841a:	1ad3      	subs	r3, r2, r3
 800841c:	2b31      	cmp	r3, #49	; 0x31
 800841e:	dc17      	bgt.n	8008450 <__ieee754_rem_pio2+0x168>
 8008420:	eeb0 0b46 	vmov.f64	d0, d6
 8008424:	ed84 3b00 	vstr	d3, [r4]
 8008428:	ed94 6b00 	vldr	d6, [r4]
 800842c:	2d00      	cmp	r5, #0
 800842e:	ee30 0b46 	vsub.f64	d0, d0, d6
 8008432:	ee30 7b47 	vsub.f64	d7, d0, d7
 8008436:	ed84 7b02 	vstr	d7, [r4, #8]
 800843a:	da85      	bge.n	8008348 <__ieee754_rem_pio2+0x60>
 800843c:	eeb1 6b46 	vneg.f64	d6, d6
 8008440:	ed84 6b00 	vstr	d6, [r4]
 8008444:	eeb1 7b47 	vneg.f64	d7, d7
 8008448:	4240      	negs	r0, r0
 800844a:	ed84 7b02 	vstr	d7, [r4, #8]
 800844e:	e77b      	b.n	8008348 <__ieee754_rem_pio2+0x60>
 8008450:	ed9f 3b39 	vldr	d3, [pc, #228]	; 8008538 <__ieee754_rem_pio2+0x250>
 8008454:	eeb0 0b46 	vmov.f64	d0, d6
 8008458:	eea4 0b03 	vfma.f64	d0, d4, d3
 800845c:	ee36 7b40 	vsub.f64	d7, d6, d0
 8008460:	ed9f 6b37 	vldr	d6, [pc, #220]	; 8008540 <__ieee754_rem_pio2+0x258>
 8008464:	eea4 7b03 	vfma.f64	d7, d4, d3
 8008468:	ee95 7b06 	vfnms.f64	d7, d5, d6
 800846c:	ee30 6b47 	vsub.f64	d6, d0, d7
 8008470:	e7b2      	b.n	80083d8 <__ieee754_rem_pio2+0xf0>
 8008472:	4b3b      	ldr	r3, [pc, #236]	; (8008560 <__ieee754_rem_pio2+0x278>)
 8008474:	429e      	cmp	r6, r3
 8008476:	dd06      	ble.n	8008486 <__ieee754_rem_pio2+0x19e>
 8008478:	ee30 7b40 	vsub.f64	d7, d0, d0
 800847c:	ed80 7b02 	vstr	d7, [r0, #8]
 8008480:	ed80 7b00 	vstr	d7, [r0]
 8008484:	e742      	b.n	800830c <__ieee754_rem_pio2+0x24>
 8008486:	1532      	asrs	r2, r6, #20
 8008488:	ee10 0a10 	vmov	r0, s0
 800848c:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8008490:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8008494:	ec41 0b17 	vmov	d7, r0, r1
 8008498:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800849c:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8008548 <__ieee754_rem_pio2+0x260>
 80084a0:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 80084a4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80084a8:	ed8d 6b02 	vstr	d6, [sp, #8]
 80084ac:	ee27 7b05 	vmul.f64	d7, d7, d5
 80084b0:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 80084b4:	a902      	add	r1, sp, #8
 80084b6:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 80084ba:	ee37 7b46 	vsub.f64	d7, d7, d6
 80084be:	ed8d 6b04 	vstr	d6, [sp, #16]
 80084c2:	ee27 7b05 	vmul.f64	d7, d7, d5
 80084c6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80084ca:	2603      	movs	r6, #3
 80084cc:	4608      	mov	r0, r1
 80084ce:	ed91 7b04 	vldr	d7, [r1, #16]
 80084d2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80084d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084da:	4633      	mov	r3, r6
 80084dc:	f1a1 0108 	sub.w	r1, r1, #8
 80084e0:	f106 36ff 	add.w	r6, r6, #4294967295
 80084e4:	d0f3      	beq.n	80084ce <__ieee754_rem_pio2+0x1e6>
 80084e6:	491f      	ldr	r1, [pc, #124]	; (8008564 <__ieee754_rem_pio2+0x27c>)
 80084e8:	9101      	str	r1, [sp, #4]
 80084ea:	2102      	movs	r1, #2
 80084ec:	9100      	str	r1, [sp, #0]
 80084ee:	4621      	mov	r1, r4
 80084f0:	f000 f8a6 	bl	8008640 <__kernel_rem_pio2>
 80084f4:	2d00      	cmp	r5, #0
 80084f6:	f6bf af27 	bge.w	8008348 <__ieee754_rem_pio2+0x60>
 80084fa:	ed94 7b00 	vldr	d7, [r4]
 80084fe:	eeb1 7b47 	vneg.f64	d7, d7
 8008502:	ed84 7b00 	vstr	d7, [r4]
 8008506:	ed94 7b02 	vldr	d7, [r4, #8]
 800850a:	e79b      	b.n	8008444 <__ieee754_rem_pio2+0x15c>
 800850c:	f3af 8000 	nop.w
 8008510:	54400000 	.word	0x54400000
 8008514:	3ff921fb 	.word	0x3ff921fb
 8008518:	1a626331 	.word	0x1a626331
 800851c:	3dd0b461 	.word	0x3dd0b461
 8008520:	1a600000 	.word	0x1a600000
 8008524:	3dd0b461 	.word	0x3dd0b461
 8008528:	2e037073 	.word	0x2e037073
 800852c:	3ba3198a 	.word	0x3ba3198a
 8008530:	6dc9c883 	.word	0x6dc9c883
 8008534:	3fe45f30 	.word	0x3fe45f30
 8008538:	2e000000 	.word	0x2e000000
 800853c:	3ba3198a 	.word	0x3ba3198a
 8008540:	252049c1 	.word	0x252049c1
 8008544:	397b839a 	.word	0x397b839a
 8008548:	00000000 	.word	0x00000000
 800854c:	41700000 	.word	0x41700000
 8008550:	3fe921fb 	.word	0x3fe921fb
 8008554:	4002d97b 	.word	0x4002d97b
 8008558:	413921fb 	.word	0x413921fb
 800855c:	08008ee8 	.word	0x08008ee8
 8008560:	7fefffff 	.word	0x7fefffff
 8008564:	08008f68 	.word	0x08008f68

08008568 <__kernel_cos>:
 8008568:	ee10 1a90 	vmov	r1, s1
 800856c:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8008570:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008574:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8008578:	da05      	bge.n	8008586 <__kernel_cos+0x1e>
 800857a:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800857e:	ee17 3a90 	vmov	r3, s15
 8008582:	2b00      	cmp	r3, #0
 8008584:	d03d      	beq.n	8008602 <__kernel_cos+0x9a>
 8008586:	ee20 3b00 	vmul.f64	d3, d0, d0
 800858a:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8008608 <__kernel_cos+0xa0>
 800858e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8008610 <__kernel_cos+0xa8>
 8008592:	eea3 6b07 	vfma.f64	d6, d3, d7
 8008596:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8008618 <__kernel_cos+0xb0>
 800859a:	eea6 7b03 	vfma.f64	d7, d6, d3
 800859e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8008620 <__kernel_cos+0xb8>
 80085a2:	eea7 6b03 	vfma.f64	d6, d7, d3
 80085a6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8008628 <__kernel_cos+0xc0>
 80085aa:	4b23      	ldr	r3, [pc, #140]	; (8008638 <__kernel_cos+0xd0>)
 80085ac:	eea6 7b03 	vfma.f64	d7, d6, d3
 80085b0:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8008630 <__kernel_cos+0xc8>
 80085b4:	4299      	cmp	r1, r3
 80085b6:	eea7 6b03 	vfma.f64	d6, d7, d3
 80085ba:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80085be:	ee26 5b03 	vmul.f64	d5, d6, d3
 80085c2:	ee23 7b07 	vmul.f64	d7, d3, d7
 80085c6:	ee21 6b40 	vnmul.f64	d6, d1, d0
 80085ca:	eea3 6b05 	vfma.f64	d6, d3, d5
 80085ce:	dc04      	bgt.n	80085da <__kernel_cos+0x72>
 80085d0:	ee37 6b46 	vsub.f64	d6, d7, d6
 80085d4:	ee34 0b46 	vsub.f64	d0, d4, d6
 80085d8:	4770      	bx	lr
 80085da:	4b18      	ldr	r3, [pc, #96]	; (800863c <__kernel_cos+0xd4>)
 80085dc:	4299      	cmp	r1, r3
 80085de:	dc0d      	bgt.n	80085fc <__kernel_cos+0x94>
 80085e0:	2200      	movs	r2, #0
 80085e2:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 80085e6:	ec43 2b15 	vmov	d5, r2, r3
 80085ea:	ee34 0b45 	vsub.f64	d0, d4, d5
 80085ee:	ee37 7b45 	vsub.f64	d7, d7, d5
 80085f2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80085f6:	ee30 0b47 	vsub.f64	d0, d0, d7
 80085fa:	4770      	bx	lr
 80085fc:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8008600:	e7f3      	b.n	80085ea <__kernel_cos+0x82>
 8008602:	eeb0 0b44 	vmov.f64	d0, d4
 8008606:	4770      	bx	lr
 8008608:	be8838d4 	.word	0xbe8838d4
 800860c:	bda8fae9 	.word	0xbda8fae9
 8008610:	bdb4b1c4 	.word	0xbdb4b1c4
 8008614:	3e21ee9e 	.word	0x3e21ee9e
 8008618:	809c52ad 	.word	0x809c52ad
 800861c:	be927e4f 	.word	0xbe927e4f
 8008620:	19cb1590 	.word	0x19cb1590
 8008624:	3efa01a0 	.word	0x3efa01a0
 8008628:	16c15177 	.word	0x16c15177
 800862c:	bf56c16c 	.word	0xbf56c16c
 8008630:	5555554c 	.word	0x5555554c
 8008634:	3fa55555 	.word	0x3fa55555
 8008638:	3fd33332 	.word	0x3fd33332
 800863c:	3fe90000 	.word	0x3fe90000

08008640 <__kernel_rem_pio2>:
 8008640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008644:	ed2d 8b06 	vpush	{d8-d10}
 8008648:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 800864c:	469b      	mov	fp, r3
 800864e:	460f      	mov	r7, r1
 8008650:	4bcf      	ldr	r3, [pc, #828]	; (8008990 <__kernel_rem_pio2+0x350>)
 8008652:	99a0      	ldr	r1, [sp, #640]	; 0x280
 8008654:	f8dd c284 	ldr.w	ip, [sp, #644]	; 0x284
 8008658:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 800865c:	9000      	str	r0, [sp, #0]
 800865e:	f112 0f14 	cmn.w	r2, #20
 8008662:	bfa8      	it	ge
 8008664:	2318      	movge	r3, #24
 8008666:	f10b 31ff 	add.w	r1, fp, #4294967295
 800866a:	bfb8      	it	lt
 800866c:	2300      	movlt	r3, #0
 800866e:	f06f 0417 	mvn.w	r4, #23
 8008672:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 8008978 <__kernel_rem_pio2+0x338>
 8008676:	bfa4      	itt	ge
 8008678:	f1a2 0a03 	subge.w	sl, r2, #3
 800867c:	fb9a f3f3 	sdivge	r3, sl, r3
 8008680:	fb03 4404 	mla	r4, r3, r4, r4
 8008684:	1a5d      	subs	r5, r3, r1
 8008686:	4414      	add	r4, r2
 8008688:	eb09 0601 	add.w	r6, r9, r1
 800868c:	f10d 0860 	add.w	r8, sp, #96	; 0x60
 8008690:	eb0c 0e85 	add.w	lr, ip, r5, lsl #2
 8008694:	2200      	movs	r2, #0
 8008696:	42b2      	cmp	r2, r6
 8008698:	dd12      	ble.n	80086c0 <__kernel_rem_pio2+0x80>
 800869a:	aa18      	add	r2, sp, #96	; 0x60
 800869c:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 80086a0:	460e      	mov	r6, r1
 80086a2:	f50d 78d0 	add.w	r8, sp, #416	; 0x1a0
 80086a6:	f1cb 0a01 	rsb	sl, fp, #1
 80086aa:	eb0a 0006 	add.w	r0, sl, r6
 80086ae:	4581      	cmp	r9, r0
 80086b0:	db25      	blt.n	80086fe <__kernel_rem_pio2+0xbe>
 80086b2:	ed9f 7bb1 	vldr	d7, [pc, #708]	; 8008978 <__kernel_rem_pio2+0x338>
 80086b6:	f8dd e000 	ldr.w	lr, [sp]
 80086ba:	4615      	mov	r5, r2
 80086bc:	2000      	movs	r0, #0
 80086be:	e015      	b.n	80086ec <__kernel_rem_pio2+0xac>
 80086c0:	42d5      	cmn	r5, r2
 80086c2:	d409      	bmi.n	80086d8 <__kernel_rem_pio2+0x98>
 80086c4:	f85e 0022 	ldr.w	r0, [lr, r2, lsl #2]
 80086c8:	ee07 0a90 	vmov	s15, r0
 80086cc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80086d0:	eca8 7b02 	vstmia	r8!, {d7}
 80086d4:	3201      	adds	r2, #1
 80086d6:	e7de      	b.n	8008696 <__kernel_rem_pio2+0x56>
 80086d8:	eeb0 7b46 	vmov.f64	d7, d6
 80086dc:	e7f8      	b.n	80086d0 <__kernel_rem_pio2+0x90>
 80086de:	ecbe 5b02 	vldmia	lr!, {d5}
 80086e2:	ed95 6b00 	vldr	d6, [r5]
 80086e6:	3001      	adds	r0, #1
 80086e8:	eea5 7b06 	vfma.f64	d7, d5, d6
 80086ec:	4288      	cmp	r0, r1
 80086ee:	f1a5 0508 	sub.w	r5, r5, #8
 80086f2:	ddf4      	ble.n	80086de <__kernel_rem_pio2+0x9e>
 80086f4:	eca8 7b02 	vstmia	r8!, {d7}
 80086f8:	3208      	adds	r2, #8
 80086fa:	3601      	adds	r6, #1
 80086fc:	e7d5      	b.n	80086aa <__kernel_rem_pio2+0x6a>
 80086fe:	aa04      	add	r2, sp, #16
 8008700:	ed9f 9b9f 	vldr	d9, [pc, #636]	; 8008980 <__kernel_rem_pio2+0x340>
 8008704:	ed9f aba0 	vldr	d10, [pc, #640]	; 8008988 <__kernel_rem_pio2+0x348>
 8008708:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 800870c:	9201      	str	r2, [sp, #4]
 800870e:	eb0c 0a83 	add.w	sl, ip, r3, lsl #2
 8008712:	464e      	mov	r6, r9
 8008714:	ab90      	add	r3, sp, #576	; 0x240
 8008716:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800871a:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 800871e:	ab04      	add	r3, sp, #16
 8008720:	4618      	mov	r0, r3
 8008722:	4632      	mov	r2, r6
 8008724:	2a00      	cmp	r2, #0
 8008726:	dc4e      	bgt.n	80087c6 <__kernel_rem_pio2+0x186>
 8008728:	4620      	mov	r0, r4
 800872a:	e9cd 1302 	strd	r1, r3, [sp, #8]
 800872e:	f000 fadf 	bl	8008cf0 <scalbn>
 8008732:	eeb0 8b40 	vmov.f64	d8, d0
 8008736:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 800873a:	ee28 0b00 	vmul.f64	d0, d8, d0
 800873e:	f000 fa63 	bl	8008c08 <floor>
 8008742:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8008746:	eea0 8b47 	vfms.f64	d8, d0, d7
 800874a:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800874e:	2c00      	cmp	r4, #0
 8008750:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 8008754:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 8008758:	ee38 8b40 	vsub.f64	d8, d8, d0
 800875c:	ee17 8a90 	vmov	r8, s15
 8008760:	dd46      	ble.n	80087f0 <__kernel_rem_pio2+0x1b0>
 8008762:	1e70      	subs	r0, r6, #1
 8008764:	aa04      	add	r2, sp, #16
 8008766:	f1c4 0c18 	rsb	ip, r4, #24
 800876a:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
 800876e:	fa45 f20c 	asr.w	r2, r5, ip
 8008772:	4490      	add	r8, r2
 8008774:	fa02 f20c 	lsl.w	r2, r2, ip
 8008778:	1aad      	subs	r5, r5, r2
 800877a:	aa04      	add	r2, sp, #16
 800877c:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
 8008780:	f1c4 0217 	rsb	r2, r4, #23
 8008784:	4115      	asrs	r5, r2
 8008786:	2d00      	cmp	r5, #0
 8008788:	dd41      	ble.n	800880e <__kernel_rem_pio2+0x1ce>
 800878a:	f04f 0c00 	mov.w	ip, #0
 800878e:	f108 0801 	add.w	r8, r8, #1
 8008792:	4660      	mov	r0, ip
 8008794:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 8008798:	4566      	cmp	r6, ip
 800879a:	dc69      	bgt.n	8008870 <__kernel_rem_pio2+0x230>
 800879c:	2c00      	cmp	r4, #0
 800879e:	dd03      	ble.n	80087a8 <__kernel_rem_pio2+0x168>
 80087a0:	2c01      	cmp	r4, #1
 80087a2:	d076      	beq.n	8008892 <__kernel_rem_pio2+0x252>
 80087a4:	2c02      	cmp	r4, #2
 80087a6:	d07f      	beq.n	80088a8 <__kernel_rem_pio2+0x268>
 80087a8:	2d02      	cmp	r5, #2
 80087aa:	d130      	bne.n	800880e <__kernel_rem_pio2+0x1ce>
 80087ac:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80087b0:	ee30 8b48 	vsub.f64	d8, d0, d8
 80087b4:	b358      	cbz	r0, 800880e <__kernel_rem_pio2+0x1ce>
 80087b6:	4620      	mov	r0, r4
 80087b8:	9102      	str	r1, [sp, #8]
 80087ba:	f000 fa99 	bl	8008cf0 <scalbn>
 80087be:	9902      	ldr	r1, [sp, #8]
 80087c0:	ee38 8b40 	vsub.f64	d8, d8, d0
 80087c4:	e023      	b.n	800880e <__kernel_rem_pio2+0x1ce>
 80087c6:	ee20 7b09 	vmul.f64	d7, d0, d9
 80087ca:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80087ce:	3a01      	subs	r2, #1
 80087d0:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 80087d4:	ad68      	add	r5, sp, #416	; 0x1a0
 80087d6:	eea7 0b4a 	vfms.f64	d0, d7, d10
 80087da:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80087de:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 80087e2:	eca0 0a01 	vstmia	r0!, {s0}
 80087e6:	ed95 0b00 	vldr	d0, [r5]
 80087ea:	ee37 0b00 	vadd.f64	d0, d7, d0
 80087ee:	e799      	b.n	8008724 <__kernel_rem_pio2+0xe4>
 80087f0:	d105      	bne.n	80087fe <__kernel_rem_pio2+0x1be>
 80087f2:	1e72      	subs	r2, r6, #1
 80087f4:	a804      	add	r0, sp, #16
 80087f6:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 80087fa:	15ed      	asrs	r5, r5, #23
 80087fc:	e7c3      	b.n	8008786 <__kernel_rem_pio2+0x146>
 80087fe:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8008802:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8008806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800880a:	da2f      	bge.n	800886c <__kernel_rem_pio2+0x22c>
 800880c:	2500      	movs	r5, #0
 800880e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008816:	f040 8087 	bne.w	8008928 <__kernel_rem_pio2+0x2e8>
 800881a:	1e73      	subs	r3, r6, #1
 800881c:	4618      	mov	r0, r3
 800881e:	f04f 0c00 	mov.w	ip, #0
 8008822:	4548      	cmp	r0, r9
 8008824:	da47      	bge.n	80088b6 <__kernel_rem_pio2+0x276>
 8008826:	f1bc 0f00 	cmp.w	ip, #0
 800882a:	d070      	beq.n	800890e <__kernel_rem_pio2+0x2ce>
 800882c:	aa04      	add	r2, sp, #16
 800882e:	3c18      	subs	r4, #24
 8008830:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008834:	2a00      	cmp	r2, #0
 8008836:	d075      	beq.n	8008924 <__kernel_rem_pio2+0x2e4>
 8008838:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800883c:	4620      	mov	r0, r4
 800883e:	9300      	str	r3, [sp, #0]
 8008840:	f000 fa56 	bl	8008cf0 <scalbn>
 8008844:	9b00      	ldr	r3, [sp, #0]
 8008846:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8008980 <__kernel_rem_pio2+0x340>
 800884a:	461a      	mov	r2, r3
 800884c:	2a00      	cmp	r2, #0
 800884e:	f280 80ac 	bge.w	80089aa <__kernel_rem_pio2+0x36a>
 8008852:	4619      	mov	r1, r3
 8008854:	2000      	movs	r0, #0
 8008856:	2900      	cmp	r1, #0
 8008858:	f2c0 80cd 	blt.w	80089f6 <__kernel_rem_pio2+0x3b6>
 800885c:	aa68      	add	r2, sp, #416	; 0x1a0
 800885e:	eb02 04c1 	add.w	r4, r2, r1, lsl #3
 8008862:	ed9f 7b45 	vldr	d7, [pc, #276]	; 8008978 <__kernel_rem_pio2+0x338>
 8008866:	4e4b      	ldr	r6, [pc, #300]	; (8008994 <__kernel_rem_pio2+0x354>)
 8008868:	2200      	movs	r2, #0
 800886a:	e0b8      	b.n	80089de <__kernel_rem_pio2+0x39e>
 800886c:	2502      	movs	r5, #2
 800886e:	e78c      	b.n	800878a <__kernel_rem_pio2+0x14a>
 8008870:	681a      	ldr	r2, [r3, #0]
 8008872:	b948      	cbnz	r0, 8008888 <__kernel_rem_pio2+0x248>
 8008874:	b11a      	cbz	r2, 800887e <__kernel_rem_pio2+0x23e>
 8008876:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 800887a:	601a      	str	r2, [r3, #0]
 800887c:	2201      	movs	r2, #1
 800887e:	f10c 0c01 	add.w	ip, ip, #1
 8008882:	3304      	adds	r3, #4
 8008884:	4610      	mov	r0, r2
 8008886:	e787      	b.n	8008798 <__kernel_rem_pio2+0x158>
 8008888:	ebae 0202 	sub.w	r2, lr, r2
 800888c:	601a      	str	r2, [r3, #0]
 800888e:	4602      	mov	r2, r0
 8008890:	e7f5      	b.n	800887e <__kernel_rem_pio2+0x23e>
 8008892:	1e72      	subs	r2, r6, #1
 8008894:	ab04      	add	r3, sp, #16
 8008896:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800889a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800889e:	f10d 0c10 	add.w	ip, sp, #16
 80088a2:	f84c 3022 	str.w	r3, [ip, r2, lsl #2]
 80088a6:	e77f      	b.n	80087a8 <__kernel_rem_pio2+0x168>
 80088a8:	1e72      	subs	r2, r6, #1
 80088aa:	ab04      	add	r3, sp, #16
 80088ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088b0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80088b4:	e7f3      	b.n	800889e <__kernel_rem_pio2+0x25e>
 80088b6:	aa04      	add	r2, sp, #16
 80088b8:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 80088bc:	3801      	subs	r0, #1
 80088be:	ea4c 0c02 	orr.w	ip, ip, r2
 80088c2:	e7ae      	b.n	8008822 <__kernel_rem_pio2+0x1e2>
 80088c4:	3001      	adds	r0, #1
 80088c6:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80088ca:	2a00      	cmp	r2, #0
 80088cc:	d0fa      	beq.n	80088c4 <__kernel_rem_pio2+0x284>
 80088ce:	eb06 020b 	add.w	r2, r6, fp
 80088d2:	ad18      	add	r5, sp, #96	; 0x60
 80088d4:	1c73      	adds	r3, r6, #1
 80088d6:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80088da:	4406      	add	r6, r0
 80088dc:	429e      	cmp	r6, r3
 80088de:	f6ff af19 	blt.w	8008714 <__kernel_rem_pio2+0xd4>
 80088e2:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 80088e6:	9d00      	ldr	r5, [sp, #0]
 80088e8:	ee07 0a90 	vmov	s15, r0
 80088ec:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80088f0:	2000      	movs	r0, #0
 80088f2:	eca2 7b02 	vstmia	r2!, {d7}
 80088f6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8008978 <__kernel_rem_pio2+0x338>
 80088fa:	4694      	mov	ip, r2
 80088fc:	4288      	cmp	r0, r1
 80088fe:	dd09      	ble.n	8008914 <__kernel_rem_pio2+0x2d4>
 8008900:	a868      	add	r0, sp, #416	; 0x1a0
 8008902:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 8008906:	ed80 7b00 	vstr	d7, [r0]
 800890a:	3301      	adds	r3, #1
 800890c:	e7e6      	b.n	80088dc <__kernel_rem_pio2+0x29c>
 800890e:	9b01      	ldr	r3, [sp, #4]
 8008910:	2001      	movs	r0, #1
 8008912:	e7d8      	b.n	80088c6 <__kernel_rem_pio2+0x286>
 8008914:	ecb5 5b02 	vldmia	r5!, {d5}
 8008918:	ed3c 6b02 	vldmdb	ip!, {d6}
 800891c:	3001      	adds	r0, #1
 800891e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8008922:	e7eb      	b.n	80088fc <__kernel_rem_pio2+0x2bc>
 8008924:	3b01      	subs	r3, #1
 8008926:	e781      	b.n	800882c <__kernel_rem_pio2+0x1ec>
 8008928:	4260      	negs	r0, r4
 800892a:	eeb0 0b48 	vmov.f64	d0, d8
 800892e:	f000 f9df 	bl	8008cf0 <scalbn>
 8008932:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8008988 <__kernel_rem_pio2+0x348>
 8008936:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800893a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800893e:	db2b      	blt.n	8008998 <__kernel_rem_pio2+0x358>
 8008940:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8008980 <__kernel_rem_pio2+0x340>
 8008944:	ee20 7b07 	vmul.f64	d7, d0, d7
 8008948:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800894c:	aa04      	add	r2, sp, #16
 800894e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8008952:	eea5 0b46 	vfms.f64	d0, d5, d6
 8008956:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800895a:	a904      	add	r1, sp, #16
 800895c:	ee10 3a10 	vmov	r3, s0
 8008960:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8008964:	ee17 2a10 	vmov	r2, s14
 8008968:	1c73      	adds	r3, r6, #1
 800896a:	3418      	adds	r4, #24
 800896c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008970:	e762      	b.n	8008838 <__kernel_rem_pio2+0x1f8>
 8008972:	bf00      	nop
 8008974:	f3af 8000 	nop.w
	...
 8008984:	3e700000 	.word	0x3e700000
 8008988:	00000000 	.word	0x00000000
 800898c:	41700000 	.word	0x41700000
 8008990:	080090b0 	.word	0x080090b0
 8008994:	08009070 	.word	0x08009070
 8008998:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800899c:	aa04      	add	r2, sp, #16
 800899e:	ee10 3a10 	vmov	r3, s0
 80089a2:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80089a6:	4633      	mov	r3, r6
 80089a8:	e746      	b.n	8008838 <__kernel_rem_pio2+0x1f8>
 80089aa:	a804      	add	r0, sp, #16
 80089ac:	a968      	add	r1, sp, #416	; 0x1a0
 80089ae:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 80089b2:	9000      	str	r0, [sp, #0]
 80089b4:	ee07 0a90 	vmov	s15, r0
 80089b8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80089bc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80089c0:	3a01      	subs	r2, #1
 80089c2:	ee27 7b00 	vmul.f64	d7, d7, d0
 80089c6:	ee20 0b06 	vmul.f64	d0, d0, d6
 80089ca:	ed81 7b00 	vstr	d7, [r1]
 80089ce:	e73d      	b.n	800884c <__kernel_rem_pio2+0x20c>
 80089d0:	ecb6 5b02 	vldmia	r6!, {d5}
 80089d4:	ecb4 6b02 	vldmia	r4!, {d6}
 80089d8:	3201      	adds	r2, #1
 80089da:	eea5 7b06 	vfma.f64	d7, d5, d6
 80089de:	454a      	cmp	r2, r9
 80089e0:	dc01      	bgt.n	80089e6 <__kernel_rem_pio2+0x3a6>
 80089e2:	4290      	cmp	r0, r2
 80089e4:	daf4      	bge.n	80089d0 <__kernel_rem_pio2+0x390>
 80089e6:	aa40      	add	r2, sp, #256	; 0x100
 80089e8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80089ec:	ed82 7b00 	vstr	d7, [r2]
 80089f0:	3901      	subs	r1, #1
 80089f2:	3001      	adds	r0, #1
 80089f4:	e72f      	b.n	8008856 <__kernel_rem_pio2+0x216>
 80089f6:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 80089f8:	2a02      	cmp	r2, #2
 80089fa:	dc0a      	bgt.n	8008a12 <__kernel_rem_pio2+0x3d2>
 80089fc:	2a00      	cmp	r2, #0
 80089fe:	dc5a      	bgt.n	8008ab6 <__kernel_rem_pio2+0x476>
 8008a00:	d039      	beq.n	8008a76 <__kernel_rem_pio2+0x436>
 8008a02:	f008 0007 	and.w	r0, r8, #7
 8008a06:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 8008a0a:	ecbd 8b06 	vpop	{d8-d10}
 8008a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a12:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 8008a14:	2a03      	cmp	r2, #3
 8008a16:	d1f4      	bne.n	8008a02 <__kernel_rem_pio2+0x3c2>
 8008a18:	aa40      	add	r2, sp, #256	; 0x100
 8008a1a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8008a1e:	4611      	mov	r1, r2
 8008a20:	4618      	mov	r0, r3
 8008a22:	2800      	cmp	r0, #0
 8008a24:	f1a1 0108 	sub.w	r1, r1, #8
 8008a28:	dc52      	bgt.n	8008ad0 <__kernel_rem_pio2+0x490>
 8008a2a:	4619      	mov	r1, r3
 8008a2c:	2901      	cmp	r1, #1
 8008a2e:	f1a2 0208 	sub.w	r2, r2, #8
 8008a32:	dc5d      	bgt.n	8008af0 <__kernel_rem_pio2+0x4b0>
 8008a34:	ed9f 7b40 	vldr	d7, [pc, #256]	; 8008b38 <__kernel_rem_pio2+0x4f8>
 8008a38:	2b01      	cmp	r3, #1
 8008a3a:	dc69      	bgt.n	8008b10 <__kernel_rem_pio2+0x4d0>
 8008a3c:	ed9d 5b40 	vldr	d5, [sp, #256]	; 0x100
 8008a40:	ed9d 6b42 	vldr	d6, [sp, #264]	; 0x108
 8008a44:	2d00      	cmp	r5, #0
 8008a46:	d16c      	bne.n	8008b22 <__kernel_rem_pio2+0x4e2>
 8008a48:	ed87 5b00 	vstr	d5, [r7]
 8008a4c:	ed87 6b02 	vstr	d6, [r7, #8]
 8008a50:	ed87 7b04 	vstr	d7, [r7, #16]
 8008a54:	e7d5      	b.n	8008a02 <__kernel_rem_pio2+0x3c2>
 8008a56:	aa40      	add	r2, sp, #256	; 0x100
 8008a58:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8008a5c:	ed92 6b00 	vldr	d6, [r2]
 8008a60:	3b01      	subs	r3, #1
 8008a62:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	daf5      	bge.n	8008a56 <__kernel_rem_pio2+0x416>
 8008a6a:	b10d      	cbz	r5, 8008a70 <__kernel_rem_pio2+0x430>
 8008a6c:	eeb1 7b47 	vneg.f64	d7, d7
 8008a70:	ed87 7b00 	vstr	d7, [r7]
 8008a74:	e7c5      	b.n	8008a02 <__kernel_rem_pio2+0x3c2>
 8008a76:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8008b38 <__kernel_rem_pio2+0x4f8>
 8008a7a:	e7f4      	b.n	8008a66 <__kernel_rem_pio2+0x426>
 8008a7c:	a940      	add	r1, sp, #256	; 0x100
 8008a7e:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8008a82:	ed91 7b00 	vldr	d7, [r1]
 8008a86:	3a01      	subs	r2, #1
 8008a88:	ee36 6b07 	vadd.f64	d6, d6, d7
 8008a8c:	2a00      	cmp	r2, #0
 8008a8e:	daf5      	bge.n	8008a7c <__kernel_rem_pio2+0x43c>
 8008a90:	b1ad      	cbz	r5, 8008abe <__kernel_rem_pio2+0x47e>
 8008a92:	eeb1 7b46 	vneg.f64	d7, d6
 8008a96:	ed87 7b00 	vstr	d7, [r7]
 8008a9a:	ed9d 7b40 	vldr	d7, [sp, #256]	; 0x100
 8008a9e:	a942      	add	r1, sp, #264	; 0x108
 8008aa0:	2201      	movs	r2, #1
 8008aa2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	da0c      	bge.n	8008ac4 <__kernel_rem_pio2+0x484>
 8008aaa:	b10d      	cbz	r5, 8008ab0 <__kernel_rem_pio2+0x470>
 8008aac:	eeb1 7b47 	vneg.f64	d7, d7
 8008ab0:	ed87 7b02 	vstr	d7, [r7, #8]
 8008ab4:	e7a5      	b.n	8008a02 <__kernel_rem_pio2+0x3c2>
 8008ab6:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8008b38 <__kernel_rem_pio2+0x4f8>
 8008aba:	461a      	mov	r2, r3
 8008abc:	e7e6      	b.n	8008a8c <__kernel_rem_pio2+0x44c>
 8008abe:	eeb0 7b46 	vmov.f64	d7, d6
 8008ac2:	e7e8      	b.n	8008a96 <__kernel_rem_pio2+0x456>
 8008ac4:	ecb1 6b02 	vldmia	r1!, {d6}
 8008ac8:	3201      	adds	r2, #1
 8008aca:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008ace:	e7ea      	b.n	8008aa6 <__kernel_rem_pio2+0x466>
 8008ad0:	ed91 7b00 	vldr	d7, [r1]
 8008ad4:	ed91 5b02 	vldr	d5, [r1, #8]
 8008ad8:	3801      	subs	r0, #1
 8008ada:	ee37 6b05 	vadd.f64	d6, d7, d5
 8008ade:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008ae2:	ed81 6b00 	vstr	d6, [r1]
 8008ae6:	ee37 7b05 	vadd.f64	d7, d7, d5
 8008aea:	ed81 7b02 	vstr	d7, [r1, #8]
 8008aee:	e798      	b.n	8008a22 <__kernel_rem_pio2+0x3e2>
 8008af0:	ed92 7b00 	vldr	d7, [r2]
 8008af4:	ed92 5b02 	vldr	d5, [r2, #8]
 8008af8:	3901      	subs	r1, #1
 8008afa:	ee37 6b05 	vadd.f64	d6, d7, d5
 8008afe:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008b02:	ed82 6b00 	vstr	d6, [r2]
 8008b06:	ee37 7b05 	vadd.f64	d7, d7, d5
 8008b0a:	ed82 7b02 	vstr	d7, [r2, #8]
 8008b0e:	e78d      	b.n	8008a2c <__kernel_rem_pio2+0x3ec>
 8008b10:	aa40      	add	r2, sp, #256	; 0x100
 8008b12:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8008b16:	ed92 6b00 	vldr	d6, [r2]
 8008b1a:	3b01      	subs	r3, #1
 8008b1c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008b20:	e78a      	b.n	8008a38 <__kernel_rem_pio2+0x3f8>
 8008b22:	eeb1 5b45 	vneg.f64	d5, d5
 8008b26:	eeb1 6b46 	vneg.f64	d6, d6
 8008b2a:	ed87 5b00 	vstr	d5, [r7]
 8008b2e:	eeb1 7b47 	vneg.f64	d7, d7
 8008b32:	ed87 6b02 	vstr	d6, [r7, #8]
 8008b36:	e78b      	b.n	8008a50 <__kernel_rem_pio2+0x410>
	...

08008b40 <__kernel_sin>:
 8008b40:	ee10 3a90 	vmov	r3, s1
 8008b44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008b48:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8008b4c:	da04      	bge.n	8008b58 <__kernel_sin+0x18>
 8008b4e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8008b52:	ee17 3a90 	vmov	r3, s15
 8008b56:	b35b      	cbz	r3, 8008bb0 <__kernel_sin+0x70>
 8008b58:	ee20 6b00 	vmul.f64	d6, d0, d0
 8008b5c:	ee20 5b06 	vmul.f64	d5, d0, d6
 8008b60:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8008bb8 <__kernel_sin+0x78>
 8008b64:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8008bc0 <__kernel_sin+0x80>
 8008b68:	eea6 4b07 	vfma.f64	d4, d6, d7
 8008b6c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8008bc8 <__kernel_sin+0x88>
 8008b70:	eea4 7b06 	vfma.f64	d7, d4, d6
 8008b74:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8008bd0 <__kernel_sin+0x90>
 8008b78:	eea7 4b06 	vfma.f64	d4, d7, d6
 8008b7c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8008bd8 <__kernel_sin+0x98>
 8008b80:	eea4 7b06 	vfma.f64	d7, d4, d6
 8008b84:	b930      	cbnz	r0, 8008b94 <__kernel_sin+0x54>
 8008b86:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8008be0 <__kernel_sin+0xa0>
 8008b8a:	eea6 4b07 	vfma.f64	d4, d6, d7
 8008b8e:	eea4 0b05 	vfma.f64	d0, d4, d5
 8008b92:	4770      	bx	lr
 8008b94:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8008b98:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8008b9c:	eea1 7b04 	vfma.f64	d7, d1, d4
 8008ba0:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8008ba4:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8008be8 <__kernel_sin+0xa8>
 8008ba8:	eea5 1b07 	vfma.f64	d1, d5, d7
 8008bac:	ee30 0b41 	vsub.f64	d0, d0, d1
 8008bb0:	4770      	bx	lr
 8008bb2:	bf00      	nop
 8008bb4:	f3af 8000 	nop.w
 8008bb8:	5acfd57c 	.word	0x5acfd57c
 8008bbc:	3de5d93a 	.word	0x3de5d93a
 8008bc0:	8a2b9ceb 	.word	0x8a2b9ceb
 8008bc4:	be5ae5e6 	.word	0xbe5ae5e6
 8008bc8:	57b1fe7d 	.word	0x57b1fe7d
 8008bcc:	3ec71de3 	.word	0x3ec71de3
 8008bd0:	19c161d5 	.word	0x19c161d5
 8008bd4:	bf2a01a0 	.word	0xbf2a01a0
 8008bd8:	1110f8a6 	.word	0x1110f8a6
 8008bdc:	3f811111 	.word	0x3f811111
 8008be0:	55555549 	.word	0x55555549
 8008be4:	bfc55555 	.word	0xbfc55555
 8008be8:	55555549 	.word	0x55555549
 8008bec:	3fc55555 	.word	0x3fc55555

08008bf0 <fabs>:
 8008bf0:	ec51 0b10 	vmov	r0, r1, d0
 8008bf4:	ee10 2a10 	vmov	r2, s0
 8008bf8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008bfc:	ec43 2b10 	vmov	d0, r2, r3
 8008c00:	4770      	bx	lr
 8008c02:	0000      	movs	r0, r0
 8008c04:	0000      	movs	r0, r0
	...

08008c08 <floor>:
 8008c08:	ee10 1a90 	vmov	r1, s1
 8008c0c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008c10:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8008c14:	2b13      	cmp	r3, #19
 8008c16:	b530      	push	{r4, r5, lr}
 8008c18:	ee10 0a10 	vmov	r0, s0
 8008c1c:	ee10 5a10 	vmov	r5, s0
 8008c20:	dc31      	bgt.n	8008c86 <floor+0x7e>
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	da15      	bge.n	8008c52 <floor+0x4a>
 8008c26:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8008ce0 <floor+0xd8>
 8008c2a:	ee30 0b07 	vadd.f64	d0, d0, d7
 8008c2e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8008c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c36:	dd07      	ble.n	8008c48 <floor+0x40>
 8008c38:	2900      	cmp	r1, #0
 8008c3a:	da4e      	bge.n	8008cda <floor+0xd2>
 8008c3c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008c40:	4318      	orrs	r0, r3
 8008c42:	d001      	beq.n	8008c48 <floor+0x40>
 8008c44:	4928      	ldr	r1, [pc, #160]	; (8008ce8 <floor+0xe0>)
 8008c46:	2000      	movs	r0, #0
 8008c48:	460b      	mov	r3, r1
 8008c4a:	4602      	mov	r2, r0
 8008c4c:	ec43 2b10 	vmov	d0, r2, r3
 8008c50:	e020      	b.n	8008c94 <floor+0x8c>
 8008c52:	4a26      	ldr	r2, [pc, #152]	; (8008cec <floor+0xe4>)
 8008c54:	411a      	asrs	r2, r3
 8008c56:	ea01 0402 	and.w	r4, r1, r2
 8008c5a:	4304      	orrs	r4, r0
 8008c5c:	d01a      	beq.n	8008c94 <floor+0x8c>
 8008c5e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8008ce0 <floor+0xd8>
 8008c62:	ee30 0b07 	vadd.f64	d0, d0, d7
 8008c66:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8008c6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c6e:	ddeb      	ble.n	8008c48 <floor+0x40>
 8008c70:	2900      	cmp	r1, #0
 8008c72:	bfbe      	ittt	lt
 8008c74:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8008c78:	fa40 f303 	asrlt.w	r3, r0, r3
 8008c7c:	18c9      	addlt	r1, r1, r3
 8008c7e:	ea21 0102 	bic.w	r1, r1, r2
 8008c82:	2000      	movs	r0, #0
 8008c84:	e7e0      	b.n	8008c48 <floor+0x40>
 8008c86:	2b33      	cmp	r3, #51	; 0x33
 8008c88:	dd05      	ble.n	8008c96 <floor+0x8e>
 8008c8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c8e:	d101      	bne.n	8008c94 <floor+0x8c>
 8008c90:	ee30 0b00 	vadd.f64	d0, d0, d0
 8008c94:	bd30      	pop	{r4, r5, pc}
 8008c96:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8008c9a:	f04f 32ff 	mov.w	r2, #4294967295
 8008c9e:	40e2      	lsrs	r2, r4
 8008ca0:	4202      	tst	r2, r0
 8008ca2:	d0f7      	beq.n	8008c94 <floor+0x8c>
 8008ca4:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8008ce0 <floor+0xd8>
 8008ca8:	ee30 0b07 	vadd.f64	d0, d0, d7
 8008cac:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8008cb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cb4:	ddc8      	ble.n	8008c48 <floor+0x40>
 8008cb6:	2900      	cmp	r1, #0
 8008cb8:	da02      	bge.n	8008cc0 <floor+0xb8>
 8008cba:	2b14      	cmp	r3, #20
 8008cbc:	d103      	bne.n	8008cc6 <floor+0xbe>
 8008cbe:	3101      	adds	r1, #1
 8008cc0:	ea20 0002 	bic.w	r0, r0, r2
 8008cc4:	e7c0      	b.n	8008c48 <floor+0x40>
 8008cc6:	2401      	movs	r4, #1
 8008cc8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8008ccc:	fa04 f303 	lsl.w	r3, r4, r3
 8008cd0:	4418      	add	r0, r3
 8008cd2:	42a8      	cmp	r0, r5
 8008cd4:	bf38      	it	cc
 8008cd6:	1909      	addcc	r1, r1, r4
 8008cd8:	e7f2      	b.n	8008cc0 <floor+0xb8>
 8008cda:	2000      	movs	r0, #0
 8008cdc:	4601      	mov	r1, r0
 8008cde:	e7b3      	b.n	8008c48 <floor+0x40>
 8008ce0:	8800759c 	.word	0x8800759c
 8008ce4:	7e37e43c 	.word	0x7e37e43c
 8008ce8:	bff00000 	.word	0xbff00000
 8008cec:	000fffff 	.word	0x000fffff

08008cf0 <scalbn>:
 8008cf0:	b082      	sub	sp, #8
 8008cf2:	ed8d 0b00 	vstr	d0, [sp]
 8008cf6:	9b01      	ldr	r3, [sp, #4]
 8008cf8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8008cfc:	b9a2      	cbnz	r2, 8008d28 <scalbn+0x38>
 8008cfe:	9a00      	ldr	r2, [sp, #0]
 8008d00:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008d04:	4313      	orrs	r3, r2
 8008d06:	d03a      	beq.n	8008d7e <scalbn+0x8e>
 8008d08:	ed9f 7b35 	vldr	d7, [pc, #212]	; 8008de0 <scalbn+0xf0>
 8008d0c:	4b40      	ldr	r3, [pc, #256]	; (8008e10 <scalbn+0x120>)
 8008d0e:	ee20 7b07 	vmul.f64	d7, d0, d7
 8008d12:	4298      	cmp	r0, r3
 8008d14:	ed8d 7b00 	vstr	d7, [sp]
 8008d18:	da11      	bge.n	8008d3e <scalbn+0x4e>
 8008d1a:	ed9f 7b33 	vldr	d7, [pc, #204]	; 8008de8 <scalbn+0xf8>
 8008d1e:	ed9d 6b00 	vldr	d6, [sp]
 8008d22:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008d26:	e007      	b.n	8008d38 <scalbn+0x48>
 8008d28:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8008d2c:	428a      	cmp	r2, r1
 8008d2e:	d10a      	bne.n	8008d46 <scalbn+0x56>
 8008d30:	ed9d 7b00 	vldr	d7, [sp]
 8008d34:	ee37 7b07 	vadd.f64	d7, d7, d7
 8008d38:	ed8d 7b00 	vstr	d7, [sp]
 8008d3c:	e01f      	b.n	8008d7e <scalbn+0x8e>
 8008d3e:	9b01      	ldr	r3, [sp, #4]
 8008d40:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8008d44:	3a36      	subs	r2, #54	; 0x36
 8008d46:	4402      	add	r2, r0
 8008d48:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008d4c:	428a      	cmp	r2, r1
 8008d4e:	dd0a      	ble.n	8008d66 <scalbn+0x76>
 8008d50:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8008df0 <scalbn+0x100>
 8008d54:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8008df8 <scalbn+0x108>
 8008d58:	eeb0 6b47 	vmov.f64	d6, d7
 8008d5c:	9b01      	ldr	r3, [sp, #4]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	fe27 7b05 	vselge.f64	d7, d7, d5
 8008d64:	e7dd      	b.n	8008d22 <scalbn+0x32>
 8008d66:	2a00      	cmp	r2, #0
 8008d68:	dd0d      	ble.n	8008d86 <scalbn+0x96>
 8008d6a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008d6e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008d72:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008d76:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8008d7a:	e9cd 0100 	strd	r0, r1, [sp]
 8008d7e:	ed9d 0b00 	vldr	d0, [sp]
 8008d82:	b002      	add	sp, #8
 8008d84:	4770      	bx	lr
 8008d86:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008d8a:	da18      	bge.n	8008dbe <scalbn+0xce>
 8008d8c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008d90:	4298      	cmp	r0, r3
 8008d92:	9b01      	ldr	r3, [sp, #4]
 8008d94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d98:	dd09      	ble.n	8008dae <scalbn+0xbe>
 8008d9a:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8008df0 <scalbn+0x100>
 8008d9e:	ed9f 5b16 	vldr	d5, [pc, #88]	; 8008df8 <scalbn+0x108>
 8008da2:	eeb0 6b47 	vmov.f64	d6, d7
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	fe07 7b05 	vseleq.f64	d7, d7, d5
 8008dac:	e7b9      	b.n	8008d22 <scalbn+0x32>
 8008dae:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8008de8 <scalbn+0xf8>
 8008db2:	ed9f 5b13 	vldr	d5, [pc, #76]	; 8008e00 <scalbn+0x110>
 8008db6:	eeb0 6b47 	vmov.f64	d6, d7
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	e7f4      	b.n	8008da8 <scalbn+0xb8>
 8008dbe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008dc2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008dc6:	3236      	adds	r2, #54	; 0x36
 8008dc8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008dcc:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8008dd0:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8008e08 <scalbn+0x118>
 8008dd4:	ec41 0b17 	vmov	d7, r0, r1
 8008dd8:	e7a3      	b.n	8008d22 <scalbn+0x32>
 8008dda:	bf00      	nop
 8008ddc:	f3af 8000 	nop.w
 8008de0:	00000000 	.word	0x00000000
 8008de4:	43500000 	.word	0x43500000
 8008de8:	c2f8f359 	.word	0xc2f8f359
 8008dec:	01a56e1f 	.word	0x01a56e1f
 8008df0:	8800759c 	.word	0x8800759c
 8008df4:	7e37e43c 	.word	0x7e37e43c
 8008df8:	8800759c 	.word	0x8800759c
 8008dfc:	fe37e43c 	.word	0xfe37e43c
 8008e00:	c2f8f359 	.word	0xc2f8f359
 8008e04:	81a56e1f 	.word	0x81a56e1f
 8008e08:	00000000 	.word	0x00000000
 8008e0c:	3c900000 	.word	0x3c900000
 8008e10:	ffff3cb0 	.word	0xffff3cb0

08008e14 <_init>:
 8008e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e16:	bf00      	nop
 8008e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e1a:	bc08      	pop	{r3}
 8008e1c:	469e      	mov	lr, r3
 8008e1e:	4770      	bx	lr

08008e20 <_fini>:
 8008e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e22:	bf00      	nop
 8008e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e26:	bc08      	pop	{r3}
 8008e28:	469e      	mov	lr, r3
 8008e2a:	4770      	bx	lr
